
SECoreBin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .SE_CallGate_Code 000001c0  08000200  08000200  00000200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .SE_Key_Data  00000052  08000400  08000400  00000400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_Startup_Code 00000010  08000500  08000500  00000500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000166c0  08000600  08000600  00000600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .isr_vector   00000300  08016cc0  08016cc0  00016cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata       00003318  08016fc0  08016fc0  00016fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0801a2d8  0801a2d8  00027a50  2**0
                  CONTENTS
  7 .ARM          00000008  0801a2d8  0801a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0801a2e0  0801a2e0  00027a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000008  0801a2e0  0801a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0801a2e8  0801a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000168  20002000  0801a2f0  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000058c4  20002168  0801a458  00022168  2**3
                  ALLOC
 13 BOOTINFO_DATA 00000024  20007a2c  0801a458  00027a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._user_heap_stack 00003000  20007a50  0801a47c  00027a50  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00027a50  2**0
                  CONTENTS, READONLY
 16 .debug_info   00072ded  00000000  00000000  00027a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000d932  00000000  00000000  0009a86b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000025f0  00000000  00000000  000a81a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003d30  00000000  00000000  000aa790  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00039e20  00000000  00000000  000ae4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000382a8  00000000  00000000  000e82e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0012a359  00000000  00000000  00120588  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0024a8e1  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00007cbc  00000000  00000000  0024a95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    0003bc65  00000000  00000000  00252618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .SE_CallGate_Code:

08000200 <SE_CallGate-0x4>:
 8000200:	00000000 	.word	0x00000000

08000204 <SE_CallGate>:
  * @param eID: Secure Engine protected function ID.
  * @param peSE_Status: Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CallGate(SE_FunctionIDTypeDef eID, SE_StatusTypeDef *peSE_Status, uint32_t PrimaskParam, ...)
{
 8000204:	b40c      	push	{r2, r3}
 8000206:	b580      	push	{r7, lr}
 8000208:	b088      	sub	sp, #32
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	6039      	str	r1, [r7, #0]
  SE_ErrorStatus e_ret_status;
  va_list arguments;
#if defined(__GNUC__)
  register unsigned lr asm("lr");
  uint32_t LR = lr;
 8000210:	f8c7 e01c 	str.w	lr, [r7, #28]
#else
  uint32_t LR;
#endif /* __GNUC__ */

  /* Enter the protected area */
  ENTER_PROTECTED_AREA();
 8000214:	4b5d      	ldr	r3, [pc, #372]	; (800038c <SE_CallGate+0x188>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a5c      	ldr	r2, [pc, #368]	; (800038c <SE_CallGate+0x188>)
 800021a:	f023 0301 	bic.w	r3, r3, #1
 800021e:	6213      	str	r3, [r2, #32]

 #ifdef TEMP_IRQ_MGMT_DISABLE
  tmp_primask = PrimaskParam;
 8000220:	4a5b      	ldr	r2, [pc, #364]	; (8000390 <SE_CallGate+0x18c>)
 8000222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000224:	6013      	str	r3, [r2, #0]
  PrimaskParam =1;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the Callgate was called only from SE Interface */
#if defined(__ICCARM__) || defined (__CC_ARM)
  LR = __get_LR();
#endif /* __ICCARM__ || __CC_ARM */

  __IS_CALLER_SE_IF();
 800022a:	4a5a      	ldr	r2, [pc, #360]	; (8000394 <SE_CallGate+0x190>)
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	4293      	cmp	r3, r2
 8000230:	d201      	bcs.n	8000236 <SE_CallGate+0x32>
 8000232:	f008 fb2d 	bl	8008890 <__NVIC_SystemReset>
 8000236:	4a58      	ldr	r2, [pc, #352]	; (8000398 <SE_CallGate+0x194>)
 8000238:	69fb      	ldr	r3, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	d901      	bls.n	8000242 <SE_CallGate+0x3e>
 800023e:	f008 fb27 	bl	8008890 <__NVIC_SystemReset>

  /* Check the pointers allocation */
  if (eID == SE_EXIT_INTERRUPT)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000248:	d104      	bne.n	8000254 <SE_CallGate+0x50>
  {
	  /* if we come back from an interrupt then peSE_Status must be NULL */
	  if (NULL != peSE_Status)
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d015      	beq.n	800027c <SE_CallGate+0x78>
	  {
		  /* Abnormal case */
		  NVIC_SystemReset();
 8000250:	f008 fb1e 	bl	8008890 <__NVIC_SystemReset>
	  }
  }
  else
  {
	  /* Check the pointers allocation */
	  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 8000254:	2104      	movs	r1, #4
 8000256:	6838      	ldr	r0, [r7, #0]
 8000258:	f002 fcb4 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 800025c:	4602      	mov	r2, r0
 800025e:	4b4f      	ldr	r3, [pc, #316]	; (800039c <SE_CallGate+0x198>)
 8000260:	429a      	cmp	r2, r3
 8000262:	d001      	beq.n	8000268 <SE_CallGate+0x64>
	  {
		  NVIC_SystemReset();
 8000264:	f008 fb14 	bl	8008890 <__NVIC_SystemReset>
	  }
	  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000268:	2104      	movs	r1, #4
 800026a:	6838      	ldr	r0, [r7, #0]
 800026c:	f002 fcd0 	bl	8002c10 <SE_LL_Buffer_part_of_SE_ram>
 8000270:	4602      	mov	r2, r0
 8000272:	4b4a      	ldr	r3, [pc, #296]	; (800039c <SE_CallGate+0x198>)
 8000274:	429a      	cmp	r2, r3
 8000276:	d101      	bne.n	800027c <SE_CallGate+0x78>
	  {
		  NVIC_SystemReset();
 8000278:	f008 fb0a 	bl	8008890 <__NVIC_SystemReset>
	  }
  }

  /* Double Check to avoid basic fault injection : the Callgate was called only from SE Interface */
  __IS_CALLER_SE_IF();
 800027c:	4a45      	ldr	r2, [pc, #276]	; (8000394 <SE_CallGate+0x190>)
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	4293      	cmp	r3, r2
 8000282:	d201      	bcs.n	8000288 <SE_CallGate+0x84>
 8000284:	f008 fb04 	bl	8008890 <__NVIC_SystemReset>
 8000288:	4a43      	ldr	r2, [pc, #268]	; (8000398 <SE_CallGate+0x194>)
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	4293      	cmp	r3, r2
 800028e:	d901      	bls.n	8000294 <SE_CallGate+0x90>
 8000290:	f008 fafe 	bl	8008890 <__NVIC_SystemReset>

  /* Double Check the pointers allocation */
  if (eID == SE_EXIT_INTERRUPT)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800029a:	d104      	bne.n	80002a6 <SE_CallGate+0xa2>
  {
	  /* if we come back from an interrupt then peSE_Status must be NULL */
	  if (NULL != peSE_Status)
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d015      	beq.n	80002ce <SE_CallGate+0xca>
	  {
		  /* Abnormal case */
		  NVIC_SystemReset();
 80002a2:	f008 faf5 	bl	8008890 <__NVIC_SystemReset>
	  }
  }
  else
  {
	  /* Double Check to avoid basic fault injection : Check the pointers allocation */
	  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 80002a6:	2104      	movs	r1, #4
 80002a8:	6838      	ldr	r0, [r7, #0]
 80002aa:	f002 fc8b 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 80002ae:	4602      	mov	r2, r0
 80002b0:	4b3a      	ldr	r3, [pc, #232]	; (800039c <SE_CallGate+0x198>)
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d001      	beq.n	80002ba <SE_CallGate+0xb6>
	  {
		  NVIC_SystemReset();
 80002b6:	f008 faeb 	bl	8008890 <__NVIC_SystemReset>
	  }
	  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 80002ba:	2104      	movs	r1, #4
 80002bc:	6838      	ldr	r0, [r7, #0]
 80002be:	f002 fca7 	bl	8002c10 <SE_LL_Buffer_part_of_SE_ram>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b35      	ldr	r3, [pc, #212]	; (800039c <SE_CallGate+0x198>)
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d101      	bne.n	80002ce <SE_CallGate+0xca>
	  {
		  NVIC_SystemReset();
 80002ca:	f008 fae1 	bl	8008890 <__NVIC_SystemReset>
	  }
  }

  /* if an interrupt is being handled, then no service is allowed */
  if (eID != SE_EXIT_INTERRUPT)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002d4:	d017      	beq.n	8000306 <SE_CallGate+0x102>
  {
    /* save user PRIMASK value */
    PrimaskValue = PrimaskParam;
 80002d6:	4a32      	ldr	r2, [pc, #200]	; (80003a0 <SE_CallGate+0x19c>)
 80002d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002da:	6013      	str	r3, [r2, #0]

    if (IntHand == 1UL)
 80002dc:	4b31      	ldr	r3, [pc, #196]	; (80003a4 <SE_CallGate+0x1a0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d110      	bne.n	8000306 <SE_CallGate+0x102>
    {
      *peSE_Status = SE_BUSY;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <SE_CallGate+0x1a4>)
 80002e8:	601a      	str	r2, [r3, #0]
      EXIT_PROTECTED_AREA();
 80002ea:	4b28      	ldr	r3, [pc, #160]	; (800038c <SE_CallGate+0x188>)
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	4a27      	ldr	r2, [pc, #156]	; (800038c <SE_CallGate+0x188>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6213      	str	r3, [r2, #32]
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <SE_CallGate+0x188>)
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
      return SE_SUCCESS;
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <SE_CallGate+0x198>)
 8000304:	e03a      	b.n	800037c <SE_CallGate+0x178>
    }
  }

  /* an exit interrupt service is requested */
  if (eID == SE_EXIT_INTERRUPT)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800030c:	d105      	bne.n	800031a <SE_CallGate+0x116>
  {
    /* set SeMsp */
    //SeMsp = SeExcEntrySp - 36UL;

    /* whereas there is no interrupt handling on going */
    if (IntHand != 1UL)
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <SE_CallGate+0x1a0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d001      	beq.n	800031a <SE_CallGate+0x116>
    {
    	NVIC_SystemReset();
 8000316:	f008 fabb 	bl	8008890 <__NVIC_SystemReset>
    }
  }

#if defined(SFU_ISOLATE_SE_WITH_FIREWALL) || defined(CKS_ENABLED)
  /*  save Appli Vector Table Address   */
  AppliVectorsAddr = SCB->VTOR;
 800031a:	4b24      	ldr	r3, [pc, #144]	; (80003ac <SE_CallGate+0x1a8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <SE_CallGate+0x1ac>)
 8000320:	6013      	str	r3, [r2, #0]

  /*  set SE vector */
  SCB->VTOR = (uint32_t)&SeVectorsTable;
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <SE_CallGate+0x1a8>)
 8000324:	4a23      	ldr	r2, [pc, #140]	; (80003b4 <SE_CallGate+0x1b0>)
 8000326:	609a      	str	r2, [r3, #8]
#endif /* SFU_ISOLATE_SE_WITH_FIREWALL || CKS_ENABLED */

  *peSE_Status =  SE_OK;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	4a23      	ldr	r2, [pc, #140]	; (80003b8 <SE_CallGate+0x1b4>)
 800032c:	601a      	str	r2, [r3, #0]

  /* get current Active Stack Pointer */
  if (eID != SE_EXIT_INTERRUPT)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000334:	d008      	beq.n	8000348 <SE_CallGate+0x144>
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000336:	f3ef 8314 	mrs	r3, CONTROL
 800033a:	61bb      	str	r3, [r7, #24]
 800033c:	69bb      	ldr	r3, [r7, #24]
    AppliActiveSpMode = (__get_CONTROL() >> 1UL) & 0x00000001UL;
 800033e:	085b      	lsrs	r3, r3, #1
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <SE_CallGate+0x1b8>)
 8000346:	6013      	str	r3, [r2, #0]

  /*Initializing arguments to store all values after peSE_Status*/
  va_start(arguments, PrimaskParam);
 8000348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800034c:	613b      	str	r3, [r7, #16]

  /*  call service implementation , this is split to have a fixed size */
#if defined(SFU_ISOLATE_SE_WITH_FIREWALL)
  /*  set SE specific stack before executing SE service */
  e_ret_status =  SE_SP_SMUGGLE(eID, peSE_Status, arguments);
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	6839      	ldr	r1, [r7, #0]
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f000 f974 	bl	8000640 <SE_SP_SMUGGLE>
 8000358:	6178      	str	r0, [r7, #20]
  HAL_NVIC_DisableIRQ(IPCC_C1_TX_IRQn);
  __ISB();
  SCB->VTOR = AppliVectorsAddr;
#endif /* CKS_ENABLED */
#if defined(SFU_ISOLATE_SE_WITH_FIREWALL)
  SCB->VTOR = AppliVectorsAddr;
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <SE_CallGate+0x1a8>)
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <SE_CallGate+0x1ac>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6093      	str	r3, [r2, #8]
   /* Re-enable the interrupts */
  __set_PRIMASK(PrimaskParam);
#endif /*TEMP_IRQ_MGMT_DISABLE*/
#endif /* 0 */
  /* Exit the protected area */
  EXIT_PROTECTED_AREA();
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <SE_CallGate+0x188>)
 8000364:	6a1b      	ldr	r3, [r3, #32]
 8000366:	4a09      	ldr	r2, [pc, #36]	; (800038c <SE_CallGate+0x188>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6213      	str	r3, [r2, #32]
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <SE_CallGate+0x188>)
 8000370:	6a1b      	ldr	r3, [r3, #32]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]

  return e_ret_status;
 800037a:	697b      	ldr	r3, [r7, #20]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000386:	b002      	add	sp, #8
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40011c00 	.word	0x40011c00
 8000390:	20007a18 	.word	0x20007a18
 8000394:	0801b500 	.word	0x0801b500
 8000398:	0801c2ff 	.word	0x0801c2ff
 800039c:	0012310f 	.word	0x0012310f
 80003a0:	20007a14 	.word	0x20007a14
 80003a4:	2000644c 	.word	0x2000644c
 80003a8:	12345678 	.word	0x12345678
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	20007a20 	.word	0x20007a20
 80003b4:	08016e00 	.word	0x08016e00
 80003b8:	0012e223 	.word	0x0012e223
 80003bc:	20007a08 	.word	0x20007a08

Disassembly of section .SE_Startup_Code:

08000500 <SE_CORE_Startup>:
  * @note  It has to be called before the isolation mechanism is activated!!
  * @param  None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_CORE_Startup(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Data initialization function*/
  __iar_data_init3();
#elif defined (__CC_ARM)
  __arm_data_init();
#elif defined(__GNUC__)
  __gcc_data_init();
 8000502:	f000 fa6d 	bl	80009e0 <__gcc_data_init>
#endif /* __ICCARM__ */

  /*NOTE : other initialization may be added here */
  return SE_SUCCESS;
}
 8000506:	4801      	ldr	r0, [pc, #4]	; (800050c <__ICFEDIT_SE_Startup_region_ROM_start__+0xc>)
 8000508:	bd08      	pop	{r3, pc}
 800050a:	bf00      	nop
 800050c:	0012310f 	.word	0x0012310f

Disassembly of section .text:

08000600 <__do_global_dtors_aux>:
 8000600:	b510      	push	{r4, lr}
 8000602:	4c05      	ldr	r4, [pc, #20]	; (8000618 <__ICFEDIT_SE_Code_nokey_region_ROM_start__+0x18>)
 8000604:	7823      	ldrb	r3, [r4, #0]
 8000606:	b933      	cbnz	r3, 8000616 <__do_global_dtors_aux+0x16>
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__ICFEDIT_SE_Code_nokey_region_ROM_start__+0x1c>)
 800060a:	b113      	cbz	r3, 8000612 <__do_global_dtors_aux+0x12>
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <__ICFEDIT_SE_Code_nokey_region_ROM_start__+0x20>)
 800060e:	f3af 8000 	nop.w
 8000612:	2301      	movs	r3, #1
 8000614:	7023      	strb	r3, [r4, #0]
 8000616:	bd10      	pop	{r4, pc}
 8000618:	20002168 	.word	0x20002168
 800061c:	00000000 	.word	0x00000000
 8000620:	08016ca4 	.word	0x08016ca4

08000624 <frame_dummy>:
 8000624:	b508      	push	{r3, lr}
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <frame_dummy+0x10>)
 8000628:	b11b      	cbz	r3, 8000632 <frame_dummy+0xe>
 800062a:	4903      	ldr	r1, [pc, #12]	; (8000638 <frame_dummy+0x14>)
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <frame_dummy+0x18>)
 800062e:	f3af 8000 	nop.w
 8000632:	bd08      	pop	{r3, pc}
 8000634:	00000000 	.word	0x00000000
 8000638:	2000216c 	.word	0x2000216c
 800063c:	08016ca4 	.word	0x08016ca4

08000640 <SE_SP_SMUGGLE>:
//R0 and R1 are used to call with new stack SE_CallGateService
  .global __ICFEDIT_SE_region_SRAM1_stack_top__
  .global SE_CallGateService
SE_SP_SMUGGLE:
// SP - 8
  PUSH {R11,LR}
 8000640:	e92d 4800 	stmdb	sp!, {fp, lr}
// retrieve SP value on R11
  MOV R11, SP
 8000644:	46eb      	mov	fp, sp
// CHANGE SP
  LDR SP, =__ICFEDIT_SE_region_SRAM1_stack_top__
 8000646:	f8df d018 	ldr.w	sp, [pc, #24]	; 8000660 <SE_SP_SMUGGLE+0x20>
// Let 4 byte to store appli vector addres
  SUB SP, SP, #4  
 800064a:	b081      	sub	sp, #4
// push R11 on new stack
  PUSH {R11}
 800064c:	f84d bd04 	str.w	fp, [sp, #-4]!
  BLX SE_CallGateService
 8000650:	f008 f930 	bl	80088b4 <SE_CallGateService>
// retrieve previous stack
  POP {R11}
 8000654:	f85d bb04 	ldr.w	fp, [sp], #4
// put new stack
  MOV SP, R11
 8000658:	46dd      	mov	sp, fp
  POP {R11, LR}
 800065a:	e8bd 4800 	ldmia.w	sp!, {fp, lr}
// return
  BX LR
 800065e:	4770      	bx	lr
  LDR SP, =__ICFEDIT_SE_region_SRAM1_stack_top__
 8000660:	20002000 	.word	0x20002000

08000664 <__aeabi_uldivmod>:
 8000664:	b953      	cbnz	r3, 800067c <__aeabi_uldivmod+0x18>
 8000666:	b94a      	cbnz	r2, 800067c <__aeabi_uldivmod+0x18>
 8000668:	2900      	cmp	r1, #0
 800066a:	bf08      	it	eq
 800066c:	2800      	cmpeq	r0, #0
 800066e:	bf1c      	itt	ne
 8000670:	f04f 31ff 	movne.w	r1, #4294967295
 8000674:	f04f 30ff 	movne.w	r0, #4294967295
 8000678:	f000 b972 	b.w	8000960 <__aeabi_idiv0>
 800067c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000680:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000684:	f000 f806 	bl	8000694 <__udivmoddi4>
 8000688:	f8dd e004 	ldr.w	lr, [sp, #4]
 800068c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000690:	b004      	add	sp, #16
 8000692:	4770      	bx	lr

08000694 <__udivmoddi4>:
 8000694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000698:	9e08      	ldr	r6, [sp, #32]
 800069a:	4604      	mov	r4, r0
 800069c:	4688      	mov	r8, r1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d14b      	bne.n	800073a <__udivmoddi4+0xa6>
 80006a2:	428a      	cmp	r2, r1
 80006a4:	4615      	mov	r5, r2
 80006a6:	d967      	bls.n	8000778 <__udivmoddi4+0xe4>
 80006a8:	fab2 f282 	clz	r2, r2
 80006ac:	b14a      	cbz	r2, 80006c2 <__udivmoddi4+0x2e>
 80006ae:	f1c2 0720 	rsb	r7, r2, #32
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	fa20 f707 	lsr.w	r7, r0, r7
 80006ba:	4095      	lsls	r5, r2
 80006bc:	ea47 0803 	orr.w	r8, r7, r3
 80006c0:	4094      	lsls	r4, r2
 80006c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006c6:	0c23      	lsrs	r3, r4, #16
 80006c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80006cc:	fa1f fc85 	uxth.w	ip, r5
 80006d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80006d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006d8:	fb07 f10c 	mul.w	r1, r7, ip
 80006dc:	4299      	cmp	r1, r3
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x60>
 80006e0:	18eb      	adds	r3, r5, r3
 80006e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80006e6:	f080 811b 	bcs.w	8000920 <__udivmoddi4+0x28c>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 8118 	bls.w	8000920 <__udivmoddi4+0x28c>
 80006f0:	3f02      	subs	r7, #2
 80006f2:	442b      	add	r3, r5
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80006fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000700:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000704:	fb00 fc0c 	mul.w	ip, r0, ip
 8000708:	45a4      	cmp	ip, r4
 800070a:	d909      	bls.n	8000720 <__udivmoddi4+0x8c>
 800070c:	192c      	adds	r4, r5, r4
 800070e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000712:	f080 8107 	bcs.w	8000924 <__udivmoddi4+0x290>
 8000716:	45a4      	cmp	ip, r4
 8000718:	f240 8104 	bls.w	8000924 <__udivmoddi4+0x290>
 800071c:	3802      	subs	r0, #2
 800071e:	442c      	add	r4, r5
 8000720:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000724:	eba4 040c 	sub.w	r4, r4, ip
 8000728:	2700      	movs	r7, #0
 800072a:	b11e      	cbz	r6, 8000734 <__udivmoddi4+0xa0>
 800072c:	40d4      	lsrs	r4, r2
 800072e:	2300      	movs	r3, #0
 8000730:	e9c6 4300 	strd	r4, r3, [r6]
 8000734:	4639      	mov	r1, r7
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0xbe>
 800073e:	2e00      	cmp	r6, #0
 8000740:	f000 80eb 	beq.w	800091a <__udivmoddi4+0x286>
 8000744:	2700      	movs	r7, #0
 8000746:	e9c6 0100 	strd	r0, r1, [r6]
 800074a:	4638      	mov	r0, r7
 800074c:	4639      	mov	r1, r7
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	fab3 f783 	clz	r7, r3
 8000756:	2f00      	cmp	r7, #0
 8000758:	d147      	bne.n	80007ea <__udivmoddi4+0x156>
 800075a:	428b      	cmp	r3, r1
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xd0>
 800075e:	4282      	cmp	r2, r0
 8000760:	f200 80fa 	bhi.w	8000958 <__udivmoddi4+0x2c4>
 8000764:	1a84      	subs	r4, r0, r2
 8000766:	eb61 0303 	sbc.w	r3, r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	4698      	mov	r8, r3
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0e0      	beq.n	8000734 <__udivmoddi4+0xa0>
 8000772:	e9c6 4800 	strd	r4, r8, [r6]
 8000776:	e7dd      	b.n	8000734 <__udivmoddi4+0xa0>
 8000778:	b902      	cbnz	r2, 800077c <__udivmoddi4+0xe8>
 800077a:	deff      	udf	#255	; 0xff
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	2a00      	cmp	r2, #0
 8000782:	f040 808f 	bne.w	80008a4 <__udivmoddi4+0x210>
 8000786:	1b49      	subs	r1, r1, r5
 8000788:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800078c:	fa1f f885 	uxth.w	r8, r5
 8000790:	2701      	movs	r7, #1
 8000792:	fbb1 fcfe 	udiv	ip, r1, lr
 8000796:	0c23      	lsrs	r3, r4, #16
 8000798:	fb0e 111c 	mls	r1, lr, ip, r1
 800079c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007a0:	fb08 f10c 	mul.w	r1, r8, ip
 80007a4:	4299      	cmp	r1, r3
 80007a6:	d907      	bls.n	80007b8 <__udivmoddi4+0x124>
 80007a8:	18eb      	adds	r3, r5, r3
 80007aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007ae:	d202      	bcs.n	80007b6 <__udivmoddi4+0x122>
 80007b0:	4299      	cmp	r1, r3
 80007b2:	f200 80cd 	bhi.w	8000950 <__udivmoddi4+0x2bc>
 80007b6:	4684      	mov	ip, r0
 80007b8:	1a59      	subs	r1, r3, r1
 80007ba:	b2a3      	uxth	r3, r4
 80007bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80007c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80007c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007c8:	fb08 f800 	mul.w	r8, r8, r0
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	d907      	bls.n	80007e0 <__udivmoddi4+0x14c>
 80007d0:	192c      	adds	r4, r5, r4
 80007d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x14a>
 80007d8:	45a0      	cmp	r8, r4
 80007da:	f200 80b6 	bhi.w	800094a <__udivmoddi4+0x2b6>
 80007de:	4618      	mov	r0, r3
 80007e0:	eba4 0408 	sub.w	r4, r4, r8
 80007e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007e8:	e79f      	b.n	800072a <__udivmoddi4+0x96>
 80007ea:	f1c7 0c20 	rsb	ip, r7, #32
 80007ee:	40bb      	lsls	r3, r7
 80007f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80007f8:	fa01 f407 	lsl.w	r4, r1, r7
 80007fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000800:	fa21 f30c 	lsr.w	r3, r1, ip
 8000804:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000808:	4325      	orrs	r5, r4
 800080a:	fbb3 f9f8 	udiv	r9, r3, r8
 800080e:	0c2c      	lsrs	r4, r5, #16
 8000810:	fb08 3319 	mls	r3, r8, r9, r3
 8000814:	fa1f fa8e 	uxth.w	sl, lr
 8000818:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800081c:	fb09 f40a 	mul.w	r4, r9, sl
 8000820:	429c      	cmp	r4, r3
 8000822:	fa02 f207 	lsl.w	r2, r2, r7
 8000826:	fa00 f107 	lsl.w	r1, r0, r7
 800082a:	d90b      	bls.n	8000844 <__udivmoddi4+0x1b0>
 800082c:	eb1e 0303 	adds.w	r3, lr, r3
 8000830:	f109 30ff 	add.w	r0, r9, #4294967295
 8000834:	f080 8087 	bcs.w	8000946 <__udivmoddi4+0x2b2>
 8000838:	429c      	cmp	r4, r3
 800083a:	f240 8084 	bls.w	8000946 <__udivmoddi4+0x2b2>
 800083e:	f1a9 0902 	sub.w	r9, r9, #2
 8000842:	4473      	add	r3, lr
 8000844:	1b1b      	subs	r3, r3, r4
 8000846:	b2ad      	uxth	r5, r5
 8000848:	fbb3 f0f8 	udiv	r0, r3, r8
 800084c:	fb08 3310 	mls	r3, r8, r0, r3
 8000850:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000854:	fb00 fa0a 	mul.w	sl, r0, sl
 8000858:	45a2      	cmp	sl, r4
 800085a:	d908      	bls.n	800086e <__udivmoddi4+0x1da>
 800085c:	eb1e 0404 	adds.w	r4, lr, r4
 8000860:	f100 33ff 	add.w	r3, r0, #4294967295
 8000864:	d26b      	bcs.n	800093e <__udivmoddi4+0x2aa>
 8000866:	45a2      	cmp	sl, r4
 8000868:	d969      	bls.n	800093e <__udivmoddi4+0x2aa>
 800086a:	3802      	subs	r0, #2
 800086c:	4474      	add	r4, lr
 800086e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000872:	fba0 8902 	umull	r8, r9, r0, r2
 8000876:	eba4 040a 	sub.w	r4, r4, sl
 800087a:	454c      	cmp	r4, r9
 800087c:	46c2      	mov	sl, r8
 800087e:	464b      	mov	r3, r9
 8000880:	d354      	bcc.n	800092c <__udivmoddi4+0x298>
 8000882:	d051      	beq.n	8000928 <__udivmoddi4+0x294>
 8000884:	2e00      	cmp	r6, #0
 8000886:	d069      	beq.n	800095c <__udivmoddi4+0x2c8>
 8000888:	ebb1 050a 	subs.w	r5, r1, sl
 800088c:	eb64 0403 	sbc.w	r4, r4, r3
 8000890:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000894:	40fd      	lsrs	r5, r7
 8000896:	40fc      	lsrs	r4, r7
 8000898:	ea4c 0505 	orr.w	r5, ip, r5
 800089c:	e9c6 5400 	strd	r5, r4, [r6]
 80008a0:	2700      	movs	r7, #0
 80008a2:	e747      	b.n	8000734 <__udivmoddi4+0xa0>
 80008a4:	f1c2 0320 	rsb	r3, r2, #32
 80008a8:	fa20 f703 	lsr.w	r7, r0, r3
 80008ac:	4095      	lsls	r5, r2
 80008ae:	fa01 f002 	lsl.w	r0, r1, r2
 80008b2:	fa21 f303 	lsr.w	r3, r1, r3
 80008b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ba:	4338      	orrs	r0, r7
 80008bc:	0c01      	lsrs	r1, r0, #16
 80008be:	fbb3 f7fe 	udiv	r7, r3, lr
 80008c2:	fa1f f885 	uxth.w	r8, r5
 80008c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb07 f308 	mul.w	r3, r7, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	fa04 f402 	lsl.w	r4, r4, r2
 80008d8:	d907      	bls.n	80008ea <__udivmoddi4+0x256>
 80008da:	1869      	adds	r1, r5, r1
 80008dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80008e0:	d22f      	bcs.n	8000942 <__udivmoddi4+0x2ae>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d92d      	bls.n	8000942 <__udivmoddi4+0x2ae>
 80008e6:	3f02      	subs	r7, #2
 80008e8:	4429      	add	r1, r5
 80008ea:	1acb      	subs	r3, r1, r3
 80008ec:	b281      	uxth	r1, r0
 80008ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80008f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80008f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008fa:	fb00 f308 	mul.w	r3, r0, r8
 80008fe:	428b      	cmp	r3, r1
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0x27e>
 8000902:	1869      	adds	r1, r5, r1
 8000904:	f100 3cff 	add.w	ip, r0, #4294967295
 8000908:	d217      	bcs.n	800093a <__udivmoddi4+0x2a6>
 800090a:	428b      	cmp	r3, r1
 800090c:	d915      	bls.n	800093a <__udivmoddi4+0x2a6>
 800090e:	3802      	subs	r0, #2
 8000910:	4429      	add	r1, r5
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000918:	e73b      	b.n	8000792 <__udivmoddi4+0xfe>
 800091a:	4637      	mov	r7, r6
 800091c:	4630      	mov	r0, r6
 800091e:	e709      	b.n	8000734 <__udivmoddi4+0xa0>
 8000920:	4607      	mov	r7, r0
 8000922:	e6e7      	b.n	80006f4 <__udivmoddi4+0x60>
 8000924:	4618      	mov	r0, r3
 8000926:	e6fb      	b.n	8000720 <__udivmoddi4+0x8c>
 8000928:	4541      	cmp	r1, r8
 800092a:	d2ab      	bcs.n	8000884 <__udivmoddi4+0x1f0>
 800092c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000930:	eb69 020e 	sbc.w	r2, r9, lr
 8000934:	3801      	subs	r0, #1
 8000936:	4613      	mov	r3, r2
 8000938:	e7a4      	b.n	8000884 <__udivmoddi4+0x1f0>
 800093a:	4660      	mov	r0, ip
 800093c:	e7e9      	b.n	8000912 <__udivmoddi4+0x27e>
 800093e:	4618      	mov	r0, r3
 8000940:	e795      	b.n	800086e <__udivmoddi4+0x1da>
 8000942:	4667      	mov	r7, ip
 8000944:	e7d1      	b.n	80008ea <__udivmoddi4+0x256>
 8000946:	4681      	mov	r9, r0
 8000948:	e77c      	b.n	8000844 <__udivmoddi4+0x1b0>
 800094a:	3802      	subs	r0, #2
 800094c:	442c      	add	r4, r5
 800094e:	e747      	b.n	80007e0 <__udivmoddi4+0x14c>
 8000950:	f1ac 0c02 	sub.w	ip, ip, #2
 8000954:	442b      	add	r3, r5
 8000956:	e72f      	b.n	80007b8 <__udivmoddi4+0x124>
 8000958:	4638      	mov	r0, r7
 800095a:	e708      	b.n	800076e <__udivmoddi4+0xda>
 800095c:	4637      	mov	r7, r6
 800095e:	e6e9      	b.n	8000734 <__udivmoddi4+0xa0>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop

08000964 <LoopCopyDataInit>:

#ifndef vu32
#	define vu32 volatile uint32_t
#endif

void LoopCopyDataInit(void) {
 8000964:	b082      	sub	sp, #8
	extern char _edata asm("_edata");
	
	vu32* src = (vu32*) &_sidata;
	vu32* dst = (vu32*) &_sdata;
	
	vu32 len = (&_edata - &_sdata) / 4;
 8000966:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopCopyDataInit+0x38>)
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <LoopCopyDataInit+0x3c>)
	
	for(vu32 i=0; i < len; i++)
		dst[i] = src[i];
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <LoopCopyDataInit+0x40>)
	vu32 len = (&_edata - &_sdata) / 4;
 800096c:	1a9b      	subs	r3, r3, r2
 800096e:	2104      	movs	r1, #4
 8000970:	fb93 f3f1 	sdiv	r3, r3, r1
 8000974:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	9901      	ldr	r1, [sp, #4]
 800097c:	9b00      	ldr	r3, [sp, #0]
 800097e:	4299      	cmp	r1, r3
 8000980:	d301      	bcc.n	8000986 <LoopCopyDataInit+0x22>
}
 8000982:	b002      	add	sp, #8
 8000984:	4770      	bx	lr
		dst[i] = src[i];
 8000986:	9901      	ldr	r1, [sp, #4]
 8000988:	9b01      	ldr	r3, [sp, #4]
 800098a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800098e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 8000992:	9b01      	ldr	r3, [sp, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	e7ef      	b.n	800097a <LoopCopyDataInit+0x16>
 800099a:	bf00      	nop
 800099c:	20002000 	.word	0x20002000
 80009a0:	20002168 	.word	0x20002168
 80009a4:	0801a2f0 	.word	0x0801a2f0

080009a8 <LoopFillZerobss>:

void LoopFillZerobss(void) {
 80009a8:	b082      	sub	sp, #8
	extern char _sbss asm("_sbss");
	extern char _ebss asm("_ebss");
	
	vu32* dst = (vu32*) &_sbss;
	vu32 len = (&_ebss - &_sbss) / 4;
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <LoopFillZerobss+0x30>)
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LoopFillZerobss+0x34>)
 80009ae:	2104      	movs	r1, #4
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80009b6:	9300      	str	r3, [sp, #0]
	
	for(vu32 i=0; i < len; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	9801      	ldr	r0, [sp, #4]
 80009be:	9900      	ldr	r1, [sp, #0]
 80009c0:	4288      	cmp	r0, r1
 80009c2:	d301      	bcc.n	80009c8 <LoopFillZerobss+0x20>
		dst[i] = 0;
}
 80009c4:	b002      	add	sp, #8
 80009c6:	4770      	bx	lr
		dst[i] = 0;
 80009c8:	9901      	ldr	r1, [sp, #4]
 80009ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for(vu32 i=0; i < len; i++)
 80009ce:	9901      	ldr	r1, [sp, #4]
 80009d0:	3101      	adds	r1, #1
 80009d2:	9101      	str	r1, [sp, #4]
 80009d4:	e7f2      	b.n	80009bc <LoopFillZerobss+0x14>
 80009d6:	bf00      	nop
 80009d8:	20002168 	.word	0x20002168
 80009dc:	20007a2c 	.word	0x20007a2c

080009e0 <__gcc_data_init>:

void __gcc_data_init(void) {
 80009e0:	b508      	push	{r3, lr}
	LoopFillZerobss();
 80009e2:	f7ff ffe1 	bl	80009a8 <LoopFillZerobss>
	LoopCopyDataInit();
}
 80009e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LoopCopyDataInit();
 80009ea:	f7ff bfbb 	b.w	8000964 <LoopCopyDataInit>

080009ee <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    Infinite_Loop:
      b Infinite_Loop
 80009ee:	e7fe      	b.n	80009ee <Reset_Handler>

080009f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
/* Infinite_Loop: */
	b	Infinite_Loop
 80009f0:	f7ff bffd 	b.w	80009ee <Reset_Handler>

080009f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80009f4:	b508      	push	{r3, lr}
	extern char _user_heap_end asm("_user_heap_end");

	static char *heap_cur;
	char *prev_heap_cur;

	if (heap_cur == 0)
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <_sbrk+0x2c>)
 80009f8:	6819      	ldr	r1, [r3, #0]
{
 80009fa:	4602      	mov	r2, r0
	if (heap_cur == 0)
 80009fc:	b909      	cbnz	r1, 8000a02 <_sbrk+0xe>
		heap_cur = &_user_heap_base;
 80009fe:	4909      	ldr	r1, [pc, #36]	; (8000a24 <_sbrk+0x30>)
 8000a00:	6019      	str	r1, [r3, #0]

	prev_heap_cur = heap_cur;
 8000a02:	6818      	ldr	r0, [r3, #0]
	if (heap_cur + incr > &_user_heap_end)
 8000a04:	4908      	ldr	r1, [pc, #32]	; (8000a28 <_sbrk+0x34>)
 8000a06:	4402      	add	r2, r0
 8000a08:	428a      	cmp	r2, r1
 8000a0a:	d906      	bls.n	8000a1a <_sbrk+0x26>
	{
		errno = ENOMEM;
 8000a0c:	f016 f830 	bl	8016a70 <__errno>
 8000a10:	230c      	movs	r3, #12
 8000a12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_cur += incr;

	return (caddr_t) prev_heap_cur;
}
 8000a18:	bd08      	pop	{r3, pc}
	heap_cur += incr;
 8000a1a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_cur;
 8000a1c:	e7fc      	b.n	8000a18 <_sbrk+0x24>
 8000a1e:	bf00      	nop
 8000a20:	20002184 	.word	0x20002184
 8000a24:	20007a50 	.word	0x20007a50
 8000a28:	2000aa50 	.word	0x2000aa50

08000a2c <STSAFE_P11_GetInfo>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_GetInfo(CK_INFO_PTR pInfo)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a2c:	2054      	movs	r0, #84	; 0x54
 8000a2e:	4770      	bx	lr

08000a30 <STSAFE_P11_GetSlotList>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_GetSlotList(CK_BBOOL tokenPresent, CK_SLOT_ID_PTR pSlotList, CK_ULONG_PTR pulCount)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a30:	2054      	movs	r0, #84	; 0x54
 8000a32:	4770      	bx	lr

08000a34 <STSAFE_P11_GetSlotInfo>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_GetSlotInfo(CK_SLOT_ID slotID, CK_SLOT_INFO_PTR pInfo)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a34:	2054      	movs	r0, #84	; 0x54
 8000a36:	4770      	bx	lr

08000a38 <STSAFE_P11_GetMechanismList>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_GetMechanismList(CK_SLOT_ID slotID, CK_MECHANISM_TYPE_PTR pMechanismList, CK_ULONG_PTR pulCount)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a38:	2054      	movs	r0, #84	; 0x54
 8000a3a:	4770      	bx	lr

08000a3c <STSAFE_P11_GetMechanismInfo>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_GetMechanismInfo(CK_SLOT_ID slotID, CK_MECHANISM_TYPE type, CK_MECHANISM_INFO_PTR pInfo)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a3c:	2054      	movs	r0, #84	; 0x54
 8000a3e:	4770      	bx	lr

08000a40 <STSAFE_P11_InitToken>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_InitToken(CK_SLOT_ID slotID, CK_UTF8CHAR_PTR pPin, CK_ULONG ulPinLen, CK_UTF8CHAR_PTR pLabel)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a40:	2054      	movs	r0, #84	; 0x54
 8000a42:	4770      	bx	lr

08000a44 <STSAFE_P11_InitPIN>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_InitPIN(CK_SESSION_HANDLE hSession, CK_UTF8CHAR_PTR pPin, CK_ULONG ulPinLen)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a44:	2054      	movs	r0, #84	; 0x54
 8000a46:	4770      	bx	lr

08000a48 <STSAFE_P11_SetPIN>:
  */
static CK_RV STSAFE_P11_SetPIN(CK_SESSION_HANDLE hSession, CK_UTF8CHAR_PTR pOldPin, CK_ULONG ulOldLen,
                               CK_UTF8CHAR_PTR pNewPin, CK_ULONG ulNewLen)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a48:	2054      	movs	r0, #84	; 0x54
 8000a4a:	4770      	bx	lr

08000a4c <STSAFE_P11_CloseAllSessions>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED
  */
static CK_RV STSAFE_P11_CloseAllSessions(CK_SLOT_ID slotID)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a4c:	2054      	movs	r0, #84	; 0x54
 8000a4e:	4770      	bx	lr

08000a50 <STSAFE_P11_SetOperationState>:
static CK_RV STSAFE_P11_SetOperationState(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pOperationState,
                                          CK_ULONG ulOperationStateLen, CK_OBJECT_HANDLE hEncryptionKey,
                                          CK_OBJECT_HANDLE hAuthenticationKey)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a50:	2054      	movs	r0, #84	; 0x54
 8000a52:	4770      	bx	lr

08000a54 <STSAFE_P11_Login>:
  */
static CK_RV STSAFE_P11_Login(CK_SESSION_HANDLE hSession, CK_USER_TYPE userType, CK_UTF8CHAR_PTR pPin,
                              CK_ULONG ulPinLen)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a54:	2054      	movs	r0, #84	; 0x54
 8000a56:	4770      	bx	lr

08000a58 <STSAFE_P11_CopyObject>:
  */
static CK_RV STSAFE_P11_CopyObject(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject, CK_ATTRIBUTE_PTR pTemplate,
                                   CK_ULONG ulCount, CK_OBJECT_HANDLE_PTR phNewObject)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a58:	2054      	movs	r0, #84	; 0x54
 8000a5a:	4770      	bx	lr

08000a5c <STSAFE_P11_DestroyObject>:

static CK_RV STSAFE_P11_DestroyObject(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject)
{
  return CKR_ACTION_PROHIBITED; /* Valid for certificate*/

}
 8000a5c:	201b      	movs	r0, #27
 8000a5e:	4770      	bx	lr

08000a60 <STSAFE_P11_Encrypt>:
  */
static CK_RV STSAFE_P11_Encrypt(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData, CK_ULONG ulDataLen,
                                CK_BYTE_PTR pEncryptedData, CK_ULONG_PTR pulEncryptedDataLen)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a60:	2054      	movs	r0, #84	; 0x54
 8000a62:	4770      	bx	lr

08000a64 <STSAFE_P11_DigestKey>:
  * @retval CK_RV CKR_FUNCTION_NOT_SUPPORTED.
  */
static CK_RV STSAFE_P11_DigestKey(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hKey)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a64:	2054      	movs	r0, #84	; 0x54
 8000a66:	4770      	bx	lr

08000a68 <STSAFE_P11_GenerateKey>:
  */
static CK_RV STSAFE_P11_GenerateKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_ATTRIBUTE_PTR pTemplate,
                                    CK_ULONG ulCount, CK_OBJECT_HANDLE_PTR phKey)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a68:	2054      	movs	r0, #84	; 0x54
 8000a6a:	4770      	bx	lr

08000a6c <STSAFE_P11_WrapKey>:
  */
static CK_RV STSAFE_P11_WrapKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hWrappingKey,
                                CK_OBJECT_HANDLE hKey, CK_BYTE_PTR pWrappedKey, CK_ULONG_PTR pulWrappedKeyLen)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a6c:	2054      	movs	r0, #84	; 0x54
 8000a6e:	4770      	bx	lr

08000a70 <STSAFE_P11_UnwrapKey>:
                                  CK_OBJECT_HANDLE hUnwrappingKey, CK_BYTE_PTR pWrappedKey, CK_ULONG ulWrappedKeyLen,
                                  CK_ATTRIBUTE_PTR pTemplate,
                                  CK_ULONG ulAttributeCount, CK_OBJECT_HANDLE_PTR phKey)
{
  return CKR_FUNCTION_NOT_SUPPORTED;
}
 8000a70:	2054      	movs	r0, #84	; 0x54
 8000a72:	4770      	bx	lr

08000a74 <KMS_EXT_TOKEN_GetFunctionList>:
  * @retval CK_RV CKR_OK if successful, see PKCS11 return values for more information.
  */
CK_RV KMS_EXT_TOKEN_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList)
{
  CK_RV ck_rv_ret_status = CKR_OK;
  CK_FUNCTION_LIST_PTR pFunctionList = *ppFunctionList;
 8000a74:	6803      	ldr	r3, [r0, #0]

  pFunctionList->version.major = 2;
 8000a76:	f642 0202 	movw	r2, #10242	; 0x2802
 8000a7a:	801a      	strh	r2, [r3, #0]
  pFunctionList->version.minor = 40;

  pFunctionList->C_Initialize = STSAFE_P11_Initialize;
 8000a7c:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <KMS_EXT_TOKEN_GetFunctionList+0x168>)
 8000a7e:	605a      	str	r2, [r3, #4]
  pFunctionList->C_Finalize = STSAFE_P11_Finalize;
 8000a80:	4a57      	ldr	r2, [pc, #348]	; (8000be0 <KMS_EXT_TOKEN_GetFunctionList+0x16c>)
 8000a82:	609a      	str	r2, [r3, #8]
  pFunctionList->C_GetInfo  = STSAFE_P11_GetInfo;
 8000a84:	4a57      	ldr	r2, [pc, #348]	; (8000be4 <KMS_EXT_TOKEN_GetFunctionList+0x170>)
 8000a86:	60da      	str	r2, [r3, #12]
  pFunctionList->C_GetFunctionList = KMS_EXT_TOKEN_GetFunctionList;
 8000a88:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <KMS_EXT_TOKEN_GetFunctionList+0x174>)
 8000a8a:	611a      	str	r2, [r3, #16]
  pFunctionList->C_GetSlotList = STSAFE_P11_GetSlotList;
 8000a8c:	4a57      	ldr	r2, [pc, #348]	; (8000bec <KMS_EXT_TOKEN_GetFunctionList+0x178>)
 8000a8e:	615a      	str	r2, [r3, #20]
  pFunctionList->C_GetSlotInfo = STSAFE_P11_GetSlotInfo;
 8000a90:	4a57      	ldr	r2, [pc, #348]	; (8000bf0 <KMS_EXT_TOKEN_GetFunctionList+0x17c>)
 8000a92:	619a      	str	r2, [r3, #24]
  pFunctionList->C_GetTokenInfo = STSAFE_P11_GetTokenInfo;
 8000a94:	4a57      	ldr	r2, [pc, #348]	; (8000bf4 <KMS_EXT_TOKEN_GetFunctionList+0x180>)
 8000a96:	61da      	str	r2, [r3, #28]
  pFunctionList->C_GetMechanismList  = STSAFE_P11_GetMechanismList  ;
 8000a98:	4a57      	ldr	r2, [pc, #348]	; (8000bf8 <KMS_EXT_TOKEN_GetFunctionList+0x184>)
 8000a9a:	621a      	str	r2, [r3, #32]
  pFunctionList->C_GetMechanismInfo  = STSAFE_P11_GetMechanismInfo;
 8000a9c:	4a57      	ldr	r2, [pc, #348]	; (8000bfc <KMS_EXT_TOKEN_GetFunctionList+0x188>)
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  pFunctionList->C_InitToken  = STSAFE_P11_InitToken;
 8000aa0:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <KMS_EXT_TOKEN_GetFunctionList+0x18c>)
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  pFunctionList->C_InitPIN  = STSAFE_P11_InitPIN;
 8000aa4:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <KMS_EXT_TOKEN_GetFunctionList+0x190>)
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  pFunctionList->C_SetPIN  = STSAFE_P11_SetPIN;
 8000aa8:	4a57      	ldr	r2, [pc, #348]	; (8000c08 <KMS_EXT_TOKEN_GetFunctionList+0x194>)
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
  pFunctionList->C_OpenSession = STSAFE_P11_OpenSession;
 8000aac:	4a57      	ldr	r2, [pc, #348]	; (8000c0c <KMS_EXT_TOKEN_GetFunctionList+0x198>)
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
  pFunctionList->C_CloseSession = STSAFE_P11_CloseSession;
 8000ab0:	4a57      	ldr	r2, [pc, #348]	; (8000c10 <KMS_EXT_TOKEN_GetFunctionList+0x19c>)
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
  pFunctionList->C_CloseAllSessions  = STSAFE_P11_CloseAllSessions;
 8000ab4:	4a57      	ldr	r2, [pc, #348]	; (8000c14 <KMS_EXT_TOKEN_GetFunctionList+0x1a0>)
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  pFunctionList->C_GetSessionInfo  = STSAFE_P11_GetSessionInfo;
 8000ab8:	4a57      	ldr	r2, [pc, #348]	; (8000c18 <KMS_EXT_TOKEN_GetFunctionList+0x1a4>)
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
  pFunctionList->C_GetOperationState  = STSAFE_P11_GetOperationState;
 8000abc:	4a57      	ldr	r2, [pc, #348]	; (8000c1c <KMS_EXT_TOKEN_GetFunctionList+0x1a8>)
 8000abe:	645a      	str	r2, [r3, #68]	; 0x44
  pFunctionList->C_SetOperationState  = STSAFE_P11_SetOperationState;
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <KMS_EXT_TOKEN_GetFunctionList+0x1ac>)
 8000ac2:	649a      	str	r2, [r3, #72]	; 0x48
  pFunctionList->C_Login  = STSAFE_P11_Login;
 8000ac4:	4a57      	ldr	r2, [pc, #348]	; (8000c24 <KMS_EXT_TOKEN_GetFunctionList+0x1b0>)
 8000ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  pFunctionList->C_Logout  = STSAFE_P11_Logout;
 8000ac8:	4a57      	ldr	r2, [pc, #348]	; (8000c28 <KMS_EXT_TOKEN_GetFunctionList+0x1b4>)
 8000aca:	651a      	str	r2, [r3, #80]	; 0x50
  pFunctionList->C_CreateObject = STSAFE_P11_CreateObject;
 8000acc:	4a57      	ldr	r2, [pc, #348]	; (8000c2c <KMS_EXT_TOKEN_GetFunctionList+0x1b8>)
 8000ace:	655a      	str	r2, [r3, #84]	; 0x54
  pFunctionList->C_CopyObject  = STSAFE_P11_CopyObject;
 8000ad0:	4a57      	ldr	r2, [pc, #348]	; (8000c30 <KMS_EXT_TOKEN_GetFunctionList+0x1bc>)
 8000ad2:	659a      	str	r2, [r3, #88]	; 0x58
  pFunctionList->C_DestroyObject  = STSAFE_P11_DestroyObject;
 8000ad4:	4a57      	ldr	r2, [pc, #348]	; (8000c34 <KMS_EXT_TOKEN_GetFunctionList+0x1c0>)
 8000ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  pFunctionList->C_GetObjectSize  = STSAFE_P11_GetObjectSize;
 8000ad8:	4a57      	ldr	r2, [pc, #348]	; (8000c38 <KMS_EXT_TOKEN_GetFunctionList+0x1c4>)
 8000ada:	661a      	str	r2, [r3, #96]	; 0x60
  pFunctionList->C_GetAttributeValue = STSAFE_P11_GetAttributeValue;
 8000adc:	4a57      	ldr	r2, [pc, #348]	; (8000c3c <KMS_EXT_TOKEN_GetFunctionList+0x1c8>)
 8000ade:	665a      	str	r2, [r3, #100]	; 0x64
  pFunctionList->C_SetAttributeValue = STSAFE_P11_SetAttributeValue;
 8000ae0:	4a57      	ldr	r2, [pc, #348]	; (8000c40 <KMS_EXT_TOKEN_GetFunctionList+0x1cc>)
 8000ae2:	669a      	str	r2, [r3, #104]	; 0x68
  pFunctionList->C_FindObjectsInit = STSAFE_P11_FindObjectsInit;
 8000ae4:	4a57      	ldr	r2, [pc, #348]	; (8000c44 <KMS_EXT_TOKEN_GetFunctionList+0x1d0>)
 8000ae6:	66da      	str	r2, [r3, #108]	; 0x6c
  pFunctionList->C_FindObjects = STSAFE_P11_FindObjects;
 8000ae8:	4a57      	ldr	r2, [pc, #348]	; (8000c48 <KMS_EXT_TOKEN_GetFunctionList+0x1d4>)
 8000aea:	671a      	str	r2, [r3, #112]	; 0x70
  pFunctionList->C_FindObjectsFinal = STSAFE_P11_FindObjectsFinal;
 8000aec:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <KMS_EXT_TOKEN_GetFunctionList+0x1d8>)
 8000aee:	675a      	str	r2, [r3, #116]	; 0x74
  pFunctionList->C_EncryptInit  = STSAFE_P11_EncryptInit;
 8000af0:	4a57      	ldr	r2, [pc, #348]	; (8000c50 <KMS_EXT_TOKEN_GetFunctionList+0x1dc>)
 8000af2:	679a      	str	r2, [r3, #120]	; 0x78
  pFunctionList->C_Encrypt  = STSAFE_P11_Encrypt;
 8000af4:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <KMS_EXT_TOKEN_GetFunctionList+0x1e0>)
 8000af6:	67da      	str	r2, [r3, #124]	; 0x7c
  pFunctionList->C_EncryptUpdate  = STSAFE_P11_EncryptUpdate;
 8000af8:	4a57      	ldr	r2, [pc, #348]	; (8000c58 <KMS_EXT_TOKEN_GetFunctionList+0x1e4>)
 8000afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  pFunctionList->C_EncryptFinal  = STSAFE_P11_EncryptFinal;
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <KMS_EXT_TOKEN_GetFunctionList+0x1e8>)
 8000b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  pFunctionList->C_DecryptInit  = STSAFE_P11_DecryptInit;
 8000b04:	4a56      	ldr	r2, [pc, #344]	; (8000c60 <KMS_EXT_TOKEN_GetFunctionList+0x1ec>)
 8000b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pFunctionList->C_Decrypt  = STSAFE_P11_Decrypt;
 8000b0a:	4a56      	ldr	r2, [pc, #344]	; (8000c64 <KMS_EXT_TOKEN_GetFunctionList+0x1f0>)
 8000b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  pFunctionList->C_DecryptUpdate  = STSAFE_P11_DecryptUpdate;
 8000b10:	4a55      	ldr	r2, [pc, #340]	; (8000c68 <KMS_EXT_TOKEN_GetFunctionList+0x1f4>)
 8000b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  pFunctionList->C_DecryptFinal  = STSAFE_P11_DecryptFinal;
 8000b16:	4a55      	ldr	r2, [pc, #340]	; (8000c6c <KMS_EXT_TOKEN_GetFunctionList+0x1f8>)
 8000b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  pFunctionList->C_DigestInit  = STSAFE_P11_DigestInit;
 8000b1c:	4a54      	ldr	r2, [pc, #336]	; (8000c70 <KMS_EXT_TOKEN_GetFunctionList+0x1fc>)
 8000b1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  pFunctionList->C_Digest  = STSAFE_P11_Digest;
 8000b22:	4a54      	ldr	r2, [pc, #336]	; (8000c74 <KMS_EXT_TOKEN_GetFunctionList+0x200>)
 8000b24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  pFunctionList->C_DigestUpdate  = STSAFE_P11_DigestUpdate;
 8000b28:	4a53      	ldr	r2, [pc, #332]	; (8000c78 <KMS_EXT_TOKEN_GetFunctionList+0x204>)
 8000b2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  pFunctionList->C_DigestKey  = STSAFE_P11_DigestKey;
 8000b2e:	4a53      	ldr	r2, [pc, #332]	; (8000c7c <KMS_EXT_TOKEN_GetFunctionList+0x208>)
 8000b30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  pFunctionList->C_DigestFinal  = STSAFE_P11_DigestFinal;
 8000b34:	4a52      	ldr	r2, [pc, #328]	; (8000c80 <KMS_EXT_TOKEN_GetFunctionList+0x20c>)
 8000b36:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  pFunctionList->C_SignInit = STSAFE_P11_SignInit;
 8000b3a:	4a52      	ldr	r2, [pc, #328]	; (8000c84 <KMS_EXT_TOKEN_GetFunctionList+0x210>)
 8000b3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  pFunctionList->C_Sign = STSAFE_P11_Sign;
 8000b40:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <KMS_EXT_TOKEN_GetFunctionList+0x214>)
 8000b42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  pFunctionList->C_SignUpdate  = STSAFE_P11_SignUpdate;
 8000b46:	4a51      	ldr	r2, [pc, #324]	; (8000c8c <KMS_EXT_TOKEN_GetFunctionList+0x218>)
 8000b48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  pFunctionList->C_SignFinal  = STSAFE_P11_SignFinal;
 8000b4c:	4a50      	ldr	r2, [pc, #320]	; (8000c90 <KMS_EXT_TOKEN_GetFunctionList+0x21c>)
 8000b4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  pFunctionList->C_SignRecoverInit  = STSAFE_P11_SignRecoverInit;
 8000b52:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <KMS_EXT_TOKEN_GetFunctionList+0x220>)
 8000b54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  pFunctionList->C_SignRecover  = STSAFE_P11_SignRecover;
 8000b58:	4a4f      	ldr	r2, [pc, #316]	; (8000c98 <KMS_EXT_TOKEN_GetFunctionList+0x224>)
 8000b5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  pFunctionList->C_VerifyInit = STSAFE_P11_VerifyInit;
 8000b5e:	4a4f      	ldr	r2, [pc, #316]	; (8000c9c <KMS_EXT_TOKEN_GetFunctionList+0x228>)
 8000b60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  pFunctionList->C_Verify = STSAFE_P11_Verify;
 8000b64:	4a4e      	ldr	r2, [pc, #312]	; (8000ca0 <KMS_EXT_TOKEN_GetFunctionList+0x22c>)
 8000b66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  pFunctionList->C_VerifyUpdate  = STSAFE_P11_VerifyUpdate;
 8000b6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <KMS_EXT_TOKEN_GetFunctionList+0x230>)
 8000b6c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  pFunctionList->C_VerifyFinal  = STSAFE_P11_VerifyFinal;
 8000b70:	4a4d      	ldr	r2, [pc, #308]	; (8000ca8 <KMS_EXT_TOKEN_GetFunctionList+0x234>)
 8000b72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  pFunctionList->C_VerifyRecoverInit  = STSAFE_P11_VerifyRecoverInit;
 8000b76:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <KMS_EXT_TOKEN_GetFunctionList+0x238>)
 8000b78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  pFunctionList->C_VerifyRecover  = STSAFE_P11_VerifyRecover;
 8000b7c:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <KMS_EXT_TOKEN_GetFunctionList+0x23c>)
 8000b7e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  pFunctionList->C_DigestEncryptUpdate  = STSAFE_P11_DigestEncryptUpdate;
 8000b82:	4a4c      	ldr	r2, [pc, #304]	; (8000cb4 <KMS_EXT_TOKEN_GetFunctionList+0x240>)
 8000b84:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  pFunctionList->C_DecryptDigestUpdate  = STSAFE_P11_DecryptDigestUpdate;
 8000b88:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <KMS_EXT_TOKEN_GetFunctionList+0x244>)
 8000b8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  pFunctionList->C_SignEncryptUpdate  = STSAFE_P11_SignEncryptUpdate;
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <KMS_EXT_TOKEN_GetFunctionList+0x248>)
 8000b90:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  pFunctionList->C_DecryptVerifyUpdate  = STSAFE_P11_DecryptVerifyUpdate;
 8000b94:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <KMS_EXT_TOKEN_GetFunctionList+0x24c>)
 8000b96:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  pFunctionList->C_GenerateKey  = STSAFE_P11_GenerateKey;
 8000b9a:	4a4a      	ldr	r2, [pc, #296]	; (8000cc4 <KMS_EXT_TOKEN_GetFunctionList+0x250>)
 8000b9c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  pFunctionList->C_GenerateKeyPair = STSAFE_P11_GenerateKeyPair;
 8000ba0:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <KMS_EXT_TOKEN_GetFunctionList+0x254>)
 8000ba2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  pFunctionList->C_WrapKey  = STSAFE_P11_WrapKey;
 8000ba6:	4a49      	ldr	r2, [pc, #292]	; (8000ccc <KMS_EXT_TOKEN_GetFunctionList+0x258>)
 8000ba8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  pFunctionList->C_UnwrapKey  = STSAFE_P11_UnwrapKey;
 8000bac:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <KMS_EXT_TOKEN_GetFunctionList+0x25c>)
 8000bae:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  pFunctionList->C_DeriveKey = STSAFE_P11_DeriveKey;
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <KMS_EXT_TOKEN_GetFunctionList+0x260>)
 8000bb4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  pFunctionList->C_SeedRandom  = STSAFE_P11_SeedRandom;
 8000bb8:	4a47      	ldr	r2, [pc, #284]	; (8000cd8 <KMS_EXT_TOKEN_GetFunctionList+0x264>)
 8000bba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  pFunctionList->C_GenerateRandom = STSAFE_P11_GenerateRandom;
 8000bbe:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <KMS_EXT_TOKEN_GetFunctionList+0x268>)
 8000bc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  pFunctionList->C_GetFunctionStatus  = STSAFE_P11_GetFunctionStatus;
 8000bc4:	4a46      	ldr	r2, [pc, #280]	; (8000ce0 <KMS_EXT_TOKEN_GetFunctionList+0x26c>)
 8000bc6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pFunctionList->C_CancelFunction  = STSAFE_P11_CancelFunction;
 8000bca:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <KMS_EXT_TOKEN_GetFunctionList+0x270>)
 8000bcc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  pFunctionList->C_WaitForSlotEvent  = STSAFE_P11_WaitForSlotEvent;
 8000bd0:	4a45      	ldr	r2, [pc, #276]	; (8000ce8 <KMS_EXT_TOKEN_GetFunctionList+0x274>)
 8000bd2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  return ck_rv_ret_status;
}
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	08001ab1 	.word	0x08001ab1
 8000be0:	080018dd 	.word	0x080018dd
 8000be4:	08000a2d 	.word	0x08000a2d
 8000be8:	08000a75 	.word	0x08000a75
 8000bec:	08000a31 	.word	0x08000a31
 8000bf0:	08000a35 	.word	0x08000a35
 8000bf4:	08001b49 	.word	0x08001b49
 8000bf8:	08000a39 	.word	0x08000a39
 8000bfc:	08000a3d 	.word	0x08000a3d
 8000c00:	08000a41 	.word	0x08000a41
 8000c04:	08000a45 	.word	0x08000a45
 8000c08:	08000a49 	.word	0x08000a49
 8000c0c:	08001eb1 	.word	0x08001eb1
 8000c10:	08001809 	.word	0x08001809
 8000c14:	08000a4d 	.word	0x08000a4d
 8000c18:	08002635 	.word	0x08002635
 8000c1c:	08001b45 	.word	0x08001b45
 8000c20:	08000a51 	.word	0x08000a51
 8000c24:	08000a55 	.word	0x08000a55
 8000c28:	0800263d 	.word	0x0800263d
 8000c2c:	080022dd 	.word	0x080022dd
 8000c30:	08000a59 	.word	0x08000a59
 8000c34:	08000a5d 	.word	0x08000a5d
 8000c38:	08001b41 	.word	0x08001b41
 8000c3c:	08001cc1 	.word	0x08001cc1
 8000c40:	08001b35 	.word	0x08001b35
 8000c44:	080014ed 	.word	0x080014ed
 8000c48:	08000ef5 	.word	0x08000ef5
 8000c4c:	080017c1 	.word	0x080017c1
 8000c50:	08002621 	.word	0x08002621
 8000c54:	08000a61 	.word	0x08000a61
 8000c58:	080025e1 	.word	0x080025e1
 8000c5c:	08002625 	.word	0x08002625
 8000c60:	08002629 	.word	0x08002629
 8000c64:	080025e5 	.word	0x080025e5
 8000c68:	080025e9 	.word	0x080025e9
 8000c6c:	0800262d 	.word	0x0800262d
 8000c70:	08002639 	.word	0x08002639
 8000c74:	080025ed 	.word	0x080025ed
 8000c78:	0800260d 	.word	0x0800260d
 8000c7c:	08000a65 	.word	0x08000a65
 8000c80:	08002611 	.word	0x08002611
 8000c84:	080013f5 	.word	0x080013f5
 8000c88:	0800190d 	.word	0x0800190d
 8000c8c:	08002605 	.word	0x08002605
 8000c90:	08002609 	.word	0x08002609
 8000c94:	08002601 	.word	0x08002601
 8000c98:	080025f1 	.word	0x080025f1
 8000c9c:	080012fd 	.word	0x080012fd
 8000ca0:	08001595 	.word	0x08001595
 8000ca4:	08002615 	.word	0x08002615
 8000ca8:	08002619 	.word	0x08002619
 8000cac:	0800261d 	.word	0x0800261d
 8000cb0:	080025f5 	.word	0x080025f5
 8000cb4:	080025f9 	.word	0x080025f9
 8000cb8:	080025fd 	.word	0x080025fd
 8000cbc:	08001b31 	.word	0x08001b31
 8000cc0:	080025dd 	.word	0x080025dd
 8000cc4:	08000a69 	.word	0x08000a69
 8000cc8:	0800255d 	.word	0x0800255d
 8000ccc:	08000a6d 	.word	0x08000a6d
 8000cd0:	08000a71 	.word	0x08000a71
 8000cd4:	08001039 	.word	0x08001039
 8000cd8:	08001b3d 	.word	0x08001b3d
 8000cdc:	08000f95 	.word	0x08000f95
 8000ce0:	08002641 	.word	0x08002641
 8000ce4:	08001b39 	.word	0x08001b39
 8000ce8:	08002631 	.word	0x08002631

08000cec <ObjectSetSession>:
  * @param  hObject    the object handle
  * @param  hSession   the session handle
  * @retval CK_RV CKR_SESSION_HANDLE_INVALID, CKR_GENERAL_ERROR, CKR_OK.
  */
static CK_RV    ObjectSetSession(CK_OBJECT_HANDLE hObject, CK_SESSION_HANDLE hSession)
{
 8000cec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /*Init default*/
  e_ret_status = CKR_GENERAL_ERROR;

  /* Get the pointer to the template of a specific object  */
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) == CKR_OK)
 8000cee:	4602      	mov	r2, r0
{
 8000cf0:	9101      	str	r1, [sp, #4]
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) == CKR_OK)
 8000cf2:	a803      	add	r0, sp, #12
 8000cf4:	a904      	add	r1, sp, #16
 8000cf6:	f001 ffb7 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8000cfa:	b118      	cbz	r0, 8000d04 <ObjectSetSession+0x18>
  e_ret_status = CKR_GENERAL_ERROR;
 8000cfc:	2005      	movs	r0, #5
                                                  sizeof(CK_SESSION_HANDLE));
    }
  }

  return e_ret_status;
}
 8000cfe:	b007      	add	sp, #28
 8000d00:	f85d fb04 	ldr.w	pc, [sp], #4
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 8000d04:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <ObjectSetSession+0x38>)
 8000d0a:	a805      	add	r0, sp, #20
 8000d0c:	f001 ffca 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d1f3      	bne.n	8000cfc <ObjectSetSession+0x10>
      e_ret_status = STSAFE_OBJ_SetAttributeValue(p_attribute_embedded, (CK_BYTE_PTR)&hSession,
 8000d14:	2204      	movs	r2, #4
 8000d16:	eb0d 0102 	add.w	r1, sp, r2
 8000d1a:	9805      	ldr	r0, [sp, #20]
 8000d1c:	f002 f820 	bl	8002d60 <STSAFE_OBJ_SetAttributeValue>
  return e_ret_status;
 8000d20:	e7ed      	b.n	8000cfe <ObjectSetSession+0x12>
 8000d22:	bf00      	nop
 8000d24:	80000004 	.word	0x80000004

08000d28 <FindObjectsFromTemplate>:
  * @note   if ulCount == 0, retrieve all objects.
  * @retval CK_RV CKR_GENERAL_ERROR, CKR_OK.
  */
CK_RV FindObjectsFromTemplate(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE_PTR phObject, CK_ULONG ulMaxCount,
                              CK_ULONG_PTR pulObjectCount,  CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)
{
 8000d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2c:	b08b      	sub	sp, #44	; 0x2c
 8000d2e:	4680      	mov	r8, r0
 8000d30:	4689      	mov	r9, r1
  /*Init*/
  object_found = 0;
  ul_attributes_found_count = 0;

  /*Get Objects handles for all objects allocated (token and session)*/
  if (STSAFE_OBJ_GetObjectRange(&hObjectMin, &hObjectMax) != CKR_OK)
 8000d32:	a808      	add	r0, sp, #32
 8000d34:	a909      	add	r1, sp, #36	; 0x24
{
 8000d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (STSAFE_OBJ_GetObjectRange(&hObjectMin, &hObjectMax) != CKR_OK)
 8000d3a:	f001 fff3 	bl	8002d24 <STSAFE_OBJ_GetObjectRange>
 8000d3e:	4607      	mov	r7, r0
 8000d40:	b120      	cbz	r0, 8000d4c <FindObjectsFromTemplate+0x24>
  {
    return CKR_GENERAL_ERROR;
 8000d42:	2705      	movs	r7, #5

  /* Assign the output */
  *pulObjectCount = object_found;

  return CKR_OK;
}
 8000d44:	4638      	mov	r0, r7
 8000d46:	b00b      	add	sp, #44	; 0x2c
 8000d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  hObject = hObjectMin;
 8000d4e:	9d08      	ldr	r5, [sp, #32]
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 8000d50:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8000e28 <FindObjectsFromTemplate+0x100>
 8000d54:	230c      	movs	r3, #12
 8000d56:	4353      	muls	r3, r2
 8000d58:	9301      	str	r3, [sp, #4]
  object_found = 0;
 8000d5a:	4604      	mov	r4, r0
  while ((object_found < ulMaxCount) && (hObject < hObjectMax))
 8000d5c:	9b02      	ldr	r3, [sp, #8]
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	d202      	bcs.n	8000d68 <FindObjectsFromTemplate+0x40>
 8000d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d802      	bhi.n	8000d6e <FindObjectsFromTemplate+0x46>
  *pulObjectCount = object_found;
 8000d68:	9b03      	ldr	r3, [sp, #12]
 8000d6a:	601c      	str	r4, [r3, #0]
  return CKR_OK;
 8000d6c:	e7ea      	b.n	8000d44 <FindObjectsFromTemplate+0x1c>
    if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) != CKR_OK)
 8000d6e:	462a      	mov	r2, r5
 8000d70:	a907      	add	r1, sp, #28
 8000d72:	a805      	add	r0, sp, #20
 8000d74:	f001 ff78 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d1e2      	bne.n	8000d42 <FindObjectsFromTemplate+0x1a>
    if ((p_template_embedded != NULL_PTR) && (ul_count_embedded != 0UL))
 8000d7c:	9a05      	ldr	r2, [sp, #20]
 8000d7e:	1c6b      	adds	r3, r5, #1
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d02b      	beq.n	8000dde <FindObjectsFromTemplate+0xb6>
 8000d86:	9b07      	ldr	r3, [sp, #28]
 8000d88:	b34b      	cbz	r3, 8000dde <FindObjectsFromTemplate+0xb6>
      if (ulCount > 0UL)
 8000d8a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d03d      	beq.n	8000e0c <FindObjectsFromTemplate+0xe4>
        if (hSession != CKV_SESSION_HANDLE_ANY)
 8000d90:	f1b8 0f00 	cmp.w	r8, #0
 8000d94:	d10c      	bne.n	8000db0 <FindObjectsFromTemplate+0x88>
{
 8000d96:	2600      	movs	r6, #0
 8000d98:	46b2      	mov	sl, r6
        for (i = 0; i < ulCount; i++)
 8000d9a:	9b01      	ldr	r3, [sp, #4]
 8000d9c:	42b3      	cmp	r3, r6
 8000d9e:	d120      	bne.n	8000de2 <FindObjectsFromTemplate+0xba>
        if (ul_attributes_found_count == ulCount)
 8000da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000da2:	459a      	cmp	sl, r3
          if (*((CK_ULONG *)(p_attribute_embedded->pValue)) == hSession)
 8000da4:	d11b      	bne.n	8000dde <FindObjectsFromTemplate+0xb6>
          phObject[object_found] = hObject;
 8000da6:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
          object_found++;
 8000daa:	3401      	adds	r4, #1
 8000dac:	b2e4      	uxtb	r4, r4
 8000dae:	e016      	b.n	8000dde <FindObjectsFromTemplate+0xb6>
          if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 8000db0:	4659      	mov	r1, fp
 8000db2:	a806      	add	r0, sp, #24
 8000db4:	f001 ff76 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8000db8:	b920      	cbnz	r0, 8000dc4 <FindObjectsFromTemplate+0x9c>
            if (*((CK_ULONG *)(p_attribute_embedded->pValue)) != hSession)
 8000dba:	9b06      	ldr	r3, [sp, #24]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4543      	cmp	r3, r8
 8000dc2:	d10c      	bne.n	8000dde <FindObjectsFromTemplate+0xb6>
          if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_OBJECT_AVAILABILITY, p_template_embedded,
 8000dc4:	9b07      	ldr	r3, [sp, #28]
 8000dc6:	9a05      	ldr	r2, [sp, #20]
 8000dc8:	4916      	ldr	r1, [pc, #88]	; (8000e24 <FindObjectsFromTemplate+0xfc>)
 8000dca:	a806      	add	r0, sp, #24
 8000dcc:	f001 ff6a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d1e0      	bne.n	8000d96 <FindObjectsFromTemplate+0x6e>
            if (*((CK_BBOOL *)(p_attribute_embedded->pValue)) == FALSE)
 8000dd4:	9b06      	ldr	r3, [sp, #24]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1db      	bne.n	8000d96 <FindObjectsFromTemplate+0x6e>
{
 8000dde:	9d00      	ldr	r5, [sp, #0]
 8000de0:	e7bc      	b.n	8000d5c <FindObjectsFromTemplate+0x34>
          if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, pTemplate[i].type, p_template_embedded,
 8000de2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000de4:	9b07      	ldr	r3, [sp, #28]
 8000de6:	9a05      	ldr	r2, [sp, #20]
 8000de8:	5989      	ldr	r1, [r1, r6]
 8000dea:	a806      	add	r0, sp, #24
 8000dec:	f001 ff5a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8000df0:	b950      	cbnz	r0, 8000e08 <FindObjectsFromTemplate+0xe0>
            if (memcmp(p_attribute_embedded->pValue, pTemplate[i].pValue, p_attribute_embedded->ulValueLen) == 0)
 8000df2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000df4:	9b06      	ldr	r3, [sp, #24]
 8000df6:	1991      	adds	r1, r2, r6
 8000df8:	6858      	ldr	r0, [r3, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	6849      	ldr	r1, [r1, #4]
 8000dfe:	f015 fe4d 	bl	8016a9c <memcmp>
 8000e02:	b908      	cbnz	r0, 8000e08 <FindObjectsFromTemplate+0xe0>
              ul_attributes_found_count++;
 8000e04:	f10a 0a01 	add.w	sl, sl, #1
 8000e08:	360c      	adds	r6, #12
 8000e0a:	e7c6      	b.n	8000d9a <FindObjectsFromTemplate+0x72>
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	a806      	add	r0, sp, #24
 8000e10:	f001 ff48 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d1c6      	bne.n	8000da6 <FindObjectsFromTemplate+0x7e>
          if (*((CK_ULONG *)(p_attribute_embedded->pValue)) == hSession)
 8000e18:	9b06      	ldr	r3, [sp, #24]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4543      	cmp	r3, r8
 8000e20:	e7c0      	b.n	8000da4 <FindObjectsFromTemplate+0x7c>
 8000e22:	bf00      	nop
 8000e24:	80000005 	.word	0x80000005
 8000e28:	80000004 	.word	0x80000004

08000e2c <SessionIsValid>:
  if ((hSession == CK_INVALID_HANDLE) || (hSession < STSAFE_P11_SESSION_INDEX_OFFSET))
 8000e2c:	b148      	cbz	r0, 8000e42 <SessionIsValid+0x16>
  if ((ul_session_index > ulSessionNb) ||
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SessionIsValid+0x1c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
  ul_session_index = hSession - STSAFE_P11_SESSION_INDEX_OFFSET;
 8000e32:	3801      	subs	r0, #1
  if ((ul_session_index > ulSessionNb) ||
 8000e34:	4298      	cmp	r0, r3
 8000e36:	d804      	bhi.n	8000e42 <SessionIsValid+0x16>
 8000e38:	2803      	cmp	r0, #3
  return   CKR_OK;
 8000e3a:	bf8c      	ite	hi
 8000e3c:	20b3      	movhi	r0, #179	; 0xb3
 8000e3e:	2000      	movls	r0, #0
 8000e40:	4770      	bx	lr
    return CKR_SESSION_HANDLE_INVALID;
 8000e42:	20b3      	movs	r0, #179	; 0xb3
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2000218c 	.word	0x2000218c

08000e4c <SessionIsOpen>:
{
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	4602      	mov	r2, r0
  if (SessionIsValid(hSession) != CKR_OK)
 8000e50:	f7ff ffec 	bl	8000e2c <SessionIsValid>
 8000e54:	b950      	cbnz	r0, 8000e6c <SessionIsOpen+0x20>
  if ((a_SessionList[ul_session_index].SessionHandle == CK_INVALID_HANDLE)
 8000e56:	4907      	ldr	r1, [pc, #28]	; (8000e74 <SessionIsOpen+0x28>)
 8000e58:	1e53      	subs	r3, r2, #1
 8000e5a:	244c      	movs	r4, #76	; 0x4c
 8000e5c:	fb04 1303 	mla	r3, r4, r3, r1
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b12b      	cbz	r3, 8000e70 <SessionIsOpen+0x24>
    return   CKR_GENERAL_ERROR;
 8000e64:	429a      	cmp	r2, r3
 8000e66:	bf18      	it	ne
 8000e68:	2005      	movne	r0, #5
}
 8000e6a:	bd10      	pop	{r4, pc}
    return CKR_SESSION_HANDLE_INVALID;
 8000e6c:	20b3      	movs	r0, #179	; 0xb3
 8000e6e:	e7fc      	b.n	8000e6a <SessionIsOpen+0x1e>
    return   CKR_GENERAL_ERROR;
 8000e70:	2005      	movs	r0, #5
 8000e72:	e7fa      	b.n	8000e6a <SessionIsOpen+0x1e>
 8000e74:	2000218c 	.word	0x2000218c

08000e78 <SessionOperationIsActive>:
{
 8000e78:	b508      	push	{r3, lr}
 8000e7a:	4602      	mov	r2, r0
  if (SessionIsValid(hSession) != CKR_OK)
 8000e7c:	f7ff ffd6 	bl	8000e2c <SessionIsValid>
 8000e80:	b948      	cbnz	r0, 8000e96 <SessionOperationIsActive+0x1e>
  if (a_SessionList[ul_session_index].OperationActive == CK_FALSE)
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SessionOperationIsActive+0x24>)
 8000e84:	3a01      	subs	r2, #1
 8000e86:	214c      	movs	r1, #76	; 0x4c
 8000e88:	fb01 3202 	mla	r2, r1, r2, r3
 8000e8c:	7e13      	ldrb	r3, [r2, #24]
 8000e8e:	2b00      	cmp	r3, #0
    return CKR_GENERAL_ERROR;
 8000e90:	bf08      	it	eq
 8000e92:	2005      	moveq	r0, #5
}
 8000e94:	bd08      	pop	{r3, pc}
    return CKR_SESSION_HANDLE_INVALID;
 8000e96:	20b3      	movs	r0, #179	; 0xb3
 8000e98:	e7fc      	b.n	8000e94 <SessionOperationIsActive+0x1c>
 8000e9a:	bf00      	nop
 8000e9c:	2000218c 	.word	0x2000218c

08000ea0 <SessionOperationGetObjects>:
{
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	4605      	mov	r5, r0
  if (pulObjectCount == NULL)
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	b1eb      	cbz	r3, 8000ee6 <SessionOperationGetObjects+0x46>
  if (SessionIsValid(hSession) != CKR_OK)
 8000eaa:	f7ff ffbf 	bl	8000e2c <SessionIsValid>
 8000eae:	b9e0      	cbnz	r0, 8000eea <SessionOperationGetObjects+0x4a>
  ul_session_index = hSession - STSAFE_P11_SESSION_INDEX_OFFSET;
 8000eb0:	1e6b      	subs	r3, r5, #1
  while ((i < a_SessionList[ul_session_index].ulOperationObjectsCount) && (i < ulMaxObjectCount))
 8000eb2:	4e0f      	ldr	r6, [pc, #60]	; (8000ef0 <SessionOperationGetObjects+0x50>)
 8000eb4:	254c      	movs	r5, #76	; 0x4c
 8000eb6:	435d      	muls	r5, r3
 8000eb8:	eb06 0c05 	add.w	ip, r6, r5
  i = 0U;
 8000ebc:	4604      	mov	r4, r0
      pObject[i] = a_SessionList[ul_session_index].OperationObjects[i];
 8000ebe:	3604      	adds	r6, #4
  while ((i < a_SessionList[ul_session_index].ulOperationObjectsCount) && (i < ulMaxObjectCount))
 8000ec0:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d303      	bcc.n	8000ed0 <SessionOperationGetObjects+0x30>
  *pulObjectCount = i;
 8000ec8:	f8c8 4000 	str.w	r4, [r8]
}
 8000ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((i < a_SessionList[ul_session_index].ulOperationObjectsCount) && (i < ulMaxObjectCount))
 8000ed0:	42a2      	cmp	r2, r4
 8000ed2:	d0f9      	beq.n	8000ec8 <SessionOperationGetObjects+0x28>
    if (pObject != NULL_PTR)
 8000ed4:	b129      	cbz	r1, 8000ee2 <SessionOperationGetObjects+0x42>
      pObject[i] = a_SessionList[ul_session_index].OperationObjects[i];
 8000ed6:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8000eda:	4437      	add	r7, r6
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
    i++;
 8000ee2:	3401      	adds	r4, #1
 8000ee4:	e7ec      	b.n	8000ec0 <SessionOperationGetObjects+0x20>
    return CKR_ARGUMENTS_BAD;
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	e7f0      	b.n	8000ecc <SessionOperationGetObjects+0x2c>
    return CKR_SESSION_HANDLE_INVALID;
 8000eea:	20b3      	movs	r0, #179	; 0xb3
 8000eec:	e7ee      	b.n	8000ecc <SessionOperationGetObjects+0x2c>
 8000eee:	bf00      	nop
 8000ef0:	2000218c 	.word	0x2000218c

08000ef4 <STSAFE_P11_FindObjects>:
{
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4616      	mov	r6, r2
 8000efa:	461f      	mov	r7, r3
  if ((phObject == NULL_PTR) || (pulObjectCount == NULL_PTR) || (ulMaxObjectCount <= 0UL))
 8000efc:	460d      	mov	r5, r1
 8000efe:	b1d9      	cbz	r1, 8000f38 <STSAFE_P11_FindObjects+0x44>
 8000f00:	b1d3      	cbz	r3, 8000f38 <STSAFE_P11_FindObjects+0x44>
 8000f02:	b1ca      	cbz	r2, 8000f38 <STSAFE_P11_FindObjects+0x44>
  if (uInitialized == CK_FALSE)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <STSAFE_P11_FindObjects+0x5c>)
 8000f06:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000f0a:	b1bb      	cbz	r3, 8000f3c <STSAFE_P11_FindObjects+0x48>
  if (SessionIsValid(hSession) != CKR_OK)
 8000f0c:	f7ff ff8e 	bl	8000e2c <SessionIsValid>
 8000f10:	b9b8      	cbnz	r0, 8000f42 <STSAFE_P11_FindObjects+0x4e>
  if (SessionIsOpen(hSession) != CKR_OK)
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff ff9a 	bl	8000e4c <SessionIsOpen>
 8000f18:	b9a8      	cbnz	r0, 8000f46 <STSAFE_P11_FindObjects+0x52>
  if (SessionOperationIsActive(hSession) != CKR_OK)
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff ffac 	bl	8000e78 <SessionOperationIsActive>
 8000f20:	b998      	cbnz	r0, 8000f4a <STSAFE_P11_FindObjects+0x56>
  if (SessionOperationGetObjects(hSession, phObject, ulMaxObjectCount, pulObjectCount) != CKR_OK)
 8000f22:	463b      	mov	r3, r7
 8000f24:	4632      	mov	r2, r6
 8000f26:	4629      	mov	r1, r5
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff ffb9 	bl	8000ea0 <SessionOperationGetObjects>
    return CKR_FUNCTION_FAILED;
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2006      	movne	r0, #6
 8000f34:	2000      	moveq	r0, #0
}
 8000f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return CKR_ARGUMENTS_BAD;
 8000f38:	2007      	movs	r0, #7
 8000f3a:	e7fc      	b.n	8000f36 <STSAFE_P11_FindObjects+0x42>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8000f3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f40:	e7f9      	b.n	8000f36 <STSAFE_P11_FindObjects+0x42>
    return CKR_SESSION_HANDLE_INVALID;
 8000f42:	20b3      	movs	r0, #179	; 0xb3
 8000f44:	e7f7      	b.n	8000f36 <STSAFE_P11_FindObjects+0x42>
    return CKR_SESSION_CLOSED;
 8000f46:	20b0      	movs	r0, #176	; 0xb0
 8000f48:	e7f5      	b.n	8000f36 <STSAFE_P11_FindObjects+0x42>
    return CKR_OPERATION_NOT_INITIALIZED;
 8000f4a:	2091      	movs	r0, #145	; 0x91
 8000f4c:	e7f3      	b.n	8000f36 <STSAFE_P11_FindObjects+0x42>
 8000f4e:	bf00      	nop
 8000f50:	2000218c 	.word	0x2000218c

08000f54 <IsMechanismTypeAllowed>:
{
 8000f54:	b530      	push	{r4, r5, lr}
  if ((pMechanism == NULL_PTR) || (ulValueLen == 0))
 8000f56:	b151      	cbz	r1, 8000f6e <IsMechanismTypeAllowed+0x1a>
 8000f58:	b14a      	cbz	r2, 8000f6e <IsMechanismTypeAllowed+0x1a>
  for (i = 0; i < ulValueLen; i++)
 8000f5a:	2300      	movs	r3, #0
    if (pMechanism->mechanism == MechanismIn)
 8000f5c:	240c      	movs	r4, #12
 8000f5e:	fb04 f503 	mul.w	r5, r4, r3
 8000f62:	594d      	ldr	r5, [r1, r5]
 8000f64:	42a8      	cmp	r0, r5
 8000f66:	d004      	beq.n	8000f72 <IsMechanismTypeAllowed+0x1e>
  for (i = 0; i < ulValueLen; i++)
 8000f68:	3301      	adds	r3, #1
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d1f7      	bne.n	8000f5e <IsMechanismTypeAllowed+0xa>
    return CK_FALSE;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	bd30      	pop	{r4, r5, pc}
      return CK_TRUE;
 8000f72:	2001      	movs	r0, #1
 8000f74:	e7fc      	b.n	8000f70 <IsMechanismTypeAllowed+0x1c>

08000f76 <IsAttributeTypeInList>:
{
 8000f76:	b510      	push	{r4, lr}
  if ((pAttributeList == NULL_PTR) || (ulCount == 0))
 8000f78:	b13a      	cbz	r2, 8000f8a <IsAttributeTypeInList+0x14>
  for (i = 0; i < ulCount; i++)
 8000f7a:	2300      	movs	r3, #0
    if (pAttributeList[i] == Type)
 8000f7c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000f80:	42a0      	cmp	r0, r4
 8000f82:	d004      	beq.n	8000f8e <IsAttributeTypeInList+0x18>
  for (i = 0; i < ulCount; i++)
 8000f84:	3301      	adds	r3, #1
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d1f8      	bne.n	8000f7c <IsAttributeTypeInList+0x6>
    return CK_FALSE;
 8000f8a:	2000      	movs	r0, #0
}
 8000f8c:	bd10      	pop	{r4, pc}
      return CK_TRUE;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e7fc      	b.n	8000f8c <IsAttributeTypeInList+0x16>
	...

08000f94 <STSAFE_P11_GenerateRandom>:
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	4607      	mov	r7, r0
 8000f98:	b085      	sub	sp, #20
 8000f9a:	4615      	mov	r5, r2
  if ((pRandomData == NULL_PTR) || (ulRandomLen == 0UL) || (ulRandomLen > STSAFE_RANDOM_MAX_LEN))
 8000f9c:	460e      	mov	r6, r1
 8000f9e:	b329      	cbz	r1, 8000fec <STSAFE_P11_GenerateRandom+0x58>
 8000fa0:	1e53      	subs	r3, r2, #1
 8000fa2:	2bfe      	cmp	r3, #254	; 0xfe
 8000fa4:	d822      	bhi.n	8000fec <STSAFE_P11_GenerateRandom+0x58>
  if (uInitialized == CK_FALSE)
 8000fa6:	4c16      	ldr	r4, [pc, #88]	; (8001000 <STSAFE_P11_GenerateRandom+0x6c>)
 8000fa8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8000fac:	b303      	cbz	r3, 8000ff0 <STSAFE_P11_GenerateRandom+0x5c>
  if (SessionIsValid(hSession) != CKR_OK)
 8000fae:	f7ff ff3d 	bl	8000e2c <SessionIsValid>
 8000fb2:	bb00      	cbnz	r0, 8000ff6 <STSAFE_P11_GenerateRandom+0x62>
  if (SessionIsOpen(hSession) != CKR_OK)
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	f7ff ff49 	bl	8000e4c <SessionIsOpen>
 8000fba:	4601      	mov	r1, r0
 8000fbc:	b9e8      	cbnz	r0, 8000ffa <STSAFE_P11_GenerateRandom+0x66>
  if ((StSafeA_GenerateRandom(&hStSafe, STSAFEA_EPHEMERAL_RND, (uint8_t)ulRandomLen, &out_generate_random,
 8000fbe:	9000      	str	r0, [sp, #0]
 8000fc0:	ab02      	add	r3, sp, #8
 8000fc2:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8000fc6:	b2ea      	uxtb	r2, r5
 8000fc8:	f008 f915 	bl	80091f6 <StSafeA_GenerateRandom>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	b958      	cbnz	r0, 8000fe8 <STSAFE_P11_GenerateRandom+0x54>
                              STSAFEA_MAC_NONE) != STSAFEA_OK) || (out_generate_random.Length != ulRandomLen))
 8000fd0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8000fd4:	429d      	cmp	r5, r3
 8000fd6:	d107      	bne.n	8000fe8 <STSAFE_P11_GenerateRandom+0x54>
    (void)memcpy(pRandomData, out_generate_random.Data, out_generate_random.Length);
 8000fd8:	462a      	mov	r2, r5
 8000fda:	9903      	ldr	r1, [sp, #12]
 8000fdc:	4630      	mov	r0, r6
 8000fde:	f015 fd6c 	bl	8016aba <memcpy>
    e_ret_status = CKR_OK;
 8000fe2:	4620      	mov	r0, r4
}
 8000fe4:	b005      	add	sp, #20
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status = CKR_FUNCTION_FAILED;
 8000fe8:	2006      	movs	r0, #6
 8000fea:	e7fb      	b.n	8000fe4 <STSAFE_P11_GenerateRandom+0x50>
    return CKR_ARGUMENTS_BAD;
 8000fec:	2007      	movs	r0, #7
 8000fee:	e7f9      	b.n	8000fe4 <STSAFE_P11_GenerateRandom+0x50>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8000ff0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ff4:	e7f6      	b.n	8000fe4 <STSAFE_P11_GenerateRandom+0x50>
    return CKR_SESSION_HANDLE_INVALID;
 8000ff6:	20b3      	movs	r0, #179	; 0xb3
 8000ff8:	e7f4      	b.n	8000fe4 <STSAFE_P11_GenerateRandom+0x50>
    return CKR_SESSION_CLOSED;
 8000ffa:	20b0      	movs	r0, #176	; 0xb0
 8000ffc:	e7f2      	b.n	8000fe4 <STSAFE_P11_GenerateRandom+0x50>
 8000ffe:	bf00      	nop
 8001000:	2000218c 	.word	0x2000218c

08001004 <DecodeDerASN1UncompressedEcPoint>:
{
 8001004:	b538      	push	{r3, r4, r5, lr}
  if ((pValueIn == NULL_PTR) || (ulValueInLen == 0))
 8001006:	4614      	mov	r4, r2
 8001008:	b19a      	cbz	r2, 8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
 800100a:	b193      	cbz	r3, 8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
  if (pValueIn[i++] != ASN_OCTET_STRING)
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	2a04      	cmp	r2, #4
 8001010:	d10f      	bne.n	8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
  if (pValueIn[i] >= ASN_LONG_LEN)
 8001012:	7862      	ldrb	r2, [r4, #1]
 8001014:	0615      	lsls	r5, r2, #24
 8001016:	d40c      	bmi.n	8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
  if (pValueIn[i++] != (ulValueInLen - header_len))
 8001018:	1e9d      	subs	r5, r3, #2
 800101a:	42aa      	cmp	r2, r5
 800101c:	d109      	bne.n	8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
  if (pValueIn[i] != DER_UNCOMPRESSED)
 800101e:	78a2      	ldrb	r2, [r4, #2]
 8001020:	2a04      	cmp	r2, #4
 8001022:	d106      	bne.n	8001032 <DecodeDerASN1UncompressedEcPoint+0x2e>
  *pulValueOutLen = ulValueInLen - header_len;
 8001024:	1eda      	subs	r2, r3, #3
 8001026:	600a      	str	r2, [r1, #0]
    (void)memcpy(pValueOut, &pValueIn[header_len], *pulValueOutLen) ;
 8001028:	1ce1      	adds	r1, r4, #3
 800102a:	f015 fd46 	bl	8016aba <memcpy>
 800102e:	2000      	movs	r0, #0
}
 8001030:	bd38      	pop	{r3, r4, r5, pc}
    return CKR_GENERAL_ERROR;
 8001032:	2005      	movs	r0, #5
 8001034:	e7fc      	b.n	8001030 <DecodeDerASN1UncompressedEcPoint+0x2c>
	...

08001038 <STSAFE_P11_DeriveKey>:
{
 8001038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800103c:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 8001040:	2430      	movs	r4, #48	; 0x30
{
 8001042:	4698      	mov	r8, r3
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 8001044:	ab1b      	add	r3, sp, #108	; 0x6c
{
 8001046:	4605      	mov	r5, r0
 8001048:	460f      	mov	r7, r1
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 800104a:	4618      	mov	r0, r3
 800104c:	2100      	movs	r1, #0
{
 800104e:	4692      	mov	sl, r2
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 8001050:	4622      	mov	r2, r4
{
 8001052:	f8dd 9278 	ldr.w	r9, [sp, #632]	; 0x278
 8001056:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 8001058:	f015 fd53 	bl	8016b02 <memset>
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 800105c:	ab27      	add	r3, sp, #156	; 0x9c
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 800105e:	900f      	str	r0, [sp, #60]	; 0x3c
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 8001060:	4622      	mov	r2, r4
 8001062:	4618      	mov	r0, r3
 8001064:	2100      	movs	r1, #0
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 8001066:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 800106a:	f015 fd4a 	bl	8016b02 <memset>
  shared_secret.SharedKey.Data   = SharedKey_Data;
 800106e:	ab33      	add	r3, sp, #204	; 0xcc
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 8001070:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
 8001074:	9011      	str	r0, [sp, #68]	; 0x44
  shared_secret.SharedKey.Data   = SharedKey_Data;
 8001076:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((pMechanism == NULL_PTR) || (pTemplate == NULL_PTR) || (phKey == NULL_PTR) || (ulAttributeCount == 0UL))
 8001078:	2f00      	cmp	r7, #0
 800107a:	f000 8108 	beq.w	800128e <STSAFE_P11_DeriveKey+0x256>
 800107e:	f1b8 0f00 	cmp.w	r8, #0
 8001082:	f000 8104 	beq.w	800128e <STSAFE_P11_DeriveKey+0x256>
 8001086:	2e00      	cmp	r6, #0
 8001088:	f000 8101 	beq.w	800128e <STSAFE_P11_DeriveKey+0x256>
 800108c:	f1b9 0f00 	cmp.w	r9, #0
 8001090:	f000 80fd 	beq.w	800128e <STSAFE_P11_DeriveKey+0x256>
  if (uInitialized == CK_FALSE)
 8001094:	4b85      	ldr	r3, [pc, #532]	; (80012ac <STSAFE_P11_DeriveKey+0x274>)
 8001096:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80f9 	beq.w	8001292 <STSAFE_P11_DeriveKey+0x25a>
  if (SessionIsValid(hSession) != CKR_OK)
 80010a0:	4628      	mov	r0, r5
 80010a2:	f7ff fec3 	bl	8000e2c <SessionIsValid>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f040 80f6 	bne.w	8001298 <STSAFE_P11_DeriveKey+0x260>
  if (SessionIsOpen(hSession) != CKR_OK)
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff fecd 	bl	8000e4c <SessionIsOpen>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	f040 80f2 	bne.w	800129c <STSAFE_P11_DeriveKey+0x264>
  if (pMechanism->pParameter == NULL_PTR)
 80010b8:	687c      	ldr	r4, [r7, #4]
 80010ba:	2c00      	cmp	r4, #0
 80010bc:	f000 80f2 	beq.w	80012a4 <STSAFE_P11_DeriveKey+0x26c>
  if (p_params->kdf != CKD_NULL)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	f040 80ec 	bne.w	80012a0 <STSAFE_P11_DeriveKey+0x268>
  if ((p_params->pPublicData == NULL_PTR) || (p_params->pSharedData != NULL_PTR) || (p_params->ulSharedDataLen != 0UL))
 80010c8:	6922      	ldr	r2, [r4, #16]
 80010ca:	b92a      	cbnz	r2, 80010d8 <STSAFE_P11_DeriveKey+0xa0>
    return CKR_DOMAIN_PARAMS_INVALID;
 80010cc:	f44f 7098 	mov.w	r0, #304	; 0x130
}
 80010d0:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80010d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((p_params->pPublicData == NULL_PTR) || (p_params->pSharedData != NULL_PTR) || (p_params->ulSharedDataLen != 0UL))
 80010d8:	68a3      	ldr	r3, [r4, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f6      	bne.n	80010cc <STSAFE_P11_DeriveKey+0x94>
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f3      	bne.n	80010cc <STSAFE_P11_DeriveKey+0x94>
  if (DecodeDerASN1UncompressedEcPoint(p_public_data_raw, &ul_public_data_raw_len, p_params->pPublicData,
 80010e4:	68e3      	ldr	r3, [r4, #12]
 80010e6:	a90b      	add	r1, sp, #44	; 0x2c
 80010e8:	a83f      	add	r0, sp, #252	; 0xfc
 80010ea:	f7ff ff8b 	bl	8001004 <DecodeDerASN1UncompressedEcPoint>
 80010ee:	b198      	cbz	r0, 8001118 <STSAFE_P11_DeriveKey+0xe0>
    if (DecodeDerASN1OctetString(p_public_data_raw, &ul_public_data_raw_len, p_params->pPublicData,
 80010f0:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
  if ((pValueIn == NULL_PTR) || (ulValueInLen == 0))
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d0e9      	beq.n	80010cc <STSAFE_P11_DeriveKey+0x94>
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0e7      	beq.n	80010cc <STSAFE_P11_DeriveKey+0x94>
  if (pValueIn[i++] != ASN_OCTET_STRING)
 80010fc:	780a      	ldrb	r2, [r1, #0]
 80010fe:	2a04      	cmp	r2, #4
 8001100:	d1e4      	bne.n	80010cc <STSAFE_P11_DeriveKey+0x94>
  if (pValueIn[i] >= ASN_LONG_LEN)
 8001102:	784a      	ldrb	r2, [r1, #1]
 8001104:	0610      	lsls	r0, r2, #24
 8001106:	d4e1      	bmi.n	80010cc <STSAFE_P11_DeriveKey+0x94>
  if (pValueIn[i++] != (ulValueInLen - header_len))
 8001108:	3b02      	subs	r3, #2
 800110a:	429a      	cmp	r2, r3
 800110c:	d1de      	bne.n	80010cc <STSAFE_P11_DeriveKey+0x94>
    (void)memcpy(pValueOut, &pValueIn[header_len], *pulValueOutLen) ;
 800110e:	3102      	adds	r1, #2
 8001110:	a83f      	add	r0, sp, #252	; 0xfc
  *pulValueOutLen = ulValueInLen - header_len;
 8001112:	920b      	str	r2, [sp, #44]	; 0x2c
    (void)memcpy(pValueOut, &pValueIn[header_len], *pulValueOutLen) ;
 8001114:	f015 fcd1 	bl	8016aba <memcpy>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_base, &ul_count_base, hBaseKey) != CKR_OK)
 8001118:	4652      	mov	r2, sl
 800111a:	a909      	add	r1, sp, #36	; 0x24
 800111c:	a807      	add	r0, sp, #28
 800111e:	f001 fda3 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001122:	b108      	cbz	r0, 8001128 <STSAFE_P11_DeriveKey+0xf0>
    return CKR_KEY_HANDLE_INVALID;
 8001124:	2060      	movs	r0, #96	; 0x60
 8001126:	e7d3      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_ALLOWED_MECHANISMS, p_template_base,
 8001128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800112a:	9a07      	ldr	r2, [sp, #28]
 800112c:	4960      	ldr	r1, [pc, #384]	; (80012b0 <STSAFE_P11_DeriveKey+0x278>)
 800112e:	a806      	add	r0, sp, #24
 8001130:	f001 fdb8 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001134:	2800      	cmp	r0, #0
 8001136:	d1f5      	bne.n	8001124 <STSAFE_P11_DeriveKey+0xec>
  if (IsMechanismTypeAllowed(pMechanism->mechanism, p_attribute_tmp->pValue, p_attribute_tmp->ulValueLen) != CK_TRUE)
 8001138:	9b06      	ldr	r3, [sp, #24]
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
 8001140:	f7ff ff08 	bl	8000f54 <IsMechanismTypeAllowed>
 8001144:	2801      	cmp	r0, #1
 8001146:	f040 80ad 	bne.w	80012a4 <STSAFE_P11_DeriveKey+0x26c>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_PARAMS, p_template_base, ul_count_base) != CKR_OK)
 800114a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800114c:	9a07      	ldr	r2, [sp, #28]
 800114e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001152:	a806      	add	r0, sp, #24
 8001154:	f001 fda6 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001158:	b108      	cbz	r0, 800115e <STSAFE_P11_DeriveKey+0x126>
    return CKR_FUNCTION_FAILED;
 800115a:	2006      	movs	r0, #6
 800115c:	e7b8      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
  if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_256_DER, p_attribute_tmp->ulValueLen) == 0)
 800115e:	9b06      	ldr	r3, [sp, #24]
 8001160:	4954      	ldr	r1, [pc, #336]	; (80012b4 <STSAFE_P11_DeriveKey+0x27c>)
 8001162:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8001166:	463a      	mov	r2, r7
 8001168:	4620      	mov	r0, r4
 800116a:	f015 fc97 	bl	8016a9c <memcmp>
 800116e:	b1d8      	cbz	r0, 80011a8 <STSAFE_P11_DeriveKey+0x170>
  else if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_384_DER, p_attribute_tmp->ulValueLen) == 0)
 8001170:	463a      	mov	r2, r7
 8001172:	4951      	ldr	r1, [pc, #324]	; (80012b8 <STSAFE_P11_DeriveKey+0x280>)
 8001174:	4620      	mov	r0, r4
 8001176:	f015 fc91 	bl	8016a9c <memcmp>
 800117a:	2800      	cmp	r0, #0
 800117c:	d1d2      	bne.n	8001124 <STSAFE_P11_DeriveKey+0xec>
    prv_key_len = STSAFEA_SHA_384_LENGTH * 2UL;
 800117e:	2360      	movs	r3, #96	; 0x60
  if (prv_key_len != ul_public_data_raw_len)
 8001180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001182:	429a      	cmp	r2, r3
 8001184:	d1a2      	bne.n	80010cc <STSAFE_P11_DeriveKey+0x94>
  template_tmp.type = CKA_LABEL;
 8001186:	2203      	movs	r2, #3
 8001188:	ab12      	add	r3, sp, #72	; 0x48
  if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj_shrd_secret_x, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 800118a:	2401      	movs	r4, #1
  template_tmp.type = CKA_LABEL;
 800118c:	9212      	str	r2, [sp, #72]	; 0x48
  template_tmp.pValue = P11_OBJ_LABEL_DH_SECRET_X;
 800118e:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <STSAFE_P11_DeriveKey+0x284>)
 8001190:	9213      	str	r2, [sp, #76]	; 0x4c
  if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj_shrd_secret_x, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 8001192:	e9cd 3400 	strd	r3, r4, [sp]
 8001196:	4622      	mov	r2, r4
 8001198:	ab0c      	add	r3, sp, #48	; 0x30
 800119a:	a905      	add	r1, sp, #20
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fdc3 	bl	8000d28 <FindObjectsFromTemplate>
 80011a2:	b118      	cbz	r0, 80011ac <STSAFE_P11_DeriveKey+0x174>
    return CKR_ATTRIBUTE_VALUE_INVALID;
 80011a4:	2013      	movs	r0, #19
 80011a6:	e793      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    prv_key_len = STSAFEA_SHA_256_LENGTH * 2UL;
 80011a8:	2340      	movs	r3, #64	; 0x40
 80011aa:	e7e9      	b.n	8001180 <STSAFE_P11_DeriveKey+0x148>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_secret, &ul_count_secret, h_obj_shrd_secret_x) != CKR_OK)
 80011ac:	9a05      	ldr	r2, [sp, #20]
 80011ae:	a90a      	add	r1, sp, #40	; 0x28
 80011b0:	a808      	add	r0, sp, #32
 80011b2:	f001 fd59 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d1f4      	bne.n	80011a4 <STSAFE_P11_DeriveKey+0x16c>
  CK_ATTRIBUTE attribute_filter[] =  { {CKA_VALUE, NULL_PTR, 0UL}  } ;
 80011ba:	ab18      	add	r3, sp, #96	; 0x60
 80011bc:	2211      	movs	r2, #17
 80011be:	e9cd 2018 	strd	r2, r0, [sp, #96]	; 0x60
 80011c2:	901a      	str	r0, [sp, #104]	; 0x68
  if (STSAFE_OBJ_FilterTemplate(p_template_filtered, &ul_count_filtered, pTemplate, ulAttributeCount, attribute_filter,
 80011c4:	e9cd 3400 	strd	r3, r4, [sp]
 80011c8:	4642      	mov	r2, r8
 80011ca:	464b      	mov	r3, r9
 80011cc:	a90d      	add	r1, sp, #52	; 0x34
 80011ce:	a857      	add	r0, sp, #348	; 0x15c
 80011d0:	f001 fd7c 	bl	8002ccc <STSAFE_OBJ_FilterTemplate>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d1c0      	bne.n	800115a <STSAFE_P11_DeriveKey+0x122>
  e_ret_status = STSAFE_OBJ_CompareTemplates(p_template_filtered, ul_count_filtered, p_template_secret,
 80011d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011da:	9a08      	ldr	r2, [sp, #32]
 80011dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80011de:	a857      	add	r0, sp, #348	; 0x15c
 80011e0:	f001 fdc9 	bl	8002d76 <STSAFE_OBJ_CompareTemplates>
  if (e_ret_status != CKR_OK)
 80011e4:	2800      	cmp	r0, #0
 80011e6:	f47f af73 	bne.w	80010d0 <STSAFE_P11_DeriveKey+0x98>
  pub_x.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 80011ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  (void)memcpy(pub_x.Data, p_public_data_raw, pub_x.Length);
 80011ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
  pub_x.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 80011ee:	0852      	lsrs	r2, r2, #1
 80011f0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  (void)memcpy(pub_x.Data, p_public_data_raw, pub_x.Length);
 80011f4:	a93f      	add	r1, sp, #252	; 0xfc
 80011f6:	b292      	uxth	r2, r2
 80011f8:	f015 fc5f 	bl	8016aba <memcpy>
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 80011fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 80011fe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8001202:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001204:	ab3f      	add	r3, sp, #252	; 0xfc
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 8001206:	0852      	lsrs	r2, r2, #1
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 8001208:	4419      	add	r1, r3
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 800120a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 800120e:	b292      	uxth	r2, r2
 8001210:	f015 fc53 	bl	8016aba <memcpy>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXT_TOKEN_PRVKEY_SLOT, p_template_base,
 8001214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001216:	9a07      	ldr	r2, [sp, #28]
 8001218:	4929      	ldr	r1, [pc, #164]	; (80012c0 <STSAFE_P11_DeriveKey+0x288>)
 800121a:	a806      	add	r0, sp, #24
 800121c:	f001 fd42 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001220:	2800      	cmp	r0, #0
 8001222:	d19a      	bne.n	800115a <STSAFE_P11_DeriveKey+0x122>
  if (StSafeA_EstablishKey(&hStSafe, __STSAFEA_GET_SLOT_ID_FROM_CK(p_attribute_tmp->pValue), &pub_x, &pub_y,
 8001224:	9b06      	ldr	r3, [sp, #24]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	b119      	cbz	r1, 8001234 <STSAFE_P11_DeriveKey+0x1fc>
 800122c:	2901      	cmp	r1, #1
 800122e:	bf0c      	ite	eq
 8001230:	2101      	moveq	r1, #1
 8001232:	21ff      	movne	r1, #255	; 0xff
 8001234:	23a0      	movs	r3, #160	; 0xa0
 8001236:	2200      	movs	r2, #0
 8001238:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800123c:	ac15      	add	r4, sp, #84	; 0x54
 800123e:	2320      	movs	r3, #32
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	9401      	str	r4, [sp, #4]
 8001244:	ab10      	add	r3, sp, #64	; 0x40
 8001246:	aa0e      	add	r2, sp, #56	; 0x38
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <STSAFE_P11_DeriveKey+0x28c>)
 800124a:	f008 fb7d 	bl	8009948 <StSafeA_EstablishKey>
 800124e:	2800      	cmp	r0, #0
 8001250:	d183      	bne.n	800115a <STSAFE_P11_DeriveKey+0x122>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_VALUE, p_template_secret, ul_count_secret) != CKR_OK)
 8001252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001254:	9a08      	ldr	r2, [sp, #32]
 8001256:	2111      	movs	r1, #17
 8001258:	a806      	add	r0, sp, #24
 800125a:	f001 fd23 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800125e:	2800      	cmp	r0, #0
 8001260:	f47f af7b 	bne.w	800115a <STSAFE_P11_DeriveKey+0x122>
  if (shared_secret.SharedKey.Length > p_attribute_tmp->ulValueLen)
 8001264:	9806      	ldr	r0, [sp, #24]
 8001266:	88a2      	ldrh	r2, [r4, #4]
 8001268:	6883      	ldr	r3, [r0, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d81c      	bhi.n	80012a8 <STSAFE_P11_DeriveKey+0x270>
  if (STSAFE_OBJ_SetAttributeValue(p_attribute_tmp, (CK_BYTE_PTR)shared_secret.SharedKey.Data,
 800126e:	68a1      	ldr	r1, [r4, #8]
 8001270:	f001 fd76 	bl	8002d60 <STSAFE_OBJ_SetAttributeValue>
 8001274:	2800      	cmp	r0, #0
 8001276:	f47f af70 	bne.w	800115a <STSAFE_P11_DeriveKey+0x122>
  if (ObjectSetSession(h_obj_shrd_secret_x, hSession) != CKR_OK)
 800127a:	4629      	mov	r1, r5
 800127c:	9805      	ldr	r0, [sp, #20]
 800127e:	f7ff fd35 	bl	8000cec <ObjectSetSession>
 8001282:	2800      	cmp	r0, #0
 8001284:	f47f af69 	bne.w	800115a <STSAFE_P11_DeriveKey+0x122>
  *phKey = h_obj_shrd_secret_x;
 8001288:	9b05      	ldr	r3, [sp, #20]
 800128a:	6033      	str	r3, [r6, #0]
  return CKR_OK;
 800128c:	e720      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_ARGUMENTS_BAD;
 800128e:	2007      	movs	r0, #7
 8001290:	e71e      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8001292:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001296:	e71b      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_SESSION_HANDLE_INVALID;
 8001298:	20b3      	movs	r0, #179	; 0xb3
 800129a:	e719      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_SESSION_CLOSED;
 800129c:	20b0      	movs	r0, #176	; 0xb0
 800129e:	e717      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_MECHANISM_PARAM_INVALID;
 80012a0:	2071      	movs	r0, #113	; 0x71
 80012a2:	e715      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_MECHANISM_INVALID;
 80012a4:	2070      	movs	r0, #112	; 0x70
 80012a6:	e713      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
    return CKR_DEVICE_MEMORY;
 80012a8:	2031      	movs	r0, #49	; 0x31
 80012aa:	e711      	b.n	80010d0 <STSAFE_P11_DeriveKey+0x98>
 80012ac:	2000218c 	.word	0x2000218c
 80012b0:	40000600 	.word	0x40000600
 80012b4:	080197a4 	.word	0x080197a4
 80012b8:	08016fc0 	.word	0x08016fc0
 80012bc:	080197af 	.word	0x080197af
 80012c0:	80000001 	.word	0x80000001
 80012c4:	20002278 	.word	0x20002278

080012c8 <SessionOperationSetObjects>:
{
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	4617      	mov	r7, r2
  if (SessionIsValid(hSession) != CKR_OK)
 80012ce:	f7ff fdad 	bl	8000e2c <SessionIsValid>
 80012d2:	4606      	mov	r6, r0
 80012d4:	b970      	cbnz	r0, 80012f4 <SessionOperationSetObjects+0x2c>
  ul_session_index = hSession - STSAFE_P11_SESSION_INDEX_OFFSET;
 80012d6:	1e63      	subs	r3, r4, #1
    (void)memcpy(a_SessionList[ul_session_index].OperationObjects, pObject, ulCount * sizeof(CK_OBJECT_HANDLE));
 80012d8:	254c      	movs	r5, #76	; 0x4c
 80012da:	4c07      	ldr	r4, [pc, #28]	; (80012f8 <SessionOperationSetObjects+0x30>)
 80012dc:	435d      	muls	r5, r3
 80012de:	1960      	adds	r0, r4, r5
 80012e0:	0092      	lsls	r2, r2, #2
    a_SessionList[ul_session_index].ulOperationObjectsCount = ulCount;
 80012e2:	442c      	add	r4, r5
    (void)memcpy(a_SessionList[ul_session_index].OperationObjects, pObject, ulCount * sizeof(CK_OBJECT_HANDLE));
 80012e4:	301c      	adds	r0, #28
 80012e6:	f015 fbe8 	bl	8016aba <memcpy>
  a_SessionList[ul_session_index].OperationActive = CK_TRUE;
 80012ea:	2301      	movs	r3, #1
    a_SessionList[ul_session_index].ulOperationObjectsCount = ulCount;
 80012ec:	64e7      	str	r7, [r4, #76]	; 0x4c
  a_SessionList[ul_session_index].OperationActive = CK_TRUE;
 80012ee:	7623      	strb	r3, [r4, #24]
}
 80012f0:	4630      	mov	r0, r6
 80012f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return CKR_SESSION_HANDLE_INVALID;
 80012f4:	26b3      	movs	r6, #179	; 0xb3
 80012f6:	e7fb      	b.n	80012f0 <SessionOperationSetObjects+0x28>
 80012f8:	2000218c 	.word	0x2000218c

080012fc <STSAFE_P11_VerifyInit>:
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	4604      	mov	r4, r0
 8001302:	9201      	str	r2, [sp, #4]
  if (pMechanism == NULL_PTR)
 8001304:	460e      	mov	r6, r1
 8001306:	2900      	cmp	r1, #0
 8001308:	d060      	beq.n	80013cc <STSAFE_P11_VerifyInit+0xd0>
  if (uInitialized == CK_FALSE)
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <STSAFE_P11_VerifyInit+0xf0>)
 800130c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05d      	beq.n	80013d0 <STSAFE_P11_VerifyInit+0xd4>
  if (SessionIsValid(hSession) != CKR_OK)
 8001314:	f7ff fd8a 	bl	8000e2c <SessionIsValid>
 8001318:	2800      	cmp	r0, #0
 800131a:	d15c      	bne.n	80013d6 <STSAFE_P11_VerifyInit+0xda>
  if (SessionIsOpen(hSession) != CKR_OK)
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff fd95 	bl	8000e4c <SessionIsOpen>
 8001322:	2800      	cmp	r0, #0
 8001324:	d159      	bne.n	80013da <STSAFE_P11_VerifyInit+0xde>
  if (SessionOperationIsActive(hSession) == CKR_OK)
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff fda6 	bl	8000e78 <SessionOperationIsActive>
 800132c:	2800      	cmp	r0, #0
 800132e:	d056      	beq.n	80013de <STSAFE_P11_VerifyInit+0xe2>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) != CKR_OK)
 8001330:	9a01      	ldr	r2, [sp, #4]
 8001332:	a905      	add	r1, sp, #20
 8001334:	a804      	add	r0, sp, #16
 8001336:	f001 fc97 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 800133a:	b110      	cbz	r0, 8001342 <STSAFE_P11_VerifyInit+0x46>
    return CKR_KEY_HANDLE_INVALID;
 800133c:	2060      	movs	r0, #96	; 0x60
}
 800133e:	b006      	add	sp, #24
 8001340:	bd70      	pop	{r4, r5, r6, pc}
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_ALLOWED_MECHANISMS, p_template_embedded,
 8001342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001346:	492a      	ldr	r1, [pc, #168]	; (80013f0 <STSAFE_P11_VerifyInit+0xf4>)
 8001348:	a803      	add	r0, sp, #12
 800134a:	f001 fcab 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800134e:	4605      	mov	r5, r0
 8001350:	2800      	cmp	r0, #0
 8001352:	d1f3      	bne.n	800133c <STSAFE_P11_VerifyInit+0x40>
  if (IsMechanismTypeAllowed(pMechanism->mechanism, p_attribute_tmp->pValue, p_attribute_tmp->ulValueLen) != CK_TRUE)
 8001354:	9b03      	ldr	r3, [sp, #12]
 8001356:	6830      	ldr	r0, [r6, #0]
 8001358:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
 800135c:	f7ff fdfa 	bl	8000f54 <IsMechanismTypeAllowed>
 8001360:	2801      	cmp	r0, #1
 8001362:	d13e      	bne.n	80013e2 <STSAFE_P11_VerifyInit+0xe6>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_CLASS, p_template_embedded, ul_count_embedded) != CKR_OK)
 8001364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001368:	4629      	mov	r1, r5
 800136a:	a803      	add	r0, sp, #12
 800136c:	f001 fc9a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001370:	2800      	cmp	r0, #0
 8001372:	d1e3      	bne.n	800133c <STSAFE_P11_VerifyInit+0x40>
  if (*((CK_OBJECT_CLASS *)(p_attribute_tmp->pValue)) != CKO_PUBLIC_KEY)
 8001374:	9b03      	ldr	r3, [sp, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d001      	beq.n	8001382 <STSAFE_P11_VerifyInit+0x86>
    return CKR_KEY_TYPE_INCONSISTENT;
 800137e:	2063      	movs	r0, #99	; 0x63
 8001380:	e7dd      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_KEY_TYPE, p_template_embedded,
 8001382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	a803      	add	r0, sp, #12
 800138c:	f001 fc8a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001390:	2800      	cmp	r0, #0
 8001392:	d1d3      	bne.n	800133c <STSAFE_P11_VerifyInit+0x40>
  if (*((CK_KEY_TYPE *)(p_attribute_tmp->pValue)) != CKK_EC)
 8001394:	9b03      	ldr	r3, [sp, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d1ef      	bne.n	800137e <STSAFE_P11_VerifyInit+0x82>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_VERIFY, p_template_embedded, ul_count_embedded)
 800139e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013a2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80013a6:	a803      	add	r0, sp, #12
 80013a8:	f001 fc7c 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d1c5      	bne.n	800133c <STSAFE_P11_VerifyInit+0x40>
  if (*((CK_BBOOL *)(p_attribute_tmp->pValue)) != CK_TRUE)
 80013b0:	9b03      	ldr	r3, [sp, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	2a01      	cmp	r2, #1
 80013b8:	d115      	bne.n	80013e6 <STSAFE_P11_VerifyInit+0xea>
  if (SessionOperationSetObjects(hSession, &hObject, 1) != CKR_OK)
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ff83 	bl	80012c8 <SessionOperationSetObjects>
    return CKR_FUNCTION_FAILED;
 80013c2:	2800      	cmp	r0, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2006      	movne	r0, #6
 80013c8:	2000      	moveq	r0, #0
 80013ca:	e7b8      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_ARGUMENTS_BAD;
 80013cc:	2007      	movs	r0, #7
 80013ce:	e7b6      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80013d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013d4:	e7b3      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_SESSION_HANDLE_INVALID;
 80013d6:	20b3      	movs	r0, #179	; 0xb3
 80013d8:	e7b1      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_SESSION_CLOSED;
 80013da:	20b0      	movs	r0, #176	; 0xb0
 80013dc:	e7af      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_OPERATION_ACTIVE;
 80013de:	2090      	movs	r0, #144	; 0x90
 80013e0:	e7ad      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_MECHANISM_INVALID;
 80013e2:	2070      	movs	r0, #112	; 0x70
 80013e4:	e7ab      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
    return CKR_KEY_FUNCTION_NOT_PERMITTED;
 80013e6:	2068      	movs	r0, #104	; 0x68
 80013e8:	e7a9      	b.n	800133e <STSAFE_P11_VerifyInit+0x42>
 80013ea:	bf00      	nop
 80013ec:	2000218c 	.word	0x2000218c
 80013f0:	40000600 	.word	0x40000600

080013f4 <STSAFE_P11_SignInit>:
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	4604      	mov	r4, r0
 80013fa:	9201      	str	r2, [sp, #4]
  if (pMechanism == NULL_PTR)
 80013fc:	460e      	mov	r6, r1
 80013fe:	2900      	cmp	r1, #0
 8001400:	d060      	beq.n	80014c4 <STSAFE_P11_SignInit+0xd0>
  if (uInitialized == CK_FALSE)
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <STSAFE_P11_SignInit+0xf0>)
 8001404:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d05d      	beq.n	80014c8 <STSAFE_P11_SignInit+0xd4>
  if (SessionIsValid(hSession) != CKR_OK)
 800140c:	f7ff fd0e 	bl	8000e2c <SessionIsValid>
 8001410:	2800      	cmp	r0, #0
 8001412:	d15c      	bne.n	80014ce <STSAFE_P11_SignInit+0xda>
  if (SessionIsOpen(hSession) != CKR_OK)
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff fd19 	bl	8000e4c <SessionIsOpen>
 800141a:	2800      	cmp	r0, #0
 800141c:	d159      	bne.n	80014d2 <STSAFE_P11_SignInit+0xde>
  if (SessionOperationIsActive(hSession) == CKR_OK)
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff fd2a 	bl	8000e78 <SessionOperationIsActive>
 8001424:	2800      	cmp	r0, #0
 8001426:	d056      	beq.n	80014d6 <STSAFE_P11_SignInit+0xe2>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) != CKR_OK)
 8001428:	9a01      	ldr	r2, [sp, #4]
 800142a:	a905      	add	r1, sp, #20
 800142c:	a804      	add	r0, sp, #16
 800142e:	f001 fc1b 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001432:	b110      	cbz	r0, 800143a <STSAFE_P11_SignInit+0x46>
    return CKR_KEY_HANDLE_INVALID;
 8001434:	2060      	movs	r0, #96	; 0x60
}
 8001436:	b006      	add	sp, #24
 8001438:	bd70      	pop	{r4, r5, r6, pc}
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_ALLOWED_MECHANISMS, p_template_embedded,
 800143a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800143e:	492a      	ldr	r1, [pc, #168]	; (80014e8 <STSAFE_P11_SignInit+0xf4>)
 8001440:	a803      	add	r0, sp, #12
 8001442:	f001 fc2f 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001446:	4605      	mov	r5, r0
 8001448:	2800      	cmp	r0, #0
 800144a:	d1f3      	bne.n	8001434 <STSAFE_P11_SignInit+0x40>
  if (IsMechanismTypeAllowed((CK_MECHANISM_TYPE)(pMechanism->mechanism), (CK_MECHANISM_PTR)p_attribute_tmp->pValue,
 800144c:	9b03      	ldr	r3, [sp, #12]
 800144e:	6830      	ldr	r0, [r6, #0]
 8001450:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
 8001454:	f7ff fd7e 	bl	8000f54 <IsMechanismTypeAllowed>
 8001458:	2801      	cmp	r0, #1
 800145a:	d13e      	bne.n	80014da <STSAFE_P11_SignInit+0xe6>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_CLASS, p_template_embedded, ul_count_embedded) != CKR_OK)
 800145c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001460:	4629      	mov	r1, r5
 8001462:	a803      	add	r0, sp, #12
 8001464:	f001 fc1e 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001468:	2800      	cmp	r0, #0
 800146a:	d1e3      	bne.n	8001434 <STSAFE_P11_SignInit+0x40>
  if (*((CK_OBJECT_CLASS *)(p_attribute_tmp->pValue)) != CKO_PRIVATE_KEY)
 800146c:	9b03      	ldr	r3, [sp, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d001      	beq.n	800147a <STSAFE_P11_SignInit+0x86>
    return CKR_KEY_TYPE_INCONSISTENT;
 8001476:	2063      	movs	r0, #99	; 0x63
 8001478:	e7dd      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_KEY_TYPE, p_template_embedded,
 800147a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800147e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001482:	a803      	add	r0, sp, #12
 8001484:	f001 fc0e 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001488:	2800      	cmp	r0, #0
 800148a:	d1d3      	bne.n	8001434 <STSAFE_P11_SignInit+0x40>
  if (*((CK_KEY_TYPE *)(p_attribute_tmp->pValue)) != CKK_EC)
 800148c:	9b03      	ldr	r3, [sp, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d1ef      	bne.n	8001476 <STSAFE_P11_SignInit+0x82>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_SIGN, p_template_embedded, ul_count_embedded) != CKR_OK)
 8001496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800149a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800149e:	a803      	add	r0, sp, #12
 80014a0:	f001 fc00 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1c5      	bne.n	8001434 <STSAFE_P11_SignInit+0x40>
  if (*((CK_BBOOL *)(p_attribute_tmp->pValue)) != CK_TRUE)
 80014a8:	9b03      	ldr	r3, [sp, #12]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d115      	bne.n	80014de <STSAFE_P11_SignInit+0xea>
  if (SessionOperationSetObjects(hSession, &hObject, 1U) != CKR_OK)
 80014b2:	a901      	add	r1, sp, #4
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff ff07 	bl	80012c8 <SessionOperationSetObjects>
    return CKR_FUNCTION_FAILED;
 80014ba:	2800      	cmp	r0, #0
 80014bc:	bf14      	ite	ne
 80014be:	2006      	movne	r0, #6
 80014c0:	2000      	moveq	r0, #0
 80014c2:	e7b8      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_ARGUMENTS_BAD;
 80014c4:	2007      	movs	r0, #7
 80014c6:	e7b6      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80014c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014cc:	e7b3      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_SESSION_HANDLE_INVALID;
 80014ce:	20b3      	movs	r0, #179	; 0xb3
 80014d0:	e7b1      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_SESSION_CLOSED;
 80014d2:	20b0      	movs	r0, #176	; 0xb0
 80014d4:	e7af      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_OPERATION_ACTIVE;
 80014d6:	2090      	movs	r0, #144	; 0x90
 80014d8:	e7ad      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_MECHANISM_INVALID;
 80014da:	2070      	movs	r0, #112	; 0x70
 80014dc:	e7ab      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
    return CKR_KEY_FUNCTION_NOT_PERMITTED;
 80014de:	2068      	movs	r0, #104	; 0x68
 80014e0:	e7a9      	b.n	8001436 <STSAFE_P11_SignInit+0x42>
 80014e2:	bf00      	nop
 80014e4:	2000218c 	.word	0x2000218c
 80014e8:	40000600 	.word	0x40000600

080014ec <STSAFE_P11_FindObjectsInit>:
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4604      	mov	r4, r0
 80014f0:	b090      	sub	sp, #64	; 0x40
 80014f2:	4615      	mov	r5, r2
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || (ulCount > STSAFE_P11_MAX_TEMPLATE_SIZE))
 80014f4:	460e      	mov	r6, r1
 80014f6:	b911      	cbnz	r1, 80014fe <STSAFE_P11_FindObjectsInit+0x12>
 80014f8:	b11a      	cbz	r2, 8001502 <STSAFE_P11_FindObjectsInit+0x16>
    return CKR_ARGUMENTS_BAD;
 80014fa:	2007      	movs	r0, #7
 80014fc:	e023      	b.n	8001546 <STSAFE_P11_FindObjectsInit+0x5a>
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || (ulCount > STSAFE_P11_MAX_TEMPLATE_SIZE))
 80014fe:	2a15      	cmp	r2, #21
 8001500:	d8fb      	bhi.n	80014fa <STSAFE_P11_FindObjectsInit+0xe>
  if (uInitialized == CK_FALSE)
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <STSAFE_P11_FindObjectsInit+0x70>)
 8001504:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001508:	b1fb      	cbz	r3, 800154a <STSAFE_P11_FindObjectsInit+0x5e>
  if (SessionIsValid(hSession) != CKR_OK)
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff fc8e 	bl	8000e2c <SessionIsValid>
 8001510:	b9f0      	cbnz	r0, 8001550 <STSAFE_P11_FindObjectsInit+0x64>
  if (SessionIsOpen(hSession) != CKR_OK)
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fc9a 	bl	8000e4c <SessionIsOpen>
 8001518:	b9e0      	cbnz	r0, 8001554 <STSAFE_P11_FindObjectsInit+0x68>
  if (SessionOperationIsActive(hSession) == CKR_OK)
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff fcac 	bl	8000e78 <SessionOperationIsActive>
 8001520:	b1d0      	cbz	r0, 8001558 <STSAFE_P11_FindObjectsInit+0x6c>
  e_ret_status = FindObjectsFromTemplate(hSession, &h_found_object[0U], sizeof(h_found_object) /
 8001522:	e9cd 6500 	strd	r6, r5, [sp]
 8001526:	ab03      	add	r3, sp, #12
 8001528:	220c      	movs	r2, #12
 800152a:	a904      	add	r1, sp, #16
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fbfb 	bl	8000d28 <FindObjectsFromTemplate>
  if (e_ret_status != CKR_OK)
 8001532:	b940      	cbnz	r0, 8001546 <STSAFE_P11_FindObjectsInit+0x5a>
  if (SessionOperationSetObjects(hSession, &h_found_object[0U], ul_object_count) != CKR_OK)
 8001534:	9a03      	ldr	r2, [sp, #12]
 8001536:	a904      	add	r1, sp, #16
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fec5 	bl	80012c8 <SessionOperationSetObjects>
    return CKR_FUNCTION_FAILED;
 800153e:	2800      	cmp	r0, #0
 8001540:	bf14      	ite	ne
 8001542:	2006      	movne	r0, #6
 8001544:	2000      	moveq	r0, #0
}
 8001546:	b010      	add	sp, #64	; 0x40
 8001548:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800154a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800154e:	e7fa      	b.n	8001546 <STSAFE_P11_FindObjectsInit+0x5a>
    return CKR_SESSION_HANDLE_INVALID;
 8001550:	20b3      	movs	r0, #179	; 0xb3
 8001552:	e7f8      	b.n	8001546 <STSAFE_P11_FindObjectsInit+0x5a>
    return CKR_SESSION_CLOSED;
 8001554:	20b0      	movs	r0, #176	; 0xb0
 8001556:	e7f6      	b.n	8001546 <STSAFE_P11_FindObjectsInit+0x5a>
    return CKR_OPERATION_ACTIVE;
 8001558:	2090      	movs	r0, #144	; 0x90
 800155a:	e7f4      	b.n	8001546 <STSAFE_P11_FindObjectsInit+0x5a>
 800155c:	2000218c 	.word	0x2000218c

08001560 <SessionOperationFinish>:
{
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	4605      	mov	r5, r0
  if (SessionIsValid(hSession) != CKR_OK)
 8001564:	f7ff fc62 	bl	8000e2c <SessionIsValid>
 8001568:	4604      	mov	r4, r0
 800156a:	b970      	cbnz	r0, 800158a <SessionOperationFinish+0x2a>
  ul_session_index = hSession - STSAFE_P11_SESSION_INDEX_OFFSET;
 800156c:	1e6b      	subs	r3, r5, #1
  (void)memset(a_SessionList[ul_session_index].OperationObjects, 0U,
 800156e:	264c      	movs	r6, #76	; 0x4c
 8001570:	4d07      	ldr	r5, [pc, #28]	; (8001590 <SessionOperationFinish+0x30>)
 8001572:	435e      	muls	r6, r3
 8001574:	19a8      	adds	r0, r5, r6
  a_SessionList[ul_session_index].ulOperationObjectsCount = 0UL;
 8001576:	4435      	add	r5, r6
  (void)memset(a_SessionList[ul_session_index].OperationObjects, 0U,
 8001578:	2230      	movs	r2, #48	; 0x30
 800157a:	4621      	mov	r1, r4
 800157c:	301c      	adds	r0, #28
 800157e:	f015 fac0 	bl	8016b02 <memset>
  a_SessionList[ul_session_index].ulOperationObjectsCount = 0UL;
 8001582:	64ec      	str	r4, [r5, #76]	; 0x4c
  a_SessionList[ul_session_index].OperationActive = CK_FALSE;
 8001584:	762c      	strb	r4, [r5, #24]
}
 8001586:	4620      	mov	r0, r4
 8001588:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_SESSION_HANDLE_INVALID;
 800158a:	24b3      	movs	r4, #179	; 0xb3
 800158c:	e7fb      	b.n	8001586 <SessionOperationFinish+0x26>
 800158e:	bf00      	nop
 8001590:	2000218c 	.word	0x2000218c

08001594 <STSAFE_P11_Verify>:
{
 8001594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001598:	b0ef      	sub	sp, #444	; 0x1bc
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 800159a:	2430      	movs	r4, #48	; 0x30
{
 800159c:	469a      	mov	sl, r3
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 800159e:	ab1a      	add	r3, sp, #104	; 0x68
{
 80015a0:	9106      	str	r1, [sp, #24]
 80015a2:	4605      	mov	r5, r0
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
{
 80015a8:	4690      	mov	r8, r2
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 80015aa:	4622      	mov	r2, r4
{
 80015ac:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 80015ae:	f015 faa8 	bl	8016b02 <memset>
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_r,
 80015b2:	ab26      	add	r3, sp, #152	; 0x98
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 80015b4:	9011      	str	r0, [sp, #68]	; 0x44
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_r,
 80015b6:	4622      	mov	r2, r4
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, hash,
 80015bc:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_r,
 80015c0:	f015 fa9f 	bl	8016b02 <memset>
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_s,
 80015c4:	ab32      	add	r3, sp, #200	; 0xc8
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_r,
 80015c6:	9013      	str	r0, [sp, #76]	; 0x4c
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_s,
 80015c8:	4622      	mov	r2, r4
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_r,
 80015ce:	f8ad 4048 	strh.w	r4, [sp, #72]	; 0x48
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_s,
 80015d2:	f015 fa96 	bl	8016b02 <memset>
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 80015d6:	ab3e      	add	r3, sp, #248	; 0xf8
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_s,
 80015d8:	9015      	str	r0, [sp, #84]	; 0x54
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 80015da:	4622      	mov	r2, r4
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, sig_s,
 80015e0:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 80015e4:	f015 fa8d 	bl	8016b02 <memset>
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 80015e8:	ab4a      	add	r3, sp, #296	; 0x128
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 80015ea:	9017      	str	r0, [sp, #92]	; 0x5c
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 80015ec:	4622      	mov	r2, r4
 80015ee:	4618      	mov	r0, r3
 80015f0:	2100      	movs	r1, #0
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_x,
 80015f2:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 80015f6:	f015 fa84 	bl	8016b02 <memset>
  if ((pData == NULL_PTR) || (pSignature == NULL_PTR))
 80015fa:	9b06      	ldr	r3, [sp, #24]
  STSAFEA_STATIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, pub_y,
 80015fc:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
 8001600:	9019      	str	r0, [sp, #100]	; 0x64
  if ((pData == NULL_PTR) || (pSignature == NULL_PTR))
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80c9 	beq.w	800179a <STSAFE_P11_Verify+0x206>
 8001608:	f1ba 0f00 	cmp.w	sl, #0
 800160c:	f000 80c5 	beq.w	800179a <STSAFE_P11_Verify+0x206>
  if (uInitialized == CK_FALSE)
 8001610:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <STSAFE_P11_Verify+0x21c>)
 8001612:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80c1 	beq.w	800179e <STSAFE_P11_Verify+0x20a>
  if (SessionIsValid(hSession) != CKR_OK)
 800161c:	4628      	mov	r0, r5
 800161e:	f7ff fc05 	bl	8000e2c <SessionIsValid>
 8001622:	2800      	cmp	r0, #0
 8001624:	f040 80be 	bne.w	80017a4 <STSAFE_P11_Verify+0x210>
  if (SessionIsOpen(hSession) != CKR_OK)
 8001628:	4628      	mov	r0, r5
 800162a:	f7ff fc0f 	bl	8000e4c <SessionIsOpen>
 800162e:	2800      	cmp	r0, #0
 8001630:	f040 80ba 	bne.w	80017a8 <STSAFE_P11_Verify+0x214>
  if (SessionOperationIsActive(hSession) != CKR_OK)
 8001634:	4628      	mov	r0, r5
 8001636:	f7ff fc1f 	bl	8000e78 <SessionOperationIsActive>
 800163a:	2800      	cmp	r0, #0
 800163c:	f040 80b6 	bne.w	80017ac <STSAFE_P11_Verify+0x218>
  if (SessionOperationGetObjects(hSession, &h_object, 1, &ul_object_count) != CKR_OK)
 8001640:	ab0d      	add	r3, sp, #52	; 0x34
 8001642:	2201      	movs	r2, #1
 8001644:	a909      	add	r1, sp, #36	; 0x24
 8001646:	4628      	mov	r0, r5
 8001648:	f7ff fc2a 	bl	8000ea0 <SessionOperationGetObjects>
 800164c:	b138      	cbz	r0, 800165e <STSAFE_P11_Verify+0xca>
    SessionOperationFinish(hSession);
 800164e:	4628      	mov	r0, r5
 8001650:	f7ff ff86 	bl	8001560 <SessionOperationFinish>
    return CKR_FUNCTION_FAILED;
 8001654:	2406      	movs	r4, #6
}
 8001656:	4620      	mov	r0, r4
 8001658:	b06f      	add	sp, #444	; 0x1bc
 800165a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template, &ul_count, h_object) != CKR_OK)
 800165e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001660:	a90c      	add	r1, sp, #48	; 0x30
 8001662:	a80b      	add	r0, sp, #44	; 0x2c
 8001664:	f001 fb00 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001668:	2800      	cmp	r0, #0
 800166a:	d1f0      	bne.n	800164e <STSAFE_P11_Verify+0xba>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_PARAMS, p_template, ul_count) != CKR_OK)
 800166c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8001670:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001674:	a80a      	add	r0, sp, #40	; 0x28
 8001676:	f001 fb15 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800167a:	2800      	cmp	r0, #0
 800167c:	d1e7      	bne.n	800164e <STSAFE_P11_Verify+0xba>
  if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_256_DER, p_attribute_tmp->ulValueLen) == 0)
 800167e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001680:	494c      	ldr	r1, [pc, #304]	; (80017b4 <STSAFE_P11_Verify+0x220>)
 8001682:	e9d3 4601 	ldrd	r4, r6, [r3, #4]
 8001686:	4632      	mov	r2, r6
 8001688:	4620      	mov	r0, r4
 800168a:	f015 fa07 	bl	8016a9c <memcmp>
 800168e:	b188      	cbz	r0, 80016b4 <STSAFE_P11_Verify+0x120>
  else if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_384_DER, p_attribute_tmp->ulValueLen) == 0)
 8001690:	4632      	mov	r2, r6
 8001692:	4949      	ldr	r1, [pc, #292]	; (80017b8 <STSAFE_P11_Verify+0x224>)
 8001694:	4620      	mov	r0, r4
 8001696:	f015 fa01 	bl	8016a9c <memcmp>
 800169a:	2800      	cmp	r0, #0
 800169c:	d1d7      	bne.n	800164e <STSAFE_P11_Verify+0xba>
    ul_data_len = STSAFEA_SHA_384_LENGTH;
 800169e:	2630      	movs	r6, #48	; 0x30
    curve = STSAFEA_NIST_P_384;
 80016a0:	f04f 0b01 	mov.w	fp, #1
  if (ulSignatureLen != (ul_data_len * 2UL))
 80016a4:	ebb7 0f46 	cmp.w	r7, r6, lsl #1
 80016a8:	d008      	beq.n	80016bc <STSAFE_P11_Verify+0x128>
    SessionOperationFinish(hSession);
 80016aa:	4628      	mov	r0, r5
 80016ac:	f7ff ff58 	bl	8001560 <SessionOperationFinish>
    return CKR_SIGNATURE_LEN_RANGE;
 80016b0:	24c1      	movs	r4, #193	; 0xc1
 80016b2:	e7d0      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    ul_data_len =  STSAFEA_SHA_256_LENGTH;
 80016b4:	2620      	movs	r6, #32
    curve = STSAFEA_NIST_P_256;
 80016b6:	f04f 0b00 	mov.w	fp, #0
 80016ba:	e7f3      	b.n	80016a4 <STSAFE_P11_Verify+0x110>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_POINT, p_template, ul_count) != CKR_OK)
 80016bc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80016c0:	f240 1181 	movw	r1, #385	; 0x181
 80016c4:	a80a      	add	r0, sp, #40	; 0x28
 80016c6:	f001 faed 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d1bf      	bne.n	800164e <STSAFE_P11_Verify+0xba>
  if (DecodeDerASN1UncompressedEcPoint(p_public_data_raw, &ul_public_data_raw_len, p_attribute_tmp->pValue,
 80016ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016d0:	a90e      	add	r1, sp, #56	; 0x38
 80016d2:	e9d2 2301 	ldrd	r2, r3, [r2, #4]
 80016d6:	a856      	add	r0, sp, #344	; 0x158
 80016d8:	f7ff fc94 	bl	8001004 <DecodeDerASN1UncompressedEcPoint>
 80016dc:	4604      	mov	r4, r0
 80016de:	b120      	cbz	r0, 80016ea <STSAFE_P11_Verify+0x156>
    SessionOperationFinish(hSession);
 80016e0:	4628      	mov	r0, r5
 80016e2:	f7ff ff3d 	bl	8001560 <SessionOperationFinish>
    return CKR_DATA_INVALID;
 80016e6:	2420      	movs	r4, #32
 80016e8:	e7b5      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
  if ((ulDataLen != ul_data_len) || (ulDataLen != (ul_public_data_raw_len / 2UL)))
 80016ea:	4546      	cmp	r6, r8
 80016ec:	d103      	bne.n	80016f6 <STSAFE_P11_Verify+0x162>
 80016ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016f0:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
 80016f4:	d004      	beq.n	8001700 <STSAFE_P11_Verify+0x16c>
    SessionOperationFinish(hSession);
 80016f6:	4628      	mov	r0, r5
 80016f8:	f7ff ff32 	bl	8001560 <SessionOperationFinish>
    return CKR_DATA_LEN_RANGE;
 80016fc:	2421      	movs	r4, #33	; 0x21
 80016fe:	e7aa      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
  (void)memcpy(pub_x.Data, &p_public_data_raw[0], pub_x.Length);
 8001700:	4632      	mov	r2, r6
 8001702:	a956      	add	r1, sp, #344	; 0x158
 8001704:	9817      	ldr	r0, [sp, #92]	; 0x5c
  pub_x.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 8001706:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
  (void)memcpy(pub_x.Data, &p_public_data_raw[0], pub_x.Length);
 800170a:	f015 f9d6 	bl	8016aba <memcpy>
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 800170e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 8001710:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 8001714:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001716:	ab56      	add	r3, sp, #344	; 0x158
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 8001718:	0852      	lsrs	r2, r2, #1
  sig_r.Length = (uint16_t)(ulSignatureLen / 2UL);
 800171a:	087f      	lsrs	r7, r7, #1
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 800171c:	4419      	add	r1, r3
  pub_y.Length = (uint16_t)(ul_public_data_raw_len / 2UL);
 800171e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
  sig_r.Length = (uint16_t)(ulSignatureLen / 2UL);
 8001722:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  (void)memcpy(pub_y.Data, &p_public_data_raw[pub_x.Length], pub_y.Length);
 8001726:	b292      	uxth	r2, r2
 8001728:	f015 f9c7 	bl	8016aba <memcpy>
  sig_r.Length = (uint16_t)(ulSignatureLen / 2UL);
 800172c:	b2bb      	uxth	r3, r7
  (void)memcpy(sig_r.Data, &pSignature[0], sig_r.Length);
 800172e:	463a      	mov	r2, r7
 8001730:	4651      	mov	r1, sl
 8001732:	9813      	ldr	r0, [sp, #76]	; 0x4c
  sig_r.Length = (uint16_t)(ulSignatureLen / 2UL);
 8001734:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 8001738:	9307      	str	r3, [sp, #28]
  (void)memcpy(sig_r.Data, &pSignature[0], sig_r.Length);
 800173a:	f015 f9be 	bl	8016aba <memcpy>
  (void)memcpy(sig_s.Data, &pSignature[sig_r.Length], sig_s.Length);
 800173e:	f8b8 1000 	ldrh.w	r1, [r8]
  sig_s.Length = (uint16_t)(ulSignatureLen / 2UL);
 8001742:	9b07      	ldr	r3, [sp, #28]
  (void)memcpy(sig_s.Data, &pSignature[sig_r.Length], sig_s.Length);
 8001744:	9815      	ldr	r0, [sp, #84]	; 0x54
  sig_s.Length = (uint16_t)(ulSignatureLen / 2UL);
 8001746:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  (void)memcpy(sig_s.Data, &pSignature[sig_r.Length], sig_s.Length);
 800174a:	463a      	mov	r2, r7
 800174c:	4451      	add	r1, sl
 800174e:	f015 f9b4 	bl	8016aba <memcpy>
  (void)memcpy(hash.Data, pData, hash.Length);
 8001752:	4632      	mov	r2, r6
 8001754:	9906      	ldr	r1, [sp, #24]
 8001756:	9811      	ldr	r0, [sp, #68]	; 0x44
  hash.Length = (uint16_t)ul_data_len;
 8001758:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
  sig_s.Length = (uint16_t)(ulSignatureLen / 2UL);
 800175c:	f10d 0950 	add.w	r9, sp, #80	; 0x50
  (void)memcpy(hash.Data, pData, hash.Length);
 8001760:	f015 f9ab 	bl	8016aba <memcpy>
  hash.Length = (uint16_t)ul_data_len;
 8001764:	af10      	add	r7, sp, #64	; 0x40
  if (StSafeA_VerifyMessageSignature(&hStSafe, curve, &pub_x, &pub_y, &sig_r, &sig_s, &hash, &verif,
 8001766:	23e0      	movs	r3, #224	; 0xe0
 8001768:	ae0f      	add	r6, sp, #60	; 0x3c
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8001770:	e9cd 8900 	strd	r8, r9, [sp]
 8001774:	ab18      	add	r3, sp, #96	; 0x60
 8001776:	aa16      	add	r2, sp, #88	; 0x58
 8001778:	4659      	mov	r1, fp
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <STSAFE_P11_Verify+0x228>)
 800177c:	f007 ff8e 	bl	800969c <StSafeA_VerifyMessageSignature>
 8001780:	2800      	cmp	r0, #0
 8001782:	f47f af64 	bne.w	800164e <STSAFE_P11_Verify+0xba>
  if (verif.SignatureValidity == 0U)
 8001786:	78b3      	ldrb	r3, [r6, #2]
    SessionOperationFinish(hSession);
 8001788:	4628      	mov	r0, r5
  if (verif.SignatureValidity == 0U)
 800178a:	b91b      	cbnz	r3, 8001794 <STSAFE_P11_Verify+0x200>
    SessionOperationFinish(hSession);
 800178c:	f7ff fee8 	bl	8001560 <SessionOperationFinish>
    return CKR_SIGNATURE_INVALID;
 8001790:	24c0      	movs	r4, #192	; 0xc0
 8001792:	e760      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
  SessionOperationFinish(hSession);
 8001794:	f7ff fee4 	bl	8001560 <SessionOperationFinish>
  return CKR_OK;
 8001798:	e75d      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    return CKR_ARGUMENTS_BAD;
 800179a:	2407      	movs	r4, #7
 800179c:	e75b      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800179e:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80017a2:	e758      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    return CKR_SESSION_HANDLE_INVALID;
 80017a4:	24b3      	movs	r4, #179	; 0xb3
 80017a6:	e756      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    return CKR_SESSION_CLOSED;
 80017a8:	24b0      	movs	r4, #176	; 0xb0
 80017aa:	e754      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
    return CKR_OPERATION_NOT_INITIALIZED;
 80017ac:	2491      	movs	r4, #145	; 0x91
 80017ae:	e752      	b.n	8001656 <STSAFE_P11_Verify+0xc2>
 80017b0:	2000218c 	.word	0x2000218c
 80017b4:	080197a4 	.word	0x080197a4
 80017b8:	08016fc0 	.word	0x08016fc0
 80017bc:	20002278 	.word	0x20002278

080017c0 <STSAFE_P11_FindObjectsFinal>:
{
 80017c0:	b510      	push	{r4, lr}
  if (uInitialized == CK_FALSE)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <STSAFE_P11_FindObjectsFinal+0x44>)
 80017c4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
{
 80017c8:	4604      	mov	r4, r0
  if (uInitialized == CK_FALSE)
 80017ca:	b193      	cbz	r3, 80017f2 <STSAFE_P11_FindObjectsFinal+0x32>
  if (SessionIsValid(hSession) != CKR_OK)
 80017cc:	f7ff fb2e 	bl	8000e2c <SessionIsValid>
 80017d0:	b990      	cbnz	r0, 80017f8 <STSAFE_P11_FindObjectsFinal+0x38>
  if (SessionIsOpen(hSession) != CKR_OK)
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fb3a 	bl	8000e4c <SessionIsOpen>
 80017d8:	b980      	cbnz	r0, 80017fc <STSAFE_P11_FindObjectsFinal+0x3c>
  if (SessionOperationIsActive(hSession) != CKR_OK)
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fb4c 	bl	8000e78 <SessionOperationIsActive>
 80017e0:	b970      	cbnz	r0, 8001800 <STSAFE_P11_FindObjectsFinal+0x40>
  if (SessionOperationFinish(hSession) != CKR_OK)
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff febc 	bl	8001560 <SessionOperationFinish>
    return CKR_FUNCTION_FAILED;
 80017e8:	2800      	cmp	r0, #0
 80017ea:	bf14      	ite	ne
 80017ec:	2006      	movne	r0, #6
 80017ee:	2000      	moveq	r0, #0
}
 80017f0:	bd10      	pop	{r4, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80017f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017f6:	e7fb      	b.n	80017f0 <STSAFE_P11_FindObjectsFinal+0x30>
    return CKR_SESSION_HANDLE_INVALID;
 80017f8:	20b3      	movs	r0, #179	; 0xb3
 80017fa:	e7f9      	b.n	80017f0 <STSAFE_P11_FindObjectsFinal+0x30>
    return CKR_SESSION_CLOSED;
 80017fc:	20b0      	movs	r0, #176	; 0xb0
 80017fe:	e7f7      	b.n	80017f0 <STSAFE_P11_FindObjectsFinal+0x30>
    return CKR_OPERATION_NOT_INITIALIZED;
 8001800:	2091      	movs	r0, #145	; 0x91
 8001802:	e7f5      	b.n	80017f0 <STSAFE_P11_FindObjectsFinal+0x30>
 8001804:	2000218c 	.word	0x2000218c

08001808 <STSAFE_P11_CloseSession>:
{
 8001808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (uInitialized == CK_FALSE)
 800180c:	4e30      	ldr	r6, [pc, #192]	; (80018d0 <STSAFE_P11_CloseSession+0xc8>)
 800180e:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
{
 8001812:	b087      	sub	sp, #28
 8001814:	4605      	mov	r5, r0
  if (uInitialized == CK_FALSE)
 8001816:	2b00      	cmp	r3, #0
 8001818:	d054      	beq.n	80018c4 <STSAFE_P11_CloseSession+0xbc>
  if (SessionIsValid(hSession) != CKR_OK)
 800181a:	f7ff fb07 	bl	8000e2c <SessionIsValid>
 800181e:	4604      	mov	r4, r0
 8001820:	2800      	cmp	r0, #0
 8001822:	d152      	bne.n	80018ca <STSAFE_P11_CloseSession+0xc2>
  if (SessionIsOpen(hSession) != CKR_OK)
 8001824:	4628      	mov	r0, r5
 8001826:	f7ff fb11 	bl	8000e4c <SessionIsOpen>
 800182a:	b930      	cbnz	r0, 800183a <STSAFE_P11_CloseSession+0x32>
  if (STSAFE_OBJ_GetObjectRange(&hObjectMin, &hObjectMax) != CKR_OK)
 800182c:	a902      	add	r1, sp, #8
 800182e:	a801      	add	r0, sp, #4
 8001830:	f001 fa78 	bl	8002d24 <STSAFE_OBJ_GetObjectRange>
 8001834:	4604      	mov	r4, r0
 8001836:	b120      	cbz	r0, 8001842 <STSAFE_P11_CloseSession+0x3a>
    return CKR_GENERAL_ERROR;
 8001838:	2405      	movs	r4, #5
}
 800183a:	4620      	mov	r0, r4
 800183c:	b007      	add	sp, #28
 800183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  hObject = hObjectMin;
 8001842:	9f01      	ldr	r7, [sp, #4]
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 8001844:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80018d4 <STSAFE_P11_CloseSession+0xcc>
  while (hObject < hObjectMax)
 8001848:	9b02      	ldr	r3, [sp, #8]
 800184a:	429f      	cmp	r7, r3
 800184c:	d31e      	bcc.n	800188c <STSAFE_P11_CloseSession+0x84>
  ul_session_index = hSession - STSAFE_P11_SESSION_INDEX_OFFSET;
 800184e:	1e68      	subs	r0, r5, #1
  a_SessionList[ul_session_index].SessionHandle = CK_INVALID_HANDLE;
 8001850:	254c      	movs	r5, #76	; 0x4c
 8001852:	4345      	muls	r5, r0
 8001854:	eb06 0805 	add.w	r8, r6, r5
  (void)memset(&(a_SessionList[ul_session_index].SessionInfo), 0U, sizeof(CK_SESSION_INFO));
 8001858:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80018d8 <STSAFE_P11_CloseSession+0xd0>
  a_SessionList[ul_session_index].SessionHandle = CK_INVALID_HANDLE;
 800185c:	2700      	movs	r7, #0
  (void)memset(&(a_SessionList[ul_session_index].SessionInfo), 0U, sizeof(CK_SESSION_INFO));
 800185e:	1d28      	adds	r0, r5, #4
 8001860:	2210      	movs	r2, #16
 8001862:	4639      	mov	r1, r7
  a_SessionList[ul_session_index].SessionHandle = CK_INVALID_HANDLE;
 8001864:	f8c8 7004 	str.w	r7, [r8, #4]
  (void)memset(&(a_SessionList[ul_session_index].SessionInfo), 0U, sizeof(CK_SESSION_INFO));
 8001868:	4448      	add	r0, r9
 800186a:	f015 f94a 	bl	8016b02 <memset>
  (void)memset(a_SessionList[ul_session_index].OperationObjects, CK_INVALID_HANDLE,
 800186e:	f105 0018 	add.w	r0, r5, #24
  a_SessionList[ul_session_index].OperationActive = CK_FALSE;
 8001872:	f888 7018 	strb.w	r7, [r8, #24]
  (void)memset(a_SessionList[ul_session_index].OperationObjects, CK_INVALID_HANDLE,
 8001876:	2230      	movs	r2, #48	; 0x30
 8001878:	4639      	mov	r1, r7
 800187a:	4448      	add	r0, r9
 800187c:	f015 f941 	bl	8016b02 <memset>
  ulSessionNb--;
 8001880:	6833      	ldr	r3, [r6, #0]
  a_SessionList[ul_session_index].ulOperationObjectsCount = 0UL;
 8001882:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
  ulSessionNb--;
 8001886:	3b01      	subs	r3, #1
 8001888:	6033      	str	r3, [r6, #0]
 800188a:	e7d6      	b.n	800183a <STSAFE_P11_CloseSession+0x32>
    if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) != CKR_OK)
 800188c:	463a      	mov	r2, r7
 800188e:	a905      	add	r1, sp, #20
 8001890:	a803      	add	r0, sp, #12
 8001892:	f001 f9e9 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001896:	2800      	cmp	r0, #0
 8001898:	d1ce      	bne.n	8001838 <STSAFE_P11_CloseSession+0x30>
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_SESSION_HANDLE, p_template_embedded,
 800189a:	4641      	mov	r1, r8
 800189c:	9b05      	ldr	r3, [sp, #20]
 800189e:	9a03      	ldr	r2, [sp, #12]
 80018a0:	a804      	add	r0, sp, #16
 80018a2:	f001 f9ff 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80018a6:	4601      	mov	r1, r0
 80018a8:	b108      	cbz	r0, 80018ae <STSAFE_P11_CloseSession+0xa6>
    hObject++;
 80018aa:	3701      	adds	r7, #1
 80018ac:	e7cc      	b.n	8001848 <STSAFE_P11_CloseSession+0x40>
      if ((*((CK_VENDOR_SESSION_HANDLE *)(p_attribute_embedded->pValue))) == hSession)
 80018ae:	9b04      	ldr	r3, [sp, #16]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429d      	cmp	r5, r3
 80018b6:	d1f8      	bne.n	80018aa <STSAFE_P11_CloseSession+0xa2>
        if (ObjectSetSession(hObject, CK_INVALID_HANDLE) != CKR_OK)
 80018b8:	4638      	mov	r0, r7
 80018ba:	f7ff fa17 	bl	8000cec <ObjectSetSession>
 80018be:	2800      	cmp	r0, #0
 80018c0:	d0f3      	beq.n	80018aa <STSAFE_P11_CloseSession+0xa2>
 80018c2:	e7b9      	b.n	8001838 <STSAFE_P11_CloseSession+0x30>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80018c4:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80018c8:	e7b7      	b.n	800183a <STSAFE_P11_CloseSession+0x32>
    return CKR_SESSION_HANDLE_INVALID;
 80018ca:	24b3      	movs	r4, #179	; 0xb3
 80018cc:	e7b5      	b.n	800183a <STSAFE_P11_CloseSession+0x32>
 80018ce:	bf00      	nop
 80018d0:	2000218c 	.word	0x2000218c
 80018d4:	80000004 	.word	0x80000004
 80018d8:	20002190 	.word	0x20002190

080018dc <STSAFE_P11_Finalize>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
  if (pvReserved != NULL_PTR)
 80018de:	4604      	mov	r4, r0
 80018e0:	b968      	cbnz	r0, 80018fe <STSAFE_P11_Finalize+0x22>
  if (uInitialized == CK_FALSE)
 80018e2:	4d09      	ldr	r5, [pc, #36]	; (8001908 <STSAFE_P11_Finalize+0x2c>)
 80018e4:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
 80018e8:	b15b      	cbz	r3, 8001902 <STSAFE_P11_Finalize+0x26>
  (void)memset(((StSafeA_Handle_t *)(&hStSafe)), 0, sizeof(hStSafe));
 80018ea:	4601      	mov	r1, r0
 80018ec:	2250      	movs	r2, #80	; 0x50
 80018ee:	f105 00ec 	add.w	r0, r5, #236	; 0xec
 80018f2:	f015 f906 	bl	8016b02 <memset>
  uInitialized = CK_FALSE;
 80018f6:	f885 40e8 	strb.w	r4, [r5, #232]	; 0xe8
 80018fa:	4620      	mov	r0, r4
}
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
    return CKR_ARGUMENTS_BAD;
 80018fe:	2007      	movs	r0, #7
 8001900:	e7fc      	b.n	80018fc <STSAFE_P11_Finalize+0x20>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8001902:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001906:	e7f9      	b.n	80018fc <STSAFE_P11_Finalize+0x20>
 8001908:	2000218c 	.word	0x2000218c

0800190c <STSAFE_P11_Sign>:
{
 800190c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001910:	b08b      	sub	sp, #44	; 0x2c
 8001912:	4605      	mov	r5, r0
 8001914:	4693      	mov	fp, r2
 8001916:	469a      	mov	sl, r3
 8001918:	9f14      	ldr	r7, [sp, #80]	; 0x50
  if ((pData == NULL_PTR) || (ulDataLen == 0UL) || (pulSignatureLen == NULL_PTR))
 800191a:	4688      	mov	r8, r1
 800191c:	2900      	cmp	r1, #0
 800191e:	f000 80b3 	beq.w	8001a88 <STSAFE_P11_Sign+0x17c>
 8001922:	2a00      	cmp	r2, #0
 8001924:	f000 80b0 	beq.w	8001a88 <STSAFE_P11_Sign+0x17c>
 8001928:	2f00      	cmp	r7, #0
 800192a:	f000 80ad 	beq.w	8001a88 <STSAFE_P11_Sign+0x17c>
  if (uInitialized == CK_FALSE)
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <STSAFE_P11_Sign+0x190>)
 8001930:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a9 	beq.w	8001a8c <STSAFE_P11_Sign+0x180>
  if (SessionIsValid(hSession) != CKR_OK)
 800193a:	f7ff fa77 	bl	8000e2c <SessionIsValid>
 800193e:	b138      	cbz	r0, 8001950 <STSAFE_P11_Sign+0x44>
    SessionOperationFinish(hSession);
 8001940:	4628      	mov	r0, r5
 8001942:	f7ff fe0d 	bl	8001560 <SessionOperationFinish>
    return CKR_SESSION_HANDLE_INVALID;
 8001946:	24b3      	movs	r4, #179	; 0xb3
}
 8001948:	4620      	mov	r0, r4
 800194a:	b00b      	add	sp, #44	; 0x2c
 800194c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (SessionIsOpen(hSession) != CKR_OK)
 8001950:	4628      	mov	r0, r5
 8001952:	f7ff fa7b 	bl	8000e4c <SessionIsOpen>
 8001956:	2800      	cmp	r0, #0
 8001958:	f040 809b 	bne.w	8001a92 <STSAFE_P11_Sign+0x186>
  if (SessionOperationIsActive(hSession) != CKR_OK)
 800195c:	4628      	mov	r0, r5
 800195e:	f7ff fa8b 	bl	8000e78 <SessionOperationIsActive>
 8001962:	2800      	cmp	r0, #0
 8001964:	f040 8097 	bne.w	8001a96 <STSAFE_P11_Sign+0x18a>
  if (SessionOperationGetObjects(hSession, &h_object, 1, &ul_count) != CKR_OK)
 8001968:	ab07      	add	r3, sp, #28
 800196a:	2201      	movs	r2, #1
 800196c:	a906      	add	r1, sp, #24
 800196e:	4628      	mov	r0, r5
 8001970:	f7ff fa96 	bl	8000ea0 <SessionOperationGetObjects>
 8001974:	b120      	cbz	r0, 8001980 <STSAFE_P11_Sign+0x74>
    SessionOperationFinish(hSession);
 8001976:	4628      	mov	r0, r5
 8001978:	f7ff fdf2 	bl	8001560 <SessionOperationFinish>
      return CKR_FUNCTION_FAILED;
 800197c:	2406      	movs	r4, #6
 800197e:	e7e3      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template, &ul_count, h_object) != CKR_OK)
 8001980:	9a06      	ldr	r2, [sp, #24]
 8001982:	a907      	add	r1, sp, #28
 8001984:	a805      	add	r0, sp, #20
 8001986:	f001 f96f 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 800198a:	2800      	cmp	r0, #0
 800198c:	d1f3      	bne.n	8001976 <STSAFE_P11_Sign+0x6a>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_PARAMS, p_template, ul_count) != CKR_OK)
 800198e:	9b07      	ldr	r3, [sp, #28]
 8001990:	9a05      	ldr	r2, [sp, #20]
 8001992:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001996:	a804      	add	r0, sp, #16
 8001998:	f001 f984 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800199c:	4604      	mov	r4, r0
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1e9      	bne.n	8001976 <STSAFE_P11_Sign+0x6a>
  if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_256_DER, p_attribute_tmp->ulValueLen) == 0)
 80019a2:	9b04      	ldr	r3, [sp, #16]
 80019a4:	493e      	ldr	r1, [pc, #248]	; (8001aa0 <STSAFE_P11_Sign+0x194>)
 80019a6:	e9d3 6901 	ldrd	r6, r9, [r3, #4]
 80019aa:	464a      	mov	r2, r9
 80019ac:	4630      	mov	r0, r6
 80019ae:	f015 f875 	bl	8016a9c <memcmp>
 80019b2:	b190      	cbz	r0, 80019da <STSAFE_P11_Sign+0xce>
  else if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_384_DER, p_attribute_tmp->ulValueLen) == 0)
 80019b4:	464a      	mov	r2, r9
 80019b6:	493b      	ldr	r1, [pc, #236]	; (8001aa4 <STSAFE_P11_Sign+0x198>)
 80019b8:	4630      	mov	r0, r6
 80019ba:	f015 f86f 	bl	8016a9c <memcmp>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d1d9      	bne.n	8001976 <STSAFE_P11_Sign+0x6a>
    e_hash_type = STSAFEA_SHA_384;
 80019c2:	2601      	movs	r6, #1
    u_sign_in_len = STSAFEA_LENGTH_CMD_RESP_GENERATE_SIGNATURE_SHA_384;
 80019c4:	f04f 0964 	mov.w	r9, #100	; 0x64
    ul_sign_out_len = (STSAFEA_SHA_384_LENGTH * 2);
 80019c8:	2360      	movs	r3, #96	; 0x60
    ul_data_len =  STSAFEA_SHA_384_LENGTH;
 80019ca:	2230      	movs	r2, #48	; 0x30
  if (ulDataLen != ul_data_len)
 80019cc:	4593      	cmp	fp, r2
 80019ce:	d00a      	beq.n	80019e6 <STSAFE_P11_Sign+0xda>
    SessionOperationFinish(hSession);
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7ff fdc5 	bl	8001560 <SessionOperationFinish>
    return CKR_DATA_LEN_RANGE;
 80019d6:	2421      	movs	r4, #33	; 0x21
 80019d8:	e7b6      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    e_hash_type = STSAFEA_SHA_256;
 80019da:	4606      	mov	r6, r0
    u_sign_in_len = STSAFEA_LENGTH_CMD_RESP_GENERATE_SIGNATURE_SHA_256;
 80019dc:	f04f 0944 	mov.w	r9, #68	; 0x44
    ul_sign_out_len = (STSAFEA_SHA_256_LENGTH * 2);
 80019e0:	2340      	movs	r3, #64	; 0x40
    ul_data_len =  STSAFEA_SHA_256_LENGTH;
 80019e2:	2220      	movs	r2, #32
 80019e4:	e7f2      	b.n	80019cc <STSAFE_P11_Sign+0xc0>
  if (pSignature != NULL_PTR)
 80019e6:	f1ba 0f00 	cmp.w	sl, #0
 80019ea:	d04b      	beq.n	8001a84 <STSAFE_P11_Sign+0x178>
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXT_TOKEN_PRVKEY_SLOT, p_template, ul_count) != CKR_OK)
 80019ec:	9b07      	ldr	r3, [sp, #28]
 80019ee:	9a05      	ldr	r2, [sp, #20]
 80019f0:	492d      	ldr	r1, [pc, #180]	; (8001aa8 <STSAFE_P11_Sign+0x19c>)
 80019f2:	a804      	add	r0, sp, #16
 80019f4:	f001 f956 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80019f8:	4604      	mov	r4, r0
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d1be      	bne.n	800197c <STSAFE_P11_Sign+0x70>
    if (StSafeA_GenerateSignature(&hStSafe, __STSAFEA_GET_SLOT_ID_FROM_CK(p_attribute_tmp->pValue), pData, e_hash_type,
 80019fe:	9b04      	ldr	r3, [sp, #16]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	b342      	cbz	r2, 8001a5a <STSAFE_P11_Sign+0x14e>
 8001a08:	2a01      	cmp	r2, #1
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2101      	moveq	r1, #1
 8001a0e:	21ff      	movne	r1, #255	; 0xff
 8001a10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a14:	ab08      	add	r3, sp, #32
 8001a16:	e9cd 9300 	strd	r9, r3, [sp]
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	4633      	mov	r3, r6
 8001a1e:	4823      	ldr	r0, [pc, #140]	; (8001aac <STSAFE_P11_Sign+0x1a0>)
 8001a20:	f007 fdd2 	bl	80095c8 <StSafeA_GenerateSignature>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d1a6      	bne.n	8001976 <STSAFE_P11_Sign+0x6a>
    ul_r_length = ((uint32_t)(signature.Data[0U]) << 8UL);
 8001a28:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001a2c:	f898 3000 	ldrb.w	r3, [r8]
    ul_r_length += signature.Data[1U];
 8001a30:	f898 6001 	ldrb.w	r6, [r8, #1]
 8001a34:	eb06 2603 	add.w	r6, r6, r3, lsl #8
    ul_s_length = ((uint32_t)(signature.Data[2UL + ul_r_length]) << 8UL);
 8001a38:	eb08 0306 	add.w	r3, r8, r6
 8001a3c:	789a      	ldrb	r2, [r3, #2]
    ul_s_length += signature.Data[3UL + ul_r_length];
 8001a3e:	f893 9003 	ldrb.w	r9, [r3, #3]
    if (*pulSignatureLen < (ul_r_length + ul_s_length))
 8001a42:	683b      	ldr	r3, [r7, #0]
    ul_s_length += signature.Data[3UL + ul_r_length];
 8001a44:	eb09 2902 	add.w	r9, r9, r2, lsl #8
    if (*pulSignatureLen < (ul_r_length + ul_s_length))
 8001a48:	eb06 0b09 	add.w	fp, r6, r9
 8001a4c:	455b      	cmp	r3, fp
 8001a4e:	d206      	bcs.n	8001a5e <STSAFE_P11_Sign+0x152>
      *pulSignatureLen = ul_r_length + ul_s_length;
 8001a50:	f8c7 b000 	str.w	fp, [r7]
      return CKR_BUFFER_TOO_SMALL;
 8001a54:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8001a58:	e776      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    if (StSafeA_GenerateSignature(&hStSafe, __STSAFEA_GET_SLOT_ID_FROM_CK(p_attribute_tmp->pValue), pData, e_hash_type,
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	e7d8      	b.n	8001a10 <STSAFE_P11_Sign+0x104>
    (void)memcpy(&pSignature[0U], &signature.Data[2U], ul_r_length);
 8001a5e:	4632      	mov	r2, r6
 8001a60:	f108 0102 	add.w	r1, r8, #2
 8001a64:	4650      	mov	r0, sl
 8001a66:	f015 f828 	bl	8016aba <memcpy>
    (void)memcpy(&pSignature[ul_r_length], &signature.Data[2UL + ul_r_length + 2UL], ul_s_length);
 8001a6a:	1d31      	adds	r1, r6, #4
 8001a6c:	464a      	mov	r2, r9
 8001a6e:	4441      	add	r1, r8
 8001a70:	eb0a 0006 	add.w	r0, sl, r6
 8001a74:	f015 f821 	bl	8016aba <memcpy>
    *pulSignatureLen = ul_r_length + ul_s_length;
 8001a78:	f8c7 b000 	str.w	fp, [r7]
    SessionOperationFinish(hSession);
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f7ff fd6f 	bl	8001560 <SessionOperationFinish>
 8001a82:	e761      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    *pulSignatureLen = ul_sign_out_len;
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	e75f      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    return CKR_ARGUMENTS_BAD;
 8001a88:	2407      	movs	r4, #7
 8001a8a:	e75d      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8001a8c:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8001a90:	e75a      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    return CKR_SESSION_CLOSED;
 8001a92:	24b0      	movs	r4, #176	; 0xb0
 8001a94:	e758      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
    return CKR_OPERATION_NOT_INITIALIZED;
 8001a96:	2491      	movs	r4, #145	; 0x91
 8001a98:	e756      	b.n	8001948 <STSAFE_P11_Sign+0x3c>
 8001a9a:	bf00      	nop
 8001a9c:	2000218c 	.word	0x2000218c
 8001aa0:	080197a4 	.word	0x080197a4
 8001aa4:	08016fc0 	.word	0x08016fc0
 8001aa8:	80000001 	.word	0x80000001
 8001aac:	20002278 	.word	0x20002278

08001ab0 <STSAFE_P11_Initialize>:
{
 8001ab0:	b510      	push	{r4, lr}
  uint8_t a_echo_data[3] = {0x01U, 0x02U, 0x03U};
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <STSAFE_P11_Initialize+0x78>)
{
 8001ab4:	b086      	sub	sp, #24
  uint8_t a_echo_data[3] = {0x01U, 0x02U, 0x03U};
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	789b      	ldrb	r3, [r3, #2]
 8001aba:	f8ad 200c 	strh.w	r2, [sp, #12]
 8001abe:	f88d 300e 	strb.w	r3, [sp, #14]
  if (pvInitArgs != NULL_PTR)
 8001ac2:	b108      	cbz	r0, 8001ac8 <STSAFE_P11_Initialize+0x18>
    if (p_init_args->pReserved != NULL_PTR)
 8001ac4:	6943      	ldr	r3, [r0, #20]
 8001ac6:	bb53      	cbnz	r3, 8001b1e <STSAFE_P11_Initialize+0x6e>
  if (uInitialized == CK_TRUE)
 8001ac8:	4c18      	ldr	r4, [pc, #96]	; (8001b2c <STSAFE_P11_Initialize+0x7c>)
 8001aca:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d027      	beq.n	8001b22 <STSAFE_P11_Initialize+0x72>
  uInitialized = CK_FALSE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
  if (STSAFE_OBJ_Init() == CKR_OK)
 8001ad8:	f001 f8b4 	bl	8002c44 <STSAFE_OBJ_Init>
 8001adc:	b9b8      	cbnz	r0, 8001b0e <STSAFE_P11_Initialize+0x5e>
    if (StSafeA_Init(&hStSafe, a_rx_tx_stsafea_data) == STSAFEA_OK)
 8001ade:	f504 719e 	add.w	r1, r4, #316	; 0x13c
 8001ae2:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8001ae6:	f007 fadf 	bl	80090a8 <StSafeA_Init>
 8001aea:	b980      	cbnz	r0, 8001b0e <STSAFE_P11_Initialize+0x5e>
      if (StSafeA_Echo(&hStSafe, a_echo_data, (uint16_t)(sizeof(a_echo_data)), &out_echo, STSAFEA_MAC_NONE)
 8001aec:	9000      	str	r0, [sp, #0]
 8001aee:	ab04      	add	r3, sp, #16
 8001af0:	2203      	movs	r2, #3
 8001af2:	a903      	add	r1, sp, #12
 8001af4:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8001af8:	f007 fb4b 	bl	8009192 <StSafeA_Echo>
 8001afc:	b938      	cbnz	r0, 8001b0e <STSAFE_P11_Initialize+0x5e>
    a_SessionList[i].SessionHandle = CK_INVALID_HANDLE;
 8001afe:	e9c4 0000 	strd	r0, r0, [r4]
          uInitialized = CK_TRUE;
 8001b02:	2301      	movs	r3, #1
    a_SessionList[i].SessionHandle = CK_INVALID_HANDLE;
 8001b04:	6520      	str	r0, [r4, #80]	; 0x50
 8001b06:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
          uInitialized = CK_TRUE;
 8001b0a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
  if (uInitialized == CK_FALSE)
 8001b0e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
  return CKR_OK;
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf0c      	ite	eq
 8001b16:	2006      	moveq	r0, #6
 8001b18:	2000      	movne	r0, #0
}
 8001b1a:	b006      	add	sp, #24
 8001b1c:	bd10      	pop	{r4, pc}
      return CKR_ARGUMENTS_BAD;
 8001b1e:	2007      	movs	r0, #7
 8001b20:	e7fb      	b.n	8001b1a <STSAFE_P11_Initialize+0x6a>
    return CKR_CRYPTOKI_ALREADY_INITIALIZED;
 8001b22:	f240 1091 	movw	r0, #401	; 0x191
 8001b26:	e7f8      	b.n	8001b1a <STSAFE_P11_Initialize+0x6a>
 8001b28:	08016fc8 	.word	0x08016fc8
 8001b2c:	2000218c 	.word	0x2000218c

08001b30 <STSAFE_P11_SignEncryptUpdate>:
 8001b30:	2054      	movs	r0, #84	; 0x54
 8001b32:	4770      	bx	lr

08001b34 <STSAFE_P11_SetAttributeValue>:
 8001b34:	2054      	movs	r0, #84	; 0x54
 8001b36:	4770      	bx	lr

08001b38 <STSAFE_P11_CancelFunction>:
 8001b38:	2054      	movs	r0, #84	; 0x54
 8001b3a:	4770      	bx	lr

08001b3c <STSAFE_P11_SeedRandom>:
 8001b3c:	2054      	movs	r0, #84	; 0x54
 8001b3e:	4770      	bx	lr

08001b40 <STSAFE_P11_GetObjectSize>:
 8001b40:	2054      	movs	r0, #84	; 0x54
 8001b42:	4770      	bx	lr

08001b44 <STSAFE_P11_GetOperationState>:
 8001b44:	2054      	movs	r0, #84	; 0x54
 8001b46:	4770      	bx	lr

08001b48 <STSAFE_P11_GetTokenInfo>:
 8001b48:	2054      	movs	r0, #84	; 0x54
 8001b4a:	4770      	bx	lr

08001b4c <StSafeReadZone.constprop.31>:
static CK_RV StSafeReadZone(uint8_t uZone, uint32_t ulOffset, uint8_t *pucData, uint32_t ulDataSize,
 8001b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tmp_offset = ulOffset;
 8001b50:	2400      	movs	r4, #0
    if (StSafeA_Read(&hStSafe, 0U, 0U, STSAFEA_AC_ALWAYS, uZone, (uint16_t)tmp_offset,
 8001b52:	f8df b098 	ldr.w	fp, [pc, #152]	; 8001bec <StSafeReadZone.constprop.31+0xa0>
static CK_RV StSafeReadZone(uint8_t uZone, uint32_t ulOffset, uint8_t *pucData, uint32_t ulDataSize,
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	4680      	mov	r8, r0
 8001b5a:	460e      	mov	r6, r1
 8001b5c:	4692      	mov	sl, r2
 8001b5e:	4699      	mov	r9, r3
  index = 0UL;
 8001b60:	4625      	mov	r5, r4
 8001b62:	ebaa 0704 	sub.w	r7, sl, r4
  while (tmp_len >= STSAFEA_BUFFER_DATA_CONTENT_SIZE)
 8001b66:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
 8001b6a:	d202      	bcs.n	8001b72 <StSafeReadZone.constprop.31+0x26>
  if (tmp_len != 0UL)
 8001b6c:	bb17      	cbnz	r7, 8001bb4 <StSafeReadZone.constprop.31+0x68>
  return CKR_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e011      	b.n	8001b96 <StSafeReadZone.constprop.31+0x4a>
    if (StSafeA_Read(&hStSafe, 0U, 0U, STSAFEA_AC_ALWAYS, uZone, (uint16_t)tmp_offset,
 8001b72:	ab06      	add	r3, sp, #24
 8001b74:	9303      	str	r3, [sp, #12]
 8001b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	b2a3      	uxth	r3, r4
 8001b7e:	e9cd 8300 	strd	r8, r3, [sp]
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8cd 9010 	str.w	r9, [sp, #16]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4658      	mov	r0, fp
 8001b8e:	f007 fb5f 	bl	8009250 <StSafeA_Read>
 8001b92:	b118      	cbz	r0, 8001b9c <StSafeReadZone.constprop.31+0x50>
      return CKR_GENERAL_ERROR;
 8001b94:	2005      	movs	r0, #5
}
 8001b96:	b009      	add	sp, #36	; 0x24
 8001b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pucData != NULL_PTR)
 8001b9c:	b13e      	cbz	r6, 8001bae <StSafeReadZone.constprop.31+0x62>
      (void)memcpy(&pucData[index], read_buffer.Data, read_buffer.Length);
 8001b9e:	1970      	adds	r0, r6, r5
 8001ba0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001ba4:	9907      	ldr	r1, [sp, #28]
 8001ba6:	f014 ff88 	bl	8016aba <memcpy>
      index += STSAFEA_BUFFER_DATA_CONTENT_SIZE;
 8001baa:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
    tmp_offset += STSAFEA_BUFFER_DATA_CONTENT_SIZE;
 8001bae:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8001bb2:	e7d6      	b.n	8001b62 <StSafeReadZone.constprop.31+0x16>
    if (StSafeA_Read(&hStSafe, 0U, 0U, STSAFEA_AC_ALWAYS, uZone, (uint16_t)tmp_offset, (uint16_t)tmp_len,
 8001bb4:	ab06      	add	r3, sp, #24
 8001bb6:	9303      	str	r3, [sp, #12]
 8001bb8:	b2bb      	uxth	r3, r7
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	b2a4      	uxth	r4, r4
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e9cd 8400 	strd	r8, r4, [sp]
 8001bc4:	f8cd 9010 	str.w	r9, [sp, #16]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	; (8001bec <StSafeReadZone.constprop.31+0xa0>)
 8001bce:	f007 fb3f 	bl	8009250 <StSafeA_Read>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1dd      	bne.n	8001b94 <StSafeReadZone.constprop.31+0x48>
    if (pucData != NULL_PTR)
 8001bd8:	2e00      	cmp	r6, #0
 8001bda:	d0c8      	beq.n	8001b6e <StSafeReadZone.constprop.31+0x22>
      (void)memcpy(&pucData[index], read_buffer.Data, tmp_len);
 8001bdc:	463a      	mov	r2, r7
 8001bde:	9907      	ldr	r1, [sp, #28]
 8001be0:	1970      	adds	r0, r6, r5
 8001be2:	f014 ff6a 	bl	8016aba <memcpy>
  return CKR_OK;
 8001be6:	4620      	mov	r0, r4
 8001be8:	e7d5      	b.n	8001b96 <StSafeReadZone.constprop.31+0x4a>
 8001bea:	bf00      	nop
 8001bec:	20002278 	.word	0x20002278

08001bf0 <GetAttributeValueFromTemplate>:
{
 8001bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001bf4:	4617      	mov	r7, r2
 8001bf6:	461c      	mov	r4, r3
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	460e      	mov	r6, r1
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, Type, pTemplate, ulCount) != CKR_OK)
 8001bfc:	9b08      	ldr	r3, [sp, #32]
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4639      	mov	r1, r7
 8001c02:	4668      	mov	r0, sp
 8001c04:	f001 f84e 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001c08:	b118      	cbz	r0, 8001c12 <GetAttributeValueFromTemplate+0x22>
    return CKR_ATTRIBUTE_TYPE_INVALID;
 8001c0a:	2012      	movs	r0, #18
}
 8001c0c:	b002      	add	sp, #8
 8001c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((Type == CKA_VALUE) && (p_attribute->pValue == NULL_PTR) && (p_attribute->ulValueLen == 0UL))
 8001c12:	2f11      	cmp	r7, #17
 8001c14:	9a00      	ldr	r2, [sp, #0]
 8001c16:	d14a      	bne.n	8001cae <GetAttributeValueFromTemplate+0xbe>
 8001c18:	6853      	ldr	r3, [r2, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d147      	bne.n	8001cae <GetAttributeValueFromTemplate+0xbe>
 8001c1e:	6893      	ldr	r3, [r2, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d144      	bne.n	8001cae <GetAttributeValueFromTemplate+0xbe>
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_EXT_TOKEN_ZONE, pTemplate, ulCount) == CKR_OK)
 8001c24:	9b08      	ldr	r3, [sp, #32]
 8001c26:	4924      	ldr	r1, [pc, #144]	; (8001cb8 <GetAttributeValueFromTemplate+0xc8>)
 8001c28:	4622      	mov	r2, r4
 8001c2a:	4668      	mov	r0, sp
 8001c2c:	f001 f83a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d1ea      	bne.n	8001c0a <GetAttributeValueFromTemplate+0x1a>
      zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute->pValue)));
 8001c34:	9b00      	ldr	r3, [sp, #0]
      if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_EXT_TOKEN_ZONE_AC, pTemplate, ulCount) == CKR_OK)
 8001c36:	4921      	ldr	r1, [pc, #132]	; (8001cbc <GetAttributeValueFromTemplate+0xcc>)
      zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute->pValue)));
 8001c38:	685b      	ldr	r3, [r3, #4]
      if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_EXT_TOKEN_ZONE_AC, pTemplate, ulCount) == CKR_OK)
 8001c3a:	4622      	mov	r2, r4
      zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute->pValue)));
 8001c3c:	781f      	ldrb	r7, [r3, #0]
      if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_EXT_TOKEN_ZONE_AC, pTemplate, ulCount) == CKR_OK)
 8001c3e:	9b08      	ldr	r3, [sp, #32]
 8001c40:	4668      	mov	r0, sp
 8001c42:	f001 f82f 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d1df      	bne.n	8001c0a <GetAttributeValueFromTemplate+0x1a>
  if (pulValueLen == NULL_PTR)
 8001c4a:	b376      	cbz	r6, 8001caa <GetAttributeValueFromTemplate+0xba>
        access_condition = (*((CK_EXT_TOKEN_ZONE_AC *)(p_attribute->pValue)));
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f893 8000 	ldrb.w	r8, [r3]
  if (StSafeReadZone(Zone, 0U, a_sequence_header, sizeof(a_sequence_header), AccessCondition) != STSAFEA_OK)
 8001c54:	2204      	movs	r2, #4
 8001c56:	4643      	mov	r3, r8
 8001c58:	eb0d 0102 	add.w	r1, sp, r2
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	f7ff ff75 	bl	8001b4c <StSafeReadZone.constprop.31>
 8001c62:	bb10      	cbnz	r0, 8001caa <GetAttributeValueFromTemplate+0xba>
  if (pValueIn[0U] != ASN_SEQUENCE)
 8001c64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001c68:	2b30      	cmp	r3, #48	; 0x30
 8001c6a:	d11e      	bne.n	8001caa <GetAttributeValueFromTemplate+0xba>
  if ((pValueIn[1U] <= ASN_LONG_LEN) && (ulValueInLen >= 2U))
 8001c6c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001c70:	2c80      	cmp	r4, #128	; 0x80
 8001c72:	d904      	bls.n	8001c7e <GetAttributeValueFromTemplate+0x8e>
  else if (((pValueIn[1U] == (ASN_LONG_LEN + 1U)) && (ulValueInLen >= 3U)))
 8001c74:	2c81      	cmp	r4, #129	; 0x81
 8001c76:	d106      	bne.n	8001c86 <GetAttributeValueFromTemplate+0x96>
    *pulValueOutLen = pValueIn[2U] + 3UL;
 8001c78:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8001c7c:	3403      	adds	r4, #3
  if (pValue != NULL_PTR)
 8001c7e:	b965      	cbnz	r5, 8001c9a <GetAttributeValueFromTemplate+0xaa>
  *pulValueLen = ul_cert_len;
 8001c80:	6034      	str	r4, [r6, #0]
          e_ret_status = CKR_OK;
 8001c82:	2000      	movs	r0, #0
 8001c84:	e7c2      	b.n	8001c0c <GetAttributeValueFromTemplate+0x1c>
  else if (((pValueIn[1U] == (ASN_LONG_LEN + 2U)) && (ulValueInLen >= 4U)))
 8001c86:	2c82      	cmp	r4, #130	; 0x82
 8001c88:	d10f      	bne.n	8001caa <GetAttributeValueFromTemplate+0xba>
    *pulValueOutLen += pValueIn[3U];
 8001c8a:	f89d 4007 	ldrb.w	r4, [sp, #7]
    *pulValueOutLen = ((uint32_t)pValueIn[2U] << 8UL);
 8001c8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    *pulValueOutLen += 4UL;
 8001c92:	3404      	adds	r4, #4
 8001c94:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001c98:	e7f1      	b.n	8001c7e <GetAttributeValueFromTemplate+0x8e>
    if (StSafeReadZone(Zone, 0U, pValue, ul_cert_len, AccessCondition) != STSAFEA_OK)
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	4638      	mov	r0, r7
 8001ca2:	f7ff ff53 	bl	8001b4c <StSafeReadZone.constprop.31>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d0ea      	beq.n	8001c80 <GetAttributeValueFromTemplate+0x90>
          e_ret_status = CKR_FUNCTION_FAILED;
 8001caa:	2006      	movs	r0, #6
 8001cac:	e7ae      	b.n	8001c0c <GetAttributeValueFromTemplate+0x1c>
    e_ret_status = STSAFE_OBJ_GetAttributeValue(pValue, pulValueLen, p_attribute);
 8001cae:	4631      	mov	r1, r6
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f001 f845 	bl	8002d40 <STSAFE_OBJ_GetAttributeValue>
 8001cb6:	e7a9      	b.n	8001c0c <GetAttributeValueFromTemplate+0x1c>
 8001cb8:	80000002 	.word	0x80000002
 8001cbc:	80000003 	.word	0x80000003

08001cc0 <STSAFE_P11_GetAttributeValue>:
{
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	b08b      	sub	sp, #44	; 0x2c
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	9303      	str	r3, [sp, #12]
  if ((pTemplate == NULL_PTR) || (ulCount == 0UL))
 8001ccc:	4615      	mov	r5, r2
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	f000 80d7 	beq.w	8001e82 <STSAFE_P11_GetAttributeValue+0x1c2>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80d4 	beq.w	8001e82 <STSAFE_P11_GetAttributeValue+0x1c2>
  if (uInitialized == CK_FALSE)
 8001cda:	4b6e      	ldr	r3, [pc, #440]	; (8001e94 <STSAFE_P11_GetAttributeValue+0x1d4>)
 8001cdc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80d0 	beq.w	8001e86 <STSAFE_P11_GetAttributeValue+0x1c6>
  if (SessionIsValid(hSession) != CKR_OK)
 8001ce6:	f7ff f8a1 	bl	8000e2c <SessionIsValid>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	f040 80ce 	bne.w	8001e8c <STSAFE_P11_GetAttributeValue+0x1cc>
  if (SessionIsOpen(hSession) != CKR_OK)
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff f8ab 	bl	8000e4c <SessionIsOpen>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	f040 80ca 	bne.w	8001e90 <STSAFE_P11_GetAttributeValue+0x1d0>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) != CKR_OK)
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	a907      	add	r1, sp, #28
 8001d00:	a805      	add	r0, sp, #20
 8001d02:	f000 ffb1 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001d06:	2800      	cmp	r0, #0
 8001d08:	f040 80b9 	bne.w	8001e7e <STSAFE_P11_GetAttributeValue+0x1be>
        sensitive = IsAttributeTypeInList(Type, a_SensitiveAttributesList_CkoCertificate,
 8001d0c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8001eac <STSAFE_P11_GetAttributeValue+0x1ec>
 8001d10:	3508      	adds	r5, #8
  e_ret_status = CKR_OK;
 8001d12:	4604      	mov	r4, r0
  for (i = 0; i < ulCount; i++)
 8001d14:	4681      	mov	r9, r0
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, pTemplate[i].type, p_template_embedded,
 8001d16:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8001d1a:	9b07      	ldr	r3, [sp, #28]
 8001d1c:	9a05      	ldr	r2, [sp, #20]
 8001d1e:	a806      	add	r0, sp, #24
 8001d20:	f000 ffc0 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001d24:	4601      	mov	r1, r0
 8001d26:	2800      	cmp	r0, #0
 8001d28:	f040 80a4 	bne.w	8001e74 <STSAFE_P11_GetAttributeValue+0x1b4>
      if (IsAttributeSensitive(pTemplate[i].type, p_template_embedded, ul_count_embedded) == CK_TRUE)
 8001d2c:	9f05      	ldr	r7, [sp, #20]
 8001d2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8001d32:	f855 6c08 	ldr.w	r6, [r5, #-8]
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_CLASS, pTemplate, ulCount) != CKR_OK)
 8001d36:	4643      	mov	r3, r8
 8001d38:	463a      	mov	r2, r7
 8001d3a:	a809      	add	r0, sp, #36	; 0x24
 8001d3c:	f000 ffb2 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001d40:	bb58      	cbnz	r0, 8001d9a <STSAFE_P11_GetAttributeValue+0xda>
    obj_class = (*((CK_OBJECT_CLASS *)(p_attribute_tmp->pValue)));
 8001d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d44:	685b      	ldr	r3, [r3, #4]
    switch (obj_class)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d825      	bhi.n	8001d9a <STSAFE_P11_GetAttributeValue+0xda>
 8001d4e:	e8df f003 	tbb	[pc, r3]
 8001d52:	6265      	.short	0x6265
 8001d54:	3e02      	.short	0x3e02
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_SENSITIVE, pTemplate, ulCount) == CKR_OK)
 8001d56:	4643      	mov	r3, r8
 8001d58:	463a      	mov	r2, r7
 8001d5a:	f240 1103 	movw	r1, #259	; 0x103
 8001d5e:	a809      	add	r0, sp, #36	; 0x24
 8001d60:	f000 ffa0 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001d64:	bb68      	cbnz	r0, 8001dc2 <STSAFE_P11_GetAttributeValue+0x102>
          cka_sensitive = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f893 b000 	ldrb.w	fp, [r3]
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXTRACTABLE, pTemplate, ulCount) == CKR_OK)
 8001d6e:	4643      	mov	r3, r8
 8001d70:	463a      	mov	r2, r7
 8001d72:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001d76:	a809      	add	r0, sp, #36	; 0x24
 8001d78:	f000 ff94 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001d7c:	b930      	cbnz	r0, 8001d8c <STSAFE_P11_GetAttributeValue+0xcc>
          cka_extractable = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d80:	685b      	ldr	r3, [r3, #4]
        if ((cka_sensitive == CK_TRUE) || (cka_extractable == CK_FALSE))
 8001d82:	f1bb 0f01 	cmp.w	fp, #1
          cka_extractable = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001d86:	781b      	ldrb	r3, [r3, #0]
        if ((cka_sensitive == CK_TRUE) || (cka_extractable == CK_FALSE))
 8001d88:	d000      	beq.n	8001d8c <STSAFE_P11_GetAttributeValue+0xcc>
 8001d8a:	b9eb      	cbnz	r3, 8001dc8 <STSAFE_P11_GetAttributeValue+0x108>
          sensitive = IsAttributeTypeInList(Type, a_SensAttList_CkoPrivateKey_NotExtr,
 8001d8c:	4942      	ldr	r1, [pc, #264]	; (8001e98 <STSAFE_P11_GetAttributeValue+0x1d8>)
 8001d8e:	2203      	movs	r2, #3
        sensitive = IsAttributeTypeInList(Type, a_SensitiveAttributesList_CkoCertificate,
 8001d90:	4630      	mov	r0, r6
 8001d92:	f7ff f8f0 	bl	8000f76 <IsAttributeTypeInList>
      if (IsAttributeSensitive(pTemplate[i].type, p_template_embedded, ul_count_embedded) == CK_TRUE)
 8001d96:	2801      	cmp	r0, #1
 8001d98:	d143      	bne.n	8001e22 <STSAFE_P11_GetAttributeValue+0x162>
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	602b      	str	r3, [r5, #0]
        e_ret_status = CKR_ATTRIBUTE_SENSITIVE;
 8001da0:	2411      	movs	r4, #17
  for (i = 0; i < ulCount; i++)
 8001da2:	9b03      	ldr	r3, [sp, #12]
 8001da4:	f109 0901 	add.w	r9, r9, #1
 8001da8:	454b      	cmp	r3, r9
 8001daa:	f105 050c 	add.w	r5, r5, #12
 8001dae:	d1b2      	bne.n	8001d16 <STSAFE_P11_GetAttributeValue+0x56>
  if ((e_ret_status != CKR_ATTRIBUTE_SENSITIVE) && (e_ret_status != CKR_ATTRIBUTE_TYPE_INVALID)
 8001db0:	f1a4 0311 	sub.w	r3, r4, #17
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d93f      	bls.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
    e_ret_status = CKR_OK;
 8001db8:	f5b4 7fa8 	cmp.w	r4, #336	; 0x150
 8001dbc:	bf18      	it	ne
 8001dbe:	2400      	movne	r4, #0
 8001dc0:	e03a      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
        cka_sensitive = CK_TRUE;
 8001dc2:	f04f 0b01 	mov.w	fp, #1
 8001dc6:	e7d2      	b.n	8001d6e <STSAFE_P11_GetAttributeValue+0xae>
          sensitive = IsAttributeTypeInList(Type, a_SensAttList_CkoPrivateKey_Extr,
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4934      	ldr	r1, [pc, #208]	; (8001e9c <STSAFE_P11_GetAttributeValue+0x1dc>)
 8001dcc:	e7e0      	b.n	8001d90 <STSAFE_P11_GetAttributeValue+0xd0>
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_SENSITIVE, pTemplate, ulCount) == CKR_OK)
 8001dce:	4643      	mov	r3, r8
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	f240 1103 	movw	r1, #259	; 0x103
 8001dd6:	a809      	add	r0, sp, #36	; 0x24
 8001dd8:	f000 ff64 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001ddc:	b9a8      	cbnz	r0, 8001e0a <STSAFE_P11_GetAttributeValue+0x14a>
          cka_sensitive = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f893 b000 	ldrb.w	fp, [r3]
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXTRACTABLE, pTemplate, ulCount) == CKR_OK)
 8001de6:	4643      	mov	r3, r8
 8001de8:	463a      	mov	r2, r7
 8001dea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001dee:	a809      	add	r0, sp, #36	; 0x24
 8001df0:	f000 ff58 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001df4:	b930      	cbnz	r0, 8001e04 <STSAFE_P11_GetAttributeValue+0x144>
          cka_extractable = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df8:	685b      	ldr	r3, [r3, #4]
        if ((cka_sensitive == CK_TRUE) || (cka_extractable == CK_FALSE))
 8001dfa:	f1bb 0f01 	cmp.w	fp, #1
          cka_extractable = (*((CK_BBOOL *)(p_attribute_tmp->pValue)));
 8001dfe:	781b      	ldrb	r3, [r3, #0]
        if ((cka_sensitive == CK_TRUE) || (cka_extractable == CK_FALSE))
 8001e00:	d000      	beq.n	8001e04 <STSAFE_P11_GetAttributeValue+0x144>
 8001e02:	b92b      	cbnz	r3, 8001e10 <STSAFE_P11_GetAttributeValue+0x150>
          sensitive = IsAttributeTypeInList(Type, a_SensAttList_CkoSecretKey_NotExtr,
 8001e04:	2202      	movs	r2, #2
 8001e06:	4926      	ldr	r1, [pc, #152]	; (8001ea0 <STSAFE_P11_GetAttributeValue+0x1e0>)
 8001e08:	e7c2      	b.n	8001d90 <STSAFE_P11_GetAttributeValue+0xd0>
        cka_sensitive = CK_TRUE;
 8001e0a:	f04f 0b01 	mov.w	fp, #1
 8001e0e:	e7ea      	b.n	8001de6 <STSAFE_P11_GetAttributeValue+0x126>
          sensitive = IsAttributeTypeInList(Type, a_SensAttList_CkoSecretKey_Extr,
 8001e10:	2201      	movs	r2, #1
 8001e12:	4924      	ldr	r1, [pc, #144]	; (8001ea4 <STSAFE_P11_GetAttributeValue+0x1e4>)
 8001e14:	e7bc      	b.n	8001d90 <STSAFE_P11_GetAttributeValue+0xd0>
        sensitive = IsAttributeTypeInList(Type, a_SensitiveAttributesList_CkoPublicKey,
 8001e16:	2201      	movs	r2, #1
 8001e18:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <STSAFE_P11_GetAttributeValue+0x1e8>)
 8001e1a:	e7b9      	b.n	8001d90 <STSAFE_P11_GetAttributeValue+0xd0>
        sensitive = IsAttributeTypeInList(Type, a_SensitiveAttributesList_CkoCertificate,
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4651      	mov	r1, sl
 8001e20:	e7b6      	b.n	8001d90 <STSAFE_P11_GetAttributeValue+0xd0>
        if (GetAttributeValueFromTemplate(NULL_PTR, &ul_value_len_tmp, pTemplate[i].type, p_template_embedded,
 8001e22:	9b07      	ldr	r3, [sp, #28]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8001e2a:	9b05      	ldr	r3, [sp, #20]
 8001e2c:	a908      	add	r1, sp, #32
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fede 	bl	8001bf0 <GetAttributeValueFromTemplate>
 8001e34:	b120      	cbz	r0, 8001e40 <STSAFE_P11_GetAttributeValue+0x180>
          return CKR_FUNCTION_FAILED;
 8001e36:	2406      	movs	r4, #6
}
 8001e38:	4620      	mov	r0, r4
 8001e3a:	b00b      	add	sp, #44	; 0x2c
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pTemplate[i].pValue == NULL_PTR)
 8001e40:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8001e44:	9b08      	ldr	r3, [sp, #32]
 8001e46:	b908      	cbnz	r0, 8001e4c <STSAFE_P11_GetAttributeValue+0x18c>
          pTemplate[i].ulValueLen = ul_value_len_tmp;
 8001e48:	602b      	str	r3, [r5, #0]
 8001e4a:	e7aa      	b.n	8001da2 <STSAFE_P11_GetAttributeValue+0xe2>
          if (pTemplate[i].ulValueLen >= ul_value_len_tmp)
 8001e4c:	682a      	ldr	r2, [r5, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d30a      	bcc.n	8001e68 <STSAFE_P11_GetAttributeValue+0x1a8>
            if (GetAttributeValueFromTemplate(pTemplate[i].pValue, &pTemplate[i].ulValueLen, pTemplate[i].type,
 8001e52:	9b07      	ldr	r3, [sp, #28]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8001e5a:	9b05      	ldr	r3, [sp, #20]
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7ff fec7 	bl	8001bf0 <GetAttributeValueFromTemplate>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d09d      	beq.n	8001da2 <STSAFE_P11_GetAttributeValue+0xe2>
 8001e66:	e7e6      	b.n	8001e36 <STSAFE_P11_GetAttributeValue+0x176>
            pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	602b      	str	r3, [r5, #0]
            e_ret_status = CKR_BUFFER_TOO_SMALL;
 8001e6e:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8001e72:	e796      	b.n	8001da2 <STSAFE_P11_GetAttributeValue+0xe2>
      pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
 8001e78:	602b      	str	r3, [r5, #0]
      e_ret_status = CKR_ATTRIBUTE_TYPE_INVALID;
 8001e7a:	2412      	movs	r4, #18
 8001e7c:	e791      	b.n	8001da2 <STSAFE_P11_GetAttributeValue+0xe2>
    return CKR_OBJECT_HANDLE_INVALID;
 8001e7e:	2482      	movs	r4, #130	; 0x82
 8001e80:	e7da      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
    return CKR_ARGUMENTS_BAD;
 8001e82:	2407      	movs	r4, #7
 8001e84:	e7d8      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8001e86:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8001e8a:	e7d5      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
    return CKR_SESSION_HANDLE_INVALID;
 8001e8c:	24b3      	movs	r4, #179	; 0xb3
 8001e8e:	e7d3      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
    return CKR_SESSION_CLOSED;
 8001e90:	24b0      	movs	r4, #176	; 0xb0
 8001e92:	e7d1      	b.n	8001e38 <STSAFE_P11_GetAttributeValue+0x178>
 8001e94:	2000218c 	.word	0x2000218c
 8001e98:	20002000 	.word	0x20002000
 8001e9c:	2000200c 	.word	0x2000200c
 8001ea0:	20002014 	.word	0x20002014
 8001ea4:	2000201c 	.word	0x2000201c
 8001ea8:	20002020 	.word	0x20002020
 8001eac:	20002024 	.word	0x20002024

08001eb0 <STSAFE_P11_OpenSession>:
{
 8001eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb4:	f8dd 8018 	ldr.w	r8, [sp, #24]
  if (phSession == NULL_PTR)
 8001eb8:	f1b8 0f00 	cmp.w	r8, #0
 8001ebc:	d02b      	beq.n	8001f16 <STSAFE_P11_OpenSession+0x66>
  if (uInitialized == CK_FALSE)
 8001ebe:	4d1b      	ldr	r5, [pc, #108]	; (8001f2c <STSAFE_P11_OpenSession+0x7c>)
 8001ec0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
 8001ec4:	b34b      	cbz	r3, 8001f1a <STSAFE_P11_OpenSession+0x6a>
  if (slotID != 0x0000U)
 8001ec6:	bb58      	cbnz	r0, 8001f20 <STSAFE_P11_OpenSession+0x70>
  if ((flags & CKF_SERIAL_SESSION) == 0x0000U)
 8001ec8:	074b      	lsls	r3, r1, #29
 8001eca:	d52b      	bpl.n	8001f24 <STSAFE_P11_OpenSession+0x74>
  if (ulSessionNb >=  STSAFE_P11_NB_SESSIONS_MAX)
 8001ecc:	682f      	ldr	r7, [r5, #0]
 8001ece:	2f02      	cmp	r7, #2
 8001ed0:	d82a      	bhi.n	8001f28 <STSAFE_P11_OpenSession+0x78>
    if (a_SessionList[ul_session_index].SessionHandle == CK_INVALID_HANDLE)
 8001ed2:	686b      	ldr	r3, [r5, #4]
 8001ed4:	b12b      	cbz	r3, 8001ee2 <STSAFE_P11_OpenSession+0x32>
 8001ed6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001ed8:	b1db      	cbz	r3, 8001f12 <STSAFE_P11_OpenSession+0x62>
 8001eda:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8001ede:	bb1b      	cbnz	r3, 8001f28 <STSAFE_P11_OpenSession+0x78>
    ul_session_index++;
 8001ee0:	2302      	movs	r3, #2
      (a_SessionList[ul_session_index].SessionHandle == CK_INVALID_HANDLE))
 8001ee2:	204c      	movs	r0, #76	; 0x4c
 8001ee4:	4358      	muls	r0, r3
 8001ee6:	182e      	adds	r6, r5, r0
  if ((ul_session_index < STSAFE_P11_NB_SESSIONS_MAX) &&
 8001ee8:	6874      	ldr	r4, [r6, #4]
 8001eea:	b9ec      	cbnz	r4, 8001f28 <STSAFE_P11_OpenSession+0x78>
    a_SessionList[ul_session_index].SessionHandle = ul_session_index + STSAFE_P11_SESSION_INDEX_OFFSET;
 8001eec:	3301      	adds	r3, #1
 8001eee:	6073      	str	r3, [r6, #4]
    (void)memset(a_SessionList[ul_session_index].OperationObjects, CK_INVALID_HANDLE,
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <STSAFE_P11_OpenSession+0x80>)
    a_SessionList[ul_session_index].SessionInfo.slotID = slotID;
 8001ef2:	60b4      	str	r4, [r6, #8]
    (void)memset(a_SessionList[ul_session_index].OperationObjects, CK_INVALID_HANDLE,
 8001ef4:	4418      	add	r0, r3
    a_SessionList[ul_session_index].OperationActive  = CK_FALSE;
 8001ef6:	7634      	strb	r4, [r6, #24]
    (void)memset(a_SessionList[ul_session_index].OperationObjects, CK_INVALID_HANDLE,
 8001ef8:	2230      	movs	r2, #48	; 0x30
 8001efa:	4621      	mov	r1, r4
 8001efc:	f014 fe01 	bl	8016b02 <memset>
    ulSessionNb++;
 8001f00:	3701      	adds	r7, #1
    *phSession = a_SessionList[ul_session_index].SessionHandle;
 8001f02:	6873      	ldr	r3, [r6, #4]
    a_SessionList[ul_session_index].ulOperationObjectsCount = 0UL;
 8001f04:	64f4      	str	r4, [r6, #76]	; 0x4c
    ulSessionNb++;
 8001f06:	602f      	str	r7, [r5, #0]
    *phSession = a_SessionList[ul_session_index].SessionHandle;
 8001f08:	f8c8 3000 	str.w	r3, [r8]
  return CKR_OK;
 8001f0c:	4620      	mov	r0, r4
}
 8001f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ul_session_index++;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e7e5      	b.n	8001ee2 <STSAFE_P11_OpenSession+0x32>
    return CKR_ARGUMENTS_BAD;
 8001f16:	2007      	movs	r0, #7
 8001f18:	e7f9      	b.n	8001f0e <STSAFE_P11_OpenSession+0x5e>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8001f1a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f1e:	e7f6      	b.n	8001f0e <STSAFE_P11_OpenSession+0x5e>
    return CKR_SLOT_ID_INVALID;
 8001f20:	2003      	movs	r0, #3
 8001f22:	e7f4      	b.n	8001f0e <STSAFE_P11_OpenSession+0x5e>
    return CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 8001f24:	20b4      	movs	r0, #180	; 0xb4
 8001f26:	e7f2      	b.n	8001f0e <STSAFE_P11_OpenSession+0x5e>
    return CKR_SESSION_COUNT;
 8001f28:	20b1      	movs	r0, #177	; 0xb1
 8001f2a:	e7f0      	b.n	8001f0e <STSAFE_P11_OpenSession+0x5e>
 8001f2c:	2000218c 	.word	0x2000218c
 8001f30:	200021a8 	.word	0x200021a8

08001f34 <ObjectSetVendorObjectAvailability.constprop.33>:
static CK_RV ObjectSetVendorObjectAvailability(CK_OBJECT_HANDLE hObject, CK_BBOOL bValue)
 8001f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f36:	2401      	movs	r4, #1
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, hObject) == CKR_OK)
 8001f38:	4602      	mov	r2, r0
 8001f3a:	a902      	add	r1, sp, #8
 8001f3c:	a801      	add	r0, sp, #4
 8001f3e:	f88d 4003 	strb.w	r4, [sp, #3]
 8001f42:	f000 fe91 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001f46:	b110      	cbz	r0, 8001f4e <ObjectSetVendorObjectAvailability.constprop.33+0x1a>
  e_ret_status = CKR_GENERAL_ERROR;
 8001f48:	2005      	movs	r0, #5
}
 8001f4a:	b004      	add	sp, #16
 8001f4c:	bd10      	pop	{r4, pc}
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_VENDOR_OBJECT_AVAILABILITY, p_template_embedded,
 8001f4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8001f52:	4906      	ldr	r1, [pc, #24]	; (8001f6c <ObjectSetVendorObjectAvailability.constprop.33+0x38>)
 8001f54:	a803      	add	r0, sp, #12
 8001f56:	f000 fea5 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d1f4      	bne.n	8001f48 <ObjectSetVendorObjectAvailability.constprop.33+0x14>
      e_ret_status = STSAFE_OBJ_SetAttributeValue(p_attribute_embedded,(CK_BYTE*)&bValue, sizeof(CK_BBOOL));
 8001f5e:	4622      	mov	r2, r4
 8001f60:	f10d 0103 	add.w	r1, sp, #3
 8001f64:	9803      	ldr	r0, [sp, #12]
 8001f66:	f000 fefb 	bl	8002d60 <STSAFE_OBJ_SetAttributeValue>
 8001f6a:	e7ee      	b.n	8001f4a <ObjectSetVendorObjectAvailability.constprop.33+0x16>
 8001f6c:	80000005 	.word	0x80000005

08001f70 <STSAFE_P11_CreateObject.part.20>:
static CK_RV STSAFE_P11_CreateObject(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f74:	b0d5      	sub	sp, #340	; 0x154
 8001f76:	4681      	mov	r9, r0
 8001f78:	460d      	mov	r5, r1
 8001f7a:	4616      	mov	r6, r2
 8001f7c:	4698      	mov	r8, r3
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKO_CERTIFICATE , pTemplate, ulCount) == CKR_OK)
 8001f7e:	a80c      	add	r0, sp, #48	; 0x30
 8001f80:	4613      	mov	r3, r2
 8001f82:	460a      	mov	r2, r1
 8001f84:	2101      	movs	r1, #1
 8001f86:	f000 fe8d 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f040 8121 	bne.w	80021d2 <STSAFE_P11_CreateObject.part.20+0x262>
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_LABEL, pTemplate, ulCount) == CKR_OK)
 8001f90:	4633      	mov	r3, r6
 8001f92:	462a      	mov	r2, r5
 8001f94:	2103      	movs	r1, #3
 8001f96:	a80c      	add	r0, sp, #48	; 0x30
 8001f98:	f000 fe84 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	b120      	cbz	r0, 8001faa <STSAFE_P11_CreateObject.part.20+0x3a>
            return CKR_FUNCTION_FAILED;
 8001fa0:	2406      	movs	r4, #6
}
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	b055      	add	sp, #340	; 0x154
 8001fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!memcmp(p_attribute->pValue, "DeviceCertificate", p_attribute->ulValueLen) == 0)      {
 8001faa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001fac:	49b3      	ldr	r1, [pc, #716]	; (800227c <STSAFE_P11_CreateObject.part.20+0x30c>)
 8001fae:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4652      	mov	r2, sl
 8001fb6:	f014 fd71 	bl	8016a9c <memcmp>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d0f1      	beq.n	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
        (void) memcpy(&template_tmp.pValue, &p_attribute->pValue, p_attribute->ulValueLen);
 8001fbe:	4652      	mov	r2, sl
 8001fc0:	1d39      	adds	r1, r7, #4
 8001fc2:	a810      	add	r0, sp, #64	; 0x40
 8001fc4:	f014 fd79 	bl	8016aba <memcpy>
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_VALUE , pTemplate, ulCount) == CKR_OK)
 8001fc8:	4633      	mov	r3, r6
 8001fca:	462a      	mov	r2, r5
 8001fcc:	2111      	movs	r1, #17
 8001fce:	a80c      	add	r0, sp, #48	; 0x30
        (void) memcpy(&template_tmp.pValue, &p_attribute->pValue, p_attribute->ulValueLen);
 8001fd0:	ac0f      	add	r4, sp, #60	; 0x3c
        if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_VALUE , pTemplate, ulCount) == CKR_OK)
 8001fd2:	f000 fe67 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	f040 80fb 	bne.w	80021d2 <STSAFE_P11_CreateObject.part.20+0x262>
          template_tmp.type = CKA_LABEL;
 8001fdc:	2303      	movs	r3, #3
          if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_cert_obj, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 8001fde:	2601      	movs	r6, #1
          template_tmp.type = CKA_LABEL;
 8001fe0:	6023      	str	r3, [r4, #0]
          if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_cert_obj, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 8001fe2:	4632      	mov	r2, r6
 8001fe4:	e9cd 4600 	strd	r4, r6, [sp]
 8001fe8:	ab0b      	add	r3, sp, #44	; 0x2c
 8001fea:	a907      	add	r1, sp, #28
 8001fec:	f7fe fe9c 	bl	8000d28 <FindObjectsFromTemplate>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d1d5      	bne.n	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
          if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_cert_template_embedded, &ul_cert_count_embedded, h_cert_obj) != CKR_OK)
 8001ff4:	9a07      	ldr	r2, [sp, #28]
 8001ff6:	a909      	add	r1, sp, #36	; 0x24
 8001ff8:	a808      	add	r0, sp, #32
 8001ffa:	f000 fe35 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d1ce      	bne.n	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
          if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXT_TOKEN_ZONE, p_cert_template_embedded,
 8002002:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002006:	499e      	ldr	r1, [pc, #632]	; (8002280 <STSAFE_P11_CreateObject.part.20+0x310>)
 8002008:	a80a      	add	r0, sp, #40	; 0x28
 800200a:	f000 fe4b 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800200e:	4604      	mov	r4, r0
 8002010:	2800      	cmp	r0, #0
 8002012:	d1c5      	bne.n	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
          STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DatatoStore, (p_attribute->ulValueLen) + 2);
 8002014:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
          zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute_tmp->pValue)));
 8002018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DatatoStore, (p_attribute->ulValueLen) + 2);
 800201a:	f8db 5008 	ldr.w	r5, [fp, #8]
          zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute_tmp->pValue)));
 800201e:	685b      	ldr	r3, [r3, #4]
          STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DatatoStore, (p_attribute->ulValueLen) + 2);
 8002020:	1ca8      	adds	r0, r5, #2
 8002022:	4631      	mov	r1, r6
          zone = (*((CK_EXT_TOKEN_ZONE *)(p_attribute_tmp->pValue)));
 8002024:	781f      	ldrb	r7, [r3, #0]
          STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DatatoStore, (p_attribute->ulValueLen) + 2);
 8002026:	f014 fd1b 	bl	8016a60 <calloc>
 800202a:	fa1f fa85 	uxth.w	sl, r5
          (void) memcpy(DatatoStore.Data,  p_attribute->pValue, p_attribute->ulValueLen);
 800202e:	462a      	mov	r2, r5
 8002030:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002034:	ad0d      	add	r5, sp, #52	; 0x34
          STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DatatoStore, (p_attribute->ulValueLen) + 2);
 8002036:	4681      	mov	r9, r0
          (void) memcpy(DatatoStore.Data,  p_attribute->pValue, p_attribute->ulValueLen);
 8002038:	f014 fd3f 	bl	8016aba <memcpy>
  if (in_Data.Length <= MAX_SIZE_BUFFER_I2_FOR_DATAS)
 800203c:	f5ba 7ff8 	cmp.w	sl, #496	; 0x1f0
 8002040:	f8a5 a000 	strh.w	sl, [r5]
 8002044:	f8c5 9004 	str.w	r9, [r5, #4]
 8002048:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800204c:	d80e      	bhi.n	800206c <STSAFE_P11_CreateObject.part.20+0xfc>
    STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, offset, &in_Data, STSAFEA_MAC_HOST_CMAC));
 800204e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002052:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8002056:	9400      	str	r4, [sp, #0]
 8002058:	4623      	mov	r3, r4
 800205a:	4622      	mov	r2, r4
 800205c:	4621      	mov	r1, r4
 800205e:	4889      	ldr	r0, [pc, #548]	; (8002284 <STSAFE_P11_CreateObject.part.20+0x314>)
 8002060:	f007 f98f 	bl	8009382 <StSafeA_Update>
    if (StatusCode != STSAFEA_OK)
 8002064:	2800      	cmp	r0, #0
 8002066:	d03a      	beq.n	80020de <STSAFE_P11_CreateObject.part.20+0x16e>
        return CKR_GENERAL_ERROR;
 8002068:	2405      	movs	r4, #5
 800206a:	e038      	b.n	80020de <STSAFE_P11_CreateObject.part.20+0x16e>
    in_Data.Length = MAX_SIZE_BUFFER_I2_FOR_DATAS;
 800206c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002070:	802a      	strh	r2, [r5, #0]
    STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, offset, &in_Data, STSAFEA_MAC_HOST_CMAC));
 8002072:	4621      	mov	r1, r4
 8002074:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8002078:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800207c:	9400      	str	r4, [sp, #0]
 800207e:	4623      	mov	r3, r4
 8002080:	4622      	mov	r2, r4
 8002082:	4880      	ldr	r0, [pc, #512]	; (8002284 <STSAFE_P11_CreateObject.part.20+0x314>)
 8002084:	f007 f97d 	bl	8009382 <StSafeA_Update>
    if (StatusCode != STSAFEA_OK)
 8002088:	2800      	cmp	r0, #0
 800208a:	d1ed      	bne.n	8002068 <STSAFE_P11_CreateObject.part.20+0xf8>
    Remaining_Data_To_Copy = size - MAX_SIZE_BUFFER_I2_FOR_DATAS;
 800208c:	f5aa 76f8 	sub.w	r6, sl, #496	; 0x1f0
 8002090:	b2b6      	uxth	r6, r6
    if (Remaining_Data_To_Copy <= MAX_SIZE_BUFFER_I2_FOR_DATAS)
 8002092:	f5b6 7ff8 	cmp.w	r6, #496	; 0x1f0
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate, Remaining_Data_To_Copy + 2);
 8002096:	f04f 0101 	mov.w	r1, #1
    if (Remaining_Data_To_Copy <= MAX_SIZE_BUFFER_I2_FOR_DATAS)
 800209a:	d846      	bhi.n	800212a <STSAFE_P11_CreateObject.part.20+0x1ba>
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate, Remaining_Data_To_Copy + 2);
 800209c:	1cb0      	adds	r0, r6, #2
 800209e:	f014 fcdf 	bl	8016a60 <calloc>
      DataUpdate.Length = Remaining_Data_To_Copy;
 80020a2:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate, Remaining_Data_To_Copy + 2);
 80020a6:	9016      	str	r0, [sp, #88]	; 0x58
      DataUpdate.Length = Remaining_Data_To_Copy;
 80020a8:	2300      	movs	r3, #0
      for (uint8_t i = 0; i < DataUpdate.Length; i++)
 80020aa:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80020ae:	1c59      	adds	r1, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d331      	bcc.n	800211a <STSAFE_P11_CreateObject.part.20+0x1aa>
      STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, MAX_SIZE_BUFFER_I2_FOR_DATAS + offset, &DataUpdate,
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	ab15      	add	r3, sp, #84	; 0x54
 80020bc:	9303      	str	r3, [sp, #12]
 80020be:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
      STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, 2 * MAX_SIZE_BUFFER_I2_FOR_DATAS + offset, &DataUpdate2, STSAFEA_MAC_HOST_CMAC));
 80020c2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	486d      	ldr	r0, [pc, #436]	; (8002284 <STSAFE_P11_CreateObject.part.20+0x314>)
 80020d0:	f007 f957 	bl	8009382 <StSafeA_Update>
      if (StatusCode != STSAFEA_OK)
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1c7      	bne.n	8002068 <STSAFE_P11_CreateObject.part.20+0xf8>
      STSAFEA_DYNAMIC_FREE_LV_BUFFER_VAR(DataUpdate2);
 80020d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80020da:	f014 fcd7 	bl	8016a8c <free>
          STSAFEA_DYNAMIC_FREE_LV_BUFFER_VAR(DatatoStore);
 80020de:	4648      	mov	r0, r9
 80020e0:	f014 fcd4 	bl	8016a8c <free>
          if (e_ret_status != CKR_OK)
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	f47f af5b 	bne.w	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
            template_tmp_cert.type = CKA_LABEL;
 80020ea:	2303      	movs	r3, #3
 80020ec:	9315      	str	r3, [sp, #84]	; 0x54
            template_tmp_cert.pValue = P11_OBJ_LABEL_DYN_CRT;
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <STSAFE_P11_CreateObject.part.20+0x318>)
 80020f0:	9316      	str	r3, [sp, #88]	; 0x58
            if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj_cert, 1, &ul_obj_cnt, &template_tmp_cert, 1) != CKR_OK)
 80020f2:	2201      	movs	r2, #1
 80020f4:	ab15      	add	r3, sp, #84	; 0x54
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4620      	mov	r0, r4
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	ab0b      	add	r3, sp, #44	; 0x2c
 80020fe:	a912      	add	r1, sp, #72	; 0x48
 8002100:	f7fe fe12 	bl	8000d28 <FindObjectsFromTemplate>
 8002104:	4604      	mov	r4, r0
 8002106:	2800      	cmp	r0, #0
 8002108:	f47f af4a 	bne.w	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
            ObjectSetVendorObjectAvailability(h_obj_cert, CK_TRUE);
 800210c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800210e:	f7ff ff11 	bl	8001f34 <ObjectSetVendorObjectAvailability.constprop.33>
            *phObject = h_obj_cert;
 8002112:	9b12      	ldr	r3, [sp, #72]	; 0x48
  *phObject = h_obj;
 8002114:	f8c8 3000 	str.w	r3, [r8]
 8002118:	e743      	b.n	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
        DataUpdate.Data[i] = in_Data.Data[i + MAX_SIZE_BUFFER_I2_FOR_DATAS];
 800211a:	686a      	ldr	r2, [r5, #4]
 800211c:	441a      	add	r2, r3
 800211e:	f892 01f0 	ldrb.w	r0, [r2, #496]	; 0x1f0
 8002122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002124:	54d0      	strb	r0, [r2, r3]
 8002126:	460b      	mov	r3, r1
 8002128:	e7bf      	b.n	80020aa <STSAFE_P11_CreateObject.part.20+0x13a>
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate, MAX_SIZE_BUFFER_I2_FOR_DATAS + 2);
 800212a:	f44f 70f9 	mov.w	r0, #498	; 0x1f2
 800212e:	f014 fc97 	bl	8016a60 <calloc>
 8002132:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
      DataUpdate.Length = MAX_SIZE_BUFFER_I2_FOR_DATAS;
 8002136:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800213a:	f8ab 3000 	strh.w	r3, [fp]
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate, MAX_SIZE_BUFFER_I2_FOR_DATAS + 2);
 800213e:	f8cb 0004 	str.w	r0, [fp, #4]
      DataUpdate.Length = MAX_SIZE_BUFFER_I2_FOR_DATAS;
 8002142:	2300      	movs	r3, #0
      for (uint8_t i = 0; i < DataUpdate.Length; i++)
 8002144:	f8bb 2000 	ldrh.w	r2, [fp]
 8002148:	1c59      	adds	r1, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4293      	cmp	r3, r2
 800214e:	d32f      	bcc.n	80021b0 <STSAFE_P11_CreateObject.part.20+0x240>
      STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, MAX_SIZE_BUFFER_I2_FOR_DATAS + offset, &DataUpdate,
 8002150:	23a0      	movs	r3, #160	; 0xa0
 8002152:	e9cd b303 	strd	fp, r3, [sp, #12]
 8002156:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800215a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4619      	mov	r1, r3
 8002166:	4847      	ldr	r0, [pc, #284]	; (8002284 <STSAFE_P11_CreateObject.part.20+0x314>)
 8002168:	f007 f90b 	bl	8009382 <StSafeA_Update>
 800216c:	4606      	mov	r6, r0
      STSAFEA_DYNAMIC_FREE_LV_BUFFER_VAR(DataUpdate);
 800216e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002172:	f014 fc8b 	bl	8016a8c <free>
      if (StatusCode != STSAFEA_OK)
 8002176:	2e00      	cmp	r6, #0
 8002178:	f47f af76 	bne.w	8002068 <STSAFE_P11_CreateObject.part.20+0xf8>
      Remaining_Data_To_Copy = size - 2 * MAX_SIZE_BUFFER_I2_FOR_DATAS;
 800217c:	f5aa 7a78 	sub.w	sl, sl, #992	; 0x3e0
 8002180:	fa1f fa8a 	uxth.w	sl, sl
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate2, Remaining_Data_To_Copy + 2);
 8002184:	2101      	movs	r1, #1
 8002186:	f10a 0002 	add.w	r0, sl, #2
 800218a:	f014 fc69 	bl	8016a60 <calloc>
      DataUpdate2.Length = Remaining_Data_To_Copy;
 800218e:	f8ad a054 	strh.w	sl, [sp, #84]	; 0x54
      STSAFEA_DYNAMIC_ALLOCATE_LV_BUFFER_VAR(StSafeA_LVBuffer_t, DataUpdate2, Remaining_Data_To_Copy + 2);
 8002192:	9016      	str	r0, [sp, #88]	; 0x58
      DataUpdate2.Length = Remaining_Data_To_Copy;
 8002194:	4630      	mov	r0, r6
      for (uint8_t i = 0; i < DataUpdate2.Length; i++)
 8002196:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800219a:	1c42      	adds	r2, r0, #1
 800219c:	b2c0      	uxtb	r0, r0
 800219e:	4298      	cmp	r0, r3
 80021a0:	d30f      	bcc.n	80021c2 <STSAFE_P11_CreateObject.part.20+0x252>
      STS_CHK(StatusCode, StSafeA_Update(&hStSafe, 0U, 0U, 0U, STSAFEA_AC_ALWAYS, zone, 2 * MAX_SIZE_BUFFER_I2_FOR_DATAS + offset, &DataUpdate2, STSAFEA_MAC_HOST_CMAC));
 80021a2:	23a0      	movs	r3, #160	; 0xa0
 80021a4:	9304      	str	r3, [sp, #16]
 80021a6:	ab15      	add	r3, sp, #84	; 0x54
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80021ae:	e788      	b.n	80020c2 <STSAFE_P11_CreateObject.part.20+0x152>
        DataUpdate.Data[i] = in_Data.Data[i + MAX_SIZE_BUFFER_I2_FOR_DATAS];
 80021b0:	686a      	ldr	r2, [r5, #4]
 80021b2:	441a      	add	r2, r3
 80021b4:	f892 01f0 	ldrb.w	r0, [r2, #496]	; 0x1f0
 80021b8:	f8db 2004 	ldr.w	r2, [fp, #4]
 80021bc:	54d0      	strb	r0, [r2, r3]
 80021be:	460b      	mov	r3, r1
 80021c0:	e7c0      	b.n	8002144 <STSAFE_P11_CreateObject.part.20+0x1d4>
        DataUpdate2.Data[i] = in_Data.Data[i + 2 * MAX_SIZE_BUFFER_I2_FOR_DATAS];
 80021c2:	686b      	ldr	r3, [r5, #4]
 80021c4:	4403      	add	r3, r0
 80021c6:	f893 13e0 	ldrb.w	r1, [r3, #992]	; 0x3e0
 80021ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80021cc:	5419      	strb	r1, [r3, r0]
 80021ce:	4610      	mov	r0, r2
 80021d0:	e7e1      	b.n	8002196 <STSAFE_P11_CreateObject.part.20+0x226>
  CK_ATTRIBUTE attribute_filter[] =  { {CKA_EC_POINT, NULL_PTR, 0}  } ;
 80021d2:	2200      	movs	r2, #0
 80021d4:	ab12      	add	r3, sp, #72	; 0x48
 80021d6:	f240 1181 	movw	r1, #385	; 0x181
  if (STSAFE_OBJ_FilterTemplate(p_template_filtered, &ul_count_filtered, pTemplate, ulCount, attribute_filter,
 80021da:	2701      	movs	r7, #1
  CK_ATTRIBUTE attribute_filter[] =  { {CKA_EC_POINT, NULL_PTR, 0}  } ;
 80021dc:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 80021e0:	9214      	str	r2, [sp, #80]	; 0x50
  if (STSAFE_OBJ_FilterTemplate(p_template_filtered, &ul_count_filtered, pTemplate, ulCount, attribute_filter,
 80021e2:	e9cd 3700 	strd	r3, r7, [sp]
 80021e6:	462a      	mov	r2, r5
 80021e8:	4633      	mov	r3, r6
 80021ea:	a90d      	add	r1, sp, #52	; 0x34
 80021ec:	a815      	add	r0, sp, #84	; 0x54
 80021ee:	f000 fd6d 	bl	8002ccc <STSAFE_OBJ_FilterTemplate>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	f47f aed4 	bne.w	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
  template_tmp.type = CKA_LABEL;
 80021f8:	ac0f      	add	r4, sp, #60	; 0x3c
 80021fa:	2303      	movs	r3, #3
 80021fc:	6023      	str	r3, [r4, #0]
  template_tmp.pValue = P11_OBJ_LABEL_VER_PUB_KEY_256;
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <STSAFE_P11_CreateObject.part.20+0x31c>)
 8002200:	6063      	str	r3, [r4, #4]
  if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj, 1, &ul_obj_cnt, &template_tmp, 1) == CKR_OK)
 8002202:	463a      	mov	r2, r7
 8002204:	e9cd 4700 	strd	r4, r7, [sp]
 8002208:	ab0b      	add	r3, sp, #44	; 0x2c
 800220a:	a906      	add	r1, sp, #24
 800220c:	f7fe fd8c 	bl	8000d28 <FindObjectsFromTemplate>
 8002210:	b1d0      	cbz	r0, 8002248 <STSAFE_P11_CreateObject.part.20+0x2d8>
    template_tmp.type = CKA_LABEL;
 8002212:	2303      	movs	r3, #3
 8002214:	6023      	str	r3, [r4, #0]
    if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj, 1, &ul_obj_cnt, &template_tmp, 1) == CKR_OK)
 8002216:	2201      	movs	r2, #1
    template_tmp.pValue = P11_OBJ_LABEL_VER_PUB_KEY_384;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <STSAFE_P11_CreateObject.part.20+0x320>)
 800221a:	6063      	str	r3, [r4, #4]
    if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_obj, 1, &ul_obj_cnt, &template_tmp, 1) == CKR_OK)
 800221c:	a906      	add	r1, sp, #24
 800221e:	e9cd 4200 	strd	r4, r2, [sp]
 8002222:	ab0b      	add	r3, sp, #44	; 0x2c
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fd7f 	bl	8000d28 <FindObjectsFromTemplate>
 800222a:	bb20      	cbnz	r0, 8002276 <STSAFE_P11_CreateObject.part.20+0x306>
      if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, h_obj) == CKR_OK)
 800222c:	9a06      	ldr	r2, [sp, #24]
 800222e:	a908      	add	r1, sp, #32
 8002230:	a807      	add	r0, sp, #28
 8002232:	f000 fd19 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8002236:	b9f0      	cbnz	r0, 8002276 <STSAFE_P11_CreateObject.part.20+0x306>
        if (STSAFE_OBJ_CompareTemplates(p_template_filtered, ul_count_filtered, p_template_embedded,
 8002238:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800223c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800223e:	a815      	add	r0, sp, #84	; 0x54
 8002240:	f000 fd99 	bl	8002d76 <STSAFE_OBJ_CompareTemplates>
 8002244:	b178      	cbz	r0, 8002266 <STSAFE_P11_CreateObject.part.20+0x2f6>
 8002246:	e016      	b.n	8002276 <STSAFE_P11_CreateObject.part.20+0x306>
    if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_template_embedded, &ul_count_embedded, h_obj) == CKR_OK)
 8002248:	9a06      	ldr	r2, [sp, #24]
 800224a:	a908      	add	r1, sp, #32
 800224c:	a807      	add	r0, sp, #28
 800224e:	f000 fd0b 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8002252:	2800      	cmp	r0, #0
 8002254:	d1dd      	bne.n	8002212 <STSAFE_P11_CreateObject.part.20+0x2a2>
      if (STSAFE_OBJ_CompareTemplates(p_template_filtered, ul_count_filtered, p_template_embedded,
 8002256:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800225a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800225c:	a815      	add	r0, sp, #84	; 0x54
 800225e:	f000 fd8a 	bl	8002d76 <STSAFE_OBJ_CompareTemplates>
 8002262:	2800      	cmp	r0, #0
 8002264:	d1d5      	bne.n	8002212 <STSAFE_P11_CreateObject.part.20+0x2a2>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_input, CKA_EC_POINT, pTemplate, ulCount) == CKR_OK)
 8002266:	4633      	mov	r3, r6
 8002268:	462a      	mov	r2, r5
 800226a:	f240 1181 	movw	r1, #385	; 0x181
 800226e:	a80a      	add	r0, sp, #40	; 0x28
 8002270:	f000 fd18 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002274:	b170      	cbz	r0, 8002294 <STSAFE_P11_CreateObject.part.20+0x324>
    return CKR_ATTRIBUTE_TYPE_INVALID;
 8002276:	2412      	movs	r4, #18
 8002278:	e693      	b.n	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
 800227a:	bf00      	nop
 800227c:	080197bf 	.word	0x080197bf
 8002280:	80000002 	.word	0x80000002
 8002284:	20002278 	.word	0x20002278
 8002288:	080197d1 	.word	0x080197d1
 800228c:	080197e4 	.word	0x080197e4
 8002290:	080197fa 	.word	0x080197fa
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_embedded, CKA_EC_POINT, p_template_embedded,
 8002294:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002298:	f240 1181 	movw	r1, #385	; 0x181
 800229c:	a809      	add	r0, sp, #36	; 0x24
 800229e:	f000 fd01 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80022a2:	b9b0      	cbnz	r0, 80022d2 <STSAFE_P11_CreateObject.part.20+0x362>
      if (p_attribute_input->ulValueLen <= p_attribute_embedded->ulValueLen)
 80022a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	6881      	ldr	r1, [r0, #8]
 80022ac:	428a      	cmp	r2, r1
 80022ae:	d812      	bhi.n	80022d6 <STSAFE_P11_CreateObject.part.20+0x366>
        e_ret_status = STSAFE_OBJ_SetAttributeValue(p_attribute_embedded, p_attribute_input->pValue,
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	f000 fd55 	bl	8002d60 <STSAFE_OBJ_SetAttributeValue>
  if (e_ret_status != CKR_OK)
 80022b6:	4604      	mov	r4, r0
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f47f ae72 	bne.w	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
  if (ObjectSetSession(h_obj, hSession) != CKR_OK)
 80022be:	4649      	mov	r1, r9
 80022c0:	9806      	ldr	r0, [sp, #24]
 80022c2:	f7fe fd13 	bl	8000cec <ObjectSetSession>
 80022c6:	4604      	mov	r4, r0
 80022c8:	2800      	cmp	r0, #0
 80022ca:	f47f ae69 	bne.w	8001fa0 <STSAFE_P11_CreateObject.part.20+0x30>
  *phObject = h_obj;
 80022ce:	9b06      	ldr	r3, [sp, #24]
 80022d0:	e720      	b.n	8002114 <STSAFE_P11_CreateObject.part.20+0x1a4>
      e_ret_status = CKR_GENERAL_ERROR;
 80022d2:	2405      	movs	r4, #5
 80022d4:	e665      	b.n	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
        e_ret_status = CKR_DEVICE_MEMORY;
 80022d6:	2431      	movs	r4, #49	; 0x31
 80022d8:	e663      	b.n	8001fa2 <STSAFE_P11_CreateObject.part.20+0x32>
 80022da:	bf00      	nop

080022dc <STSAFE_P11_CreateObject>:
{
 80022dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	4604      	mov	r4, r0
 80022e2:	4616      	mov	r6, r2
 80022e4:	461f      	mov	r7, r3
  if ((pTemplate == NULL_PTR) || (ulCount == 0UL) || (ulCount > STSAFE_P11_MAX_TEMPLATE_SIZE) || (phObject == NULL_PTR))
 80022e6:	460d      	mov	r5, r1
 80022e8:	b1b1      	cbz	r1, 8002318 <STSAFE_P11_CreateObject+0x3c>
 80022ea:	1e53      	subs	r3, r2, #1
 80022ec:	2b14      	cmp	r3, #20
 80022ee:	d813      	bhi.n	8002318 <STSAFE_P11_CreateObject+0x3c>
 80022f0:	b197      	cbz	r7, 8002318 <STSAFE_P11_CreateObject+0x3c>
  if (uInitialized == CK_FALSE)
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <STSAFE_P11_CreateObject+0x50>)
 80022f4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80022f8:	b18b      	cbz	r3, 800231e <STSAFE_P11_CreateObject+0x42>
  if (SessionIsValid(hSession) != CKR_OK)
 80022fa:	f7fe fd97 	bl	8000e2c <SessionIsValid>
 80022fe:	b988      	cbnz	r0, 8002324 <STSAFE_P11_CreateObject+0x48>
  if (SessionIsOpen(hSession) != CKR_OK)
 8002300:	4620      	mov	r0, r4
 8002302:	f7fe fda3 	bl	8000e4c <SessionIsOpen>
 8002306:	b978      	cbnz	r0, 8002328 <STSAFE_P11_CreateObject+0x4c>
 8002308:	463b      	mov	r3, r7
 800230a:	4632      	mov	r2, r6
 800230c:	4629      	mov	r1, r5
 800230e:	4620      	mov	r0, r4
}
 8002310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002314:	f7ff be2c 	b.w	8001f70 <STSAFE_P11_CreateObject.part.20>
    return CKR_ARGUMENTS_BAD;
 8002318:	2007      	movs	r0, #7
}
 800231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800231e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002322:	e7fa      	b.n	800231a <STSAFE_P11_CreateObject+0x3e>
    return CKR_SESSION_HANDLE_INVALID;
 8002324:	20b3      	movs	r0, #179	; 0xb3
 8002326:	e7f8      	b.n	800231a <STSAFE_P11_CreateObject+0x3e>
    return CKR_SESSION_CLOSED;
 8002328:	20b0      	movs	r0, #176	; 0xb0
 800232a:	e7f6      	b.n	800231a <STSAFE_P11_CreateObject+0x3e>
 800232c:	2000218c 	.word	0x2000218c

08002330 <STSAFE_P11_GenerateKeyPair.part.11>:
static CK_RV STSAFE_P11_GenerateKeyPair(CK_SESSION_HANDLE    hSession,
 8002330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002334:	b0f4      	sub	sp, #464	; 0x1d0
  template_tmp.type = CKA_LABEL;
 8002336:	2403      	movs	r4, #3
 8002338:	ad17      	add	r5, sp, #92	; 0x5c
static CK_RV STSAFE_P11_GenerateKeyPair(CK_SESSION_HANDLE    hSession,
 800233a:	4607      	mov	r7, r0
 800233c:	4688      	mov	r8, r1
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_LABEL , pPrivateKeyTemplate, ulPrivateKeyAttributeCount) == CKR_OK)
 800233e:	a812      	add	r0, sp, #72	; 0x48
 8002340:	4621      	mov	r1, r4
static CK_RV STSAFE_P11_GenerateKeyPair(CK_SESSION_HANDLE    hSession,
 8002342:	4691      	mov	r9, r2
 8002344:	469a      	mov	sl, r3
  template_tmp.type = CKA_LABEL;
 8002346:	602c      	str	r4, [r5, #0]
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_LABEL , pPrivateKeyTemplate, ulPrivateKeyAttributeCount) == CKR_OK)
 8002348:	f000 fcac 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 800234c:	4606      	mov	r6, r0
 800234e:	b120      	cbz	r0, 800235a <STSAFE_P11_GenerateKeyPair.part.11+0x2a>
     return CKR_FUNCTION_FAILED;
 8002350:	2406      	movs	r4, #6
}
 8002352:	4620      	mov	r0, r4
 8002354:	b074      	add	sp, #464	; 0x1d0
 8002356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    (void) memcpy(&template_tmp.pValue, &p_attribute->pValue, p_attribute->ulValueLen);
 800235a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800235c:	a818      	add	r0, sp, #96	; 0x60
 800235e:	688a      	ldr	r2, [r1, #8]
 8002360:	3104      	adds	r1, #4
 8002362:	f014 fbaa 	bl	8016aba <memcpy>
  if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_prv_obj, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 8002366:	2201      	movs	r2, #1
 8002368:	e9cd 5200 	strd	r5, r2, [sp]
 800236c:	ab0b      	add	r3, sp, #44	; 0x2c
 800236e:	a90a      	add	r1, sp, #40	; 0x28
 8002370:	4630      	mov	r0, r6
 8002372:	f7fe fcd9 	bl	8000d28 <FindObjectsFromTemplate>
 8002376:	2800      	cmp	r0, #0
 8002378:	d1ea      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_prv_template_embedded, &ul_prv_count_embedded, h_prv_obj) != CKR_OK)
 800237a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800237c:	a90e      	add	r1, sp, #56	; 0x38
 800237e:	a810      	add	r0, sp, #64	; 0x40
 8002380:	f000 fc72 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 8002384:	2800      	cmp	r0, #0
 8002386:	d1e3      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_LABEL , pPublicKeyTemplate, ulPublicKeyAttributeCount) == CKR_OK)
 8002388:	4643      	mov	r3, r8
 800238a:	463a      	mov	r2, r7
 800238c:	4621      	mov	r1, r4
 800238e:	a812      	add	r0, sp, #72	; 0x48
  template_tmp.type = CKA_LABEL;
 8002390:	602c      	str	r4, [r5, #0]
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, CKA_LABEL , pPublicKeyTemplate, ulPublicKeyAttributeCount) == CKR_OK)
 8002392:	f000 fc87 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002396:	b928      	cbnz	r0, 80023a4 <STSAFE_P11_GenerateKeyPair.part.11+0x74>
    (void) memcpy(&template_tmp.pValue, &p_attribute->pValue, p_attribute->ulValueLen);
 8002398:	9912      	ldr	r1, [sp, #72]	; 0x48
 800239a:	a818      	add	r0, sp, #96	; 0x60
 800239c:	688a      	ldr	r2, [r1, #8]
 800239e:	3104      	adds	r1, #4
 80023a0:	f014 fb8b 	bl	8016aba <memcpy>
  if (FindObjectsFromTemplate(CKV_SESSION_HANDLE_ANY, &h_pub_obj, 1, &ul_obj_cnt, &template_tmp, 1) != CKR_OK)
 80023a4:	2501      	movs	r5, #1
 80023a6:	ab17      	add	r3, sp, #92	; 0x5c
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	9501      	str	r5, [sp, #4]
 80023ac:	ab0b      	add	r3, sp, #44	; 0x2c
 80023ae:	462a      	mov	r2, r5
 80023b0:	a909      	add	r1, sp, #36	; 0x24
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe fcb8 	bl	8000d28 <FindObjectsFromTemplate>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1c9      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (STSAFE_OBJ_GetTemplateFromObjectHandle(&p_pub_template_embedded, &ul_pub_count_embedded, h_pub_obj) != CKR_OK)
 80023bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023be:	a90c      	add	r1, sp, #48	; 0x30
 80023c0:	a80f      	add	r0, sp, #60	; 0x3c
 80023c2:	f000 fc51 	bl	8002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d1c2      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  CK_ATTRIBUTE attribute_filter[] =  { {CKA_EC_POINT, NULL_PTR, 0}  } ;
 80023ca:	f240 1381 	movw	r3, #385	; 0x181
 80023ce:	ae1a      	add	r6, sp, #104	; 0x68
 80023d0:	e9cd 301a 	strd	r3, r0, [sp, #104]	; 0x68
 80023d4:	901c      	str	r0, [sp, #112]	; 0x70
  if (STSAFE_OBJ_FilterTemplate(p_template_filtered, &ul_count_filtered, pPrivateKeyTemplate,
 80023d6:	e9cd 6500 	strd	r6, r5, [sp]
 80023da:	4653      	mov	r3, sl
 80023dc:	464a      	mov	r2, r9
 80023de:	a90d      	add	r1, sp, #52	; 0x34
 80023e0:	a835      	add	r0, sp, #212	; 0xd4
 80023e2:	f000 fc73 	bl	8002ccc <STSAFE_OBJ_FilterTemplate>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d1b2      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  e_ret_status = STSAFE_OBJ_CompareTemplates(p_template_filtered, ul_count_filtered, p_prv_template_embedded,
 80023ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80023ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80023f0:	a835      	add	r0, sp, #212	; 0xd4
 80023f2:	f000 fcc0 	bl	8002d76 <STSAFE_OBJ_CompareTemplates>
  if (e_ret_status != CKR_OK)
 80023f6:	4604      	mov	r4, r0
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d1aa      	bne.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
  if (STSAFE_OBJ_FilterTemplate(p_template_filtered, &ul_count_filtered, pPublicKeyTemplate, ulPublicKeyAttributeCount,
 80023fc:	e9cd 6500 	strd	r6, r5, [sp]
 8002400:	4643      	mov	r3, r8
 8002402:	463a      	mov	r2, r7
 8002404:	a90d      	add	r1, sp, #52	; 0x34
 8002406:	a835      	add	r0, sp, #212	; 0xd4
 8002408:	f000 fc60 	bl	8002ccc <STSAFE_OBJ_FilterTemplate>
 800240c:	2800      	cmp	r0, #0
 800240e:	d19f      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  e_ret_status = STSAFE_OBJ_CompareTemplates(p_template_filtered, ul_count_filtered, p_pub_template_embedded,
 8002410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002412:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002414:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002416:	a835      	add	r0, sp, #212	; 0xd4
 8002418:	f000 fcad 	bl	8002d76 <STSAFE_OBJ_CompareTemplates>
  if (e_ret_status != CKR_OK)
 800241c:	4604      	mov	r4, r0
 800241e:	2800      	cmp	r0, #0
 8002420:	d197      	bne.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_PARAMS, p_prv_template_embedded,
 8002422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002426:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800242a:	a811      	add	r0, sp, #68	; 0x44
 800242c:	f000 fc3a 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002430:	2800      	cmp	r0, #0
 8002432:	d18d      	bne.n	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_256_DER, p_attribute_tmp->ulValueLen) == 0)
 8002434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002436:	4944      	ldr	r1, [pc, #272]	; (8002548 <STSAFE_P11_GenerateKeyPair.part.11+0x218>)
 8002438:	e9d3 4601 	ldrd	r4, r6, [r3, #4]
 800243c:	4632      	mov	r2, r6
 800243e:	4620      	mov	r0, r4
 8002440:	f014 fb2c 	bl	8016a9c <memcmp>
 8002444:	2800      	cmp	r0, #0
 8002446:	d077      	beq.n	8002538 <STSAFE_P11_GenerateKeyPair.part.11+0x208>
  else if (memcmp(p_attribute_tmp->pValue, STSAFEA_ECC_CURVE_OID_NIST_P_384_DER, p_attribute_tmp->ulValueLen) == 0)
 8002448:	4632      	mov	r2, r6
 800244a:	4940      	ldr	r1, [pc, #256]	; (800254c <STSAFE_P11_GenerateKeyPair.part.11+0x21c>)
 800244c:	4620      	mov	r0, r4
 800244e:	f014 fb25 	bl	8016a9c <memcmp>
 8002452:	2800      	cmp	r0, #0
 8002454:	f47f af7c 	bne.w	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EXT_TOKEN_PRVKEY_SLOT, p_prv_template_embedded,
 8002458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800245a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800245c:	493c      	ldr	r1, [pc, #240]	; (8002550 <STSAFE_P11_GenerateKeyPair.part.11+0x220>)
 800245e:	a811      	add	r0, sp, #68	; 0x44
 8002460:	f000 fc20 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002464:	2800      	cmp	r0, #0
 8002466:	f47f af73 	bne.w	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  slot_id=(*((CK_EXT_TOKEN_PRVKEY_SLOT *) (p_attribute_tmp->pValue)));
 800246a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	7819      	ldrb	r1, [r3, #0]
    in_authorization_flags=(STSAFEA_PRVKEY_MODOPER_AUTHFLAG_KEY_ESTABLISHEN);
 8002470:	29ff      	cmp	r1, #255	; 0xff
 8002472:	bf14      	ite	ne
 8002474:	2304      	movne	r3, #4
 8002476:	2301      	moveq	r3, #1
  if (StSafeA_GenerateKeyPair(&hStSafe, slot_id, 0xFFFFU, 1U,
 8002478:	2d00      	cmp	r5, #0
 800247a:	bf14      	ite	ne
 800247c:	2230      	movne	r2, #48	; 0x30
 800247e:	2220      	moveq	r2, #32
 8002480:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 8002484:	20a0      	movs	r0, #160	; 0xa0
 8002486:	af15      	add	r7, sp, #84	; 0x54
 8002488:	e9cd 2803 	strd	r2, r8, [sp, #12]
 800248c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 8002490:	9006      	str	r0, [sp, #24]
 8002492:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	9705      	str	r7, [sp, #20]
 800249a:	2301      	movs	r3, #1
 800249c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a0:	482c      	ldr	r0, [pc, #176]	; (8002554 <STSAFE_P11_GenerateKeyPair.part.11+0x224>)
 80024a2:	f006 ffc7 	bl	8009434 <StSafeA_GenerateKeyPair>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	f47f af52 	bne.w	8002350 <STSAFE_P11_GenerateKeyPair.part.11+0x20>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_VENDOR_OBJECT_AVAILABILITY, p_prv_template_embedded,
 80024ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80024b0:	4929      	ldr	r1, [pc, #164]	; (8002558 <STSAFE_P11_GenerateKeyPair.part.11+0x228>)
 80024b2:	a811      	add	r0, sp, #68	; 0x44
 80024b4:	f000 fbf6 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80024b8:	b930      	cbnz	r0, 80024c8 <STSAFE_P11_GenerateKeyPair.part.11+0x198>
    CK_BBOOL bValue = CK_TRUE;
 80024ba:	2201      	movs	r2, #1
    e_ret_status = STSAFE_OBJ_SetAttributeValue(p_attribute_tmp, (CK_BYTE*)&bValue, sizeof(CK_BBOOL));
 80024bc:	a91d      	add	r1, sp, #116	; 0x74
 80024be:	9811      	ldr	r0, [sp, #68]	; 0x44
    CK_BBOOL bValue = CK_TRUE;
 80024c0:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
    e_ret_status = STSAFE_OBJ_SetAttributeValue(p_attribute_tmp, (CK_BYTE*)&bValue, sizeof(CK_BBOOL));
 80024c4:	f000 fc4c 	bl	8002d60 <STSAFE_OBJ_SetAttributeValue>
  ul_public_data_raw_len = (uint32_t)pub_x.Length;
 80024c8:	f8b8 5000 	ldrh.w	r5, [r8]
  ul_public_data_raw_len += (uint32_t) pub_y.Length;
 80024cc:	883e      	ldrh	r6, [r7, #0]
  (void)memcpy(&p_public_data_raw[0U], pub_x.Data, pub_x.Length);
 80024ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80024d2:	462a      	mov	r2, r5
 80024d4:	a81d      	add	r0, sp, #116	; 0x74
 80024d6:	f014 faf0 	bl	8016aba <memcpy>
  (void)memcpy(&p_public_data_raw[pub_x.Length], pub_y.Data, pub_y.Length);
 80024da:	ab1d      	add	r3, sp, #116	; 0x74
 80024dc:	4632      	mov	r2, r6
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	1958      	adds	r0, r3, r5
 80024e2:	f014 faea 	bl	8016aba <memcpy>
  if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute_tmp, CKA_EC_POINT, p_pub_template_embedded,
 80024e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80024ea:	f240 1181 	movw	r1, #385	; 0x181
 80024ee:	a811      	add	r0, sp, #68	; 0x44
 80024f0:	f000 fbd8 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 80024f4:	4604      	mov	r4, r0
 80024f6:	bb08      	cbnz	r0, 800253c <STSAFE_P11_GenerateKeyPair.part.11+0x20c>
  if (ul_public_data_raw_len > p_attribute_tmp->ulValueLen)
 80024f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024fa:	689a      	ldr	r2, [r3, #8]
  ul_public_data_raw_len += (uint32_t) pub_y.Length;
 80024fc:	4435      	add	r5, r6
  if (ul_public_data_raw_len > p_attribute_tmp->ulValueLen)
 80024fe:	4295      	cmp	r5, r2
 8002500:	d81e      	bhi.n	8002540 <STSAFE_P11_GenerateKeyPair.part.11+0x210>
  if ((pulValueOutLen == NULL_PTR) || (pValueIn == NULL_PTR) || (ulValueInLen == 0))
 8002502:	1e6a      	subs	r2, r5, #1
 8002504:	2a7e      	cmp	r2, #126	; 0x7e
 8002506:	d81d      	bhi.n	8002544 <STSAFE_P11_GenerateKeyPair.part.11+0x214>
  if (EncodeRawToDerASN1UncompressedEcPoint(p_attribute_tmp->pValue, &u_len_tmp, p_public_data_raw,
 8002508:	6858      	ldr	r0, [r3, #4]
  if (pValueOut != NULL_PTR)
 800250a:	b140      	cbz	r0, 800251e <STSAFE_P11_GenerateKeyPair.part.11+0x1ee>
    pValueOut[i] = ASN_OCTET_STRING;
 800250c:	2304      	movs	r3, #4
    pValueOut[i] += 1U;
 800250e:	1c6a      	adds	r2, r5, #1
    pValueOut[i] = ASN_OCTET_STRING;
 8002510:	7003      	strb	r3, [r0, #0]
    pValueOut[i] += 1U;
 8002512:	7042      	strb	r2, [r0, #1]
    pValueOut[i] = DER_UNCOMPRESSED;
 8002514:	7083      	strb	r3, [r0, #2]
    (void)memcpy(&pValueOut[i], pValueIn, ulValueInLen + 1UL) ;
 8002516:	a91d      	add	r1, sp, #116	; 0x74
 8002518:	3003      	adds	r0, #3
 800251a:	f014 face 	bl	8016aba <memcpy>
  ObjectSetVendorObjectAvailability(h_pub_obj, CK_TRUE);
 800251e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002520:	f7ff fd08 	bl	8001f34 <ObjectSetVendorObjectAvailability.constprop.33>
  ObjectSetVendorObjectAvailability(h_prv_obj, CK_TRUE);
 8002524:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002526:	f7ff fd05 	bl	8001f34 <ObjectSetVendorObjectAvailability.constprop.33>
  *phPublicKey = h_pub_obj;
 800252a:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 800252c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800252e:	601a      	str	r2, [r3, #0]
  *phPrivateKey = h_prv_obj;
 8002530:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8002532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e70c      	b.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
    curve = STSAFEA_NIST_P_256;
 8002538:	4605      	mov	r5, r0
 800253a:	e78d      	b.n	8002458 <STSAFE_P11_GenerateKeyPair.part.11+0x128>
    return CKR_ATTRIBUTE_TYPE_INVALID;
 800253c:	2412      	movs	r4, #18
 800253e:	e708      	b.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
    return CKR_DEVICE_MEMORY;
 8002540:	2431      	movs	r4, #49	; 0x31
 8002542:	e706      	b.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
    return CKR_ATTRIBUTE_VALUE_INVALID;
 8002544:	2413      	movs	r4, #19
 8002546:	e704      	b.n	8002352 <STSAFE_P11_GenerateKeyPair.part.11+0x22>
 8002548:	080197a4 	.word	0x080197a4
 800254c:	08016fc0 	.word	0x08016fc0
 8002550:	80000001 	.word	0x80000001
 8002554:	20002278 	.word	0x20002278
 8002558:	80000005 	.word	0x80000005

0800255c <STSAFE_P11_GenerateKeyPair>:
{
 800255c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	4683      	mov	fp, r0
 8002562:	4614      	mov	r4, r2
 8002564:	461d      	mov	r5, r3
 8002566:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800256a:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
  if ((pMechanism == NULL_PTR) || (pPublicKeyTemplate == NULL_PTR) || (pPrivateKeyTemplate == NULL_PTR)
 800256e:	468a      	mov	sl, r1
 8002570:	b321      	cbz	r1, 80025bc <STSAFE_P11_GenerateKeyPair+0x60>
 8002572:	b31a      	cbz	r2, 80025bc <STSAFE_P11_GenerateKeyPair+0x60>
 8002574:	b316      	cbz	r6, 80025bc <STSAFE_P11_GenerateKeyPair+0x60>
      || (phPublicKey == NULL_PTR) || (phPrivateKey == NULL_PTR) || (ulPublicKeyAttributeCount == 0UL)
 8002576:	f1b8 0f00 	cmp.w	r8, #0
 800257a:	d01f      	beq.n	80025bc <STSAFE_P11_GenerateKeyPair+0x60>
 800257c:	f1b9 0f00 	cmp.w	r9, #0
 8002580:	d01c      	beq.n	80025bc <STSAFE_P11_GenerateKeyPair+0x60>
 8002582:	b1db      	cbz	r3, 80025bc <STSAFE_P11_GenerateKeyPair+0x60>
      || (ulPrivateKeyAttributeCount == 0UL))
 8002584:	b1d7      	cbz	r7, 80025bc <STSAFE_P11_GenerateKeyPair+0x60>
  if (uInitialized == CK_FALSE)
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <STSAFE_P11_GenerateKeyPair+0x7c>)
 8002588:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800258c:	b1d3      	cbz	r3, 80025c4 <STSAFE_P11_GenerateKeyPair+0x68>
  if (SessionIsValid(hSession) != CKR_OK)
 800258e:	f7fe fc4d 	bl	8000e2c <SessionIsValid>
 8002592:	b9d0      	cbnz	r0, 80025ca <STSAFE_P11_GenerateKeyPair+0x6e>
  if (SessionIsOpen(hSession) != CKR_OK)
 8002594:	4658      	mov	r0, fp
 8002596:	f7fe fc59 	bl	8000e4c <SessionIsOpen>
 800259a:	b9c0      	cbnz	r0, 80025ce <STSAFE_P11_GenerateKeyPair+0x72>
  if (pMechanism->mechanism != CKM_EC_KEY_PAIR_GEN)
 800259c:	f8da 3000 	ldr.w	r3, [sl]
 80025a0:	f5b3 5f82 	cmp.w	r3, #4160	; 0x1040
 80025a4:	d115      	bne.n	80025d2 <STSAFE_P11_GenerateKeyPair+0x76>
 80025a6:	463b      	mov	r3, r7
 80025a8:	4632      	mov	r2, r6
 80025aa:	4629      	mov	r1, r5
 80025ac:	4620      	mov	r0, r4
 80025ae:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
}
 80025b2:	b001      	add	sp, #4
 80025b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	f7ff beba 	b.w	8002330 <STSAFE_P11_GenerateKeyPair.part.11>
    return CKR_ARGUMENTS_BAD;
 80025bc:	2007      	movs	r0, #7
}
 80025be:	b001      	add	sp, #4
 80025c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80025c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025c8:	e7f9      	b.n	80025be <STSAFE_P11_GenerateKeyPair+0x62>
    return CKR_SESSION_HANDLE_INVALID;
 80025ca:	20b3      	movs	r0, #179	; 0xb3
 80025cc:	e7f7      	b.n	80025be <STSAFE_P11_GenerateKeyPair+0x62>
    return CKR_SESSION_CLOSED;
 80025ce:	20b0      	movs	r0, #176	; 0xb0
 80025d0:	e7f5      	b.n	80025be <STSAFE_P11_GenerateKeyPair+0x62>
    return CKR_MECHANISM_INVALID;
 80025d2:	2070      	movs	r0, #112	; 0x70
 80025d4:	e7f3      	b.n	80025be <STSAFE_P11_GenerateKeyPair+0x62>
 80025d6:	bf00      	nop
 80025d8:	2000218c 	.word	0x2000218c

080025dc <STSAFE_P11_DecryptVerifyUpdate>:
 80025dc:	2054      	movs	r0, #84	; 0x54
 80025de:	4770      	bx	lr

080025e0 <STSAFE_P11_EncryptUpdate>:
 80025e0:	2054      	movs	r0, #84	; 0x54
 80025e2:	4770      	bx	lr

080025e4 <STSAFE_P11_Decrypt>:
 80025e4:	2054      	movs	r0, #84	; 0x54
 80025e6:	4770      	bx	lr

080025e8 <STSAFE_P11_DecryptUpdate>:
 80025e8:	2054      	movs	r0, #84	; 0x54
 80025ea:	4770      	bx	lr

080025ec <STSAFE_P11_Digest>:
 80025ec:	2054      	movs	r0, #84	; 0x54
 80025ee:	4770      	bx	lr

080025f0 <STSAFE_P11_SignRecover>:
 80025f0:	2054      	movs	r0, #84	; 0x54
 80025f2:	4770      	bx	lr

080025f4 <STSAFE_P11_VerifyRecover>:
 80025f4:	2054      	movs	r0, #84	; 0x54
 80025f6:	4770      	bx	lr

080025f8 <STSAFE_P11_DigestEncryptUpdate>:
 80025f8:	2054      	movs	r0, #84	; 0x54
 80025fa:	4770      	bx	lr

080025fc <STSAFE_P11_DecryptDigestUpdate>:
 80025fc:	2054      	movs	r0, #84	; 0x54
 80025fe:	4770      	bx	lr

08002600 <STSAFE_P11_SignRecoverInit>:
 8002600:	2054      	movs	r0, #84	; 0x54
 8002602:	4770      	bx	lr

08002604 <STSAFE_P11_SignUpdate>:
 8002604:	2054      	movs	r0, #84	; 0x54
 8002606:	4770      	bx	lr

08002608 <STSAFE_P11_SignFinal>:
 8002608:	2054      	movs	r0, #84	; 0x54
 800260a:	4770      	bx	lr

0800260c <STSAFE_P11_DigestUpdate>:
 800260c:	2054      	movs	r0, #84	; 0x54
 800260e:	4770      	bx	lr

08002610 <STSAFE_P11_DigestFinal>:
 8002610:	2054      	movs	r0, #84	; 0x54
 8002612:	4770      	bx	lr

08002614 <STSAFE_P11_VerifyUpdate>:
 8002614:	2054      	movs	r0, #84	; 0x54
 8002616:	4770      	bx	lr

08002618 <STSAFE_P11_VerifyFinal>:
 8002618:	2054      	movs	r0, #84	; 0x54
 800261a:	4770      	bx	lr

0800261c <STSAFE_P11_VerifyRecoverInit>:
 800261c:	2054      	movs	r0, #84	; 0x54
 800261e:	4770      	bx	lr

08002620 <STSAFE_P11_EncryptInit>:
 8002620:	2054      	movs	r0, #84	; 0x54
 8002622:	4770      	bx	lr

08002624 <STSAFE_P11_EncryptFinal>:
 8002624:	2054      	movs	r0, #84	; 0x54
 8002626:	4770      	bx	lr

08002628 <STSAFE_P11_DecryptInit>:
 8002628:	2054      	movs	r0, #84	; 0x54
 800262a:	4770      	bx	lr

0800262c <STSAFE_P11_DecryptFinal>:
 800262c:	2054      	movs	r0, #84	; 0x54
 800262e:	4770      	bx	lr

08002630 <STSAFE_P11_WaitForSlotEvent>:
 8002630:	2054      	movs	r0, #84	; 0x54
 8002632:	4770      	bx	lr

08002634 <STSAFE_P11_GetSessionInfo>:
 8002634:	2054      	movs	r0, #84	; 0x54
 8002636:	4770      	bx	lr

08002638 <STSAFE_P11_DigestInit>:
 8002638:	2054      	movs	r0, #84	; 0x54
 800263a:	4770      	bx	lr

0800263c <STSAFE_P11_Logout>:
 800263c:	2054      	movs	r0, #84	; 0x54
 800263e:	4770      	bx	lr

08002640 <STSAFE_P11_GetFunctionStatus>:
 8002640:	2054      	movs	r0, #84	; 0x54
 8002642:	4770      	bx	lr

08002644 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002644:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002648:	4905      	ldr	r1, [pc, #20]	; (8002660 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800264c:	68ca      	ldr	r2, [r1, #12]
 800264e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
 8002656:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800265a:	bf00      	nop
 800265c:	e7fd      	b.n	800265a <__NVIC_SystemReset+0x16>
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	05fa0004 	.word	0x05fa0004

08002668 <KMS_LL_FLASH_Read>:
  * @param  pSource flash aread to read from
  * @param  Length amount of data to read from flash
  * @retval Operation status
  */
CK_RV KMS_LL_FLASH_Read(void *pDestination, const void *pSource, uint32_t Length)
{
 8002668:	b508      	push	{r3, lr}
  SE_ErrorStatus seStatus;
  seStatus = SE_LL_FLASH_Read(pDestination, pSource, Length);
 800266a:	f000 fa57 	bl	8002b1c <SE_LL_FLASH_Read>
  return (seStatus == SE_SUCCESS) ? CKR_OK : CKR_GENERAL_ERROR;
}
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <KMS_LL_FLASH_Read+0x14>)
 8002670:	4298      	cmp	r0, r3
 8002672:	bf14      	ite	ne
 8002674:	2005      	movne	r0, #5
 8002676:	2000      	moveq	r0, #0
 8002678:	bd08      	pop	{r3, pc}
 800267a:	bf00      	nop
 800267c:	0012310f 	.word	0x0012310f

08002680 <KMS_LL_FLASH_GetBlobDownloadAddress>:
  * @retval Encrypted blob address
  */
uint32_t KMS_LL_FLASH_GetBlobDownloadAddress(void)
{
  return (uint32_t)KMS_BLOB_DOWNLOAD_ADDRESS;
}
 8002680:	4800      	ldr	r0, [pc, #0]	; (8002684 <KMS_LL_FLASH_GetBlobDownloadAddress+0x4>)
 8002682:	4770      	bx	lr
 8002684:	08036000 	.word	0x08036000

08002688 <KMS_LL_CRC_Init>:
  * @retval Operation status
  */
CK_RV KMS_LL_CRC_Init(void)
{
  /* CRC Peripheral clock enable */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <KMS_LL_CRC_Init+0x2c>)
 800268a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800268c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002690:	649a      	str	r2, [r3, #72]	; 0x48
 8002692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 8002694:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8002696:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	9a01      	ldr	r2, [sp, #4]
  /* CRC Peripheral Reset */
  __HAL_RCC_CRC_FORCE_RESET();
 800269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_CRC_RELEASE_RESET();
 80026a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

  return CKR_OK;
}
 80026a8:	2000      	movs	r0, #0
  __HAL_RCC_CRC_RELEASE_RESET();
 80026aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b0:	b002      	add	sp, #8
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000

080026b8 <KMS_LL_IsBufferInSecureEnclave>:
  * @param  pBuffer Buffer address
  * @param  ulSize  Buffer size
  * @retval void
  */
void KMS_LL_IsBufferInSecureEnclave(void * pBuffer, uint32_t ulSize)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t addr_start = (uint32_t)pBuffer;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
  uint32_t addr_end = addr_start + ulSize - 1U;
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]

  /* If pBuffer is NULL, simply return FALSE */
  if (pBuffer == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d069      	beq.n	80027aa <KMS_LL_IsBufferInSecureEnclave+0xf2>
  {
    return;
  }
  /* Check if address range is within secure enclave  */
  /*     Checking RAM Need to add test to protect on NVM_STORAGE */
   if ((ulSize != 0U) && ((((addr_start >= SE_REGION_SRAM1_START) && (addr_start <= SE_REGION_SRAM1_END))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d031      	beq.n	8002740 <KMS_LL_IsBufferInSecureEnclave+0x88>
 80026dc:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <KMS_LL_IsBufferInSecureEnclave+0x100>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d303      	bcc.n	80026ec <KMS_LL_IsBufferInSecureEnclave+0x34>
 80026e4:	4a35      	ldr	r2, [pc, #212]	; (80027bc <KMS_LL_IsBufferInSecureEnclave+0x104>)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d927      	bls.n	800273c <KMS_LL_IsBufferInSecureEnclave+0x84>
                        || ((addr_end   >= SE_REGION_SRAM1_START) && (addr_end   <= SE_REGION_SRAM1_END))
 80026ec:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <KMS_LL_IsBufferInSecureEnclave+0x100>)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d303      	bcc.n	80026fc <KMS_LL_IsBufferInSecureEnclave+0x44>
 80026f4:	4a31      	ldr	r2, [pc, #196]	; (80027bc <KMS_LL_IsBufferInSecureEnclave+0x104>)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d91f      	bls.n	800273c <KMS_LL_IsBufferInSecureEnclave+0x84>
                        || ((addr_start >= SE_CODE_REGION_ROM_START) && (addr_start <= SE_CODE_REGION_ROM_END))
 80026fc:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <KMS_LL_IsBufferInSecureEnclave+0x108>)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4293      	cmp	r3, r2
 8002702:	d303      	bcc.n	800270c <KMS_LL_IsBufferInSecureEnclave+0x54>
 8002704:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <KMS_LL_IsBufferInSecureEnclave+0x10c>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4293      	cmp	r3, r2
 800270a:	d917      	bls.n	800273c <KMS_LL_IsBufferInSecureEnclave+0x84>
                        || ((addr_end   >= SE_CODE_REGION_ROM_START) && (addr_end   <= SE_CODE_REGION_ROM_END))
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <KMS_LL_IsBufferInSecureEnclave+0x108>)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4293      	cmp	r3, r2
 8002712:	d303      	bcc.n	800271c <KMS_LL_IsBufferInSecureEnclave+0x64>
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <KMS_LL_IsBufferInSecureEnclave+0x10c>)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4293      	cmp	r3, r2
 800271a:	d90f      	bls.n	800273c <KMS_LL_IsBufferInSecureEnclave+0x84>
                        || ((addr_start >= KMS_DATASTORAGE_START) && (addr_start <= KMS_DATASTORAGE_END))
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <KMS_LL_IsBufferInSecureEnclave+0x110>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4293      	cmp	r3, r2
 8002722:	d303      	bcc.n	800272c <KMS_LL_IsBufferInSecureEnclave+0x74>
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <KMS_LL_IsBufferInSecureEnclave+0x114>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4293      	cmp	r3, r2
 800272a:	d907      	bls.n	800273c <KMS_LL_IsBufferInSecureEnclave+0x84>
                        || ((addr_end   >= KMS_DATASTORAGE_START) && (addr_end   <= KMS_DATASTORAGE_END)))))
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <KMS_LL_IsBufferInSecureEnclave+0x110>)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4293      	cmp	r3, r2
 8002732:	d305      	bcc.n	8002740 <KMS_LL_IsBufferInSecureEnclave+0x88>
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <KMS_LL_IsBufferInSecureEnclave+0x114>)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4293      	cmp	r3, r2
 800273a:	d801      	bhi.n	8002740 <KMS_LL_IsBufferInSecureEnclave+0x88>
     
     
  {
    /* Could be an attack ==> Reset */
    NVIC_SystemReset();
 800273c:	f7ff ff82 	bl	8002644 <__NVIC_SystemReset>
  }

   /* Double Check to avoid basic fault injection */
   if ((ulSize != 0U) && ((((addr_start >= SE_REGION_SRAM1_START) && (addr_start <= SE_REGION_SRAM1_END))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d033      	beq.n	80027ae <KMS_LL_IsBufferInSecureEnclave+0xf6>
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <KMS_LL_IsBufferInSecureEnclave+0x100>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4293      	cmp	r3, r2
 800274c:	d303      	bcc.n	8002756 <KMS_LL_IsBufferInSecureEnclave+0x9e>
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <KMS_LL_IsBufferInSecureEnclave+0x104>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4293      	cmp	r3, r2
 8002754:	d927      	bls.n	80027a6 <KMS_LL_IsBufferInSecureEnclave+0xee>
                        || ((addr_end   >= SE_REGION_SRAM1_START) && (addr_end   <= SE_REGION_SRAM1_END))
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <KMS_LL_IsBufferInSecureEnclave+0x100>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4293      	cmp	r3, r2
 800275c:	d303      	bcc.n	8002766 <KMS_LL_IsBufferInSecureEnclave+0xae>
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <KMS_LL_IsBufferInSecureEnclave+0x104>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4293      	cmp	r3, r2
 8002764:	d91f      	bls.n	80027a6 <KMS_LL_IsBufferInSecureEnclave+0xee>
                        || ((addr_start >= SE_CODE_REGION_ROM_START) && (addr_start <= SE_CODE_REGION_ROM_END))
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <KMS_LL_IsBufferInSecureEnclave+0x108>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4293      	cmp	r3, r2
 800276c:	d303      	bcc.n	8002776 <KMS_LL_IsBufferInSecureEnclave+0xbe>
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <KMS_LL_IsBufferInSecureEnclave+0x10c>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4293      	cmp	r3, r2
 8002774:	d917      	bls.n	80027a6 <KMS_LL_IsBufferInSecureEnclave+0xee>
                        || ((addr_end   >= SE_CODE_REGION_ROM_START) && (addr_end   <= SE_CODE_REGION_ROM_END))
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <KMS_LL_IsBufferInSecureEnclave+0x108>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4293      	cmp	r3, r2
 800277c:	d303      	bcc.n	8002786 <KMS_LL_IsBufferInSecureEnclave+0xce>
 800277e:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <KMS_LL_IsBufferInSecureEnclave+0x10c>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4293      	cmp	r3, r2
 8002784:	d90f      	bls.n	80027a6 <KMS_LL_IsBufferInSecureEnclave+0xee>
                        || ((addr_start >= KMS_DATASTORAGE_START) && (addr_start <= KMS_DATASTORAGE_END))
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <KMS_LL_IsBufferInSecureEnclave+0x110>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4293      	cmp	r3, r2
 800278c:	d303      	bcc.n	8002796 <KMS_LL_IsBufferInSecureEnclave+0xde>
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <KMS_LL_IsBufferInSecureEnclave+0x114>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4293      	cmp	r3, r2
 8002794:	d907      	bls.n	80027a6 <KMS_LL_IsBufferInSecureEnclave+0xee>
                        || ((addr_end   >= KMS_DATASTORAGE_START) && (addr_end   <= KMS_DATASTORAGE_END)))))
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <KMS_LL_IsBufferInSecureEnclave+0x110>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4293      	cmp	r3, r2
 800279c:	d307      	bcc.n	80027ae <KMS_LL_IsBufferInSecureEnclave+0xf6>
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <KMS_LL_IsBufferInSecureEnclave+0x114>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d803      	bhi.n	80027ae <KMS_LL_IsBufferInSecureEnclave+0xf6>
     
     
  {
    /* Could be an attack ==> Reset */
    NVIC_SystemReset();
 80027a6:	f7ff ff4d 	bl	8002644 <__NVIC_SystemReset>
    return;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <KMS_LL_IsBufferInSecureEnclave+0xf8>
  }
  
  return;
 80027ae:	bf00      	nop
}
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	2001ffbf 	.word	0x2001ffbf
 80027c0:	08000200 	.word	0x08000200
 80027c4:	0801b4ff 	.word	0x0801b4ff
 80027c8:	08101000 	.word	0x08101000
 80027cc:	08104fff 	.word	0x08104fff

080027d0 <NVMS_LL_Init>:
  * @brief   Flash low level driver initialization.
  */
void NVMS_LL_Init(void)
{

}
 80027d0:	4770      	bx	lr
	...

080027d4 <NVMS_LL_IsBlockErased>:
  * @return                  The block state.
  * @retval false            if the block is not in erased state.
  * @retval true             if the block is in erased state.
  */
bool NVMS_LL_IsBlockErased(nvms_block_t block)
{
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <NVMS_LL_IsBlockErased+0x28>)
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <NVMS_LL_IsBlockErased+0x2c>)
 80027d8:	1ad2      	subs	r2, r2, r3
  uint32_t i;
  uint32_t *p = (uint32_t *)((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS :
 80027da:	b108      	cbz	r0, 80027e0 <NVMS_LL_IsBlockErased+0xc>
                             NVMS_LL_BLOCK1_ADDRESS);
 80027dc:	eb03 0352 	add.w	r3, r3, r2, lsr #1

  for (i = 0; i < (NVMS_LL_BLOCK_SIZE / sizeof(uint32_t)); i++)
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <NVMS_LL_IsBlockErased+0x1a>
    {
      return false;
    }
    p++;
  }
  return true;
 80027ea:	2001      	movs	r0, #1
 80027ec:	4770      	bx	lr
    if (*p != NVMS_LL_ERASED)
 80027ee:	f853 1b04 	ldr.w	r1, [r3], #4
 80027f2:	3101      	adds	r1, #1
 80027f4:	d0f7      	beq.n	80027e6 <NVMS_LL_IsBlockErased+0x12>
      return false;
 80027f6:	2000      	movs	r0, #0
}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	08101000 	.word	0x08101000
 8002800:	08105000 	.word	0x08105000

08002804 <NVMS_LL_BlockErase>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the erase operation failed.
  */
bool NVMS_LL_BlockErase(nvms_block_t block)
{
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <NVMS_LL_BlockErase+0xb0>)
 8002808:	492b      	ldr	r1, [pc, #172]	; (80028b8 <NVMS_LL_BlockErase+0xb4>)
 800280a:	b087      	sub	sp, #28
  /* Erase First Flash sector */
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
 800280c:	2300      	movs	r3, #0

#if defined(USE_STM32L4XX_NUCLEO)|| defined(USE_STM32L475E_IOT01)
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800280e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002812:	1a89      	subs	r1, r1, r2
  EraseInitStruct.Banks       = get_bank((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8002814:	4604      	mov	r4, r0
 8002816:	b108      	cbz	r0, 800281c <NVMS_LL_BlockErase+0x18>
 8002818:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0UL)
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <NVMS_LL_BlockErase+0xb8>)
 800281e:	4828      	ldr	r0, [pc, #160]	; (80028c0 <NVMS_LL_BlockErase+0xbc>)
 8002820:	681f      	ldr	r7, [r3, #0]
 8002822:	6805      	ldr	r5, [r0, #0]
 8002824:	05ff      	lsls	r7, r7, #23
 8002826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282a:	b2ae      	uxth	r6, r5
 800282c:	d433      	bmi.n	8002896 <NVMS_LL_BlockErase+0x92>
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800282e:	429e      	cmp	r6, r3
 8002830:	bf1d      	ittte	ne
 8002832:	4b24      	ldrne	r3, [pc, #144]	; (80028c4 <NVMS_LL_BlockErase+0xc0>)
 8002834:	ea03 2345 	andne.w	r3, r3, r5, lsl #9
 8002838:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 800283c:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
      bank = FLASH_BANK_2;
 8002840:	429a      	cmp	r2, r3
 8002842:	bf34      	ite	cc
 8002844:	2301      	movcc	r3, #1
 8002846:	2302      	movcs	r3, #2
  EraseInitStruct.Banks       = get_bank((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8002848:	9303      	str	r3, [sp, #12]
  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 800284a:	6800      	ldr	r0, [r0, #0]
 800284c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002850:	b285      	uxth	r5, r0
 8002852:	429d      	cmp	r5, r3
 8002854:	bf1d      	ittte	ne
 8002856:	4b1b      	ldrne	r3, [pc, #108]	; (80028c4 <NVMS_LL_BlockErase+0xc0>)
 8002858:	ea03 2340 	andne.w	r3, r3, r0, lsl #9
 800285c:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 8002860:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
 8002864:	429a      	cmp	r2, r3
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8002866:	bf34      	ite	cc
 8002868:	f102 4278 	addcc.w	r2, r2, #4160749568	; 0xf8000000
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800286c:	1ad2      	subcs	r2, r2, r3
 800286e:	0b12      	lsrs	r2, r2, #12
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 8002870:	0b49      	lsrs	r1, r1, #13
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8002872:	9204      	str	r2, [sp, #16]
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 8002874:	9105      	str	r1, [sp, #20]
#endif /* USE_STM32L4XX_NUCLEO or USE_STM32L475E_IOT01 */

  /* Unlock the Flash to enable the flash control register access *************/
  (void)HAL_FLASH_Unlock();
 8002876:	f000 fd75 	bl	8003364 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 800287a:	a901      	add	r1, sp, #4
 800287c:	a802      	add	r0, sp, #8
 800287e:	f000 fe7b 	bl	8003578 <HAL_FLASHEx_Erase>
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  (void)HAL_FLASH_Lock();
 8002882:	f000 fd81 	bl	8003388 <HAL_FLASH_Lock>

  /* Operation verification.*/
  return !NVMS_LL_IsBlockErased(block);
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff ffa4 	bl	80027d4 <NVMS_LL_IsBlockErased>
 800288c:	f080 0001 	eor.w	r0, r0, #1
}
 8002890:	b2c0      	uxtb	r0, r0
 8002892:	b007      	add	sp, #28
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8002896:	429e      	cmp	r6, r3
 8002898:	bf1d      	ittte	ne
 800289a:	4b0a      	ldrne	r3, [pc, #40]	; (80028c4 <NVMS_LL_BlockErase+0xc0>)
 800289c:	ea03 2345 	andne.w	r3, r3, r5, lsl #9
 80028a0:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80028a4:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
      bank = FLASH_BANK_1;
 80028a8:	429a      	cmp	r2, r3
 80028aa:	bf34      	ite	cc
 80028ac:	2302      	movcc	r3, #2
 80028ae:	2301      	movcs	r3, #1
 80028b0:	e7ca      	b.n	8002848 <NVMS_LL_BlockErase+0x44>
 80028b2:	bf00      	nop
 80028b4:	08101000 	.word	0x08101000
 80028b8:	08105000 	.word	0x08105000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	1fff75e0 	.word	0x1fff75e0
 80028c4:	01fffe00 	.word	0x01fffe00

080028c8 <NVMS_LL_Write>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the write operation failed.
  */
bool NVMS_LL_Write(const uint8_t *source, uint8_t *destination, size_t size)
{
 80028c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	4681      	mov	r9, r0
 80028ce:	468a      	mov	sl, r1
 80028d0:	4693      	mov	fp, r2
  const uint8_t *s = source;
  uint8_t *d = destination;
  size_t sz = size;
 80028d2:	4616      	mov	r6, r2
  uint8_t *d = destination;
 80028d4:	460c      	mov	r4, r1
  const uint8_t *s = source;
 80028d6:	4607      	mov	r7, r0

  while (sz > 0UL)
 80028d8:	b956      	cbnz	r6, 80028f0 <NVMS_LL_Write+0x28>
      return true;
    }
  }

  /* Operation verification.*/
  return (bool)(memcmp(source, destination, size) != 0);
 80028da:	465a      	mov	r2, fp
 80028dc:	4651      	mov	r1, sl
 80028de:	4648      	mov	r0, r9
 80028e0:	f014 f8dc 	bl	8016a9c <memcmp>
 80028e4:	3000      	adds	r0, #0
 80028e6:	bf18      	it	ne
 80028e8:	2001      	movne	r0, #1
}
 80028ea:	b003      	add	sp, #12
 80028ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                     ((uint32_t) * destinationp & (NVMS_LL_PAGE_SIZE - 1UL)));
 80028f0:	f004 0307 	and.w	r3, r4, #7
  maxsize = (size_t)(NVMS_LL_PAGE_SIZE -
 80028f4:	f1c3 0308 	rsb	r3, r3, #8
 80028f8:	42b3      	cmp	r3, r6
 80028fa:	bf28      	it	cs
 80028fc:	4633      	movcs	r3, r6
  *destinationp += maxsize;
 80028fe:	18e2      	adds	r2, r4, r3
  *sizep        -= maxsize;
 8002900:	1af6      	subs	r6, r6, r3
  *destinationp += maxsize;
 8002902:	e9cd 2300 	strd	r2, r3, [sp]
  (void)HAL_FLASH_Unlock();
 8002906:	f000 fd2d 	bl	8003364 <HAL_FLASH_Unlock>
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	46b8      	mov	r8, r7
  HAL_StatusTypeDef ret = HAL_OK;
 800290e:	2500      	movs	r5, #0
  while ((maxsize >= 8UL) && (ret == HAL_OK))
 8002910:	2b08      	cmp	r3, #8
 8002912:	4647      	mov	r7, r8
 8002914:	d112      	bne.n	800293c <NVMS_LL_Write+0x74>
 8002916:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800291a:	b13d      	cbz	r5, 800292c <NVMS_LL_Write+0x64>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 800291c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002920:	4621      	mov	r1, r4
 8002922:	2000      	movs	r0, #0
 8002924:	f000 fd66 	bl	80033f4 <HAL_FLASH_Program>
 8002928:	4605      	mov	r5, r0
 800292a:	e009      	b.n	8002940 <NVMS_LL_Write+0x78>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 800292c:	4621      	mov	r1, r4
 800292e:	4628      	mov	r0, r5
 8002930:	f000 fd60 	bl	80033f4 <HAL_FLASH_Program>
    p = &p[8];
 8002934:	3408      	adds	r4, #8
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 8002936:	4605      	mov	r5, r0
    maxsize -= 8UL;
 8002938:	2300      	movs	r3, #0
 800293a:	e7e9      	b.n	8002910 <NVMS_LL_Write+0x48>
  if (maxsize != 0UL)
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ed      	bne.n	800291c <NVMS_LL_Write+0x54>
  (void)HAL_FLASH_Lock();
 8002940:	f000 fd22 	bl	8003388 <HAL_FLASH_Lock>
  *destinationp += maxsize;
 8002944:	9c00      	ldr	r4, [sp, #0]
  if (ret == HAL_OK)
 8002946:	2d00      	cmp	r5, #0
 8002948:	d0c6      	beq.n	80028d8 <NVMS_LL_Write+0x10>
      return true;
 800294a:	2001      	movs	r0, #1
 800294c:	e7cd      	b.n	80028ea <NVMS_LL_Write+0x22>
	...

08002950 <__NVIC_SystemReset>:
 8002950:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002954:	4905      	ldr	r1, [pc, #20]	; (800296c <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002958:	68ca      	ldr	r2, [r1, #12]
 800295a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
 8002962:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002966:	bf00      	nop
 8002968:	e7fd      	b.n	8002966 <__NVIC_SystemReset+0x16>
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	05fa0004 	.word	0x05fa0004

08002974 <SE_LL_GetPage>:
  */
static uint32_t SE_LL_GetPage(uint32_t Address)
{
  uint32_t page;

  if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <SE_LL_GetPage+0x2c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297c:	b291      	uxth	r1, r2
 800297e:	4299      	cmp	r1, r3
 8002980:	bf1d      	ittte	ne
 8002982:	4b08      	ldrne	r3, [pc, #32]	; (80029a4 <SE_LL_GetPage+0x30>)
 8002984:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 8002988:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 800298c:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
 8002990:	4283      	cmp	r3, r0
  {
    /* Bank 1 */
    page = (Address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8002992:	bf8c      	ite	hi
 8002994:	f100 4078 	addhi.w	r0, r0, #4160749568	; 0xf8000000
  }
  else
  {
    /* Bank 2 */
    page = (Address - (FLASH_BASE + (FLASH_BANK_SIZE))) / FLASH_PAGE_SIZE;
 8002998:	1ac0      	subls	r0, r0, r3
 800299a:	0b00      	lsrs	r0, r0, #12
  }
  return page;
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	1fff75e0 	.word	0x1fff75e0
 80029a4:	01fffe00 	.word	0x01fffe00

080029a8 <SE_LL_CRC_Config>:
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80029a8:	4809      	ldr	r0, [pc, #36]	; (80029d0 <SE_LL_CRC_Config+0x28>)
  CrcHandle.Instance = CRC;
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <SE_LL_CRC_Config+0x2c>)
{
 80029ac:	b508      	push	{r3, lr}
  CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80029ae:	2300      	movs	r3, #0
  CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80029b0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  CrcHandle.Instance = CRC;
 80029b4:	6002      	str	r2, [r0, #0]
 80029b6:	8083      	strh	r3, [r0, #4]
  CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80029b8:	2303      	movs	r3, #3
 80029ba:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&CrcHandle) == HAL_OK)
 80029bc:	f000 fc3c 	bl	8003238 <HAL_CRC_Init>
}
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <SE_LL_CRC_Config+0x30>)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SE_LL_CRC_Config+0x34>)
 80029c4:	2800      	cmp	r0, #0
 80029c6:	bf14      	ite	ne
 80029c8:	4610      	movne	r0, r2
 80029ca:	4618      	moveq	r0, r3
 80029cc:	bd08      	pop	{r3, pc}
 80029ce:	bf00      	nop
 80029d0:	200024d4 	.word	0x200024d4
 80029d4:	40023000 	.word	0x40023000
 80029d8:	00018799 	.word	0x00018799
 80029dc:	0012310f 	.word	0x0012310f

080029e0 <SE_LL_CRC_Init>:
  __HAL_RCC_CRC_CLK_ENABLE();
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <SE_LL_CRC_Init+0x1c>)
 80029e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e8:	649a      	str	r2, [r3, #72]	; 0x48
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 80029ec:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 80029ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	9b01      	ldr	r3, [sp, #4]
}
 80029f6:	b002      	add	sp, #8
  return SE_LL_CRC_Config();
 80029f8:	f7ff bfd6 	b.w	80029a8 <SE_LL_CRC_Config>
 80029fc:	40021000 	.word	0x40021000

08002a00 <SE_LL_CRC_Calculate>:
  return HAL_CRC_Calculate(&CrcHandle, pBuffer, uBufferLength);
 8002a00:	460a      	mov	r2, r1
 8002a02:	4601      	mov	r1, r0
 8002a04:	4801      	ldr	r0, [pc, #4]	; (8002a0c <SE_LL_CRC_Calculate+0xc>)
 8002a06:	f000 bc51 	b.w	80032ac <HAL_CRC_Calculate>
 8002a0a:	bf00      	nop
 8002a0c:	200024d4 	.word	0x200024d4

08002a10 <SE_LL_FLASH_Erase>:
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	b086      	sub	sp, #24
  uint32_t page_error = 0U;
 8002a14:	2300      	movs	r3, #0
{
 8002a16:	4605      	mov	r5, r0
 8002a18:	460c      	mov	r4, r1
  uint32_t page_error = 0U;
 8002a1a:	9301      	str	r3, [sp, #4]
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002a1c:	f000 fca2 	bl	8003364 <HAL_FLASH_Unlock>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d140      	bne.n	8002aa6 <SE_LL_FLASH_Erase+0x96>

static uint32_t SE_LL_GetBank(uint32_t Address)
{
  uint32_t bank;

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <SE_LL_FLASH_Erase+0x9c>)
    p_erase_init.TypeErase     = FLASH_TYPEERASE_PAGES;
 8002a26:	9002      	str	r0, [sp, #8]
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <SE_LL_FLASH_Erase+0xa0>)
  {
    /* No Bank swap */
    if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a36:	b293      	uxth	r3, r2
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8002a38:	d127      	bne.n	8002a8a <SE_LL_FLASH_Erase+0x7a>
    if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	bf1d      	ittte	ne
 8002a3e:	4b1d      	ldrne	r3, [pc, #116]	; (8002ab4 <SE_LL_FLASH_Erase+0xa4>)
 8002a40:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 8002a44:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 8002a48:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
  else
  {
    /* Bank swap */
    if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
    {
      bank = FLASH_BANK_2;
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	bf34      	ite	cc
 8002a50:	2301      	movcc	r3, #1
 8002a52:	2302      	movcs	r3, #2
    p_erase_init.Page          = SE_LL_GetPage((uint32_t) pStart);
 8002a54:	4628      	mov	r0, r5
    p_erase_init.Banks         = SE_LL_GetBank((uint32_t) pStart);
 8002a56:	9303      	str	r3, [sp, #12]
    p_erase_init.Page          = SE_LL_GetPage((uint32_t) pStart);
 8002a58:	f7ff ff8c 	bl	8002974 <SE_LL_GetPage>
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	9004      	str	r0, [sp, #16]
    p_erase_init.NbPages       = SE_LL_GetPage(((uint32_t) pStart) + Length - 1U) - p_erase_init.Page + 1U;
 8002a60:	1e60      	subs	r0, r4, #1
 8002a62:	4428      	add	r0, r5
 8002a64:	f7ff ff86 	bl	8002974 <SE_LL_GetPage>
 8002a68:	3001      	adds	r0, #1
 8002a6a:	1b80      	subs	r0, r0, r6
 8002a6c:	9005      	str	r0, [sp, #20]
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8002a6e:	a901      	add	r1, sp, #4
 8002a70:	a802      	add	r0, sp, #8
 8002a72:	f000 fd81 	bl	8003578 <HAL_FLASHEx_Erase>
      e_ret_status = SE_ERROR;
 8002a76:	4c10      	ldr	r4, [pc, #64]	; (8002ab8 <SE_LL_FLASH_Erase+0xa8>)
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <SE_LL_FLASH_Erase+0xac>)
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	bf18      	it	ne
 8002a7e:	461c      	movne	r4, r3
    (void)HAL_FLASH_Lock();
 8002a80:	f000 fc82 	bl	8003388 <HAL_FLASH_Lock>
}
 8002a84:	4620      	mov	r0, r4
 8002a86:	b006      	add	sp, #24
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
    if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	bf1d      	ittte	ne
 8002a8e:	4b09      	ldrne	r3, [pc, #36]	; (8002ab4 <SE_LL_FLASH_Erase+0xa4>)
 8002a90:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 8002a94:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 8002a98:	f04f 6301 	moveq.w	r3, #135266304	; 0x8100000
      bank = FLASH_BANK_1;
 8002a9c:	429d      	cmp	r5, r3
 8002a9e:	bf34      	ite	cc
 8002aa0:	2302      	movcc	r3, #2
 8002aa2:	2301      	movcs	r3, #1
 8002aa4:	e7d6      	b.n	8002a54 <SE_LL_FLASH_Erase+0x44>
    e_ret_status = SE_ERROR;
 8002aa6:	4c05      	ldr	r4, [pc, #20]	; (8002abc <SE_LL_FLASH_Erase+0xac>)
  return e_ret_status;
 8002aa8:	e7ec      	b.n	8002a84 <SE_LL_FLASH_Erase+0x74>
 8002aaa:	bf00      	nop
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	1fff75e0 	.word	0x1fff75e0
 8002ab4:	01fffe00 	.word	0x01fffe00
 8002ab8:	0012310f 	.word	0x0012310f
 8002abc:	00018799 	.word	0x00018799

08002ac0 <SE_LL_FLASH_Write>:
{
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	4607      	mov	r7, r0
 8002ac4:	460d      	mov	r5, r1
  if (Length == 0U)
 8002ac6:	4616      	mov	r6, r2
 8002ac8:	b912      	cbnz	r2, 8002ad0 <SE_LL_FLASH_Write+0x10>
    return SE_ERROR;
 8002aca:	4c11      	ldr	r4, [pc, #68]	; (8002b10 <SE_LL_FLASH_Write+0x50>)
}
 8002acc:	4620      	mov	r0, r4
 8002ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((areabegin < SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) ||
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <SE_LL_FLASH_Write+0x54>)
 8002ad2:	4283      	cmp	r3, r0
 8002ad4:	d8f9      	bhi.n	8002aca <SE_LL_FLASH_Write+0xa>
      ((areabegin + Length) > (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)))
 8002ad6:	1882      	adds	r2, r0, r2
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  if ((areabegin < SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d8f4      	bhi.n	8002aca <SE_LL_FLASH_Write+0xa>
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002ae0:	f000 fc40 	bl	8003364 <HAL_FLASH_Unlock>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1f0      	bne.n	8002aca <SE_LL_FLASH_Write+0xa>
 8002ae8:	3d08      	subs	r5, #8
    for (i = 0U; i < Length; i += 8U)
 8002aea:	4604      	mov	r4, r0
 8002aec:	42b4      	cmp	r4, r6
 8002aee:	d303      	bcc.n	8002af8 <SE_LL_FLASH_Write+0x38>
  SE_ErrorStatus ret = SE_SUCCESS;
 8002af0:	4c09      	ldr	r4, [pc, #36]	; (8002b18 <SE_LL_FLASH_Write+0x58>)
    (void)HAL_FLASH_Lock();
 8002af2:	f000 fc49 	bl	8003388 <HAL_FLASH_Lock>
 8002af6:	e7e9      	b.n	8002acc <SE_LL_FLASH_Write+0xc>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (areabegin + i), *(uint64_t *)(pdata + i)) != HAL_OK)
 8002af8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8002afc:	1939      	adds	r1, r7, r4
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 fc78 	bl	80033f4 <HAL_FLASH_Program>
 8002b04:	b908      	cbnz	r0, 8002b0a <SE_LL_FLASH_Write+0x4a>
    for (i = 0U; i < Length; i += 8U)
 8002b06:	3408      	adds	r4, #8
 8002b08:	e7f0      	b.n	8002aec <SE_LL_FLASH_Write+0x2c>
        ret = SE_ERROR;
 8002b0a:	4c01      	ldr	r4, [pc, #4]	; (8002b10 <SE_LL_FLASH_Write+0x50>)
 8002b0c:	e7f1      	b.n	8002af2 <SE_LL_FLASH_Write+0x32>
 8002b0e:	bf00      	nop
 8002b10:	00018799 	.word	0x00018799
 8002b14:	08105000 	.word	0x08105000
 8002b18:	0012310f 	.word	0x0012310f

08002b1c <SE_LL_FLASH_Read>:
{
 8002b1c:	b538      	push	{r3, r4, r5, lr}
  if (((areabegin < SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) ||
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <SE_LL_FLASH_Read+0x44>)
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d804      	bhi.n	8002b2e <SE_LL_FLASH_Read+0x12>
       (areabegin + Length) > (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)) &&
 8002b24:	188c      	adds	r4, r1, r2
 8002b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  if (((areabegin < SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) ||
 8002b2a:	429c      	cmp	r4, r3
 8002b2c:	d906      	bls.n	8002b3c <SE_LL_FLASH_Read+0x20>
       (areabegin + Length) > (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)) &&
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <SE_LL_FLASH_Read+0x48>)
 8002b30:	4299      	cmp	r1, r3
 8002b32:	d312      	bcc.n	8002b5a <SE_LL_FLASH_Read+0x3e>
       (areabegin + Length) > (SFU_IMG_SLOT_DWL_REGION_BEGIN_VALUE + SFU_IMG_SLOT_DWL_REGION_SIZE)))
 8002b34:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <SE_LL_FLASH_Read+0x4c>)
 8002b36:	188b      	adds	r3, r1, r2
      ((areabegin < SFU_IMG_SLOT_DWL_REGION_BEGIN_VALUE) ||
 8002b38:	42a3      	cmp	r3, r4
 8002b3a:	d80e      	bhi.n	8002b5a <SE_LL_FLASH_Read+0x3e>
  SE_DoubleECC_Error_Counter = 0U;
 8002b3c:	4c0b      	ldr	r4, [pc, #44]	; (8002b6c <SE_LL_FLASH_Read+0x50>)
 8002b3e:	2500      	movs	r5, #0
  SE_DoubleECC_Check = 1U;
 8002b40:	2301      	movs	r3, #1
  SE_DoubleECC_Error_Counter = 0U;
 8002b42:	6265      	str	r5, [r4, #36]	; 0x24
  SE_DoubleECC_Check = 1U;
 8002b44:	62a3      	str	r3, [r4, #40]	; 0x28
  (void)memcpy(pDestination, pSource, Length);
 8002b46:	f013 ffb8 	bl	8016aba <memcpy>
  if (SE_DoubleECC_Error_Counter == 0U)
 8002b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e_ret_status = SE_ERROR;
 8002b4c:	4808      	ldr	r0, [pc, #32]	; (8002b70 <SE_LL_FLASH_Read+0x54>)
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <SE_LL_FLASH_Read+0x58>)
  SE_DoubleECC_Error_Counter = 0U;
 8002b50:	6265      	str	r5, [r4, #36]	; 0x24
    e_ret_status = SE_ERROR;
 8002b52:	42aa      	cmp	r2, r5
 8002b54:	bf18      	it	ne
 8002b56:	4618      	movne	r0, r3
}
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
    return SE_ERROR;
 8002b5a:	4806      	ldr	r0, [pc, #24]	; (8002b74 <SE_LL_FLASH_Read+0x58>)
 8002b5c:	e7fc      	b.n	8002b58 <SE_LL_FLASH_Read+0x3c>
 8002b5e:	bf00      	nop
 8002b60:	08105000 	.word	0x08105000
 8002b64:	08036000 	.word	0x08036000
 8002b68:	080f1000 	.word	0x080f1000
 8002b6c:	200024d4 	.word	0x200024d4
 8002b70:	0012310f 	.word	0x0012310f
 8002b74:	00018799 	.word	0x00018799

08002b78 <NMI_Handler>:
{
 8002b78:	b510      	push	{r4, lr}
  if (!__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8002b7a:	4c10      	ldr	r4, [pc, #64]	; (8002bbc <NMI_Handler+0x44>)
 8002b7c:	69a3      	ldr	r3, [r4, #24]
 8002b7e:	f003 4320 	and.w	r3, r3, #2684354560	; 0xa0000000
 8002b82:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8002b86:	d001      	beq.n	8002b8c <NMI_Handler+0x14>
    SE_NMI_ExceptionHandler();
 8002b88:	f006 f89a 	bl	8008cc0 <SE_NMI_ExceptionHandler>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ECCD);
 8002b8c:	69a3      	ldr	r3, [r4, #24]
 8002b8e:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8002b92:	61a3      	str	r3, [r4, #24]
  if (SE_DoubleECC_Check != 0U)
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <NMI_Handler+0x48>)
 8002b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b98:	b162      	cbz	r2, 8002bb4 <NMI_Handler+0x3c>
    SE_DoubleECC_Error_Counter++;
 8002b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9c:	3201      	adds	r2, #1
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8002ba0:	f3ef 8208 	mrs	r2, MSP
    if ((*(p_msp_sp + 7U) & (1U << xPSR_T_Pos)) != 0U)
 8002ba4:	e9d2 3106 	ldrd	r3, r1, [r2, #24]
 8002ba8:	01c9      	lsls	r1, r1, #7
      *(p_msp_sp + 6U) += 2U;
 8002baa:	bf4c      	ite	mi
 8002bac:	3302      	addmi	r3, #2
      *(p_msp_sp + 6U) += 4U;
 8002bae:	3304      	addpl	r3, #4
 8002bb0:	6193      	str	r3, [r2, #24]
}
 8002bb2:	bd10      	pop	{r4, pc}
 8002bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SE_NMI_ExceptionHandler();
 8002bb8:	f006 b882 	b.w	8008cc0 <SE_NMI_ExceptionHandler>
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	200024d4 	.word	0x200024d4

08002bc4 <SE_LL_Buffer_in_ram>:
{
 8002bc4:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8002bc6:	1e4b      	subs	r3, r1, #1
 8002bc8:	4403      	add	r3, r0
  if ((Length != 0U) &&
 8002bca:	b129      	cbz	r1, 8002bd8 <SE_LL_Buffer_in_ram+0x14>
 8002bcc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8002bd0:	d302      	bcc.n	8002bd8 <SE_LL_Buffer_in_ram+0x14>
      (((addr_start >= SRAM1_BASE) && (addr_end <= 0x2009FFFFU))))
 8002bd2:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <SE_LL_Buffer_in_ram+0x1c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <SE_LL_Buffer_in_ram+0x18>
    NVIC_SystemReset();
 8002bd8:	f7ff feba 	bl	8002950 <__NVIC_SystemReset>
}
 8002bdc:	4801      	ldr	r0, [pc, #4]	; (8002be4 <SE_LL_Buffer_in_ram+0x20>)
 8002bde:	bd08      	pop	{r3, pc}
 8002be0:	2009ffff 	.word	0x2009ffff
 8002be4:	0012310f 	.word	0x0012310f

08002be8 <SE_LL_Buffer_in_SBSFU_ram>:
{
 8002be8:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + length - 1U;
 8002bea:	1e4b      	subs	r3, r1, #1
 8002bec:	4403      	add	r3, r0
  if ((length != 0U) && ((addr_end  <= SB_REGION_SRAM1_END) && (addr_start >= SB_REGION_SRAM1_START)))
 8002bee:	b129      	cbz	r1, 8002bfc <SE_LL_Buffer_in_SBSFU_ram+0x14>
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <SE_LL_Buffer_in_SBSFU_ram+0x1c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d802      	bhi.n	8002bfc <SE_LL_Buffer_in_SBSFU_ram+0x14>
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SE_LL_Buffer_in_SBSFU_ram+0x20>)
 8002bf8:	4298      	cmp	r0, r3
 8002bfa:	d201      	bcs.n	8002c00 <SE_LL_Buffer_in_SBSFU_ram+0x18>
    NVIC_SystemReset();
 8002bfc:	f7ff fea8 	bl	8002950 <__NVIC_SystemReset>
}
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <SE_LL_Buffer_in_SBSFU_ram+0x24>)
 8002c02:	bd08      	pop	{r3, pc}
 8002c04:	2009ffff 	.word	0x2009ffff
 8002c08:	20030000 	.word	0x20030000
 8002c0c:	0012310f 	.word	0x0012310f

08002c10 <SE_LL_Buffer_part_of_SE_ram>:
{
 8002c10:	b508      	push	{r3, lr}
  if ((length != 0U) && (!(((addr_start < SE_REGION_SRAM1_START) && (addr_end < SE_REGION_SRAM1_START)) ||
 8002c12:	b169      	cbz	r1, 8002c30 <SE_LL_Buffer_part_of_SE_ram+0x20>
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <SE_LL_Buffer_part_of_SE_ram+0x24>)
  uint32_t addr_end = addr_start + length - 1U;
 8002c16:	3901      	subs	r1, #1
  if ((length != 0U) && (!(((addr_start < SE_REGION_SRAM1_START) && (addr_end < SE_REGION_SRAM1_START)) ||
 8002c18:	4283      	cmp	r3, r0
  uint32_t addr_end = addr_start + length - 1U;
 8002c1a:	4401      	add	r1, r0
  if ((length != 0U) && (!(((addr_start < SE_REGION_SRAM1_START) && (addr_end < SE_REGION_SRAM1_START)) ||
 8002c1c:	d901      	bls.n	8002c22 <SE_LL_Buffer_part_of_SE_ram+0x12>
 8002c1e:	428b      	cmp	r3, r1
 8002c20:	d806      	bhi.n	8002c30 <SE_LL_Buffer_part_of_SE_ram+0x20>
                           ((addr_start > SE_REGION_SRAM1_END) && (addr_end > SE_REGION_SRAM1_END)))))
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SE_LL_Buffer_part_of_SE_ram+0x28>)
  if ((length != 0U) && (!(((addr_start < SE_REGION_SRAM1_START) && (addr_end < SE_REGION_SRAM1_START)) ||
 8002c24:	4283      	cmp	r3, r0
 8002c26:	d201      	bcs.n	8002c2c <SE_LL_Buffer_part_of_SE_ram+0x1c>
                           ((addr_start > SE_REGION_SRAM1_END) && (addr_end > SE_REGION_SRAM1_END)))))
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	d301      	bcc.n	8002c30 <SE_LL_Buffer_part_of_SE_ram+0x20>
    NVIC_SystemReset();
 8002c2c:	f7ff fe90 	bl	8002950 <__NVIC_SystemReset>
}
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <SE_LL_Buffer_part_of_SE_ram+0x2c>)
 8002c32:	bd08      	pop	{r3, pc}
 8002c34:	20000000 	.word	0x20000000
 8002c38:	2001ffbf 	.word	0x2001ffbf
 8002c3c:	00018799 	.word	0x00018799

08002c40 <SE_LL_CORE_Cleanup>:
  * The fonction is called  during SE_LOCK_RESTRICT_SERVICES.
  *
  */
void  SE_LL_CORE_Cleanup(void)
{
}
 8002c40:	4770      	bx	lr

08002c42 <SysTick_Handler>:
 8002c42:	4770      	bx	lr

08002c44 <STSAFE_OBJ_Init>:
  * @brief  Initialize the embedded objects.
  * @param  None.
  * @retval CK_RV CKR_GENERAL_ERROR, CKR_OK.
  */
CK_RV STSAFE_OBJ_Init(void)
{
 8002c44:	b510      	push	{r4, lr}
  /* Read the available external token slots from the platform */
  /* Note: this returns the available objects handle from KMS - actual number of
    * objects depends on platfrom configuration */
  KMS_PlatfObjects_ExtTokenStaticRange(&ulMinObjId, &ulMaxObjId);
 8002c46:	4c07      	ldr	r4, [pc, #28]	; (8002c64 <STSAFE_OBJ_Init+0x20>)
 8002c48:	1d20      	adds	r0, r4, #4
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	f005 f9f2 	bl	8008034 <KMS_PlatfObjects_ExtTokenStaticRange>

  /*Check if platform configuration is ok*/
  if (ulMaxObjId < ulMinObjId + STSAFE_P11_NUMBER_OBJECTS)
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	4293      	cmp	r3, r2

  }
  else
  {
    /* The only actually used objects*/
    ulMaxObjId = ulMinObjId + STSAFE_P11_NUMBER_OBJECTS;
 8002c58:	bf9a      	itte	ls
 8002c5a:	6023      	strls	r3, [r4, #0]
  }

  return CKR_OK;
 8002c5c:	2000      	movls	r0, #0
    return CKR_GENERAL_ERROR;
 8002c5e:	2005      	movhi	r0, #5
}
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	bf00      	nop
 8002c64:	20002500 	.word	0x20002500

08002c68 <STSAFE_OBJ_GetTemplateFromObjectHandle>:
  * @param  hObject      the object's handle.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_OK.
  */
CK_RV STSAFE_OBJ_GetTemplateFromObjectHandle(CK_ATTRIBUTE_PTR *ppAttribute, CK_ULONG_PTR pulCount,
                                             CK_OBJECT_HANDLE hObject)
{
 8002c68:	b510      	push	{r4, lr}
  /* Check input parameters */
  if ((hObject < ulMinObjId) || (hObject > ulMaxObjId) || (pulCount == NULL) || (ppAttribute == NULL))
 8002c6a:	4c0c      	ldr	r4, [pc, #48]	; (8002c9c <STSAFE_OBJ_GetTemplateFromObjectHandle+0x34>)
 8002c6c:	6863      	ldr	r3, [r4, #4]
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d811      	bhi.n	8002c96 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x2e>
 8002c72:	6824      	ldr	r4, [r4, #0]
 8002c74:	4294      	cmp	r4, r2
 8002c76:	d30e      	bcc.n	8002c96 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x2e>
 8002c78:	b169      	cbz	r1, 8002c96 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x2e>
 8002c7a:	b160      	cbz	r0, 8002c96 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x2e>
  {
    return CKR_ARGUMENTS_BAD;
  }

  /*Check if the object is present*/
  if (pSTSAFE_OBJ_List[hObject - ulMinObjId] != NULL)
 8002c7c:	1ad2      	subs	r2, r2, r3
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x38>)
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	b12b      	cbz	r3, 8002c92 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x2a>
  {
    /* Assign output*/
    *ppAttribute = pSTSAFE_OBJ_List[hObject - ulMinObjId]->pTemplate;
 8002c86:	681a      	ldr	r2, [r3, #0]
    *pulCount = pSTSAFE_OBJ_List[hObject - ulMinObjId]->ulCount;
 8002c88:	685b      	ldr	r3, [r3, #4]
    *ppAttribute = pSTSAFE_OBJ_List[hObject - ulMinObjId]->pTemplate;
 8002c8a:	6002      	str	r2, [r0, #0]
    *pulCount = pSTSAFE_OBJ_List[hObject - ulMinObjId]->ulCount;
 8002c8c:	600b      	str	r3, [r1, #0]
  {
    *ppAttribute = NULL;
    *pulCount = 0;
  }

  return CKR_OK;
 8002c8e:	2000      	movs	r0, #0
}
 8002c90:	bd10      	pop	{r4, pc}
    *ppAttribute = NULL;
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	e7fa      	b.n	8002c8c <STSAFE_OBJ_GetTemplateFromObjectHandle+0x24>
    return CKR_ARGUMENTS_BAD;
 8002c96:	2007      	movs	r0, #7
 8002c98:	e7fa      	b.n	8002c90 <STSAFE_OBJ_GetTemplateFromObjectHandle+0x28>
 8002c9a:	bf00      	nop
 8002c9c:	20002500 	.word	0x20002500
 8002ca0:	20002030 	.word	0x20002030

08002ca4 <STSAFE_OBJ_FindAttributeInTemplate>:
  * @param  ulCount    size of the template.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_GENERAL_ERROR, CKR_OK.
  */
CK_RV STSAFE_OBJ_FindAttributeInTemplate(CK_ATTRIBUTE_PTR *ppAttribute, CK_ATTRIBUTE_TYPE Type,
                                         CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)
{
 8002ca4:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  /*Check input parameters*/
  if ((pTemplate == NULL)  || (ulCount == 0))
 8002ca6:	b17a      	cbz	r2, 8002cc8 <STSAFE_OBJ_FindAttributeInTemplate+0x24>
 8002ca8:	b173      	cbz	r3, 8002cc8 <STSAFE_OBJ_FindAttributeInTemplate+0x24>
  {
    return CKR_ARGUMENTS_BAD;
  }

  /* Go through the list of attributes of the template*/
  for (i = 0; i < ulCount; i++)
 8002caa:	2400      	movs	r4, #0
  {
    /*Look for Type param*/
    if (pTemplate[i].type == Type)
 8002cac:	4615      	mov	r5, r2
 8002cae:	f852 6b0c 	ldr.w	r6, [r2], #12
 8002cb2:	42b1      	cmp	r1, r6
 8002cb4:	d103      	bne.n	8002cbe <STSAFE_OBJ_FindAttributeInTemplate+0x1a>
    {
      /* if param not null */
      if (ppAttribute != NULL)
 8002cb6:	b108      	cbz	r0, 8002cbc <STSAFE_OBJ_FindAttributeInTemplate+0x18>
      {
        *ppAttribute = &pTemplate[i];
 8002cb8:	6005      	str	r5, [r0, #0]
      }

      return CKR_OK;
 8002cba:	2000      	movs	r0, #0
    }
  }

  return CKR_GENERAL_ERROR;
}
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < ulCount; i++)
 8002cbe:	3401      	adds	r4, #1
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	d1f3      	bne.n	8002cac <STSAFE_OBJ_FindAttributeInTemplate+0x8>
  return CKR_GENERAL_ERROR;
 8002cc4:	2005      	movs	r0, #5
 8002cc6:	e7f9      	b.n	8002cbc <STSAFE_OBJ_FindAttributeInTemplate+0x18>
    return CKR_ARGUMENTS_BAD;
 8002cc8:	2007      	movs	r0, #7
 8002cca:	e7f7      	b.n	8002cbc <STSAFE_OBJ_FindAttributeInTemplate+0x18>

08002ccc <STSAFE_OBJ_FilterTemplate>:
  * @param  ulCountFilter    size of the filter template .
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_OK.
  */
CK_RV STSAFE_OBJ_FilterTemplate(CK_ATTRIBUTE_PTR pTemplateOut, CK_ULONG_PTR pulCountOut, CK_ATTRIBUTE_PTR pTemplateIn,
                                CK_ULONG ulCountIn, CK_ATTRIBUTE_PTR pTemplateFilter, CK_ULONG ulCountFilter)
{
 8002ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd0:	4689      	mov	r9, r1
  uint32_t i;
  uint32_t ul_out_count;

  /*Check input parameters*/
  if ((pTemplateOut == NULL)  || (pulCountOut == NULL) || (pTemplateIn == NULL) || (ulCountIn == 0UL))
 8002cd2:	4680      	mov	r8, r0
 8002cd4:	b318      	cbz	r0, 8002d1e <STSAFE_OBJ_FilterTemplate+0x52>
 8002cd6:	b311      	cbz	r1, 8002d1e <STSAFE_OBJ_FilterTemplate+0x52>
 8002cd8:	b30a      	cbz	r2, 8002d1e <STSAFE_OBJ_FilterTemplate+0x52>
 8002cda:	b303      	cbz	r3, 8002d1e <STSAFE_OBJ_FilterTemplate+0x52>
 8002cdc:	270c      	movs	r7, #12
 8002cde:	4614      	mov	r4, r2
 8002ce0:	fb07 2603 	mla	r6, r7, r3, r2
  {
    return CKR_ARGUMENTS_BAD;
  }

  /* Init*/
  ul_out_count = 0;
 8002ce4:	2500      	movs	r5, #0


  for (i = 0; i < ulCountIn; i++)
 8002ce6:	42b4      	cmp	r4, r6
 8002ce8:	d104      	bne.n	8002cf4 <STSAFE_OBJ_FilterTemplate+0x28>
      ul_out_count++;
    }
  }

  /*Assingn the output template len*/
  *pulCountOut = ul_out_count;
 8002cea:	f8c9 5000 	str.w	r5, [r9]

  return CKR_OK;
 8002cee:	2000      	movs	r0, #0
}
 8002cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (STSAFE_OBJ_FindAttributeInTemplate(NULL, pTemplateIn[i].type, pTemplateFilter, ulCountFilter) != CKR_OK)
 8002cf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002cf8:	6821      	ldr	r1, [r4, #0]
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7ff ffd2 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002d00:	b158      	cbz	r0, 8002d1a <STSAFE_OBJ_FilterTemplate+0x4e>
      (void)memcpy(&pTemplateOut[ul_out_count], &pTemplateIn[i], sizeof(CK_ATTRIBUTE));
 8002d02:	fb07 f105 	mul.w	r1, r7, r5
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	f848 2001 	str.w	r2, [r8, r1]
 8002d0c:	eb08 0301 	add.w	r3, r8, r1
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	68a2      	ldr	r2, [r4, #8]
 8002d16:	609a      	str	r2, [r3, #8]
      ul_out_count++;
 8002d18:	3501      	adds	r5, #1
 8002d1a:	340c      	adds	r4, #12
 8002d1c:	e7e3      	b.n	8002ce6 <STSAFE_OBJ_FilterTemplate+0x1a>
    return CKR_ARGUMENTS_BAD;
 8002d1e:	2007      	movs	r0, #7
 8002d20:	e7e6      	b.n	8002cf0 <STSAFE_OBJ_FilterTemplate+0x24>
	...

08002d24 <STSAFE_OBJ_GetObjectRange>:
  * @param  phObjectMax    gets the object handle max.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_OK.
  */
CK_RV STSAFE_OBJ_GetObjectRange(CK_OBJECT_HANDLE_PTR phObjectMin, CK_OBJECT_HANDLE_PTR phObjectMax)
{
  if ((phObjectMin == NULL) || (phObjectMax == NULL))
 8002d24:	b138      	cbz	r0, 8002d36 <STSAFE_OBJ_GetObjectRange+0x12>
 8002d26:	b131      	cbz	r1, 8002d36 <STSAFE_OBJ_GetObjectRange+0x12>
  {
    return CKR_ARGUMENTS_BAD;
  }

  *phObjectMin = ulMinObjId;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <STSAFE_OBJ_GetObjectRange+0x18>)
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	6002      	str	r2, [r0, #0]
  *phObjectMax = ulMaxObjId;
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	600b      	str	r3, [r1, #0]

  return CKR_OK;
 8002d32:	2000      	movs	r0, #0
 8002d34:	4770      	bx	lr
    return CKR_ARGUMENTS_BAD;
 8002d36:	2007      	movs	r0, #7
}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20002500 	.word	0x20002500

08002d40 <STSAFE_OBJ_GetAttributeValue>:
  * @param  pulValueLen     gets the attribute value len.
  * @param  pAttribute     attribute from where to extract the value.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_OK.
  */
CK_RV STSAFE_OBJ_GetAttributeValue(CK_BYTE_PTR pValue, CK_ULONG_PTR pulValueLen, CK_ATTRIBUTE_PTR pAttribute)
{
 8002d40:	b538      	push	{r3, r4, r5, lr}
 8002d42:	460d      	mov	r5, r1

  /*Check input parameters*/
  if ((pAttribute == NULL) || (pulValueLen == NULL))
 8002d44:	4614      	mov	r4, r2
 8002d46:	b14a      	cbz	r2, 8002d5c <STSAFE_OBJ_GetAttributeValue+0x1c>
 8002d48:	b141      	cbz	r1, 8002d5c <STSAFE_OBJ_GetAttributeValue+0x1c>
  {
    return CKR_ARGUMENTS_BAD;
  }

  /*Copy */
  if (pValue != NULL)
 8002d4a:	b118      	cbz	r0, 8002d54 <STSAFE_OBJ_GetAttributeValue+0x14>
  {
    (void)memcpy(pValue, pAttribute->pValue, pAttribute->ulValueLen);
 8002d4c:	e9d2 1201 	ldrd	r1, r2, [r2, #4]
 8002d50:	f013 feb3 	bl	8016aba <memcpy>
  }

  /* Copy the Value Len out  */
  *pulValueLen =  pAttribute->ulValueLen;
 8002d54:	68a3      	ldr	r3, [r4, #8]
 8002d56:	602b      	str	r3, [r5, #0]

  return CKR_OK;
 8002d58:	2000      	movs	r0, #0

}
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
    return CKR_ARGUMENTS_BAD;
 8002d5c:	2007      	movs	r0, #7
 8002d5e:	e7fc      	b.n	8002d5a <STSAFE_OBJ_GetAttributeValue+0x1a>

08002d60 <STSAFE_OBJ_SetAttributeValue>:
  * @param  pValue         the new attribute value.
  * @param  ulValueLen     the attribute value len.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_OK.
  */
CK_RV STSAFE_OBJ_SetAttributeValue(CK_ATTRIBUTE_PTR pAttribute, CK_BYTE_PTR pValue, CK_ULONG ulValueLen)
{
 8002d60:	b510      	push	{r4, lr}
  /*Check input parameters*/
  if ((pAttribute == NULL) || (ulValueLen == 0U) || (pValue == NULL))
 8002d62:	b130      	cbz	r0, 8002d72 <STSAFE_OBJ_SetAttributeValue+0x12>
 8002d64:	b12a      	cbz	r2, 8002d72 <STSAFE_OBJ_SetAttributeValue+0x12>
 8002d66:	b121      	cbz	r1, 8002d72 <STSAFE_OBJ_SetAttributeValue+0x12>
    return CKR_ARGUMENTS_BAD;
  }

  /*Update the value*/
  /*Note: no check on the destination pointer. If it is in FLASH this will cause an error*/
  (void)memcpy(pAttribute->pValue, pValue, ulValueLen);
 8002d68:	6840      	ldr	r0, [r0, #4]
 8002d6a:	f013 fea6 	bl	8016aba <memcpy>

  return CKR_OK;
 8002d6e:	2000      	movs	r0, #0

}
 8002d70:	bd10      	pop	{r4, pc}
    return CKR_ARGUMENTS_BAD;
 8002d72:	2007      	movs	r0, #7
 8002d74:	e7fc      	b.n	8002d70 <STSAFE_OBJ_SetAttributeValue+0x10>

08002d76 <STSAFE_OBJ_CompareTemplates>:
  * @param  ulCountRef      size of the template in input.
  * @retval CK_RV CKR_ARGUMENTS_BAD, CKR_GENERAL_ERROR, CKR_OK.
  */
CK_RV STSAFE_OBJ_CompareTemplates(CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount, CK_ATTRIBUTE_PTR pTemplateRef,
                                  CK_ULONG ulCountRef)
{
 8002d76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d7a:	460f      	mov	r7, r1
 8002d7c:	4691      	mov	r9, r2
 8002d7e:	4698      	mov	r8, r3
  CK_ULONG i;
  CK_ATTRIBUTE_PTR p_attribute;

  /* Check input parameters */
  if ((pTemplate == NULL) || (ulCount == 0UL) || (pTemplateRef == NULL) || (ulCountRef == 0UL) ||
 8002d80:	b1e8      	cbz	r0, 8002dbe <STSAFE_OBJ_CompareTemplates+0x48>
 8002d82:	b1e1      	cbz	r1, 8002dbe <STSAFE_OBJ_CompareTemplates+0x48>
 8002d84:	b1da      	cbz	r2, 8002dbe <STSAFE_OBJ_CompareTemplates+0x48>
 8002d86:	b1d3      	cbz	r3, 8002dbe <STSAFE_OBJ_CompareTemplates+0x48>
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	d818      	bhi.n	8002dbe <STSAFE_OBJ_CompareTemplates+0x48>
 8002d8c:	4605      	mov	r5, r0
  {
    return CKR_ARGUMENTS_BAD;
  }

  /*Go through the attributes of the input template*/
  for (i = 0; i < ulCount; i ++)
 8002d8e:	2600      	movs	r6, #0
  {
    /* Check for the i-th attribute type*/
    if (STSAFE_OBJ_FindAttributeInTemplate(&p_attribute, pTemplate[i].type, pTemplateRef, ulCountRef) != CKR_OK)
 8002d90:	4643      	mov	r3, r8
 8002d92:	464a      	mov	r2, r9
 8002d94:	6829      	ldr	r1, [r5, #0]
 8002d96:	a801      	add	r0, sp, #4
 8002d98:	f7ff ff84 	bl	8002ca4 <STSAFE_OBJ_FindAttributeInTemplate>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	b980      	cbnz	r0, 8002dc2 <STSAFE_OBJ_CompareTemplates+0x4c>
      /*Input template has an attribute Type that is not present in the reference*/
      return CKR_ATTRIBUTE_TYPE_INVALID;
    }

    /* CKA ATTRIBUTE attribute found in the embedded object - now compare the two values */
    if (memcmp(p_attribute->pValue, pTemplate[i].pValue, p_attribute->ulValueLen) != 0U)
 8002da0:	9b01      	ldr	r3, [sp, #4]
 8002da2:	6869      	ldr	r1, [r5, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	6858      	ldr	r0, [r3, #4]
 8002da8:	f013 fe78 	bl	8016a9c <memcmp>
 8002dac:	350c      	adds	r5, #12
 8002dae:	b950      	cbnz	r0, 8002dc6 <STSAFE_OBJ_CompareTemplates+0x50>
  for (i = 0; i < ulCount; i ++)
 8002db0:	3601      	adds	r6, #1
 8002db2:	42b7      	cmp	r7, r6
 8002db4:	d1ec      	bne.n	8002d90 <STSAFE_OBJ_CompareTemplates+0x1a>
      return CKR_ATTRIBUTE_VALUE_INVALID;
    }
  }

  return CKR_OK;
}
 8002db6:	4620      	mov	r0, r4
 8002db8:	b003      	add	sp, #12
 8002dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return CKR_ARGUMENTS_BAD;
 8002dbe:	2407      	movs	r4, #7
 8002dc0:	e7f9      	b.n	8002db6 <STSAFE_OBJ_CompareTemplates+0x40>
      return CKR_ATTRIBUTE_TYPE_INVALID;
 8002dc2:	2412      	movs	r4, #18
 8002dc4:	e7f7      	b.n	8002db6 <STSAFE_OBJ_CompareTemplates+0x40>
      return CKR_ATTRIBUTE_VALUE_INVALID;
 8002dc6:	2413      	movs	r4, #19
 8002dc8:	e7f5      	b.n	8002db6 <STSAFE_OBJ_CompareTemplates+0x40>
	...

08002dcc <StSafeA_HostKeys_Init>:
  *
  * @param   None
  * @retval  0 if success. An error code otherwise
  */
int32_t StSafeA_HostKeys_Init()
{
 8002dcc:	b530      	push	{r4, r5, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
  /* Keys stored in the MCU Flash are loaded into the SRAM.
     SE_ReadKey_Pairing retrieves an array containing the concatenation of STSAFE Mac and Cipher keys*/

  uint8_t host_mac_cipher_key_tmp[2U * STSAFEA_HOST_KEY_LENGTH];

  SE_ReadKey_Pairing(&host_mac_cipher_key_tmp[0U]);
 8002dd0:	466c      	mov	r4, sp
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7fd fb14 	bl	8000400 <__ICFEDIT_SE_Key_region_ROM_start__>

  /* Set and keep the keys that will be used during the Crypto / MAC operations */
  /* Host MAC Key */
  (void)memcpy(aHostMacKey, &host_mac_cipher_key_tmp[0U], STSAFEA_HOST_KEY_LENGTH);
 8002dd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ddc:	4d05      	ldr	r5, [pc, #20]	; (8002df4 <StSafeA_HostKeys_Init+0x28>)

  /* Host Chiper Key */
  (void)memcpy(aHostCipherKey, &host_mac_cipher_key_tmp[STSAFEA_HOST_KEY_LENGTH], STSAFEA_HOST_KEY_LENGTH);
 8002dde:	4c06      	ldr	r4, [pc, #24]	; (8002df8 <StSafeA_HostKeys_Init+0x2c>)
  (void)memcpy(aHostMacKey, &host_mac_cipher_key_tmp[0U], STSAFEA_HOST_KEY_LENGTH);
 8002de0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  (void)memcpy(aHostCipherKey, &host_mac_cipher_key_tmp[STSAFEA_HOST_KEY_LENGTH], STSAFEA_HOST_KEY_LENGTH);
 8002de4:	ab08      	add	r3, sp, #32
 8002de6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif /* USE_PRE_LOADED_HOST_KEYS */

  return 0;
}
 8002dee:	2000      	movs	r0, #0
 8002df0:	b009      	add	sp, #36	; 0x24
 8002df2:	bd30      	pop	{r4, r5, pc}
 8002df4:	20007818 	.word	0x20007818
 8002df8:	20007808 	.word	0x20007808

08002dfc <StSafeA_AES_MAC_Start>:
  * @retval  None
  */
void StSafeA_AES_MAC_Start(void **ppAesMacCtx)
{
#ifdef INCLUDE_CMAC
  *ppAesMacCtx = &CMacCtxStt;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <StSafeA_AES_MAC_Start+0x1c>)
 8002dfe:	6003      	str	r3, [r0, #0]

  ((AESCMACctx_stt *)*ppAesMacCtx)->mFlags = E_SK_DEFAULT;
 8002e00:	2200      	movs	r2, #0
 8002e02:	711a      	strb	r2, [r3, #4]
  ((AESCMACctx_stt *)*ppAesMacCtx)->pmKey = aHostMacKey;
 8002e04:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <StSafeA_AES_MAC_Start+0x20>)
 8002e06:	609a      	str	r2, [r3, #8]
  ((AESCMACctx_stt *)*ppAesMacCtx)->mKeySize = 16;
 8002e08:	6800      	ldr	r0, [r0, #0]
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	6243      	str	r3, [r0, #36]	; 0x24
  ((AESCMACctx_stt *)*ppAesMacCtx)->mTagSize = 16;
 8002e0e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
  (void)AES_CMAC_Encrypt_Init((AESCMACctx_stt *)*ppAesMacCtx);
 8002e12:	f001 bc03 	b.w	800461c <AES_CMAC_Encrypt_Init>
 8002e16:	bf00      	nop
 8002e18:	2000250c 	.word	0x2000250c
 8002e1c:	20007818 	.word	0x20007818

08002e20 <StSafeA_AES_MAC_Update>:
  * @retval  None
  */
void StSafeA_AES_MAC_Update(uint8_t *pInData, uint16_t InDataLength, void *pAesMacCtx)
{
#ifdef INCLUDE_CMAC
  if (pAesMacCtx != NULL)
 8002e20:	4613      	mov	r3, r2
 8002e22:	b122      	cbz	r2, 8002e2e <StSafeA_AES_MAC_Update+0xe>
  {
    (void)AES_CMAC_Encrypt_Append(pAesMacCtx, pInData, (int32_t)InDataLength);
 8002e24:	460a      	mov	r2, r1
 8002e26:	4601      	mov	r1, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 bc2f 	b.w	800468c <AES_CMAC_Encrypt_Append>
  }
#endif /* INCLUDE_CMAC */
}
 8002e2e:	4770      	bx	lr

08002e30 <StSafeA_AES_MAC_LastUpdate>:
  * @retval  None
  */
void StSafeA_AES_MAC_LastUpdate(uint8_t *pInData, uint16_t InDataLength, void *pAesMacCtx)
{
#ifdef INCLUDE_CMAC
  if (pAesMacCtx != NULL)
 8002e30:	4613      	mov	r3, r2
 8002e32:	b142      	cbz	r2, 8002e46 <StSafeA_AES_MAC_LastUpdate+0x16>
  {
    ((AESCMACctx_stt *)pAesMacCtx)->mFlags |= E_SK_FINAL_APPEND;
 8002e34:	7912      	ldrb	r2, [r2, #4]
 8002e36:	f042 0220 	orr.w	r2, r2, #32
 8002e3a:	711a      	strb	r2, [r3, #4]
    (void)AES_CMAC_Encrypt_Append(pAesMacCtx, pInData, (int32_t)InDataLength);
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	4601      	mov	r1, r0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 bc23 	b.w	800468c <AES_CMAC_Encrypt_Append>
  }
#endif /* INCLUDE_CMAC */
}
 8002e46:	4770      	bx	lr

08002e48 <StSafeA_AES_MAC_Final>:
  * @param   pOutMac : calculated MAC
  * @param   ppAesMacCtx : AES MAC context
  * @retval  None
  */
void StSafeA_AES_MAC_Final(uint8_t *pOutMac, void **ppAesMacCtx)
{
 8002e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef INCLUDE_CMAC
  int32_t output_length = 0;
  if (*ppAesMacCtx != NULL)
 8002e4a:	680b      	ldr	r3, [r1, #0]
  int32_t output_length = 0;
 8002e4c:	2500      	movs	r5, #0
{
 8002e4e:	460c      	mov	r4, r1
  int32_t output_length = 0;
 8002e50:	9501      	str	r5, [sp, #4]
  if (*ppAesMacCtx != NULL)
 8002e52:	b12b      	cbz	r3, 8002e60 <StSafeA_AES_MAC_Final+0x18>
  {
    (void)AES_CMAC_Encrypt_Finish(*ppAesMacCtx, pOutMac, &output_length);
 8002e54:	4601      	mov	r1, r0
 8002e56:	aa01      	add	r2, sp, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fc2d 	bl	80046b8 <AES_CMAC_Encrypt_Finish>
    *ppAesMacCtx = NULL;
 8002e5e:	6025      	str	r5, [r4, #0]
  }
#endif /* INCLUDE_CMAC */
}
 8002e60:	b003      	add	sp, #12
 8002e62:	bd30      	pop	{r4, r5, pc}

08002e64 <StSafeA_AES_ECB_Encrypt>:
  *            @arg STSAFEA_KEY_TYPE_AES_128: AES 128-bits
  *            @arg STSAFEA_KEY_TYPE_AES_256: AES 256-bits
  * @retval  0 if success, an error code otherwise
  */
int32_t StSafeA_AES_ECB_Encrypt(uint8_t *pInData, uint8_t *pOutData, uint8_t InAesType)
{
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4613      	mov	r3, r2
 8002e68:	b0ca      	sub	sp, #296	; 0x128
#if defined INCLUDE_ECB && defined INCLUDE_ENCRYPTION
  int32_t status_code;
  AESECBctx_stt aes_ctx;
  int32_t output_length = 0;
 8002e6a:	2200      	movs	r2, #0

  switch (InAesType)
 8002e6c:	2b01      	cmp	r3, #1
{
 8002e6e:	4606      	mov	r6, r0
 8002e70:	460d      	mov	r5, r1
  int32_t output_length = 0;
 8002e72:	ac03      	add	r4, sp, #12
 8002e74:	9203      	str	r2, [sp, #12]
  switch (InAesType)
 8002e76:	d81a      	bhi.n	8002eae <StSafeA_AES_ECB_Encrypt+0x4a>
  {
    case STSAFEA_KEY_TYPE_AES_128:
    case STSAFEA_KEY_TYPE_AES_256:
      aes_ctx.mFlags = E_SK_DEFAULT;
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002e78:	3301      	adds	r3, #1
 8002e7a:	011b      	lsls	r3, r3, #4
      status_code = AES_ECB_Encrypt_Init(&aes_ctx, aHostCipherKey, NULL);
 8002e7c:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <StSafeA_AES_ECB_Encrypt+0x50>)
      aes_ctx.mFlags = E_SK_DEFAULT;
 8002e7e:	f88d 2014 	strb.w	r2, [sp, #20]
      status_code = AES_ECB_Encrypt_Init(&aes_ctx, aHostCipherKey, NULL);
 8002e82:	a804      	add	r0, sp, #16
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002e84:	930d      	str	r3, [sp, #52]	; 0x34
      status_code = AES_ECB_Encrypt_Init(&aes_ctx, aHostCipherKey, NULL);
 8002e86:	f001 fcc9 	bl	800481c <AES_ECB_Encrypt_Init>
      if (status_code == AES_SUCCESS)
 8002e8a:	b970      	cbnz	r0, 8002eaa <StSafeA_AES_ECB_Encrypt+0x46>
      {
        status_code = AES_ECB_Encrypt_Append(&aes_ctx, pInData, (int32_t)STSAFEA_HOST_KEY_LENGTH, pOutData,
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	9400      	str	r4, [sp, #0]
 8002e90:	462b      	mov	r3, r5
 8002e92:	4631      	mov	r1, r6
 8002e94:	eb0d 0002 	add.w	r0, sp, r2
 8002e98:	f001 fcda 	bl	8004850 <AES_ECB_Encrypt_Append>
                                             &output_length);
        if (status_code == AES_SUCCESS)
 8002e9c:	b928      	cbnz	r0, 8002eaa <StSafeA_AES_ECB_Encrypt+0x46>
        {
          status_code = AES_ECB_Encrypt_Finish(&aes_ctx, &pOutData[output_length], &output_length);
 8002e9e:	6821      	ldr	r1, [r4, #0]
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4429      	add	r1, r5
 8002ea4:	a804      	add	r0, sp, #16
 8002ea6:	f001 fcff 	bl	80048a8 <AES_ECB_Encrypt_Finish>

  return status_code;
#else
  return 1;
#endif /* INCLUDE_ECB - INCLUDE_ENCRYPTION */
}
 8002eaa:	b04a      	add	sp, #296	; 0x128
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
      status_code = 1;
 8002eae:	2001      	movs	r0, #1
  return status_code;
 8002eb0:	e7fb      	b.n	8002eaa <StSafeA_AES_ECB_Encrypt+0x46>
 8002eb2:	bf00      	nop
 8002eb4:	20007808 	.word	0x20007808

08002eb8 <StSafeA_AES_CBC_Encrypt>:
  *            @arg STSAFEA_KEY_TYPE_AES_256: AES 256-bits
  * @retval  0 if success, an error code otherwise
  */
int32_t StSafeA_AES_CBC_Encrypt(uint8_t *pInData, uint16_t InDataLength, uint8_t *pOutData,
                                uint8_t *InInitialValue, uint8_t InAesType)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b0cb      	sub	sp, #300	; 0x12c
 8002ebc:	460f      	mov	r7, r1
 8002ebe:	f89d 1140 	ldrb.w	r1, [sp, #320]	; 0x140
 8002ec2:	4606      	mov	r6, r0
#if defined INCLUDE_CBC && defined INCLUDE_ENCRYPTION
  int32_t status_code;
  AESCBCctx_stt aes_ctx;
  int32_t output_length = 0;

  switch (InAesType)
 8002ec4:	2901      	cmp	r1, #1
  int32_t output_length = 0;
 8002ec6:	f04f 0000 	mov.w	r0, #0
{
 8002eca:	4615      	mov	r5, r2
  int32_t output_length = 0;
 8002ecc:	ac03      	add	r4, sp, #12
 8002ece:	9003      	str	r0, [sp, #12]
  switch (InAesType)
 8002ed0:	d81c      	bhi.n	8002f0c <StSafeA_AES_CBC_Encrypt+0x54>
  {
    case STSAFEA_KEY_TYPE_AES_128:
    case STSAFEA_KEY_TYPE_AES_256:
      aes_ctx.mFlags = E_SK_DEFAULT;
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002ed2:	3101      	adds	r1, #1
 8002ed4:	0109      	lsls	r1, r1, #4
      aes_ctx.mIvSize = 16;
 8002ed6:	2210      	movs	r2, #16
      aes_ctx.mFlags = E_SK_DEFAULT;
 8002ed8:	f88d 0014 	strb.w	r0, [sp, #20]
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002edc:	910d      	str	r1, [sp, #52]	; 0x34
      aes_ctx.mIvSize = 16;
 8002ede:	9208      	str	r2, [sp, #32]
      status_code = AES_CBC_Encrypt_Init(&aes_ctx, aHostCipherKey, InInitialValue);
 8002ee0:	490b      	ldr	r1, [pc, #44]	; (8002f10 <StSafeA_AES_CBC_Encrypt+0x58>)
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	a804      	add	r0, sp, #16
 8002ee6:	f001 f859 	bl	8003f9c <AES_CBC_Encrypt_Init>
      if (status_code == AES_SUCCESS)
 8002eea:	b968      	cbnz	r0, 8002f08 <StSafeA_AES_CBC_Encrypt+0x50>
      {
        status_code = AES_CBC_Encrypt_Append(&aes_ctx, pInData, (int32_t)InDataLength, pOutData, &output_length);
 8002eec:	9400      	str	r4, [sp, #0]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	463a      	mov	r2, r7
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	a804      	add	r0, sp, #16
 8002ef6:	f001 f89f 	bl	8004038 <AES_CBC_Encrypt_Append>
        if (status_code == AES_SUCCESS)
 8002efa:	b928      	cbnz	r0, 8002f08 <StSafeA_AES_CBC_Encrypt+0x50>
        {
          status_code = AES_CBC_Encrypt_Finish(&aes_ctx, &pOutData[output_length], &output_length);
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	4622      	mov	r2, r4
 8002f00:	4429      	add	r1, r5
 8002f02:	a804      	add	r0, sp, #16
 8002f04:	f001 f8be 	bl	8004084 <AES_CBC_Encrypt_Finish>

  return status_code;
#else
  return 1;
#endif /* INCLUDE_CBC - INCLUDE_ENCRYPTION */
}
 8002f08:	b04b      	add	sp, #300	; 0x12c
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      status_code = 1;
 8002f0c:	2001      	movs	r0, #1
  return status_code;
 8002f0e:	e7fb      	b.n	8002f08 <StSafeA_AES_CBC_Encrypt+0x50>
 8002f10:	20007808 	.word	0x20007808

08002f14 <StSafeA_AES_CBC_Decrypt>:
  *            @arg STSAFEA_KEY_TYPE_AES_256: AES 256-bits
  * @retval  0 if success, an error code otherwise
  */
int32_t StSafeA_AES_CBC_Decrypt(uint8_t *pInData, uint16_t InDataLength, uint8_t *pOutData,
                                uint8_t *InInitialValue, uint8_t InAesType)
{
 8002f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f16:	b0cb      	sub	sp, #300	; 0x12c
 8002f18:	460f      	mov	r7, r1
 8002f1a:	f89d 1140 	ldrb.w	r1, [sp, #320]	; 0x140
 8002f1e:	4606      	mov	r6, r0
#if defined INCLUDE_CBC && defined INCLUDE_DECRYPTION
  int32_t status_code;
  AESCBCctx_stt aes_ctx;
  int32_t output_length = 0;

  switch (InAesType)
 8002f20:	2901      	cmp	r1, #1
  int32_t output_length = 0;
 8002f22:	f04f 0000 	mov.w	r0, #0
{
 8002f26:	4615      	mov	r5, r2
  int32_t output_length = 0;
 8002f28:	ac03      	add	r4, sp, #12
 8002f2a:	9003      	str	r0, [sp, #12]
  switch (InAesType)
 8002f2c:	d81c      	bhi.n	8002f68 <StSafeA_AES_CBC_Decrypt+0x54>
  {
    case STSAFEA_KEY_TYPE_AES_128:
    case STSAFEA_KEY_TYPE_AES_256:
      aes_ctx.mFlags = E_SK_DEFAULT;
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002f2e:	3101      	adds	r1, #1
 8002f30:	0109      	lsls	r1, r1, #4
      aes_ctx.mIvSize = 16;
 8002f32:	2210      	movs	r2, #16
      aes_ctx.mFlags = E_SK_DEFAULT;
 8002f34:	f88d 0014 	strb.w	r0, [sp, #20]
      aes_ctx.mKeySize = STSAFEA_AES_KEY_BITSIZE((uint32_t)InAesType) / 8U;
 8002f38:	910d      	str	r1, [sp, #52]	; 0x34
      aes_ctx.mIvSize = 16;
 8002f3a:	9208      	str	r2, [sp, #32]
      status_code = AES_CBC_Decrypt_Init(&aes_ctx, aHostCipherKey, InInitialValue);
 8002f3c:	490b      	ldr	r1, [pc, #44]	; (8002f6c <StSafeA_AES_CBC_Decrypt+0x58>)
 8002f3e:	461a      	mov	r2, r3
 8002f40:	a804      	add	r0, sp, #16
 8002f42:	f001 f8b9 	bl	80040b8 <AES_CBC_Decrypt_Init>
      if (status_code == AES_SUCCESS)
 8002f46:	b968      	cbnz	r0, 8002f64 <StSafeA_AES_CBC_Decrypt+0x50>
      {
        status_code = AES_CBC_Decrypt_Append(&aes_ctx, pInData, (int32_t)InDataLength, pOutData, &output_length);
 8002f48:	9400      	str	r4, [sp, #0]
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	4631      	mov	r1, r6
 8002f50:	a804      	add	r0, sp, #16
 8002f52:	f001 f901 	bl	8004158 <AES_CBC_Decrypt_Append>
        if (status_code == AES_SUCCESS)
 8002f56:	b928      	cbnz	r0, 8002f64 <StSafeA_AES_CBC_Decrypt+0x50>
        {
          status_code = AES_CBC_Decrypt_Finish(&aes_ctx, &pOutData[output_length], &output_length);
 8002f58:	6821      	ldr	r1, [r4, #0]
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4429      	add	r1, r5
 8002f5e:	a804      	add	r0, sp, #16
 8002f60:	f001 f920 	bl	80041a4 <AES_CBC_Decrypt_Finish>

  return status_code;
#else
  return 1;
#endif /* INCLUDE_CBC - INCLUDE_DECRYPTION */
}
 8002f64:	b04b      	add	sp, #300	; 0x12c
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      status_code = 1;
 8002f68:	2001      	movs	r0, #1
  return status_code;
 8002f6a:	e7fb      	b.n	8002f64 <StSafeA_AES_CBC_Decrypt+0x50>
 8002f6c:	20007808 	.word	0x20007808

08002f70 <HW_IO_Init>:
int32_t HW_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  STSAFEA_VREG_GPIO_PORT_CLK_ENABLE();
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HW_IO_Init+0x48>)
{
 8002f72:	b5f0      	push	{r4, r5, r6, r7, lr}
  STSAFEA_VREG_GPIO_PORT_CLK_ENABLE();
 8002f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  /* Configure GPIO pin : RST Pin */
  GPIO_InitStruct.Pin = STSAFEA_VREG_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(STSAFEA_VREG_GPIO_PORT, &GPIO_InitStruct);
 8002f76:	4d11      	ldr	r5, [pc, #68]	; (8002fbc <HW_IO_Init+0x4c>)
  STSAFEA_VREG_GPIO_PORT_CLK_ENABLE();
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8002f80:	b087      	sub	sp, #28
  STSAFEA_VREG_GPIO_PORT_CLK_ENABLE();
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f88:	2680      	movs	r6, #128	; 0x80
 8002f8a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2400      	movs	r4, #0
  HAL_GPIO_Init(STSAFEA_VREG_GPIO_PORT, &GPIO_InitStruct);
 8002f8e:	a901      	add	r1, sp, #4
 8002f90:	4628      	mov	r0, r5
  STSAFEA_VREG_GPIO_PORT_CLK_ENABLE();
 8002f92:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	e9cd 6701 	strd	r6, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	e9cd 4403 	strd	r4, r4, [sp, #12]
  HAL_GPIO_Init(STSAFEA_VREG_GPIO_PORT, &GPIO_InitStruct);
 8002f9c:	f000 fb60 	bl	8003660 <HAL_GPIO_Init>

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STSAFEA_VREG_GPIO_PORT, STSAFEA_VREG_PIN, GPIO_PIN_SET);
 8002fa0:	463a      	mov	r2, r7
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 fcc3 	bl	8003930 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002faa:	2032      	movs	r0, #50	; 0x32
 8002fac:	f006 f830 	bl	8009010 <HAL_Delay>

  return STSAFEA_HW_OK;
}
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	b007      	add	sp, #28
 8002fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	48000c00 	.word	0x48000c00

08002fc0 <BSP_I2C2_Send>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t BSP_I2C2_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8002fc0:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = STSAFEA_HW_ERR;

  if (HAL_I2C_Master_Transmit(&hbus_i2c2,
 8002fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	460a      	mov	r2, r1
 8002fcc:	4601      	mov	r1, r0
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <BSP_I2C2_Send+0x24>)
 8002fd0:	f000 fe34 	bl	8003c3c <HAL_I2C_Master_Transmit>
 8002fd4:	3000      	adds	r0, #0
 8002fd6:	bf18      	it	ne
 8002fd8:	2001      	movne	r0, #1
  {
    ret = STSAFEA_HW_OK;
  }

  return ret;
}
 8002fda:	4240      	negs	r0, r0
 8002fdc:	b003      	add	sp, #12
 8002fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe2:	bf00      	nop
 8002fe4:	20007828 	.word	0x20007828

08002fe8 <BSP_I2C2_Recv>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8002fe8:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = STSAFEA_HW_ERR;

  if (HAL_I2C_Master_Receive(&hbus_i2c2,
 8002fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	4601      	mov	r1, r0
 8002ff6:	4805      	ldr	r0, [pc, #20]	; (800300c <BSP_I2C2_Recv+0x24>)
 8002ff8:	f000 feb2 	bl	8003d60 <HAL_I2C_Master_Receive>
 8002ffc:	3000      	adds	r0, #0
 8002ffe:	bf18      	it	ne
 8003000:	2001      	movne	r0, #1
  {
    ret = STSAFEA_HW_OK;
  }

  return ret;
}
 8003002:	4240      	negs	r0, r0
 8003004:	b003      	add	sp, #12
 8003006:	f85d fb04 	ldr.w	pc, [sp], #4
 800300a:	bf00      	nop
 800300c:	20007828 	.word	0x20007828

08003010 <BSP_I2C2_DeInit>:
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
  /* Disable I2C clock */
  __HAL_RCC_I2C2_CLK_DISABLE();
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <BSP_I2C2_DeInit+0x34>)
 8003012:	6d93      	ldr	r3, [r2, #88]	; 0x58
{
 8003014:	b510      	push	{r4, lr}

  /* DeInitialize peripheral GPIOs */
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8003016:	4c0c      	ldr	r4, [pc, #48]	; (8003048 <BSP_I2C2_DeInit+0x38>)
  __HAL_RCC_I2C2_CLK_DISABLE();
 8003018:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800301e:	4620      	mov	r0, r4
 8003020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003024:	f000 fbf6 	bl	8003814 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8003028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800302c:	4620      	mov	r0, r4
 800302e:	f000 fbf1 	bl	8003814 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hbus_i2c2) == HAL_OK)
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <BSP_I2C2_DeInit+0x3c>)
 8003034:	f000 fde9 	bl	8003c0a <HAL_I2C_DeInit>
 8003038:	3000      	adds	r0, #0
 800303a:	bf18      	it	ne
 800303c:	2001      	movne	r0, #1
}
 800303e:	4240      	negs	r0, r0
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	48000400 	.word	0x48000400
 800304c:	20007828 	.word	0x20007828

08003050 <StSafeA_HW_Probe>:
  HwCtx->IOInit     = HW_IO_Init;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <StSafeA_HW_Probe+0x28>)
 8003052:	6003      	str	r3, [r0, #0]
  HwCtx->BusInit    = BSP_I2C2_Init;
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <StSafeA_HW_Probe+0x2c>)
 8003056:	6043      	str	r3, [r0, #4]
  HwCtx->BusDeInit  = BSP_I2C2_DeInit;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <StSafeA_HW_Probe+0x30>)
 800305a:	6083      	str	r3, [r0, #8]
  HwCtx->BusSend    = BSP_I2C2_Send;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <StSafeA_HW_Probe+0x34>)
 800305e:	6103      	str	r3, [r0, #16]
  HwCtx->BusRecv    = BSP_I2C2_Recv;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <StSafeA_HW_Probe+0x38>)
 8003062:	60c3      	str	r3, [r0, #12]
  HwCtx->CrcInit    = CRC16X25_Init;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <StSafeA_HW_Probe+0x3c>)
 8003066:	6183      	str	r3, [r0, #24]
  HwCtx->CrcCompute = CRC_Compute;
 8003068:	4b09      	ldr	r3, [pc, #36]	; (8003090 <StSafeA_HW_Probe+0x40>)
 800306a:	61c3      	str	r3, [r0, #28]
  HwCtx->TimeDelay  = HAL_Delay;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <StSafeA_HW_Probe+0x44>)
 800306e:	6143      	str	r3, [r0, #20]
  HwCtx->DevAddr    = STSAFEA_DEVICE_ADDRESS;
 8003070:	2320      	movs	r3, #32
 8003072:	8403      	strh	r3, [r0, #32]
}
 8003074:	2000      	movs	r0, #0
 8003076:	4770      	bx	lr
 8003078:	08002f71 	.word	0x08002f71
 800307c:	080030d9 	.word	0x080030d9
 8003080:	08003011 	.word	0x08003011
 8003084:	08002fc1 	.word	0x08002fc1
 8003088:	08002fe9 	.word	0x08002fe9
 800308c:	0800a049 	.word	0x0800a049
 8003090:	0800a04d 	.word	0x0800a04d
 8003094:	08009011 	.word	0x08009011

08003098 <MX_I2C2_Init>:
  phi2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003098:	2300      	movs	r3, #0
 800309a:	2201      	movs	r2, #1
{
 800309c:	b510      	push	{r4, lr}
  phi2c->Init.Timing           = timing;
 800309e:	6041      	str	r1, [r0, #4]
  phi2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80030a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  phi2c->Init.OwnAddress2      = 0;
 80030a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  phi2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80030a8:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 80030ac:	4604      	mov	r4, r0
  if (HAL_I2C_Init(phi2c) == HAL_OK)
 80030ae:	f000 fd5a 	bl	8003b66 <HAL_I2C_Init>
 80030b2:	b108      	cbz	r0, 80030b8 <MX_I2C2_Init+0x20>
  HAL_StatusTypeDef ret = HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
}
 80030b6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(phi2c, I2C_ANALOGFILTER_DISABLE) == HAL_OK)
 80030b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030bc:	4620      	mov	r0, r4
 80030be:	f000 fee4 	bl	8003e8a <HAL_I2CEx_ConfigAnalogFilter>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d1f6      	bne.n	80030b4 <MX_I2C2_Init+0x1c>
      if (HAL_I2CEx_ConfigDigitalFilter(phi2c, I2C_ANALOG_FILTER_DELAY_DEFAULT) == HAL_OK)
 80030c6:	2102      	movs	r1, #2
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 ff04 	bl	8003ed6 <HAL_I2CEx_ConfigDigitalFilter>
  HAL_StatusTypeDef ret = HAL_ERROR;
 80030ce:	3000      	adds	r0, #0
 80030d0:	bf18      	it	ne
 80030d2:	2001      	movne	r0, #1
 80030d4:	e7ef      	b.n	80030b6 <MX_I2C2_Init+0x1e>
	...

080030d8 <BSP_I2C2_Init>:
{
 80030d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hbus_i2c2.Instance  = I2C2;
 80030dc:	4c2a      	ldr	r4, [pc, #168]	; (8003188 <BSP_I2C2_Init+0xb0>)
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <BSP_I2C2_Init+0xb4>)
 80030e0:	6023      	str	r3, [r4, #0]
{
 80030e2:	b088      	sub	sp, #32
  if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 80030e4:	4620      	mov	r0, r4
 80030e6:	f000 fecd 	bl	8003e84 <HAL_I2C_GetState>
 80030ea:	4605      	mov	r5, r0
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d145      	bne.n	800317c <BSP_I2C2_Init+0xa4>
  BUS_I2C2_CLK_ENABLE();
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <BSP_I2C2_Init+0xb8>)
 80030f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030f4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58
 80030fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030fc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003100:	9200      	str	r2, [sp, #0]
 8003102:	9a00      	ldr	r2, [sp, #0]
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 8003104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003106:	f042 0202 	orr.w	r2, r2, #2
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c
 800310c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800310e:	f002 0202 	and.w	r2, r2, #2
 8003112:	9201      	str	r2, [sp, #4]
 8003114:	9a01      	ldr	r2, [sp, #4]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8003116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003118:	f042 0202 	orr.w	r2, r2, #2
 800311c:	64da      	str	r2, [r3, #76]	; 0x4c
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpio_init.Pull = GPIO_NOPULL;
 8003120:	9005      	str	r0, [sp, #20]
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init);
 800312a:	481a      	ldr	r0, [pc, #104]	; (8003194 <BSP_I2C2_Init+0xbc>)
  gpio_init.Mode = GPIO_MODE_AF_OD;
 800312c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003130:	f04f 0812 	mov.w	r8, #18
  gpio_init.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8003134:	2703      	movs	r7, #3
 8003136:	2604      	movs	r6, #4
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init);
 8003138:	a903      	add	r1, sp, #12
  gpio_init.Mode = GPIO_MODE_AF_OD;
 800313a:	e9cd 3803 	strd	r3, r8, [sp, #12]
  gpio_init.Alternate = BUS_I2C2_SDA_GPIO_AF;
 800313e:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init);
 8003142:	f000 fa8d 	bl	8003660 <HAL_GPIO_Init>
  gpio_init.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8003146:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init);
 800314a:	a903      	add	r1, sp, #12
 800314c:	4811      	ldr	r0, [pc, #68]	; (8003194 <BSP_I2C2_Init+0xbc>)
  gpio_init.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800314e:	9607      	str	r6, [sp, #28]
  gpio_init.Mode = GPIO_MODE_AF_OD;
 8003150:	e9cd 3803 	strd	r3, r8, [sp, #12]
  gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	e9cd 5705 	strd	r5, r7, [sp, #20]
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init);
 8003158:	f000 fa82 	bl	8003660 <HAL_GPIO_Init>
    if (MX_I2C2_Init(&hbus_i2c2, BUS_I2C2_TIMING) == HAL_OK)
 800315c:	490e      	ldr	r1, [pc, #56]	; (8003198 <BSP_I2C2_Init+0xc0>)
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff ff9a 	bl	8003098 <MX_I2C2_Init>
 8003164:	4601      	mov	r1, r0
 8003166:	b958      	cbnz	r0, 8003180 <BSP_I2C2_Init+0xa8>
      if (HAL_I2CEx_ConfigAnalogFilter(&hbus_i2c2, I2C_ANALOGFILTER_ENABLE) == HAL_OK)
 8003168:	4620      	mov	r0, r4
 800316a:	f000 fe8e 	bl	8003e8a <HAL_I2CEx_ConfigAnalogFilter>
 800316e:	3000      	adds	r0, #0
 8003170:	bf18      	it	ne
 8003172:	2001      	movne	r0, #1
 8003174:	4240      	negs	r0, r0
}
 8003176:	b008      	add	sp, #32
 8003178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = STSAFEA_HW_OK;
 800317c:	2000      	movs	r0, #0
 800317e:	e7fa      	b.n	8003176 <BSP_I2C2_Init+0x9e>
  int32_t ret = STSAFEA_HW_ERR;
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8003184:	e7f7      	b.n	8003176 <BSP_I2C2_Init+0x9e>
 8003186:	bf00      	nop
 8003188:	20007828 	.word	0x20007828
 800318c:	40005800 	.word	0x40005800
 8003190:	40021000 	.word	0x40021000
 8003194:	48000400 	.word	0x48000400
 8003198:	00702991 	.word	0x00702991

0800319c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800319e:	0896      	lsrs	r6, r2, #2
 80031a0:	6805      	ldr	r5, [r0, #0]
 80031a2:	460b      	mov	r3, r1
 80031a4:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80031a8:	42bb      	cmp	r3, r7
 80031aa:	d108      	bne.n	80031be <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80031ac:	f012 0203 	ands.w	r2, r2, #3
 80031b0:	d01e      	beq.n	80031f0 <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	d114      	bne.n	80031e0 <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80031b6:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80031ba:	702b      	strb	r3, [r5, #0]
 80031bc:	e018      	b.n	80031f0 <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80031be:	785c      	ldrb	r4, [r3, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80031c0:	f893 c000 	ldrb.w	ip, [r3]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80031c4:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80031c6:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80031ca:	f893 c003 	ldrb.w	ip, [r3, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80031ce:	ea44 040c 	orr.w	r4, r4, ip
 80031d2:	f893 c002 	ldrb.w	ip, [r3, #2]
 80031d6:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80031da:	602c      	str	r4, [r5, #0]
 80031dc:	3304      	adds	r3, #4
 80031de:	e7e3      	b.n	80031a8 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 80031e0:	2a02      	cmp	r2, #2
 80031e2:	d108      	bne.n	80031f6 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80031e4:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 80031ee:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	6818      	ldr	r0, [r3, #0]
}
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80031f6:	785a      	ldrb	r2, [r3, #1]
 80031f8:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 80031fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8003200:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003202:	789b      	ldrb	r3, [r3, #2]
 8003204:	e7d9      	b.n	80031ba <CRC_Handle_8+0x1e>

08003206 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003206:	6800      	ldr	r0, [r0, #0]
 8003208:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800320a:	2300      	movs	r3, #0
 800320c:	0855      	lsrs	r5, r2, #1
 800320e:	429d      	cmp	r5, r3
 8003210:	d106      	bne.n	8003220 <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8003212:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8003214:	bf44      	itt	mi
 8003216:	f831 3025 	ldrhmi.w	r3, [r1, r5, lsl #2]
 800321a:	8003      	strhmi	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800321c:	6800      	ldr	r0, [r0, #0]
}
 800321e:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003220:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8003224:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
 8003228:	8864      	ldrh	r4, [r4, #2]
 800322a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800322e:	6004      	str	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003230:	3301      	adds	r3, #1
 8003232:	e7ec      	b.n	800320e <CRC_Handle_16+0x8>

08003234 <HAL_CRC_MspInit>:
}
 8003234:	4770      	bx	lr
	...

08003238 <HAL_CRC_Init>:
{
 8003238:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 800323a:	4604      	mov	r4, r0
 800323c:	b908      	cbnz	r0, 8003242 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800323e:	2001      	movs	r0, #1
}
 8003240:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003242:	7f43      	ldrb	r3, [r0, #29]
 8003244:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003248:	b913      	cbnz	r3, 8003250 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800324a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800324c:	f7ff fff2 	bl	8003234 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003250:	2302      	movs	r3, #2
 8003252:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003254:	7923      	ldrb	r3, [r4, #4]
 8003256:	b9e3      	cbnz	r3, 8003292 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_CRC_Init+0x70>)
 800325c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	f022 0218 	bic.w	r2, r2, #24
 8003264:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003266:	7962      	ldrb	r2, [r4, #5]
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	b9d2      	cbnz	r2, 80032a2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003270:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	6961      	ldr	r1, [r4, #20]
 8003276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800327a:	430a      	orrs	r2, r1
 800327c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69a1      	ldr	r1, [r4, #24]
 8003282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800328a:	2301      	movs	r3, #1
 800328c:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800328e:	2000      	movs	r0, #0
 8003290:	e7d6      	b.n	8003240 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003292:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003296:	4620      	mov	r0, r4
 8003298:	f000 f82c 	bl	80032f4 <HAL_CRCEx_Polynomial_Set>
 800329c:	2800      	cmp	r0, #0
 800329e:	d0e2      	beq.n	8003266 <HAL_CRC_Init+0x2e>
 80032a0:	e7cd      	b.n	800323e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80032a2:	6922      	ldr	r2, [r4, #16]
 80032a4:	e7e4      	b.n	8003270 <HAL_CRC_Init+0x38>
 80032a6:	bf00      	nop
 80032a8:	04c11db7 	.word	0x04c11db7

080032ac <HAL_CRC_Calculate>:
{
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80032ae:	2502      	movs	r5, #2
 80032b0:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80032b2:	6805      	ldr	r5, [r0, #0]
 80032b4:	68af      	ldr	r7, [r5, #8]
 80032b6:	f047 0701 	orr.w	r7, r7, #1
 80032ba:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 80032bc:	6a07      	ldr	r7, [r0, #32]
 80032be:	2f02      	cmp	r7, #2
{
 80032c0:	4604      	mov	r4, r0
  switch (hcrc->InputDataFormat)
 80032c2:	d012      	beq.n	80032ea <HAL_CRC_Calculate+0x3e>
 80032c4:	2f03      	cmp	r7, #3
 80032c6:	d004      	beq.n	80032d2 <HAL_CRC_Calculate+0x26>
 80032c8:	2f01      	cmp	r7, #1
 80032ca:	d111      	bne.n	80032f0 <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80032cc:	f7ff ff66 	bl	800319c <CRC_Handle_8>
      break;
 80032d0:	e004      	b.n	80032dc <HAL_CRC_Calculate+0x30>
 80032d2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 80032d6:	42b1      	cmp	r1, r6
 80032d8:	d103      	bne.n	80032e2 <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 80032da:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80032dc:	2301      	movs	r3, #1
 80032de:	7763      	strb	r3, [r4, #29]
}
 80032e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 80032e2:	f851 3b04 	ldr.w	r3, [r1], #4
 80032e6:	602b      	str	r3, [r5, #0]
 80032e8:	e7f5      	b.n	80032d6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80032ea:	f7ff ff8c 	bl	8003206 <CRC_Handle_16>
      break;
 80032ee:	e7f5      	b.n	80032dc <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80032f0:	2000      	movs	r0, #0
 80032f2:	e7f3      	b.n	80032dc <HAL_CRC_Calculate+0x30>

080032f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032f4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032f6:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032f8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80032fc:	d306      	bcc.n	800330c <HAL_CRCEx_Polynomial_Set+0x18>
 80032fe:	fa21 f403 	lsr.w	r4, r1, r3
 8003302:	07e4      	lsls	r4, r4, #31
 8003304:	d5f8      	bpl.n	80032f8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003306:	2a08      	cmp	r2, #8
 8003308:	d014      	beq.n	8003334 <HAL_CRCEx_Polynomial_Set+0x40>
 800330a:	d802      	bhi.n	8003312 <HAL_CRCEx_Polynomial_Set+0x1e>
 800330c:	b13a      	cbz	r2, 800331e <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800330e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8003310:	e00d      	b.n	800332e <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8003312:	2a10      	cmp	r2, #16
 8003314:	d00c      	beq.n	8003330 <HAL_CRCEx_Polynomial_Set+0x3c>
 8003316:	2a18      	cmp	r2, #24
 8003318:	d1f9      	bne.n	800330e <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 800331a:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800331c:	d8f7      	bhi.n	800330e <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800331e:	6800      	ldr	r0, [r0, #0]
 8003320:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003322:	6883      	ldr	r3, [r0, #8]
 8003324:	f023 0318 	bic.w	r3, r3, #24
 8003328:	431a      	orrs	r2, r3
 800332a:	6082      	str	r2, [r0, #8]
 800332c:	2000      	movs	r0, #0
}
 800332e:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8003330:	2b07      	cmp	r3, #7
 8003332:	e7f3      	b.n	800331c <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003334:	2b0f      	cmp	r3, #15
 8003336:	e7f1      	b.n	800331c <HAL_CRCEx_Polynomial_Set+0x28>

08003338 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <FLASH_Program_Fast+0x28>)
 800333a:	6953      	ldr	r3, [r2, #20]
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
 8003340:	b510      	push	{r4, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003342:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003348:	b672      	cpsid	i
 800334a:	f501 7200 	add.w	r2, r1, #512	; 0x200
 800334e:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003350:	680c      	ldr	r4, [r1, #0]
 8003352:	500c      	str	r4, [r1, r0]
    dest_addr++;
    src_addr++;
 8003354:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8003356:	4291      	cmp	r1, r2
 8003358:	d1fa      	bne.n	8003350 <FLASH_Program_Fast+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800335e:	bd10      	pop	{r4, pc}
 8003360:	40022000 	.word	0x40022000

08003364 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_FLASH_Unlock+0x1c>)
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800336a:	bfbf      	itttt	lt
 800336c:	4a05      	ldrlt	r2, [pc, #20]	; (8003384 <HAL_FLASH_Unlock+0x20>)
 800336e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003370:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8003374:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003376:	bfba      	itte	lt
 8003378:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	0fc0      	lsrlt	r0, r0, #31
 800337c:	2000      	movge	r0, #0
}
 800337e:	4770      	bx	lr
 8003380:	40022000 	.word	0x40022000
 8003384:	45670123 	.word	0x45670123

08003388 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003388:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_FLASH_Lock+0x10>)
 800338a:	6953      	ldr	r3, [r2, #20]
 800338c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003390:	6153      	str	r3, [r2, #20]
}
 8003392:	2000      	movs	r0, #0
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000

0800339c <FLASH_WaitForLastOperation>:
{
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f005 fe14 	bl	8008fcc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80033a4:	4c10      	ldr	r4, [pc, #64]	; (80033e8 <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80033a6:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	03db      	lsls	r3, r3, #15
 80033ac:	d40a      	bmi.n	80033c4 <FLASH_WaitForLastOperation+0x28>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80033ae:	6920      	ldr	r0, [r4, #16]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <FLASH_WaitForLastOperation+0x50>)
  if(error != 0u)
 80033b2:	4002      	ands	r2, r0
 80033b4:	d00f      	beq.n	80033d6 <FLASH_WaitForLastOperation+0x3a>
    pFlash.ErrorCode |= error;
 80033b6:	490e      	ldr	r1, [pc, #56]	; (80033f0 <FLASH_WaitForLastOperation+0x54>)
 80033b8:	684b      	ldr	r3, [r1, #4]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
    return HAL_ERROR;
 80033be:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80033c0:	6122      	str	r2, [r4, #16]
}
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80033c4:	1c6a      	adds	r2, r5, #1
 80033c6:	d0ef      	beq.n	80033a8 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 80033c8:	f005 fe00 	bl	8008fcc <HAL_GetTick>
 80033cc:	1b80      	subs	r0, r0, r6
 80033ce:	42a8      	cmp	r0, r5
 80033d0:	d3ea      	bcc.n	80033a8 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80033d2:	2003      	movs	r0, #3
 80033d4:	e7f5      	b.n	80033c2 <FLASH_WaitForLastOperation+0x26>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80033d6:	6920      	ldr	r0, [r4, #16]
 80033d8:	f010 0001 	ands.w	r0, r0, #1
 80033dc:	d0f1      	beq.n	80033c2 <FLASH_WaitForLastOperation+0x26>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033de:	2301      	movs	r3, #1
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	4610      	mov	r0, r2
 80033e4:	e7ed      	b.n	80033c2 <FLASH_WaitForLastOperation+0x26>
 80033e6:	bf00      	nop
 80033e8:	40022000 	.word	0x40022000
 80033ec:	0002c3fa 	.word	0x0002c3fa
 80033f0:	20002060 	.word	0x20002060

080033f4 <HAL_FLASH_Program>:
{
 80033f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80033f8:	4c25      	ldr	r4, [pc, #148]	; (8003490 <HAL_FLASH_Program+0x9c>)
{
 80033fa:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80033fc:	7823      	ldrb	r3, [r4, #0]
 80033fe:	2b01      	cmp	r3, #1
{
 8003400:	4607      	mov	r7, r0
 8003402:	4688      	mov	r8, r1
 8003404:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8003406:	d041      	beq.n	800348c <HAL_FLASH_Program+0x98>
 8003408:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800340a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800340e:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003410:	f7ff ffc4 	bl	800339c <FLASH_WaitForLastOperation>
 8003414:	4606      	mov	r6, r0
  if(status == HAL_OK)
 8003416:	bb30      	cbnz	r0, 8003466 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003418:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800341a:	481e      	ldr	r0, [pc, #120]	; (8003494 <HAL_FLASH_Program+0xa0>)
 800341c:	6805      	ldr	r5, [r0, #0]
 800341e:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003422:	bf17      	itett	ne
 8003424:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003426:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003428:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800342c:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800342e:	bf1c      	itt	ne
 8003430:	2302      	movne	r3, #2
 8003432:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003434:	b9e7      	cbnz	r7, 8003470 <HAL_FLASH_Program+0x7c>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003436:	6945      	ldr	r5, [r0, #20]
 8003438:	f045 0501 	orr.w	r5, r5, #1
 800343c:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800343e:	f8c8 9000 	str.w	r9, [r8]
  __ASM volatile ("isb 0xF":::"memory");
 8003442:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8003446:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003448:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800344c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003450:	f7ff ffa4 	bl	800339c <FLASH_WaitForLastOperation>
 8003454:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 8003456:	b125      	cbz	r5, 8003462 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003458:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_FLASH_Program+0xa0>)
 800345a:	6953      	ldr	r3, [r2, #20]
 800345c:	ea23 0505 	bic.w	r5, r3, r5
 8003460:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8003462:	f000 f85d 	bl	8003520 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003466:	2300      	movs	r3, #0
 8003468:	7023      	strb	r3, [r4, #0]
}
 800346a:	4630      	mov	r0, r6
 800346c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003470:	1e7b      	subs	r3, r7, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d901      	bls.n	800347a <HAL_FLASH_Program+0x86>
  uint32_t prog_bit = 0;
 8003476:	2500      	movs	r5, #0
 8003478:	e7e8      	b.n	800344c <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800347a:	4649      	mov	r1, r9
 800347c:	4640      	mov	r0, r8
 800347e:	f7ff ff5b 	bl	8003338 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003482:	2f02      	cmp	r7, #2
 8003484:	d1f7      	bne.n	8003476 <HAL_FLASH_Program+0x82>
        prog_bit = FLASH_CR_FSTPG;
 8003486:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800348a:	e7df      	b.n	800344c <HAL_FLASH_Program+0x58>
  __HAL_LOCK(&pFlash);
 800348c:	2602      	movs	r6, #2
 800348e:	e7ec      	b.n	800346a <HAL_FLASH_Program+0x76>
 8003490:	20002060 	.word	0x20002060
 8003494:	40022000 	.word	0x40022000

08003498 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <FLASH_MassErase+0x40>)
 800349a:	6a13      	ldr	r3, [r2, #32]
 800349c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034a0:	4613      	mov	r3, r2
 80034a2:	d011      	beq.n	80034c8 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80034a4:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80034a6:	bf42      	ittt	mi
 80034a8:	6952      	ldrmi	r2, [r2, #20]
 80034aa:	f042 0204 	orrmi.w	r2, r2, #4
 80034ae:	615a      	strmi	r2, [r3, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80034b0:	0782      	lsls	r2, r0, #30
 80034b2:	d503      	bpl.n	80034bc <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ba:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <FLASH_MassErase+0x40>)
 80034be:	6953      	ldr	r3, [r2, #20]
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6153      	str	r3, [r2, #20]
}
 80034c6:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80034c8:	6953      	ldr	r3, [r2, #20]
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6153      	str	r3, [r2, #20]
 80034d4:	e7f2      	b.n	80034bc <FLASH_MassErase+0x24>
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000

080034dc <FLASH_PageErase>:
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <FLASH_PageErase+0x40>)
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80034e4:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80034e6:	d113      	bne.n	8003510 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80034e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80034ec:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	00c0      	lsls	r0, r0, #3
 80034f2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80034f6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80034fa:	4310      	orrs	r0, r2
 80034fc:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f042 0202 	orr.w	r2, r2, #2
 8003504:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800350c:	615a      	str	r2, [r3, #20]
}
 800350e:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8003510:	07c9      	lsls	r1, r1, #31
 8003512:	d4e9      	bmi.n	80034e8 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003518:	e7e8      	b.n	80034ec <FLASH_PageErase+0x10>
 800351a:	bf00      	nop
 800351c:	40022000 	.word	0x40022000

08003520 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003520:	4913      	ldr	r1, [pc, #76]	; (8003570 <FLASH_FlushCaches+0x50>)
 8003522:	7f0b      	ldrb	r3, [r1, #28]
 8003524:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003526:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800352a:	2a01      	cmp	r2, #1
 800352c:	d10c      	bne.n	8003548 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800352e:	4a11      	ldr	r2, [pc, #68]	; (8003574 <FLASH_FlushCaches+0x54>)
 8003530:	6810      	ldr	r0, [r2, #0]
 8003532:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8003536:	6010      	str	r0, [r2, #0]
 8003538:	6810      	ldr	r0, [r2, #0]
 800353a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800353e:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003540:	6810      	ldr	r0, [r2, #0]
 8003542:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8003546:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003548:	3b02      	subs	r3, #2
 800354a:	2b01      	cmp	r3, #1
 800354c:	d80c      	bhi.n	8003568 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <FLASH_FlushCaches+0x54>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800355e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003568:	2300      	movs	r3, #0
 800356a:	770b      	strb	r3, [r1, #28]
}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20002060 	.word	0x20002060
 8003574:	40022000 	.word	0x40022000

08003578 <HAL_FLASHEx_Erase>:
{
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800357c:	4c35      	ldr	r4, [pc, #212]	; (8003654 <HAL_FLASHEx_Erase+0xdc>)
 800357e:	7823      	ldrb	r3, [r4, #0]
 8003580:	2b01      	cmp	r3, #1
{
 8003582:	4606      	mov	r6, r0
 8003584:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003586:	d062      	beq.n	800364e <HAL_FLASHEx_Erase+0xd6>
 8003588:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800358a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800358e:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003590:	f7ff ff04 	bl	800339c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003594:	4605      	mov	r5, r0
 8003596:	bb40      	cbnz	r0, 80035ea <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003598:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800359a:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80035a2:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80035a4:	d026      	beq.n	80035f4 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80035a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	0551      	lsls	r1, r2, #21
 80035b0:	d506      	bpl.n	80035c0 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b8:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80035ba:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80035bc:	7723      	strb	r3, [r4, #28]
 80035be:	e000      	b.n	80035c2 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80035c0:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035c2:	6833      	ldr	r3, [r6, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11f      	bne.n	8003608 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 80035c8:	6870      	ldr	r0, [r6, #4]
 80035ca:	f7ff ff65 	bl	8003498 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d2:	f7ff fee3 	bl	800339c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80035d6:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_FLASHEx_Erase+0xe0>)
 80035d8:	6953      	ldr	r3, [r2, #20]
 80035da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035de:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035e2:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80035e4:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80035e6:	f7ff ff9b 	bl	8003520 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80035ea:	2300      	movs	r3, #0
 80035ec:	7023      	strb	r3, [r4, #0]
}
 80035ee:	4628      	mov	r0, r5
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80035f4:	0552      	lsls	r2, r2, #21
 80035f6:	d505      	bpl.n	8003604 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003600:	2302      	movs	r3, #2
 8003602:	e7db      	b.n	80035bc <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003604:	7720      	strb	r0, [r4, #28]
 8003606:	e7dc      	b.n	80035c2 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003610:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003612:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003658 <HAL_FLASHEx_Erase+0xe0>
 8003616:	f8df a044 	ldr.w	sl, [pc, #68]	; 800365c <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800361a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800361e:	4413      	add	r3, r2
 8003620:	42bb      	cmp	r3, r7
 8003622:	d9e0      	bls.n	80035e6 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003624:	6871      	ldr	r1, [r6, #4]
 8003626:	4638      	mov	r0, r7
 8003628:	f7ff ff58 	bl	80034dc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003630:	f7ff feb4 	bl	800339c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003634:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003638:	ea03 030a 	and.w	r3, r3, sl
 800363c:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8003640:	b118      	cbz	r0, 800364a <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8003642:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003646:	4605      	mov	r5, r0
          break;
 8003648:	e7cd      	b.n	80035e6 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800364a:	3701      	adds	r7, #1
 800364c:	e7e5      	b.n	800361a <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 800364e:	2502      	movs	r5, #2
 8003650:	e7cd      	b.n	80035ee <HAL_FLASHEx_Erase+0x76>
 8003652:	bf00      	nop
 8003654:	20002060 	.word	0x20002060
 8003658:	40022000 	.word	0x40022000
 800365c:	fffff805 	.word	0xfffff805

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003664:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003668:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003810 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800366c:	4a66      	ldr	r2, [pc, #408]	; (8003808 <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 800366e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	fa38 f403 	lsrs.w	r4, r8, r3
 8003674:	d102      	bne.n	800367c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8003676:	b003      	add	sp, #12
 8003678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800367c:	f04f 0c01 	mov.w	ip, #1
 8003680:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003684:	ea1c 0608 	ands.w	r6, ip, r8
 8003688:	f000 80ad 	beq.w	80037e6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368c:	684c      	ldr	r4, [r1, #4]
 800368e:	f024 0a10 	bic.w	sl, r4, #16
 8003692:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003696:	2503      	movs	r5, #3
 8003698:	f10a 37ff 	add.w	r7, sl, #4294967295
 800369c:	fa05 f50e 	lsl.w	r5, r5, lr
 80036a0:	2f01      	cmp	r7, #1
 80036a2:	ea6f 0505 	mvn.w	r5, r5
 80036a6:	d811      	bhi.n	80036cc <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 80036a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036ae:	68cf      	ldr	r7, [r1, #12]
 80036b0:	fa07 f70e 	lsl.w	r7, r7, lr
 80036b4:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80036b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80036ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036bc:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80036c4:	409f      	lsls	r7, r3
 80036c6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80036ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80036cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036ce:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036d2:	688f      	ldr	r7, [r1, #8]
 80036d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80036d8:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036dc:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 80036e0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036e2:	d116      	bne.n	8003712 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80036e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80036e8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80036f0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80036f8:	f04f 0c0f 	mov.w	ip, #15
 80036fc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003700:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003704:	690f      	ldr	r7, [r1, #16]
 8003706:	fa07 f70b 	lsl.w	r7, r7, fp
 800370a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 800370e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8003712:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003714:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003716:	f004 0703 	and.w	r7, r4, #3
 800371a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800371e:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8003722:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003724:	00e5      	lsls	r5, r4, #3
 8003726:	d55e      	bpl.n	80037e6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003728:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800372c:	f045 0501 	orr.w	r5, r5, #1
 8003730:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8003734:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003738:	f023 0703 	bic.w	r7, r3, #3
 800373c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003740:	f005 0501 	and.w	r5, r5, #1
 8003744:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003748:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800374a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003750:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003754:	f04f 0e0f 	mov.w	lr, #15
 8003758:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800375c:	fa0e f50c 	lsl.w	r5, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003760:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003764:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003768:	d03f      	beq.n	80037ea <HAL_GPIO_Init+0x18a>
 800376a:	4d28      	ldr	r5, [pc, #160]	; (800380c <HAL_GPIO_Init+0x1ac>)
 800376c:	42a8      	cmp	r0, r5
 800376e:	d03e      	beq.n	80037ee <HAL_GPIO_Init+0x18e>
 8003770:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003774:	42a8      	cmp	r0, r5
 8003776:	d03c      	beq.n	80037f2 <HAL_GPIO_Init+0x192>
 8003778:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800377c:	42a8      	cmp	r0, r5
 800377e:	d03a      	beq.n	80037f6 <HAL_GPIO_Init+0x196>
 8003780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003784:	42a8      	cmp	r0, r5
 8003786:	d038      	beq.n	80037fa <HAL_GPIO_Init+0x19a>
 8003788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800378c:	42a8      	cmp	r0, r5
 800378e:	d036      	beq.n	80037fe <HAL_GPIO_Init+0x19e>
 8003790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003794:	42a8      	cmp	r0, r5
 8003796:	d034      	beq.n	8003802 <HAL_GPIO_Init+0x1a2>
 8003798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800379c:	42a8      	cmp	r0, r5
 800379e:	bf14      	ite	ne
 80037a0:	2508      	movne	r5, #8
 80037a2:	2507      	moveq	r5, #7
 80037a4:	fa05 f50c 	lsl.w	r5, r5, ip
 80037a8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ac:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 80037ae:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 80037b0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 80037b6:	bf0c      	ite	eq
 80037b8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80037ba:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80037bc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80037be:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80037c4:	bf0c      	ite	eq
 80037c6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80037c8:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80037ca:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80037cc:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80037d2:	bf0c      	ite	eq
 80037d4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80037d6:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80037d8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80037da:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037dc:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80037de:	bf54      	ite	pl
 80037e0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80037e2:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80037e4:	60d5      	str	r5, [r2, #12]
    position++;
 80037e6:	3301      	adds	r3, #1
 80037e8:	e742      	b.n	8003670 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ea:	2500      	movs	r5, #0
 80037ec:	e7da      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 80037ee:	2501      	movs	r5, #1
 80037f0:	e7d8      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 80037f2:	2502      	movs	r5, #2
 80037f4:	e7d6      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 80037f6:	2503      	movs	r5, #3
 80037f8:	e7d4      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 80037fa:	2504      	movs	r5, #4
 80037fc:	e7d2      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 80037fe:	2505      	movs	r5, #5
 8003800:	e7d0      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 8003802:	2506      	movs	r5, #6
 8003804:	e7ce      	b.n	80037a4 <HAL_GPIO_Init+0x144>
 8003806:	bf00      	nop
 8003808:	40010400 	.word	0x40010400
 800380c:	48000400 	.word	0x48000400
 8003810:	40021000 	.word	0x40021000

08003814 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003818:	4c41      	ldr	r4, [pc, #260]	; (8003920 <HAL_GPIO_DeInit+0x10c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800381a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8003928 <HAL_GPIO_DeInit+0x114>
 800381e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800392c <HAL_GPIO_DeInit+0x118>
  uint32_t position = 0x00u;
 8003822:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003824:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003828:	fa31 f302 	lsrs.w	r3, r1, r2
 800382c:	d101      	bne.n	8003832 <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 800382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003832:	fa09 fe02 	lsl.w	lr, r9, r2
    if (iocurrent != 0x00u)
 8003836:	ea1e 0501 	ands.w	r5, lr, r1
 800383a:	d061      	beq.n	8003900 <HAL_GPIO_DeInit+0xec>
 800383c:	f022 0603 	bic.w	r6, r2, #3
 8003840:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003844:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003848:	f002 0c03 	and.w	ip, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800384c:	68b3      	ldr	r3, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800384e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003852:	270f      	movs	r7, #15
 8003854:	fa07 f70c 	lsl.w	r7, r7, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003858:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800385c:	ea07 0803 	and.w	r8, r7, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003860:	d050      	beq.n	8003904 <HAL_GPIO_DeInit+0xf0>
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <HAL_GPIO_DeInit+0x110>)
 8003864:	4298      	cmp	r0, r3
 8003866:	d04f      	beq.n	8003908 <HAL_GPIO_DeInit+0xf4>
 8003868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800386c:	4298      	cmp	r0, r3
 800386e:	d04d      	beq.n	800390c <HAL_GPIO_DeInit+0xf8>
 8003870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003874:	4298      	cmp	r0, r3
 8003876:	d04b      	beq.n	8003910 <HAL_GPIO_DeInit+0xfc>
 8003878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800387c:	4298      	cmp	r0, r3
 800387e:	d049      	beq.n	8003914 <HAL_GPIO_DeInit+0x100>
 8003880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003884:	4298      	cmp	r0, r3
 8003886:	d047      	beq.n	8003918 <HAL_GPIO_DeInit+0x104>
 8003888:	4550      	cmp	r0, sl
 800388a:	d047      	beq.n	800391c <HAL_GPIO_DeInit+0x108>
 800388c:	4558      	cmp	r0, fp
 800388e:	bf0c      	ite	eq
 8003890:	2307      	moveq	r3, #7
 8003892:	2308      	movne	r3, #8
 8003894:	fa03 f30c 	lsl.w	r3, r3, ip
 8003898:	4543      	cmp	r3, r8
 800389a:	d110      	bne.n	80038be <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR1 &= ~(iocurrent);
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	43ed      	mvns	r5, r5
 80038a0:	402b      	ands	r3, r5
 80038a2:	6023      	str	r3, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038a4:	6863      	ldr	r3, [r4, #4]
 80038a6:	402b      	ands	r3, r5
 80038a8:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80038aa:	68a3      	ldr	r3, [r4, #8]
 80038ac:	402b      	ands	r3, r5
 80038ae:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80038b0:	68e3      	ldr	r3, [r4, #12]
 80038b2:	401d      	ands	r5, r3
 80038b4:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80038b6:	68b3      	ldr	r3, [r6, #8]
 80038b8:	ea23 0707 	bic.w	r7, r3, r7
 80038bc:	60b7      	str	r7, [r6, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80038be:	6805      	ldr	r5, [r0, #0]
 80038c0:	2603      	movs	r6, #3
 80038c2:	0053      	lsls	r3, r2, #1
 80038c4:	fa06 f303 	lsl.w	r3, r6, r3
 80038c8:	431d      	orrs	r5, r3
 80038ca:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80038cc:	fa22 f506 	lsr.w	r5, r2, r6
 80038d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80038d4:	f002 0c07 	and.w	ip, r2, #7
 80038d8:	6a2e      	ldr	r6, [r5, #32]
 80038da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80038de:	270f      	movs	r7, #15
 80038e0:	fa07 f70c 	lsl.w	r7, r7, ip
 80038e4:	ea26 0707 	bic.w	r7, r6, r7
 80038e8:	622f      	str	r7, [r5, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038ea:	6885      	ldr	r5, [r0, #8]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401d      	ands	r5, r3
 80038f0:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80038f2:	6845      	ldr	r5, [r0, #4]
 80038f4:	ea25 050e 	bic.w	r5, r5, lr
 80038f8:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038fa:	68c5      	ldr	r5, [r0, #12]
 80038fc:	402b      	ands	r3, r5
 80038fe:	60c3      	str	r3, [r0, #12]
    position++;
 8003900:	3201      	adds	r2, #1
 8003902:	e791      	b.n	8003828 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003904:	2300      	movs	r3, #0
 8003906:	e7c5      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 8003908:	2301      	movs	r3, #1
 800390a:	e7c3      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 800390c:	2302      	movs	r3, #2
 800390e:	e7c1      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 8003910:	2303      	movs	r3, #3
 8003912:	e7bf      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 8003914:	2304      	movs	r3, #4
 8003916:	e7bd      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 8003918:	2305      	movs	r3, #5
 800391a:	e7bb      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 800391c:	2306      	movs	r3, #6
 800391e:	e7b9      	b.n	8003894 <HAL_GPIO_DeInit+0x80>
 8003920:	40010400 	.word	0x40010400
 8003924:	48000400 	.word	0x48000400
 8003928:	48001800 	.word	0x48001800
 800392c:	48001c00 	.word	0x48001c00

08003930 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	b10a      	cbz	r2, 8003936 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003932:	6181      	str	r1, [r0, #24]
 8003934:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003936:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003938:	4770      	bx	lr

0800393a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800393a:	6803      	ldr	r3, [r0, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8003940:	bf44      	itt	mi
 8003942:	2200      	movmi	r2, #0
 8003944:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800394a:	bf5e      	ittt	pl
 800394c:	699a      	ldrpl	r2, [r3, #24]
 800394e:	f042 0201 	orrpl.w	r2, r2, #1
 8003952:	619a      	strpl	r2, [r3, #24]
  }
}
 8003954:	4770      	bx	lr
	...

08003958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003958:	b530      	push	{r4, r5, lr}
 800395a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800395c:	6804      	ldr	r4, [r0, #0]
 800395e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8003962:	4313      	orrs	r3, r2
 8003964:	f3c1 0209 	ubfx	r2, r1, #0, #10
 8003968:	431a      	orrs	r2, r3
 800396a:	4b04      	ldr	r3, [pc, #16]	; (800397c <I2C_TransferConfig+0x24>)
 800396c:	6860      	ldr	r0, [r4, #4]
 800396e:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8003972:	ea20 0003 	bic.w	r0, r0, r3
 8003976:	4302      	orrs	r2, r0
 8003978:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800397a:	bd30      	pop	{r4, r5, pc}
 800397c:	03ff63ff 	.word	0x03ff63ff

08003980 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003980:	6803      	ldr	r3, [r0, #0]
{
 8003982:	b570      	push	{r4, r5, r6, lr}
 8003984:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003986:	6998      	ldr	r0, [r3, #24]
 8003988:	f010 0010 	ands.w	r0, r0, #16
{
 800398c:	460d      	mov	r5, r1
 800398e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003990:	d116      	bne.n	80039c0 <I2C_IsAcknowledgeFailed+0x40>
}
 8003992:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003994:	1c69      	adds	r1, r5, #1
 8003996:	d014      	beq.n	80039c2 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f005 fb18 	bl	8008fcc <HAL_GetTick>
 800399c:	1b80      	subs	r0, r0, r6
 800399e:	42a8      	cmp	r0, r5
 80039a0:	d800      	bhi.n	80039a4 <I2C_IsAcknowledgeFailed+0x24>
 80039a2:	b96d      	cbnz	r5, 80039c0 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039a6:	f043 0320 	orr.w	r3, r3, #32
 80039aa:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	2320      	movs	r3, #32
 80039ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80039b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80039bc:	2001      	movs	r0, #1
 80039be:	e7e8      	b.n	8003992 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	068a      	lsls	r2, r1, #26
 80039c6:	d5e5      	bpl.n	8003994 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ca:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039cc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80039ce:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80039d2:	f7ff ffb2 	bl	800393a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	6853      	ldr	r3, [r2, #4]
 80039da:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80039de:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80039e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80039f8:	e7db      	b.n	80039b2 <I2C_IsAcknowledgeFailed+0x32>

080039fa <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80039fa:	b570      	push	{r4, r5, r6, lr}
 80039fc:	4604      	mov	r4, r0
 80039fe:	460d      	mov	r5, r1
 8003a00:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	075b      	lsls	r3, r3, #29
 8003a08:	d40e      	bmi.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff ffb6 	bl	8003980 <I2C_IsAcknowledgeFailed>
 8003a14:	b9f0      	cbnz	r0, 8003a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	0691      	lsls	r1, r2, #26
 8003a1c:	d51c      	bpl.n	8003a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	0752      	lsls	r2, r2, #29
 8003a22:	d503      	bpl.n	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8003a24:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003a26:	b10a      	cbz	r2, 8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8003a28:	2000      	movs	r0, #0
}
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003a36:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003a3a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a54:	2001      	movs	r0, #1
 8003a56:	e7e8      	b.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a58:	f005 fab8 	bl	8008fcc <HAL_GetTick>
 8003a5c:	1b80      	subs	r0, r0, r6
 8003a5e:	42a8      	cmp	r0, r5
 8003a60:	d801      	bhi.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	d1cd      	bne.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	2320      	movs	r3, #32
 8003a70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	e7eb      	b.n	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08003a78 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	460d      	mov	r5, r1
 8003a7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	d501      	bpl.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003a88:	2000      	movs	r0, #0
}
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff ff75 	bl	8003980 <I2C_IsAcknowledgeFailed>
 8003a96:	b990      	cbnz	r0, 8003abe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f005 fa98 	bl	8008fcc <HAL_GetTick>
 8003a9c:	1b80      	subs	r0, r0, r6
 8003a9e:	42a8      	cmp	r0, r5
 8003aa0:	d801      	bhi.n	8003aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	d1ec      	bne.n	8003a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003aba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
 8003ac0:	e7e3      	b.n	8003a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08003ac2 <I2C_WaitOnFlagUntilTimeout>:
{
 8003ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac6:	9f06      	ldr	r7, [sp, #24]
 8003ac8:	4604      	mov	r4, r0
 8003aca:	4688      	mov	r8, r1
 8003acc:	4616      	mov	r6, r2
 8003ace:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	6993      	ldr	r3, [r2, #24]
 8003ad4:	ea38 0303 	bics.w	r3, r8, r3
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	42b3      	cmp	r3, r6
 8003ae0:	d001      	beq.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e015      	b.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	1c6b      	adds	r3, r5, #1
 8003ae8:	d0f3      	beq.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f005 fa6f 	bl	8008fcc <HAL_GetTick>
 8003aee:	1bc0      	subs	r0, r0, r7
 8003af0:	42a8      	cmp	r0, r5
 8003af2:	d801      	bhi.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0x36>
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	d1eb      	bne.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	2320      	movs	r3, #32
 8003b02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003b0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003b10:	2001      	movs	r0, #1
}
 8003b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b16 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	079b      	lsls	r3, r3, #30
 8003b24:	d501      	bpl.n	8003b2a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7ff ff26 	bl	8003980 <I2C_IsAcknowledgeFailed>
 8003b34:	b9a0      	cbnz	r0, 8003b60 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	1c6a      	adds	r2, r5, #1
 8003b38:	d0f1      	beq.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f005 fa47 	bl	8008fcc <HAL_GetTick>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	42a8      	cmp	r0, r5
 8003b42:	d801      	bhi.n	8003b48 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	d1ea      	bne.n	8003b1e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	2320      	movs	r3, #32
 8003b52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003b5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
 8003b62:	e7e1      	b.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08003b64 <HAL_I2C_MspInit>:
}
 8003b64:	4770      	bx	lr

08003b66 <HAL_I2C_Init>:
{
 8003b66:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003b68:	4604      	mov	r4, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d04a      	beq.n	8003c04 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b76:	b91b      	cbnz	r3, 8003b80 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003b78:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003b7c:	f7ff fff2 	bl	8003b64 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b80:	2324      	movs	r3, #36	; 0x24
 8003b82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b90:	6862      	ldr	r2, [r4, #4]
 8003b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b96:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	2901      	cmp	r1, #1
 8003ba6:	d124      	bne.n	8003bf2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bac:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003bc2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	69a1      	ldr	r1, [r4, #24]
 8003bca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003bce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bd0:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003bf0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bf6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bfa:	bf04      	itt	eq
 8003bfc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8003c00:	605a      	streq	r2, [r3, #4]
 8003c02:	e7d4      	b.n	8003bae <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003c04:	2001      	movs	r0, #1
 8003c06:	e7f3      	b.n	8003bf0 <HAL_I2C_Init+0x8a>

08003c08 <HAL_I2C_MspDeInit>:
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2C_DeInit>:
{
 8003c0a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	b198      	cbz	r0, 8003c38 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c12:	2324      	movs	r3, #36	; 0x24
 8003c14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003c18:	6813      	ldr	r3, [r2, #0]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003c20:	f7ff fff2 	bl	8003c08 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	2000      	movs	r0, #0
 8003c26:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8003c28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c2c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8003c36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7fc      	b.n	8003c36 <HAL_I2C_DeInit+0x2c>

08003c3c <HAL_I2C_Master_Transmit>:
{
 8003c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c40:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003c46:	2b20      	cmp	r3, #32
{
 8003c48:	4604      	mov	r4, r0
 8003c4a:	460e      	mov	r6, r1
 8003c4c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	f040 8082 	bne.w	8003d56 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_LOCK(hi2c);
 8003c52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d07d      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x11a>
 8003c5a:	2701      	movs	r7, #1
 8003c5c:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003c60:	f005 f9b4 	bl	8008fcc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c64:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003c66:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c68:	9000      	str	r0, [sp, #0]
 8003c6a:	463a      	mov	r2, r7
 8003c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff ff26 	bl	8003ac2 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	b118      	cbz	r0, 8003c80 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
}
 8003c7a:	b003      	add	sp, #12
 8003c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c80:	2321      	movs	r3, #33	; 0x21
 8003c82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c86:	2310      	movs	r3, #16
 8003c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003c8e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003c94:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c98:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8003c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_I2C_Master_Transmit+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9e:	d926      	bls.n	8003cee <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ca4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003caa:	4631      	mov	r1, r6
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff fe53 	bl	8003958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8003cb6:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003cbc:	b9fb      	cbnz	r3, 8003cfe <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbe:	f7ff fedb 	bl	8003a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d1d8      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	2120      	movs	r1, #32
 8003cca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003cd2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003cd6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003ce4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ce8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003cec:	e7c5      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8003cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003cf0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	e7d5      	b.n	8003caa <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfe:	f7ff ff0a 	bl	8003b16 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1b8      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003d0e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003d10:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d14:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d22:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003d24:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0c3      	beq.n	8003cb2 <HAL_I2C_Master_Transmit+0x76>
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d1c1      	bne.n	8003cb2 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d2e:	9500      	str	r5, [sp, #0]
 8003d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7ff fec4 	bl	8003ac2 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d19c      	bne.n	8003c78 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d40:	2bff      	cmp	r3, #255	; 0xff
 8003d42:	d903      	bls.n	8003d4c <HAL_I2C_Master_Transmit+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d48:	9000      	str	r0, [sp, #0]
 8003d4a:	e7ac      	b.n	8003ca6 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8003d4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d4e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003d50:	b292      	uxth	r2, r2
 8003d52:	8522      	strh	r2, [r4, #40]	; 0x28
 8003d54:	e7cf      	b.n	8003cf6 <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 8003d56:	2002      	movs	r0, #2
 8003d58:	e78f      	b.n	8003c7a <HAL_I2C_Master_Transmit+0x3e>
 8003d5a:	bf00      	nop
 8003d5c:	80002000 	.word	0x80002000

08003d60 <HAL_I2C_Master_Receive>:
{
 8003d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d6a:	2b20      	cmp	r3, #32
{
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460e      	mov	r6, r1
 8003d70:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	f040 8083 	bne.w	8003e7c <HAL_I2C_Master_Receive+0x11c>
    __HAL_LOCK(hi2c);
 8003d76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d07e      	beq.n	8003e7c <HAL_I2C_Master_Receive+0x11c>
 8003d7e:	2701      	movs	r7, #1
 8003d80:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003d84:	f005 f922 	bl	8008fcc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d88:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003d8a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d8c:	9000      	str	r0, [sp, #0]
 8003d8e:	463a      	mov	r2, r7
 8003d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff fe94 	bl	8003ac2 <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	b118      	cbz	r0, 8003da4 <HAL_I2C_Master_Receive+0x44>
      return HAL_ERROR;
 8003d9c:	2001      	movs	r0, #1
}
 8003d9e:	b003      	add	sp, #12
 8003da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da4:	2322      	movs	r3, #34	; 0x22
 8003da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003daa:	2310      	movs	r3, #16
 8003dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003db2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003db8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8003dbe:	6360      	str	r0, [r4, #52]	; 0x34
 8003dc0:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_I2C_Master_Receive+0x120>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc2:	d926      	bls.n	8003e12 <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003dc8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dce:	4631      	mov	r1, r6
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7ff fdc1 	bl	8003958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd8:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8003dda:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ddc:	462a      	mov	r2, r5
 8003dde:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003de0:	b9fb      	cbnz	r3, 8003e22 <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	f7ff fe49 	bl	8003a78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d1d8      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	2120      	movs	r1, #32
 8003dee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003df6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003dfa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003dfe:	f022 0201 	bic.w	r2, r2, #1
 8003e02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003e08:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e0c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003e10:	e7c5      	b.n	8003d9e <HAL_I2C_Master_Receive+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8003e12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e14:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003e16:	b292      	uxth	r2, r2
 8003e18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	e7d5      	b.n	8003dce <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e22:	f7ff fdea 	bl	80039fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d1b8      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x3c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e30:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003e34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003e36:	3301      	adds	r3, #1
 8003e38:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e44:	3a01      	subs	r2, #1
 8003e46:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e48:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003e4a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0c2      	beq.n	8003dd6 <HAL_I2C_Master_Receive+0x76>
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d1c0      	bne.n	8003dd6 <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e54:	9500      	str	r5, [sp, #0]
 8003e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f7ff fe31 	bl	8003ac2 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d19b      	bne.n	8003d9c <HAL_I2C_Master_Receive+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e66:	2bff      	cmp	r3, #255	; 0xff
 8003e68:	d903      	bls.n	8003e72 <HAL_I2C_Master_Receive+0x112>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e6e:	9000      	str	r0, [sp, #0]
 8003e70:	e7ab      	b.n	8003dca <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8003e72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e74:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003e76:	b292      	uxth	r2, r2
 8003e78:	8522      	strh	r2, [r4, #40]	; 0x28
 8003e7a:	e7ce      	b.n	8003e1a <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	e78e      	b.n	8003d9e <HAL_I2C_Master_Receive+0x3e>
 8003e80:	80002400 	.word	0x80002400

08003e84 <HAL_I2C_GetState>:
  return hi2c->State;
 8003e84:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8003e88:	4770      	bx	lr

08003e8a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	2a20      	cmp	r2, #32
{
 8003e92:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e94:	d11d      	bne.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d019      	beq.n	8003ed2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9e:	2324      	movs	r3, #36	; 0x24
 8003ea0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea4:	6803      	ldr	r3, [r0, #0]
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f024 0401 	bic.w	r4, r4, #1
 8003eac:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003eb4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eb6:	681c      	ldr	r4, [r3, #0]
 8003eb8:	4321      	orrs	r1, r4
 8003eba:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	f041 0101 	orr.w	r1, r1, #1
 8003ec2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003eca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003ece:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003ed0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	e7fc      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003ed6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003edc:	b2e4      	uxtb	r4, r4
 8003ede:	2c20      	cmp	r4, #32
 8003ee0:	d11c      	bne.n	8003f1c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d018      	beq.n	8003f1c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eea:	2324      	movs	r3, #36	; 0x24
 8003eec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003efa:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003efc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f00:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f04:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003f18:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f1a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	e7fc      	b.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08003f20 <wrap_iv_psa_to_crypto>:
  * @param[out] *P_pCryptoIv: IV in CryptoLib format
  *
  */
static void wrap_iv_psa_to_crypto(uint8_t  *P_pPsaIv,
                                  uint32_t *P_pCryptoIv)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	f101 0610 	add.w	r6, r1, #16
  uint8_t i;
  uint8_t j;

  for (i = 0; i < 4U; i++) /*4 is the size of the array amIv*/
  {
    P_pCryptoIv[i] = 0;
 8003f26:	2700      	movs	r7, #0
 8003f28:	600f      	str	r7, [r1, #0]
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2318      	movs	r3, #24
    for (j = 0U; j < MBEDTLS_MAX_IV_LENGTH / 4U; j++)
    {
      P_pCryptoIv[i] += (P_pPsaIv[j + (i*4U)] << ( 8U *( (MBEDTLS_MAX_IV_LENGTH / 4U) - j - 1U) ));
 8003f2e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003f32:	fa02 f403 	lsl.w	r4, r2, r3
 8003f36:	680a      	ldr	r2, [r1, #0]
 8003f38:	3b08      	subs	r3, #8
 8003f3a:	4422      	add	r2, r4
    for (j = 0U; j < MBEDTLS_MAX_IV_LENGTH / 4U; j++)
 8003f3c:	f113 0f08 	cmn.w	r3, #8
      P_pCryptoIv[i] += (P_pPsaIv[j + (i*4U)] << ( 8U *( (MBEDTLS_MAX_IV_LENGTH / 4U) - j - 1U) ));
 8003f40:	600a      	str	r2, [r1, #0]
    for (j = 0U; j < MBEDTLS_MAX_IV_LENGTH / 4U; j++)
 8003f42:	d1f4      	bne.n	8003f2e <wrap_iv_psa_to_crypto+0xe>
 8003f44:	3104      	adds	r1, #4
  for (i = 0; i < 4U; i++) /*4 is the size of the array amIv*/
 8003f46:	42b1      	cmp	r1, r6
 8003f48:	f100 0004 	add.w	r0, r0, #4
 8003f4c:	d1ec      	bne.n	8003f28 <wrap_iv_psa_to_crypto+0x8>
    }
  }
}
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f50 <wrap_import_raw_aes_key_into_psa>:
static psa_status_t wrap_import_raw_aes_key_into_psa(psa_key_handle_t *P_Key_Handle,
                                                     psa_key_usage_t P_Psa_Usage,
                                                     psa_algorithm_t  P_Psa_Algorithm,
                                                     const uint8_t *P_pAes_Key,
                                                     uint32_t P_KeySize)
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b085      	sub	sp, #20
 8003f54:	461d      	mov	r5, r3
  psa_status_t psa_ret_status;
  psa_key_policy_t psa_key_policy = {0};
 8003f56:	2300      	movs	r3, #0
{
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	4617      	mov	r7, r2
  psa_key_policy_t psa_key_policy = {0};
 8003f5e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003f62:	9303      	str	r3, [sp, #12]

  psa_ret_status = psa_allocate_key(P_Key_Handle);
 8003f64:	f00f fe0a 	bl	8013b7c <psa_allocate_key>
  if (psa_ret_status == AES_SUCCESS)
 8003f68:	b118      	cbz	r0, 8003f72 <wrap_import_raw_aes_key_into_psa+0x22>
      psa_ret_status = AES_ERR_BAD_PARAMETER;
    }
  }
  else
  {
    psa_ret_status = AES_ERR_BAD_PARAMETER;
 8003f6a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  }

  return psa_ret_status;
}
 8003f6e:	b005      	add	sp, #20
 8003f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    psa_key_policy_set_usage(&psa_key_policy, P_Psa_Usage, P_Psa_Algorithm);
 8003f72:	4631      	mov	r1, r6
 8003f74:	a801      	add	r0, sp, #4
 8003f76:	463a      	mov	r2, r7
 8003f78:	f00f fd20 	bl	80139bc <psa_key_policy_set_usage>
    psa_ret_status = psa_set_key_policy(*P_Key_Handle, &psa_key_policy);
 8003f7c:	a901      	add	r1, sp, #4
 8003f7e:	8820      	ldrh	r0, [r4, #0]
 8003f80:	f00f fd1f 	bl	80139c2 <psa_set_key_policy>
    if (psa_ret_status == AES_SUCCESS)
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d1f0      	bne.n	8003f6a <wrap_import_raw_aes_key_into_psa+0x1a>
      psa_ret_status = psa_import_key(*P_Key_Handle,
 8003f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f8a:	4903      	ldr	r1, [pc, #12]	; (8003f98 <wrap_import_raw_aes_key_into_psa+0x48>)
 8003f8c:	8820      	ldrh	r0, [r4, #0]
 8003f8e:	462a      	mov	r2, r5
 8003f90:	f00e fe2a 	bl	8012be8 <psa_import_key>
  return psa_ret_status;
 8003f94:	e7eb      	b.n	8003f6e <wrap_import_raw_aes_key_into_psa+0x1e>
 8003f96:	bf00      	nop
 8003f98:	40000001 	.word	0x40000001

08003f9c <AES_CBC_Encrypt_Init>:
  *                                  See note
  */
int32_t AES_CBC_Encrypt_Init(AESCBCctx_stt *P_pAESCBCctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	460d      	mov	r5, r1
 8003fa0:	b097      	sub	sp, #92	; 0x5c
 8003fa2:	4617      	mov	r7, r2
  int32_t aes_ret_status = AES_SUCCESS;
  psa_status_t psa_ret_status;
  const psa_algorithm_t psa_algorithm = PSA_ALG_CBC_NO_PADDING;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	b918      	cbnz	r0, 8003fb0 <AES_CBC_Encrypt_Init+0x14>
  {
    return AES_ERR_BAD_PARAMETER;
 8003fa8:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 8003fac:	b017      	add	sp, #92	; 0x5c
 8003fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d0f9      	beq.n	8003fa8 <AES_CBC_Encrypt_Init+0xc>
 8003fb4:	2a00      	cmp	r2, #0
 8003fb6:	d0f7      	beq.n	8003fa8 <AES_CBC_Encrypt_Init+0xc>
  if ((P_pAESCBCctx->mKeySize == 0)
 8003fb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d035      	beq.n	800402a <AES_CBC_Encrypt_Init+0x8e>
      || (P_pAESCBCctx->mIvSize == 0))
 8003fbe:	6903      	ldr	r3, [r0, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d032      	beq.n	800402a <AES_CBC_Encrypt_Init+0x8e>
  if (P_pAESCBCctx->pmKey != P_pKey)
 8003fc4:	6883      	ldr	r3, [r0, #8]
  wrap_aes_cbc_enc.cipher_op = psa_cipher_operation_init();
 8003fc6:	4e1a      	ldr	r6, [pc, #104]	; (8004030 <AES_CBC_Encrypt_Init+0x94>)
  if (P_pAESCBCctx->pmKey != P_pKey)
 8003fc8:	428b      	cmp	r3, r1
  if (P_pAESCBCctx->pmIv != P_pIv)
 8003fca:	68c3      	ldr	r3, [r0, #12]
    P_pAESCBCctx->pmKey = P_pKey;
 8003fcc:	bf18      	it	ne
 8003fce:	6081      	strne	r1, [r0, #8]
  if (P_pAESCBCctx->pmIv != P_pIv)
 8003fd0:	4293      	cmp	r3, r2
    P_pAESCBCctx->pmIv = P_pIv;
 8003fd2:	bf18      	it	ne
 8003fd4:	60c2      	strne	r2, [r0, #12]

#define PSA_CIPHER_OPERATION_INIT {0, 0, 0, 0, 0, 0, {0}}
static inline struct psa_cipher_operation_s psa_cipher_operation_init( void )
{
    const struct psa_cipher_operation_s v = PSA_CIPHER_OPERATION_INIT;
    return( v );
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	224c      	movs	r2, #76	; 0x4c
 8003fda:	a803      	add	r0, sp, #12
 8003fdc:	f012 fd91 	bl	8016b02 <memset>
  wrap_aes_cbc_enc.cipher_op = psa_cipher_operation_init();
 8003fe0:	224c      	movs	r2, #76	; 0x4c
 8003fe2:	a903      	add	r1, sp, #12
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f012 fd68 	bl	8016aba <memcpy>
  psa_ret_status = psa_crypto_init();
 8003fea:	f00f fd21 	bl	8013a30 <psa_crypto_init>
  if ( (psa_ret_status == PSA_SUCCESS) && (aes_ret_status == AES_SUCCESS) )
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d1da      	bne.n	8003fa8 <AES_CBC_Encrypt_Init+0xc>
    psa_ret_status = wrap_import_raw_aes_key_into_psa(&(wrap_aes_cbc_enc.psa_key_handle),
 8003ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <AES_CBC_Encrypt_Init+0x98>)
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ffe:	f106 004c 	add.w	r0, r6, #76	; 0x4c
 8004002:	f7ff ffa5 	bl	8003f50 <wrap_import_raw_aes_key_into_psa>
    if (psa_ret_status == PSA_SUCCESS)
 8004006:	2800      	cmp	r0, #0
 8004008:	d1ce      	bne.n	8003fa8 <AES_CBC_Encrypt_Init+0xc>
      psa_ret_status = psa_cipher_encrypt_setup(&(wrap_aes_cbc_enc.cipher_op),
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <AES_CBC_Encrypt_Init+0x98>)
 800400c:	f8b6 104c 	ldrh.w	r1, [r6, #76]	; 0x4c
 8004010:	4630      	mov	r0, r6
 8004012:	f00f fc37 	bl	8013884 <psa_cipher_encrypt_setup>
      if (psa_ret_status == PSA_SUCCESS)
 8004016:	4605      	mov	r5, r0
 8004018:	2800      	cmp	r0, #0
 800401a:	d1c5      	bne.n	8003fa8 <AES_CBC_Encrypt_Init+0xc>
        psa_ret_status = psa_cipher_set_iv(&(wrap_aes_cbc_enc.cipher_op),
 800401c:	6922      	ldr	r2, [r4, #16]
 800401e:	4639      	mov	r1, r7
 8004020:	4630      	mov	r0, r6
 8004022:	f00f fc35 	bl	8013890 <psa_cipher_set_iv>
  int32_t aes_ret_status = AES_SUCCESS;
 8004026:	4628      	mov	r0, r5
 8004028:	e7c0      	b.n	8003fac <AES_CBC_Encrypt_Init+0x10>
    return AES_ERR_BAD_CONTEXT;
 800402a:	f640 401f 	movw	r0, #3103	; 0xc1f
 800402e:	e7bd      	b.n	8003fac <AES_CBC_Encrypt_Init+0x10>
 8004030:	20002630 	.word	0x20002630
 8004034:	04600100 	.word	0x04600100

08004038 <AES_CBC_Encrypt_Append>:
int32_t AES_CBC_Encrypt_Append(AESCBCctx_stt *P_pAESCBCctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t P_inputSize,
                               uint8_t *P_pOutputBuffer,
                               int32_t *P_pOutputSize)
{
 8004038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800403a:	9e08      	ldr	r6, [sp, #32]
  psa_status_t psa_ret_status;
  int32_t aes_ret_status;

  if ((P_pAESCBCctx == NULL)
 800403c:	4605      	mov	r5, r0
 800403e:	b198      	cbz	r0, 8004068 <AES_CBC_Encrypt_Append+0x30>
      || (P_pInputBuffer == NULL)
 8004040:	b191      	cbz	r1, 8004068 <AES_CBC_Encrypt_Append+0x30>
      || (P_pOutputBuffer == NULL)
 8004042:	b18b      	cbz	r3, 8004068 <AES_CBC_Encrypt_Append+0x30>
      || (P_pOutputSize == NULL))
 8004044:	b186      	cbz	r6, 8004068 <AES_CBC_Encrypt_Append+0x30>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < CRL_AES_BLOCK)
 8004046:	2a0f      	cmp	r2, #15
 8004048:	dd11      	ble.n	800406e <AES_CBC_Encrypt_Append+0x36>
  {
    return AES_ERR_BAD_INPUT_SIZE;
  }

  psa_ret_status = psa_cipher_update(&(wrap_aes_cbc_enc.cipher_op),
 800404a:	e9cd 2600 	strd	r2, r6, [sp]
 800404e:	480b      	ldr	r0, [pc, #44]	; (800407c <AES_CBC_Encrypt_Append+0x44>)
 8004050:	f00f fc3f 	bl	80138d2 <psa_cipher_update>
                                     (uint32_t) P_inputSize,
                                     P_pOutputBuffer,
                                     (uint32_t) P_inputSize,
                                     (size_t *)P_pOutputSize);

  if (psa_ret_status == PSA_SUCCESS)
 8004054:	4604      	mov	r4, r0
 8004056:	b968      	cbnz	r0, 8004074 <AES_CBC_Encrypt_Append+0x3c>
  {
    aes_ret_status = AES_SUCCESS;
    /*Update of the ouput context with the new IV*/
    wrap_iv_psa_to_crypto(wrap_aes_cbc_enc.cipher_op.ctx.cipher.iv, P_pAESCBCctx->amIv);
 8004058:	4809      	ldr	r0, [pc, #36]	; (8004080 <AES_CBC_Encrypt_Append+0x48>)
 800405a:	f105 0114 	add.w	r1, r5, #20
 800405e:	f7ff ff5f 	bl	8003f20 <wrap_iv_psa_to_crypto>
    aes_ret_status = AES_SUCCESS;
 8004062:	4620      	mov	r0, r4
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 8004064:	b003      	add	sp, #12
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return AES_ERR_BAD_PARAMETER;
 8004068:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800406c:	e7fa      	b.n	8004064 <AES_CBC_Encrypt_Append+0x2c>
    return AES_ERR_BAD_INPUT_SIZE;
 800406e:	f640 401d 	movw	r0, #3101	; 0xc1d
 8004072:	e7f7      	b.n	8004064 <AES_CBC_Encrypt_Append+0x2c>
    aes_ret_status = AES_ERR_BAD_OPERATION;
 8004074:	f640 401e 	movw	r0, #3102	; 0xc1e
 8004078:	e7f4      	b.n	8004064 <AES_CBC_Encrypt_Append+0x2c>
 800407a:	bf00      	nop
 800407c:	20002630 	.word	0x20002630
 8004080:	20002660 	.word	0x20002660

08004084 <AES_CBC_Encrypt_Finish>:
  * @retval     AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  */
int32_t AES_CBC_Encrypt_Finish(AESCBCctx_stt *P_pAESCBCctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	460d      	mov	r5, r1
 8004088:	4617      	mov	r7, r2
  psa_status_t psa_ret_status;
  int32_t aes_ret_status;

  if ((P_pAESCBCctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 800408a:	4606      	mov	r6, r0
 800408c:	b170      	cbz	r0, 80040ac <AES_CBC_Encrypt_Finish+0x28>
 800408e:	b169      	cbz	r1, 80040ac <AES_CBC_Encrypt_Finish+0x28>
 8004090:	b162      	cbz	r2, 80040ac <AES_CBC_Encrypt_Finish+0x28>
  {
    return AES_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_destroy_key(wrap_aes_cbc_enc.psa_key_handle);
 8004092:	4c08      	ldr	r4, [pc, #32]	; (80040b4 <AES_CBC_Encrypt_Finish+0x30>)
 8004094:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8004098:	f00e fdba 	bl	8012c10 <psa_destroy_key>
  if (psa_ret_status == PSA_SUCCESS)
 800409c:	b930      	cbnz	r0, 80040ac <AES_CBC_Encrypt_Finish+0x28>
  {
    psa_ret_status = psa_cipher_finish(&(wrap_aes_cbc_enc.cipher_op),
 800409e:	463b      	mov	r3, r7
 80040a0:	6932      	ldr	r2, [r6, #16]
 80040a2:	4629      	mov	r1, r5
 80040a4:	4620      	mov	r0, r4
 80040a6:	f00f fc3f 	bl	8013928 <psa_cipher_finish>
                                       P_pOutputBuffer,
                                       (uint32_t) P_pAESCBCctx->mIvSize,
                                       (size_t *)P_pOutputSize);
    if (psa_ret_status == PSA_SUCCESS)
 80040aa:	b108      	cbz	r0, 80040b0 <AES_CBC_Encrypt_Finish+0x2c>
    {
      aes_ret_status = AES_SUCCESS;
    }
    else
    {
      aes_ret_status = AES_ERR_BAD_PARAMETER;
 80040ac:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    return AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 80040b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20002630 	.word	0x20002630

080040b8 <AES_CBC_Decrypt_Init>:
  *                                  See note
  */
int32_t AES_CBC_Decrypt_Init(AESCBCctx_stt *P_pAESCBCctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 80040b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ba:	460c      	mov	r4, r1
 80040bc:	b097      	sub	sp, #92	; 0x5c
 80040be:	4617      	mov	r7, r2
  int32_t aes_ret_status = AES_SUCCESS;
  psa_status_t psa_ret_status;
  const psa_algorithm_t psa_algorithm = PSA_ALG_CBC_NO_PADDING;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80040c0:	4605      	mov	r5, r0
 80040c2:	b918      	cbnz	r0, 80040cc <AES_CBC_Decrypt_Init+0x14>
  {
    return AES_ERR_BAD_PARAMETER;
 80040c4:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 80040c8:	b017      	add	sp, #92	; 0x5c
 80040ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d0f9      	beq.n	80040c4 <AES_CBC_Decrypt_Init+0xc>
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d0f7      	beq.n	80040c4 <AES_CBC_Decrypt_Init+0xc>
  if ((P_pAESCBCctx->mIvSize == 0) || (P_pAESCBCctx->mKeySize == 0))
 80040d4:	6903      	ldr	r3, [r0, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d033      	beq.n	8004142 <AES_CBC_Decrypt_Init+0x8a>
 80040da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040dc:	b38b      	cbz	r3, 8004142 <AES_CBC_Decrypt_Init+0x8a>
  wrap_iv_psa_to_crypto((uint8_t *)P_pIv, P_pAESCBCctx->amIv);
 80040de:	f100 0114 	add.w	r1, r0, #20
  wrap_aes_cbc_dec.cipher_op = psa_cipher_operation_init();
 80040e2:	4e1b      	ldr	r6, [pc, #108]	; (8004150 <AES_CBC_Decrypt_Init+0x98>)
  wrap_iv_psa_to_crypto((uint8_t *)P_pIv, P_pAESCBCctx->amIv);
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7ff ff1b 	bl	8003f20 <wrap_iv_psa_to_crypto>
 80040ea:	224c      	movs	r2, #76	; 0x4c
 80040ec:	2100      	movs	r1, #0
 80040ee:	a803      	add	r0, sp, #12
 80040f0:	f012 fd07 	bl	8016b02 <memset>
  wrap_aes_cbc_dec.cipher_op = psa_cipher_operation_init();
 80040f4:	224c      	movs	r2, #76	; 0x4c
 80040f6:	a903      	add	r1, sp, #12
 80040f8:	f106 0050 	add.w	r0, r6, #80	; 0x50
 80040fc:	f012 fcdd 	bl	8016aba <memcpy>
  psa_ret_status = psa_crypto_init();
 8004100:	f00f fc96 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status == PSA_SUCCESS)
 8004104:	bb00      	cbnz	r0, 8004148 <AES_CBC_Decrypt_Init+0x90>
    psa_ret_status = wrap_import_raw_aes_key_into_psa(&(wrap_aes_cbc_dec.psa_key_handle),
 8004106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <AES_CBC_Decrypt_Init+0x9c>)
 800410c:	4623      	mov	r3, r4
 800410e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004112:	f106 009c 	add.w	r0, r6, #156	; 0x9c
 8004116:	f7ff ff1b 	bl	8003f50 <wrap_import_raw_aes_key_into_psa>
    if (psa_ret_status == PSA_SUCCESS)
 800411a:	2800      	cmp	r0, #0
 800411c:	d1d2      	bne.n	80040c4 <AES_CBC_Decrypt_Init+0xc>
      psa_ret_status = psa_cipher_decrypt_setup(&wrap_aes_cbc_dec.cipher_op,
 800411e:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <AES_CBC_Decrypt_Init+0x9c>)
 8004120:	f8b6 109c 	ldrh.w	r1, [r6, #156]	; 0x9c
 8004124:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8004128:	f00f fbaf 	bl	801388a <psa_cipher_decrypt_setup>
      if (psa_ret_status == PSA_SUCCESS)
 800412c:	4604      	mov	r4, r0
 800412e:	2800      	cmp	r0, #0
 8004130:	d1c8      	bne.n	80040c4 <AES_CBC_Decrypt_Init+0xc>
        psa_ret_status = psa_cipher_set_iv(&wrap_aes_cbc_dec.cipher_op,
 8004132:	692a      	ldr	r2, [r5, #16]
 8004134:	4639      	mov	r1, r7
 8004136:	f106 0050 	add.w	r0, r6, #80	; 0x50
 800413a:	f00f fba9 	bl	8013890 <psa_cipher_set_iv>
  int32_t aes_ret_status = AES_SUCCESS;
 800413e:	4620      	mov	r0, r4
 8004140:	e7c2      	b.n	80040c8 <AES_CBC_Decrypt_Init+0x10>
    return AES_ERR_BAD_CONTEXT;
 8004142:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004146:	e7bf      	b.n	80040c8 <AES_CBC_Decrypt_Init+0x10>
    aes_ret_status = AES_ERR_BAD_OPERATION;
 8004148:	f640 401e 	movw	r0, #3102	; 0xc1e
 800414c:	e7bc      	b.n	80040c8 <AES_CBC_Decrypt_Init+0x10>
 800414e:	bf00      	nop
 8004150:	20002630 	.word	0x20002630
 8004154:	04600100 	.word	0x04600100

08004158 <AES_CBC_Decrypt_Append>:
int32_t AES_CBC_Decrypt_Append(AESCBCctx_stt *P_pAESCBCctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415a:	9e08      	ldr	r6, [sp, #32]
  int32_t aes_ret_status = AES_SUCCESS;
  psa_status_t psa_ret_status;

  if ((P_pAESCBCctx == NULL)
 800415c:	4605      	mov	r5, r0
 800415e:	b198      	cbz	r0, 8004188 <AES_CBC_Decrypt_Append+0x30>
      || (P_pInputBuffer == NULL)
 8004160:	b191      	cbz	r1, 8004188 <AES_CBC_Decrypt_Append+0x30>
      || (P_pOutputBuffer == NULL)
 8004162:	b18b      	cbz	r3, 8004188 <AES_CBC_Decrypt_Append+0x30>
      || (P_pOutputSize == NULL))
 8004164:	b186      	cbz	r6, 8004188 <AES_CBC_Decrypt_Append+0x30>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < CRL_AES_BLOCK)
 8004166:	2a0f      	cmp	r2, #15
 8004168:	dd11      	ble.n	800418e <AES_CBC_Decrypt_Append+0x36>
  {
    return AES_ERR_BAD_INPUT_SIZE;
  }

  psa_ret_status = psa_cipher_update(&(wrap_aes_cbc_dec.cipher_op),
 800416a:	e9cd 2600 	strd	r2, r6, [sp]
 800416e:	480b      	ldr	r0, [pc, #44]	; (800419c <AES_CBC_Decrypt_Append+0x44>)
 8004170:	f00f fbaf 	bl	80138d2 <psa_cipher_update>
                                     P_pInputBuffer,
                                     (uint32_t) P_inputSize,
                                     P_pOutputBuffer,
                                     (uint32_t) P_inputSize,
                                     (size_t *)P_pOutputSize);
  if (psa_ret_status == PSA_SUCCESS)
 8004174:	4604      	mov	r4, r0
 8004176:	b968      	cbnz	r0, 8004194 <AES_CBC_Decrypt_Append+0x3c>
  {
    /*Update of the ouput context with the new IV*/
    wrap_iv_psa_to_crypto(wrap_aes_cbc_dec.cipher_op.ctx.cipher.iv,
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <AES_CBC_Decrypt_Append+0x48>)
 800417a:	f105 0114 	add.w	r1, r5, #20
 800417e:	f7ff fecf 	bl	8003f20 <wrap_iv_psa_to_crypto>
  int32_t aes_ret_status = AES_SUCCESS;
 8004182:	4620      	mov	r0, r4
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 8004184:	b003      	add	sp, #12
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return AES_ERR_BAD_PARAMETER;
 8004188:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800418c:	e7fa      	b.n	8004184 <AES_CBC_Decrypt_Append+0x2c>
    return AES_ERR_BAD_INPUT_SIZE;
 800418e:	f640 401d 	movw	r0, #3101	; 0xc1d
 8004192:	e7f7      	b.n	8004184 <AES_CBC_Decrypt_Append+0x2c>
    aes_ret_status = AES_ERR_BAD_OPERATION;
 8004194:	f640 401e 	movw	r0, #3102	; 0xc1e
 8004198:	e7f4      	b.n	8004184 <AES_CBC_Decrypt_Append+0x2c>
 800419a:	bf00      	nop
 800419c:	20002680 	.word	0x20002680
 80041a0:	200026b0 	.word	0x200026b0

080041a4 <AES_CBC_Decrypt_Finish>:
  * @retval     AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  */
int32_t AES_CBC_Decrypt_Finish(AESCBCctx_stt *P_pAESCBCctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	460d      	mov	r5, r1
 80041a8:	4617      	mov	r7, r2
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;

  if ((P_pAESCBCctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80041aa:	4606      	mov	r6, r0
 80041ac:	b178      	cbz	r0, 80041ce <AES_CBC_Decrypt_Finish+0x2a>
 80041ae:	b171      	cbz	r1, 80041ce <AES_CBC_Decrypt_Finish+0x2a>
 80041b0:	b16a      	cbz	r2, 80041ce <AES_CBC_Decrypt_Finish+0x2a>
  {
    return AES_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_destroy_key(wrap_aes_cbc_dec.psa_key_handle);
 80041b2:	4c08      	ldr	r4, [pc, #32]	; (80041d4 <AES_CBC_Decrypt_Finish+0x30>)
 80041b4:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
 80041b8:	f00e fd2a 	bl	8012c10 <psa_destroy_key>
  if (psa_ret_status == PSA_SUCCESS)
 80041bc:	b938      	cbnz	r0, 80041ce <AES_CBC_Decrypt_Finish+0x2a>
  {
    psa_ret_status = psa_cipher_finish(&(wrap_aes_cbc_dec.cipher_op),
 80041be:	463b      	mov	r3, r7
 80041c0:	6932      	ldr	r2, [r6, #16]
 80041c2:	4629      	mov	r1, r5
 80041c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041c8:	f00f fbae 	bl	8013928 <psa_cipher_finish>
                                       P_pOutputBuffer,
                                       (uint32_t) P_pAESCBCctx->mIvSize,
                                       (size_t *)P_pOutputSize);
    if (psa_ret_status == PSA_SUCCESS)
 80041cc:	b108      	cbz	r0, 80041d2 <AES_CBC_Decrypt_Finish+0x2e>
    {
      aes_ret_status = AES_SUCCESS;
    }
    else
    {
      aes_ret_status = AES_ERR_BAD_PARAMETER;
 80041ce:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	20002630 	.word	0x20002630

080041d8 <AES_GCM_Encrypt_Init>:
  *                                  see note
  */
int32_t AES_GCM_Encrypt_Init(AESGCMctx_stt *P_pAESGCMctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	460d      	mov	r5, r1
 80041dc:	4616      	mov	r6, r2
  int32_t aes_ret_status = AES_SUCCESS;
  int32_t mbedtls_status;
  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80041de:	4604      	mov	r4, r0
 80041e0:	b910      	cbnz	r0, 80041e8 <AES_GCM_Encrypt_Init+0x10>
  {
    return AES_ERR_BAD_PARAMETER;
 80041e2:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }
  
  return aes_ret_status;
}
 80041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80041e8:	2900      	cmp	r1, #0
 80041ea:	d0fa      	beq.n	80041e2 <AES_GCM_Encrypt_Init+0xa>
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	d0f8      	beq.n	80041e2 <AES_GCM_Encrypt_Init+0xa>
  if ((P_pAESGCMctx->mKeySize == 0)
 80041f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041f2:	b31b      	cbz	r3, 800423c <AES_GCM_Encrypt_Init+0x64>
      || (P_pAESGCMctx->mTagSize == 0)
 80041f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80041f6:	b30b      	cbz	r3, 800423c <AES_GCM_Encrypt_Init+0x64>
      || (P_pAESGCMctx->mIvSize != 12))
 80041f8:	6903      	ldr	r3, [r0, #16]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d11e      	bne.n	800423c <AES_GCM_Encrypt_Init+0x64>
  if (P_pAESGCMctx->pmKey != P_pKey)
 80041fe:	6883      	ldr	r3, [r0, #8]
  mbedtls_gcm_init(wrap_aes_gcm_enc.mbedtls_ctx);
 8004200:	4f10      	ldr	r7, [pc, #64]	; (8004244 <AES_GCM_Encrypt_Init+0x6c>)
  if (P_pAESGCMctx->pmKey != P_pKey)
 8004202:	428b      	cmp	r3, r1
  if (P_pAESGCMctx->pmIv != P_pIv)
 8004204:	68c3      	ldr	r3, [r0, #12]
    P_pAESGCMctx->pmKey = P_pKey;
 8004206:	bf18      	it	ne
 8004208:	6081      	strne	r1, [r0, #8]
  if (P_pAESGCMctx->pmIv != P_pIv)
 800420a:	4293      	cmp	r3, r2
    P_pAESGCMctx->pmIv = P_pIv;
 800420c:	bf18      	it	ne
 800420e:	60c2      	strne	r2, [r0, #12]
  mbedtls_gcm_init(wrap_aes_gcm_enc.mbedtls_ctx);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f00c fc13 	bl	8010a3c <mbedtls_gcm_init>
                                      P_pAESGCMctx->mKeySize * 8U); /* 8: to pass from bytes to bits*/
 8004216:	6a63      	ldr	r3, [r4, #36]	; 0x24
  mbedtls_status = mbedtls_gcm_setkey(wrap_aes_gcm_enc.mbedtls_ctx,
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	462a      	mov	r2, r5
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	2102      	movs	r1, #2
 8004220:	f00c fc11 	bl	8010a46 <mbedtls_gcm_setkey>
  if (mbedtls_status == MBEDTLS_SUCCESS)
 8004224:	4605      	mov	r5, r0
 8004226:	2800      	cmp	r0, #0
 8004228:	d1db      	bne.n	80041e2 <AES_GCM_Encrypt_Init+0xa>
    wrap_aes_gcm_enc.wrap_is_use = WRAP_IS_USE;
 800422a:	2301      	movs	r3, #1
    wrap_iv_psa_to_crypto((uint8_t *)P_pIv, P_pAESGCMctx->amIv);
 800422c:	4630      	mov	r0, r6
 800422e:	f104 0114 	add.w	r1, r4, #20
    wrap_aes_gcm_enc.wrap_is_use = WRAP_IS_USE;
 8004232:	70fb      	strb	r3, [r7, #3]
    wrap_iv_psa_to_crypto((uint8_t *)P_pIv, P_pAESGCMctx->amIv);
 8004234:	f7ff fe74 	bl	8003f20 <wrap_iv_psa_to_crypto>
  int32_t aes_ret_status = AES_SUCCESS;
 8004238:	4628      	mov	r0, r5
 800423a:	e7d4      	b.n	80041e6 <AES_GCM_Encrypt_Init+0xe>
    return AES_ERR_BAD_CONTEXT;
 800423c:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004240:	e7d1      	b.n	80041e6 <AES_GCM_Encrypt_Init+0xe>
 8004242:	bf00      	nop
 8004244:	20002080 	.word	0x20002080

08004248 <AES_GCM_Header_Append>:
  * @retval     AES_ERR_BAD_OPERATION Append not allowed
  */
int32_t AES_GCM_Header_Append(AESGCMctx_stt *P_pAESGCMctx,
                              const uint8_t *P_pInputBuffer,
                              int32_t        P_inputSize)
{
 8004248:	b513      	push	{r0, r1, r4, lr}
 800424a:	460b      	mov	r3, r1
  int32_t aes_ret_status;
  int32_t mbedtls_status;
  
  /*Manage AAD: input = AAD*/
  if ((P_pAESGCMctx == NULL) || (P_pInputBuffer == NULL))
 800424c:	b1f0      	cbz	r0, 800428c <AES_GCM_Header_Append+0x44>
 800424e:	b1e9      	cbz	r1, 800428c <AES_GCM_Header_Append+0x44>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (wrap_aes_gcm_enc.wrap_is_use == WRAP_IS_USE)
 8004250:	4c10      	ldr	r4, [pc, #64]	; (8004294 <AES_GCM_Header_Append+0x4c>)
 8004252:	78e1      	ldrb	r1, [r4, #3]
 8004254:	2901      	cmp	r1, #1
 8004256:	d10e      	bne.n	8004276 <AES_GCM_Header_Append+0x2e>
  {
    P_pAESGCMctx->mAADsize = P_inputSize; /*Update done by the ST lib*/
 8004258:	6302      	str	r2, [r0, #48]	; 0x30
    mbedtls_status = mbedtls_gcm_starts(wrap_aes_gcm_enc.mbedtls_ctx,
 800425a:	e9cd 3200 	strd	r3, r2, [sp]
 800425e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8004262:	6860      	ldr	r0, [r4, #4]
 8004264:	f00c fcb6 	bl	8010bd4 <mbedtls_gcm_starts>
                                        MBEDTLS_GCM_ENCRYPT,
                                        P_pAESGCMctx->pmIv,
                                        (uint32_t) P_pAESGCMctx->mIvSize,
                                        P_pInputBuffer,
                                        (uint32_t) P_pAESGCMctx->mAADsize);
    if (mbedtls_status == MBEDTLS_SUCCESS)
 8004268:	b910      	cbnz	r0, 8004270 <AES_GCM_Header_Append+0x28>
    {
      aes_ret_status = AES_SUCCESS;
 800426a:	2000      	movs	r0, #0
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 800426c:	b002      	add	sp, #8
 800426e:	bd10      	pop	{r4, pc}
      aes_ret_status = AES_ERR_BAD_OPERATION;
 8004270:	f640 401e 	movw	r0, #3102	; 0xc1e
 8004274:	e7fa      	b.n	800426c <AES_GCM_Header_Append+0x24>
  else if (wrap_aes_gcm_dec.wrap_is_use == WRAP_IS_USE)
 8004276:	7ae1      	ldrb	r1, [r4, #11]
 8004278:	2901      	cmp	r1, #1
 800427a:	d1f9      	bne.n	8004270 <AES_GCM_Header_Append+0x28>
    P_pAESGCMctx->mAADsize = P_inputSize; /*Update done by the ST lib*/
 800427c:	6302      	str	r2, [r0, #48]	; 0x30
    mbedtls_status = mbedtls_gcm_starts(wrap_aes_gcm_dec.mbedtls_ctx,
 800427e:	e9cd 3200 	strd	r3, r2, [sp]
 8004282:	2100      	movs	r1, #0
 8004284:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8004288:	68e0      	ldr	r0, [r4, #12]
 800428a:	e7eb      	b.n	8004264 <AES_GCM_Header_Append+0x1c>
    return AES_ERR_BAD_PARAMETER;
 800428c:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8004290:	e7ec      	b.n	800426c <AES_GCM_Header_Append+0x24>
 8004292:	bf00      	nop
 8004294:	20002080 	.word	0x20002080

08004298 <AES_GCM_Encrypt_Append>:
int32_t AES_GCM_Encrypt_Append(AESGCMctx_stt *P_pAESGCMctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	9e06      	ldr	r6, [sp, #24]
 800429c:	4617      	mov	r7, r2
  int32_t mbedtls_status;
  if ((P_pAESGCMctx == NULL)
 800429e:	4605      	mov	r5, r0
 80042a0:	b190      	cbz	r0, 80042c8 <AES_GCM_Encrypt_Append+0x30>
      || (P_pInputBuffer == NULL)
 80042a2:	b189      	cbz	r1, 80042c8 <AES_GCM_Encrypt_Append+0x30>
      || (P_pOutputBuffer == NULL)
 80042a4:	b183      	cbz	r3, 80042c8 <AES_GCM_Encrypt_Append+0x30>
      || (P_pOutputSize == NULL))
 80042a6:	b17e      	cbz	r6, 80042c8 <AES_GCM_Encrypt_Append+0x30>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  mbedtls_status = mbedtls_gcm_update(wrap_aes_gcm_enc.mbedtls_ctx,
 80042a8:	480a      	ldr	r0, [pc, #40]	; (80042d4 <AES_GCM_Encrypt_Append+0x3c>)
 80042aa:	460a      	mov	r2, r1
 80042ac:	6840      	ldr	r0, [r0, #4]
 80042ae:	4639      	mov	r1, r7
 80042b0:	f00c fd38 	bl	8010d24 <mbedtls_gcm_update>
                                      (uint32_t) P_inputSize,
                                      P_pInputBuffer,
                                      P_pOutputBuffer);
  /*Put data into struct*/
  if (mbedtls_status == MBEDTLS_SUCCESS)
 80042b4:	4604      	mov	r4, r0
 80042b6:	b950      	cbnz	r0, 80042ce <AES_GCM_Encrypt_Append+0x36>
  {
    *P_pOutputSize = P_inputSize;
 80042b8:	6037      	str	r7, [r6, #0]
    /*Transform the IV into the right format*/
    wrap_iv_psa_to_crypto((uint8_t *)P_pAESGCMctx->pmIv, P_pAESGCMctx->amIv);
 80042ba:	f105 0114 	add.w	r1, r5, #20
 80042be:	68e8      	ldr	r0, [r5, #12]
 80042c0:	f7ff fe2e 	bl	8003f20 <wrap_iv_psa_to_crypto>
  else
  {
    return AES_ERR_BAD_OPERATION;
  }
  return AES_SUCCESS;
}
 80042c4:	4620      	mov	r0, r4
 80042c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return AES_ERR_BAD_PARAMETER;
 80042c8:	f44f 6442 	mov.w	r4, #3104	; 0xc20
 80042cc:	e7fa      	b.n	80042c4 <AES_GCM_Encrypt_Append+0x2c>
    return AES_ERR_BAD_OPERATION;
 80042ce:	f640 441e 	movw	r4, #3102	; 0xc1e
 80042d2:	e7f7      	b.n	80042c4 <AES_GCM_Encrypt_Append+0x2c>
 80042d4:	20002080 	.word	0x20002080

080042d8 <AES_GCM_Encrypt_Finish>:
  *                                  See note
  */
int32_t AES_GCM_Encrypt_Finish(AESGCMctx_stt *P_pAESGCMctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	4617      	mov	r7, r2
  int32_t aes_ret_status = AES_SUCCESS;
  int32_t mbedtls_status;
  if ((P_pAESGCMctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80042dc:	4606      	mov	r6, r0
 80042de:	b1b0      	cbz	r0, 800430e <AES_GCM_Encrypt_Finish+0x36>
 80042e0:	b1a9      	cbz	r1, 800430e <AES_GCM_Encrypt_Finish+0x36>
 80042e2:	b1a2      	cbz	r2, 800430e <AES_GCM_Encrypt_Finish+0x36>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if ((P_pAESGCMctx->mTagSize < 0) || (P_pAESGCMctx->mTagSize > 16))
 80042e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80042e6:	2a10      	cmp	r2, #16
 80042e8:	d902      	bls.n	80042f0 <AES_GCM_Encrypt_Finish+0x18>
  {
    return AES_ERR_BAD_CONTEXT;
 80042ea:	f640 401f 	movw	r0, #3103	; 0xc1f
  {
    aes_ret_status = AES_ERR_BAD_CONTEXT;
  }

  return aes_ret_status;
}
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mbedtls_status = mbedtls_gcm_finish(wrap_aes_gcm_enc.mbedtls_ctx,
 80042f0:	4d08      	ldr	r5, [pc, #32]	; (8004314 <AES_GCM_Encrypt_Finish+0x3c>)
 80042f2:	6868      	ldr	r0, [r5, #4]
 80042f4:	f00c fd99 	bl	8010e2a <mbedtls_gcm_finish>
  if (mbedtls_status == MBEDTLS_SUCCESS)
 80042f8:	4604      	mov	r4, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d1f5      	bne.n	80042ea <AES_GCM_Encrypt_Finish+0x12>
    *P_pOutputSize = P_pAESGCMctx->mTagSize;
 80042fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    mbedtls_gcm_free(wrap_aes_gcm_enc.mbedtls_ctx);
 8004300:	6868      	ldr	r0, [r5, #4]
    *P_pOutputSize = P_pAESGCMctx->mTagSize;
 8004302:	603b      	str	r3, [r7, #0]
    mbedtls_gcm_free(wrap_aes_gcm_enc.mbedtls_ctx);
 8004304:	f00c fe04 	bl	8010f10 <mbedtls_gcm_free>
    wrap_aes_gcm_enc.wrap_is_use = WRAP_IS_NOT_USE;
 8004308:	70ec      	strb	r4, [r5, #3]
  int32_t aes_ret_status = AES_SUCCESS;
 800430a:	4620      	mov	r0, r4
 800430c:	e7ef      	b.n	80042ee <AES_GCM_Encrypt_Finish+0x16>
    return AES_ERR_BAD_PARAMETER;
 800430e:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8004312:	e7ec      	b.n	80042ee <AES_GCM_Encrypt_Finish+0x16>
 8004314:	20002080 	.word	0x20002080

08004318 <AES_GCM_Decrypt_Init>:
  *                                  see note
  */
int32_t AES_GCM_Decrypt_Init(AESGCMctx_stt *P_pAESGCMctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	460d      	mov	r5, r1
  int32_t aes_ret_status = AES_SUCCESS;
  int8_t  mbedtls_status;
  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 800431c:	4604      	mov	r4, r0
 800431e:	b910      	cbnz	r0, 8004326 <AES_GCM_Decrypt_Init+0xe>
  {
    return AES_ERR_BAD_PARAMETER;
 8004320:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 8004324:	bd70      	pop	{r4, r5, r6, pc}
  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8004326:	2900      	cmp	r1, #0
 8004328:	d0fa      	beq.n	8004320 <AES_GCM_Decrypt_Init+0x8>
 800432a:	2a00      	cmp	r2, #0
 800432c:	d0f8      	beq.n	8004320 <AES_GCM_Decrypt_Init+0x8>
  if ((P_pAESGCMctx->mKeySize == 0)
 800432e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004330:	b1eb      	cbz	r3, 800436e <AES_GCM_Decrypt_Init+0x56>
      || (P_pAESGCMctx->mTagSize == 0)
 8004332:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004334:	b1db      	cbz	r3, 800436e <AES_GCM_Decrypt_Init+0x56>
      || (P_pAESGCMctx->mIvSize != 12))
 8004336:	6903      	ldr	r3, [r0, #16]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d118      	bne.n	800436e <AES_GCM_Decrypt_Init+0x56>
  if (P_pAESGCMctx->pmKey != P_pKey)
 800433c:	6883      	ldr	r3, [r0, #8]
  mbedtls_gcm_init(wrap_aes_gcm_dec.mbedtls_ctx);
 800433e:	4e0d      	ldr	r6, [pc, #52]	; (8004374 <AES_GCM_Decrypt_Init+0x5c>)
  if (P_pAESGCMctx->pmKey != P_pKey)
 8004340:	428b      	cmp	r3, r1
  if (P_pAESGCMctx->pmIv != P_pIv)
 8004342:	68c3      	ldr	r3, [r0, #12]
    P_pAESGCMctx->pmKey = P_pKey;
 8004344:	bf18      	it	ne
 8004346:	6081      	strne	r1, [r0, #8]
  if (P_pAESGCMctx->pmIv != P_pIv)
 8004348:	4293      	cmp	r3, r2
    P_pAESGCMctx->pmIv = P_pIv;
 800434a:	bf18      	it	ne
 800434c:	60c2      	strne	r2, [r0, #12]
  mbedtls_gcm_init(wrap_aes_gcm_dec.mbedtls_ctx);
 800434e:	68f0      	ldr	r0, [r6, #12]
 8004350:	f00c fb74 	bl	8010a3c <mbedtls_gcm_init>
                                      P_pAESGCMctx->mKeySize * 8U);
 8004354:	6a63      	ldr	r3, [r4, #36]	; 0x24
  mbedtls_status = mbedtls_gcm_setkey(wrap_aes_gcm_dec.mbedtls_ctx,
 8004356:	68f0      	ldr	r0, [r6, #12]
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	462a      	mov	r2, r5
 800435c:	2102      	movs	r1, #2
 800435e:	f00c fb72 	bl	8010a46 <mbedtls_gcm_setkey>
  if (mbedtls_status == MBEDTLS_SUCCESS)
 8004362:	b240      	sxtb	r0, r0
 8004364:	2800      	cmp	r0, #0
 8004366:	d1db      	bne.n	8004320 <AES_GCM_Decrypt_Init+0x8>
    wrap_aes_gcm_dec.wrap_is_use = WRAP_IS_USE;
 8004368:	2301      	movs	r3, #1
 800436a:	72f3      	strb	r3, [r6, #11]
 800436c:	e7da      	b.n	8004324 <AES_GCM_Decrypt_Init+0xc>
    return AES_ERR_BAD_CONTEXT;
 800436e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004372:	e7d7      	b.n	8004324 <AES_GCM_Decrypt_Init+0xc>
 8004374:	20002080 	.word	0x20002080

08004378 <AES_GCM_Decrypt_Append>:
int32_t AES_GCM_Decrypt_Append(AESGCMctx_stt *P_pAESGCMctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	9c04      	ldr	r4, [sp, #16]
 800437c:	4615      	mov	r5, r2
  int32_t aes_ret_status = AES_SUCCESS;
  int32_t mbedtls_status;
  if ((P_pAESGCMctx == NULL)
 800437e:	b158      	cbz	r0, 8004398 <AES_GCM_Decrypt_Append+0x20>
      || (P_pInputBuffer == NULL)
 8004380:	b151      	cbz	r1, 8004398 <AES_GCM_Decrypt_Append+0x20>
      || (P_pOutputBuffer == NULL)
 8004382:	b14b      	cbz	r3, 8004398 <AES_GCM_Decrypt_Append+0x20>
      || (P_pOutputSize == NULL))
 8004384:	b144      	cbz	r4, 8004398 <AES_GCM_Decrypt_Append+0x20>
  {
    return AES_ERR_BAD_PARAMETER;
  }

  mbedtls_status = mbedtls_gcm_update(wrap_aes_gcm_dec.mbedtls_ctx,
 8004386:	4807      	ldr	r0, [pc, #28]	; (80043a4 <AES_GCM_Decrypt_Append+0x2c>)
 8004388:	460a      	mov	r2, r1
 800438a:	68c0      	ldr	r0, [r0, #12]
 800438c:	4629      	mov	r1, r5
 800438e:	f00c fcc9 	bl	8010d24 <mbedtls_gcm_update>
                                      (uint32_t) P_inputSize,
                                      P_pInputBuffer,
                                      P_pOutputBuffer);
  if (mbedtls_status == MBEDTLS_SUCCESS)
 8004392:	b920      	cbnz	r0, 800439e <AES_GCM_Decrypt_Append+0x26>
  {
    *P_pOutputSize = P_inputSize;
 8004394:	6025      	str	r5, [r4, #0]
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 8004396:	bd38      	pop	{r3, r4, r5, pc}
    return AES_ERR_BAD_PARAMETER;
 8004398:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800439c:	e7fb      	b.n	8004396 <AES_GCM_Decrypt_Append+0x1e>
    aes_ret_status = AES_ERR_BAD_OPERATION;
 800439e:	f640 401e 	movw	r0, #3102	; 0xc1e
 80043a2:	e7f8      	b.n	8004396 <AES_GCM_Decrypt_Append+0x1e>
 80043a4:	20002080 	.word	0x20002080

080043a8 <AES_GCM_Decrypt_Finish>:
  *                                  See note
  */
int32_t AES_GCM_Decrypt_Finish(AESGCMctx_stt *P_pAESGCMctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4616      	mov	r6, r2
  int32_t aes_ret_status;
  int8_t mbedtls_status;
  if ((P_pAESGCMctx == NULL) || (P_pOutputSize == NULL))
 80043ac:	b300      	cbz	r0, 80043f0 <AES_GCM_Decrypt_Finish+0x48>
 80043ae:	b1fa      	cbz	r2, 80043f0 <AES_GCM_Decrypt_Finish+0x48>
  }
  if (P_pAESGCMctx == NULL)
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if ((P_pAESGCMctx->pmTag == NULL)
 80043b0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80043b2:	b301      	cbz	r1, 80043f6 <AES_GCM_Decrypt_Finish+0x4e>
      || ((P_pAESGCMctx->mTagSize > 0) && (P_pAESGCMctx->mTagSize < 16)))
 80043b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80043b6:	1e53      	subs	r3, r2, #1
 80043b8:	2b0e      	cmp	r3, #14
 80043ba:	d91c      	bls.n	80043f6 <AES_GCM_Decrypt_Finish+0x4e>
  {
    return AES_ERR_BAD_OPERATION;
  }

  mbedtls_status = mbedtls_gcm_finish(wrap_aes_gcm_dec.mbedtls_ctx,
 80043bc:	4d0f      	ldr	r5, [pc, #60]	; (80043fc <AES_GCM_Decrypt_Finish+0x54>)
 80043be:	68e8      	ldr	r0, [r5, #12]
 80043c0:	f00c fd33 	bl	8010e2a <mbedtls_gcm_finish>
 80043c4:	b240      	sxtb	r0, r0
                                      (unsigned char *)P_pAESGCMctx->pmTag,
                                      (uint32_t) P_pAESGCMctx->mTagSize);
  if (mbedtls_status == MBEDTLS_ERR_GCM_AUTH_FAILED)
 80043c6:	f110 0f12 	cmn.w	r0, #18
 80043ca:	d00e      	beq.n	80043ea <AES_GCM_Decrypt_Finish+0x42>
  {
    aes_ret_status = AUTHENTICATION_SUCCESSFUL;
  }
  else
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
 80043cc:	f240 34eb 	movw	r4, #1003	; 0x3eb
 80043d0:	f640 431e 	movw	r3, #3102	; 0xc1e
 80043d4:	2800      	cmp	r0, #0
 80043d6:	bf18      	it	ne
 80043d8:	461c      	movne	r4, r3
  }
  mbedtls_gcm_free(wrap_aes_gcm_dec.mbedtls_ctx);
 80043da:	68e8      	ldr	r0, [r5, #12]
 80043dc:	f00c fd98 	bl	8010f10 <mbedtls_gcm_free>

  /*The encryption is finished*/
  wrap_aes_gcm_dec.wrap_is_use = WRAP_IS_NOT_USE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	72eb      	strb	r3, [r5, #11]

  /*According to documentation as to be set to 0*/
  *P_pOutputSize = 0;
 80043e4:	6033      	str	r3, [r6, #0]
  return aes_ret_status;
}
 80043e6:	4620      	mov	r0, r4
 80043e8:	bd70      	pop	{r4, r5, r6, pc}
    aes_ret_status = AUTHENTICATION_FAILED;
 80043ea:	f44f 747b 	mov.w	r4, #1004	; 0x3ec
 80043ee:	e7f4      	b.n	80043da <AES_GCM_Decrypt_Finish+0x32>
    return AES_ERR_BAD_PARAMETER;
 80043f0:	f44f 6442 	mov.w	r4, #3104	; 0xc20
 80043f4:	e7f7      	b.n	80043e6 <AES_GCM_Decrypt_Finish+0x3e>
    return AES_ERR_BAD_OPERATION;
 80043f6:	f640 441e 	movw	r4, #3102	; 0xc1e
 80043fa:	e7f4      	b.n	80043e6 <AES_GCM_Decrypt_Finish+0x3e>
 80043fc:	20002080 	.word	0x20002080

08004400 <AES_CCM_Encrypt_Init>:
  * @retval     AES_SUCCESS: Operation Successful
  */
int32_t AES_CCM_Encrypt_Init(AESCCMctx_stt *P_pAESCCMctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pNonce)
{
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	460e      	mov	r6, r1
 8004404:	4617      	mov	r7, r2
  int32_t mbedtls_ret_status;
  int32_t aes_ret_status = AES_SUCCESS;

  if ( (P_pAESCCMctx == NULL)
 8004406:	4604      	mov	r4, r0
 8004408:	b910      	cbnz	r0, 8004410 <AES_CCM_Encrypt_Init+0x10>
       || (P_pKey == NULL)
       || (P_pNonce == NULL) )
  {
    return AES_ERR_BAD_PARAMETER;
 800440a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  else
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }
  return aes_ret_status;
}
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       || (P_pKey == NULL)
 8004410:	2900      	cmp	r1, #0
 8004412:	d0fa      	beq.n	800440a <AES_CCM_Encrypt_Init+0xa>
       || (P_pNonce == NULL) )
 8004414:	2a00      	cmp	r2, #0
 8004416:	d0f8      	beq.n	800440a <AES_CCM_Encrypt_Init+0xa>
  if (P_pAESCCMctx->mKeySize <= 0)
 8004418:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	dd1b      	ble.n	8004456 <AES_CCM_Encrypt_Init+0x56>
  if (P_pAESCCMctx->mTagSize <= 0)
 800441e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004420:	2b00      	cmp	r3, #0
 8004422:	dd18      	ble.n	8004456 <AES_CCM_Encrypt_Init+0x56>
  if (P_pAESCCMctx->mAssDataSize < 0)
 8004424:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	db15      	blt.n	8004456 <AES_CCM_Encrypt_Init+0x56>
  if (P_pAESCCMctx->mPayloadSize  < 0)
 800442a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800442c:	2b00      	cmp	r3, #0
 800442e:	db12      	blt.n	8004456 <AES_CCM_Encrypt_Init+0x56>
  mbedtls_ccm_init(wrap_aes_ccm_enc.mbedtls_ctx);
 8004430:	4d0a      	ldr	r5, [pc, #40]	; (800445c <AES_CCM_Encrypt_Init+0x5c>)
 8004432:	6928      	ldr	r0, [r5, #16]
 8004434:	f009 f954 	bl	800d6e0 <mbedtls_ccm_init>
                                          P_pAESCCMctx->mKeySize * 8U);
 8004438:	6b63      	ldr	r3, [r4, #52]	; 0x34
  mbedtls_ret_status = mbedtls_ccm_setkey(wrap_aes_ccm_enc.mbedtls_ctx,
 800443a:	6928      	ldr	r0, [r5, #16]
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4632      	mov	r2, r6
 8004440:	2102      	movs	r1, #2
 8004442:	f009 f951 	bl	800d6e8 <mbedtls_ccm_setkey>
  if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 8004446:	2800      	cmp	r0, #0
 8004448:	d1df      	bne.n	800440a <AES_CCM_Encrypt_Init+0xa>
    wrap_aes_ccm_enc.wrap_is_use = WRAP_IS_USE;
 800444a:	2301      	movs	r3, #1
    P_pAESCCMctx->pmNonce = P_pNonce;
 800444c:	e9c4 6702 	strd	r6, r7, [r4, #8]
    wrap_aes_ccm_enc.wrap_is_use = WRAP_IS_USE;
 8004450:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8004454:	e7db      	b.n	800440e <AES_CCM_Encrypt_Init+0xe>
    return AES_ERR_BAD_CONTEXT;
 8004456:	f640 401f 	movw	r0, #3103	; 0xc1f
 800445a:	e7d8      	b.n	800440e <AES_CCM_Encrypt_Init+0xe>
 800445c:	20002080 	.word	0x20002080

08004460 <AES_CCM_Header_Append>:
  * @retval     AES_ERR_BAD_OPERATION : Append not allowed
  */
int32_t AES_CCM_Header_Append(AESCCMctx_stt *P_pAESCCMctx,
                              const uint8_t *P_pInputBuffer,
                              int32_t        P_inputSize)
{
 8004460:	b530      	push	{r4, r5, lr}
  int32_t aes_ret_status = AES_ERR_BAD_OPERATION;

  if (P_pAESCCMctx == NULL)
 8004462:	4604      	mov	r4, r0
 8004464:	b190      	cbz	r0, 800448c <AES_CCM_Header_Append+0x2c>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  /* No AAD is possible*/
  if (P_pInputBuffer == NULL)
 8004466:	b1a1      	cbz	r1, 8004492 <AES_CCM_Header_Append+0x32>
  {
    return AES_SUCCESS;
  }
  else
  {
    if (wrap_aes_ccm_enc.wrap_is_use == WRAP_IS_USE)
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <AES_CCM_Header_Append+0x38>)
 800446a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    {
      wrap_aes_ccm_enc.p_wrap_aad = P_pInputBuffer;
      P_pAESCCMctx->mAssDataSize = P_inputSize;
      aes_ret_status = AES_SUCCESS;
    }
    if (wrap_aes_ccm_dec.wrap_is_use == WRAP_IS_USE)
 800446e:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    if (wrap_aes_ccm_enc.wrap_is_use == WRAP_IS_USE)
 8004472:	2801      	cmp	r0, #1
      wrap_aes_ccm_enc.p_wrap_aad = P_pInputBuffer;
 8004474:	bf03      	ittte	eq
 8004476:	6159      	streq	r1, [r3, #20]
      P_pAESCCMctx->mAssDataSize = P_inputSize;
 8004478:	6422      	streq	r2, [r4, #64]	; 0x40
      aes_ret_status = AES_SUCCESS;
 800447a:	2000      	moveq	r0, #0
  int32_t aes_ret_status = AES_ERR_BAD_OPERATION;
 800447c:	f640 401e 	movwne	r0, #3102	; 0xc1e
    if (wrap_aes_ccm_dec.wrap_is_use == WRAP_IS_USE)
 8004480:	2d01      	cmp	r5, #1
 8004482:	d102      	bne.n	800448a <AES_CCM_Header_Append+0x2a>
    {
      wrap_aes_ccm_dec.p_wrap_aad = P_pInputBuffer;
 8004484:	6319      	str	r1, [r3, #48]	; 0x30
      P_pAESCCMctx->mAssDataSize  = P_inputSize;
 8004486:	6422      	str	r2, [r4, #64]	; 0x40
      aes_ret_status = AES_SUCCESS;
 8004488:	2000      	movs	r0, #0
    }
  }
  return aes_ret_status;
}
 800448a:	bd30      	pop	{r4, r5, pc}
    return AES_ERR_BAD_PARAMETER;
 800448c:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8004490:	e7fb      	b.n	800448a <AES_CCM_Header_Append+0x2a>
    return AES_SUCCESS;
 8004492:	4608      	mov	r0, r1
 8004494:	e7f9      	b.n	800448a <AES_CCM_Header_Append+0x2a>
 8004496:	bf00      	nop
 8004498:	20002080 	.word	0x20002080

0800449c <AES_CCM_Encrypt_Append>:
int32_t AES_CCM_Encrypt_Append(AESCCMctx_stt *P_pAESCCMctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	4614      	mov	r4, r2
 80044a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  int32_t mbedtls_ret_status;
  int32_t aes_ret_status;

  if ((P_pAESCCMctx == NULL)
 80044a4:	b1c8      	cbz	r0, 80044da <AES_CCM_Encrypt_Append+0x3e>
       || (P_pInputBuffer == NULL)
 80044a6:	b1c1      	cbz	r1, 80044da <AES_CCM_Encrypt_Append+0x3e>
       || (P_pOutputBuffer == NULL)
 80044a8:	b1bb      	cbz	r3, 80044da <AES_CCM_Encrypt_Append+0x3e>
       || (P_pOutputSize == NULL) )
 80044aa:	b1b6      	cbz	r6, 80044da <AES_CCM_Encrypt_Append+0x3e>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < 0)
 80044ac:	2a00      	cmp	r2, #0
 80044ae:	db14      	blt.n	80044da <AES_CCM_Encrypt_Append+0x3e>
  {
    return AES_ERR_BAD_PARAMETER;
  }

  mbedtls_ret_status = mbedtls_ccm_encrypt_and_tag(wrap_aes_ccm_enc.mbedtls_ctx,
 80044b0:	4d0d      	ldr	r5, [pc, #52]	; (80044e8 <AES_CCM_Encrypt_Append+0x4c>)
 80044b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80044b4:	9205      	str	r2, [sp, #20]
 80044b6:	69aa      	ldr	r2, [r5, #24]
 80044b8:	9102      	str	r1, [sp, #8]
 80044ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80044be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	696b      	ldr	r3, [r5, #20]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80044ca:	4621      	mov	r1, r4
 80044cc:	6928      	ldr	r0, [r5, #16]
 80044ce:	f009 f950 	bl	800d772 <mbedtls_ccm_encrypt_and_tag>
                                                   (uint32_t) P_pAESCCMctx->mAssDataSize,
                                                   P_pInputBuffer,
                                                   P_pOutputBuffer,
                                                   wrap_aes_ccm_enc.p_wrap_tag,
                                                   (size_t) P_pAESCCMctx->mTagSize);
  if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 80044d2:	b928      	cbnz	r0, 80044e0 <AES_CCM_Encrypt_Append+0x44>
  {
    *P_pOutputSize = P_inputSize;
 80044d4:	6034      	str	r4, [r6, #0]
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
  }

  return aes_ret_status;
}
 80044d6:	b006      	add	sp, #24
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
    return AES_ERR_BAD_PARAMETER;
 80044da:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80044de:	e7fa      	b.n	80044d6 <AES_CCM_Encrypt_Append+0x3a>
    aes_ret_status = AES_ERR_BAD_OPERATION;
 80044e0:	f640 401e 	movw	r0, #3102	; 0xc1e
 80044e4:	e7f7      	b.n	80044d6 <AES_CCM_Encrypt_Append+0x3a>
 80044e6:	bf00      	nop
 80044e8:	20002080 	.word	0x20002080

080044ec <AES_CCM_Encrypt_Finish>:
  * @retval     AES_SUCCESS: Operation Successful
  */
int32_t AES_CCM_Encrypt_Finish(AESCCMctx_stt *P_pAESCCMctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /*Output data*/
  (void)memcpy(P_pOutputBuffer, wrap_aes_ccm_enc.p_wrap_tag, (uint32_t) P_pAESCCMctx->mTagSize);
 80044ee:	4c0b      	ldr	r4, [pc, #44]	; (800451c <AES_CCM_Encrypt_Finish+0x30>)
{
 80044f0:	4605      	mov	r5, r0
  (void)memcpy(P_pOutputBuffer, wrap_aes_ccm_enc.p_wrap_tag, (uint32_t) P_pAESCCMctx->mTagSize);
 80044f2:	69a6      	ldr	r6, [r4, #24]
{
 80044f4:	4617      	mov	r7, r2
 80044f6:	4608      	mov	r0, r1
  (void)memcpy(P_pOutputBuffer, wrap_aes_ccm_enc.p_wrap_tag, (uint32_t) P_pAESCCMctx->mTagSize);
 80044f8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80044fa:	4631      	mov	r1, r6
 80044fc:	f012 fadd 	bl	8016aba <memcpy>
  *P_pOutputSize = P_pAESCCMctx->mTagSize;
 8004500:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004502:	603b      	str	r3, [r7, #0]

  /*Reset tag*/
  (void)memset(wrap_aes_ccm_enc.p_wrap_tag, 0, (uint32_t) P_pAESCCMctx->mTagSize);
 8004504:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004506:	2100      	movs	r1, #0
 8004508:	4630      	mov	r0, r6
 800450a:	f012 fafa 	bl	8016b02 <memset>

  mbedtls_ccm_free(wrap_aes_ccm_enc.mbedtls_ctx);
 800450e:	6920      	ldr	r0, [r4, #16]
 8004510:	f009 f90d 	bl	800d72e <mbedtls_ccm_free>
  wrap_aes_ccm_enc.wrap_is_use = WRAP_IS_NOT_USE;
 8004514:	2000      	movs	r0, #0
 8004516:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return AES_SUCCESS;
}
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451c:	20002080 	.word	0x20002080

08004520 <AES_CCM_Decrypt_Init>:
  * @retval     AES_ERR_BAD_CONTEXT: Context not initialized with valid values
  */
int32_t AES_CCM_Decrypt_Init(AESCCMctx_stt *P_pAESCCMctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pNonce)
{
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	460e      	mov	r6, r1
 8004524:	4617      	mov	r7, r2
  int32_t mbedtls_ret_status;
  int32_t aes_ret_status = AES_SUCCESS;

  if ((P_pAESCCMctx == NULL)
 8004526:	4604      	mov	r4, r0
 8004528:	b910      	cbnz	r0, 8004530 <AES_CCM_Decrypt_Init+0x10>
      || (P_pKey == NULL)
      || (P_pNonce == NULL) )
  {
    return AES_ERR_BAD_PARAMETER;
 800452a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      || (P_pKey == NULL)
 8004530:	2900      	cmp	r1, #0
 8004532:	d0fa      	beq.n	800452a <AES_CCM_Decrypt_Init+0xa>
      || (P_pNonce == NULL) )
 8004534:	2a00      	cmp	r2, #0
 8004536:	d0f8      	beq.n	800452a <AES_CCM_Decrypt_Init+0xa>
  if (P_pAESCCMctx->mKeySize <= 0)
 8004538:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800453a:	2b00      	cmp	r3, #0
 800453c:	dd1f      	ble.n	800457e <AES_CCM_Decrypt_Init+0x5e>
  if ( (P_pAESCCMctx->mTagSize < 4) || (P_pAESCCMctx->mTagSize > 16) )
 800453e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004540:	1f1a      	subs	r2, r3, #4
 8004542:	2a0c      	cmp	r2, #12
 8004544:	d901      	bls.n	800454a <AES_CCM_Decrypt_Init+0x2a>
    if ((P_pAESCCMctx->mTagSize % 2) != 0)
 8004546:	07db      	lsls	r3, r3, #31
 8004548:	d419      	bmi.n	800457e <AES_CCM_Decrypt_Init+0x5e>
  if (P_pAESCCMctx->mAssDataSize < 0)
 800454a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	db16      	blt.n	800457e <AES_CCM_Decrypt_Init+0x5e>
  if (P_pAESCCMctx->mPayloadSize  < 0)
 8004550:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004552:	2b00      	cmp	r3, #0
 8004554:	db13      	blt.n	800457e <AES_CCM_Decrypt_Init+0x5e>
  mbedtls_ccm_init(wrap_aes_ccm_dec.mbedtls_ctx);
 8004556:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <AES_CCM_Decrypt_Init+0x64>)
 8004558:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800455a:	f009 f8c1 	bl	800d6e0 <mbedtls_ccm_init>
                                          P_pAESCCMctx->mKeySize * 8U);
 800455e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  mbedtls_ret_status = mbedtls_ccm_setkey(wrap_aes_ccm_dec.mbedtls_ctx,
 8004560:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4632      	mov	r2, r6
 8004566:	2102      	movs	r1, #2
 8004568:	f009 f8be 	bl	800d6e8 <mbedtls_ccm_setkey>
  if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 800456c:	2800      	cmp	r0, #0
 800456e:	d1dc      	bne.n	800452a <AES_CCM_Decrypt_Init+0xa>
    wrap_aes_ccm_dec.wrap_is_use = WRAP_IS_USE;
 8004570:	2301      	movs	r3, #1
    P_pAESCCMctx->pmNonce = P_pNonce;
 8004572:	e9c4 6702 	strd	r6, r7, [r4, #8]
    wrap_aes_ccm_dec.wrap_is_use = WRAP_IS_USE;
 8004576:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    P_pAESCCMctx->mFlags = E_SK_DEFAULT;
 800457a:	7120      	strb	r0, [r4, #4]
 800457c:	e7d7      	b.n	800452e <AES_CCM_Decrypt_Init+0xe>
    return AES_ERR_BAD_CONTEXT;
 800457e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004582:	e7d4      	b.n	800452e <AES_CCM_Decrypt_Init+0xe>
 8004584:	20002080 	.word	0x20002080

08004588 <AES_CCM_Decrypt_Append>:
int32_t AES_CCM_Decrypt_Append(AESCCMctx_stt *P_pAESCCMctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004588:	b530      	push	{r4, r5, lr}
 800458a:	9c03      	ldr	r4, [sp, #12]
  if ((P_pAESCCMctx == NULL)
 800458c:	b180      	cbz	r0, 80045b0 <AES_CCM_Decrypt_Append+0x28>
       || (P_pInputBuffer == NULL)
 800458e:	b179      	cbz	r1, 80045b0 <AES_CCM_Decrypt_Append+0x28>
       || (P_pOutputBuffer == NULL)
 8004590:	b173      	cbz	r3, 80045b0 <AES_CCM_Decrypt_Append+0x28>
       || (P_pOutputSize == NULL) )
 8004592:	b16c      	cbz	r4, 80045b0 <AES_CCM_Decrypt_Append+0x28>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < 0)
 8004594:	2a00      	cmp	r2, #0
 8004596:	db0b      	blt.n	80045b0 <AES_CCM_Decrypt_Append+0x28>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESCCMctx->mFlags == E_SK_NO_MORE_APPEND_ALLOWED)
 8004598:	7905      	ldrb	r5, [r0, #4]
 800459a:	2d04      	cmp	r5, #4
 800459c:	d00b      	beq.n	80045b6 <AES_CCM_Decrypt_Append+0x2e>
  {
    return AES_ERR_BAD_OPERATION;
  }

  *P_pOutputSize = P_inputSize;
 800459e:	6022      	str	r2, [r4, #0]
  wrap_aes_ccm_dec.p_output_save = P_pOutputBuffer;
 80045a0:	4c06      	ldr	r4, [pc, #24]	; (80045bc <AES_CCM_Decrypt_Append+0x34>)
 80045a2:	63a3      	str	r3, [r4, #56]	; 0x38
  wrap_aes_ccm_dec.input_size_save = P_inputSize;
  wrap_aes_ccm_dec.p_input_save = P_pInputBuffer;

  P_pAESCCMctx->mFlags = E_SK_NO_MORE_APPEND_ALLOWED;
 80045a4:	2304      	movs	r3, #4
 80045a6:	7103      	strb	r3, [r0, #4]
  wrap_aes_ccm_dec.input_size_save = P_inputSize;
 80045a8:	6462      	str	r2, [r4, #68]	; 0x44
  wrap_aes_ccm_dec.p_input_save = P_pInputBuffer;
 80045aa:	63e1      	str	r1, [r4, #60]	; 0x3c

  return AES_SUCCESS;
 80045ac:	2000      	movs	r0, #0
}
 80045ae:	bd30      	pop	{r4, r5, pc}
    return AES_ERR_BAD_PARAMETER;
 80045b0:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80045b4:	e7fb      	b.n	80045ae <AES_CCM_Decrypt_Append+0x26>
    return AES_ERR_BAD_OPERATION;
 80045b6:	f640 401e 	movw	r0, #3102	; 0xc1e
 80045ba:	e7f8      	b.n	80045ae <AES_CCM_Decrypt_Append+0x26>
 80045bc:	20002080 	.word	0x20002080

080045c0 <AES_CCM_Decrypt_Finish>:
  * @retval     AUTHENTICATION_FAILED: the TAG does NOT match the compute one
  */
int32_t AES_CCM_Decrypt_Finish(AESCCMctx_stt *P_pAESCCMctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4616      	mov	r6, r2
 80045c4:	b086      	sub	sp, #24
  int32_t mbedtls_ret_status;
  int32_t aes_ret_status;

  if (P_pAESCCMctx == NULL)
 80045c6:	b318      	cbz	r0, 8004610 <AES_CCM_Decrypt_Finish+0x50>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  mbedtls_ret_status = mbedtls_ccm_auth_decrypt(wrap_aes_ccm_dec.mbedtls_ctx,
 80045c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
                                                (uint32_t) wrap_aes_ccm_dec.input_size_save,
 80045ca:	4c13      	ldr	r4, [pc, #76]	; (8004618 <AES_CCM_Decrypt_Finish+0x58>)
  mbedtls_ret_status = mbedtls_ccm_auth_decrypt(wrap_aes_ccm_dec.mbedtls_ctx,
 80045cc:	9305      	str	r3, [sp, #20]
 80045ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80045d0:	9304      	str	r3, [sp, #16]
 80045d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045d4:	9303      	str	r3, [sp, #12]
 80045d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80045e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80045e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80045ea:	f009 f8fc 	bl	800d7e6 <mbedtls_ccm_auth_decrypt>
  {
    aes_ret_status = AUTHENTICATION_SUCCESSFUL;
  }
  else
  {
    aes_ret_status = AUTHENTICATION_FAILED;
 80045ee:	2800      	cmp	r0, #0
  }
  
  mbedtls_ccm_free(wrap_aes_ccm_dec.mbedtls_ctx);
 80045f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    aes_ret_status = AUTHENTICATION_FAILED;
 80045f2:	f240 35eb 	movw	r5, #1003	; 0x3eb
 80045f6:	bf18      	it	ne
 80045f8:	f44f 757b 	movne.w	r5, #1004	; 0x3ec
  mbedtls_ccm_free(wrap_aes_ccm_dec.mbedtls_ctx);
 80045fc:	f009 f897 	bl	800d72e <mbedtls_ccm_free>
  wrap_aes_ccm_dec.wrap_is_use = WRAP_IS_NOT_USE;
 8004600:	2300      	movs	r3, #0
 8004602:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if (P_pOutputSize != NULL)
 8004606:	b106      	cbz	r6, 800460a <AES_CCM_Decrypt_Finish+0x4a>
  {
    /*According to documentation as to be set to 0*/
    *P_pOutputSize = 0;
 8004608:	6033      	str	r3, [r6, #0]
  }
  
  return aes_ret_status;
}
 800460a:	4628      	mov	r0, r5
 800460c:	b006      	add	sp, #24
 800460e:	bd70      	pop	{r4, r5, r6, pc}
    return AES_ERR_BAD_PARAMETER;
 8004610:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 8004614:	e7f9      	b.n	800460a <AES_CCM_Decrypt_Finish+0x4a>
 8004616:	bf00      	nop
 8004618:	20002080 	.word	0x20002080

0800461c <AES_CMAC_Encrypt_Init>:
  * @retval     AES_SUCCESS: Operation Successful
  * @retval     AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     AES_ERR_BAD_CONTEXT: Context not initialized with valid values
  */
int32_t AES_CMAC_Encrypt_Init(AESCMACctx_stt *P_pAESCMACctx)
{
 800461c:	b530      	push	{r4, r5, lr}
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;
  wrap_aes_cmac_enc.cmac_op = psa_mac_operation_init();
 800461e:	4d19      	ldr	r5, [pc, #100]	; (8004684 <AES_CMAC_Encrypt_Init+0x68>)
{
 8004620:	b0b1      	sub	sp, #196	; 0xc4
 8004622:	4604      	mov	r4, r0
    return( v );
 8004624:	22b8      	movs	r2, #184	; 0xb8
 8004626:	2100      	movs	r1, #0
 8004628:	a802      	add	r0, sp, #8
 800462a:	f012 fa6a 	bl	8016b02 <memset>
  wrap_aes_cmac_enc.cmac_op = psa_mac_operation_init();
 800462e:	22b8      	movs	r2, #184	; 0xb8
 8004630:	a902      	add	r1, sp, #8
 8004632:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8004636:	f012 fa40 	bl	8016aba <memcpy>
  psa_algorithm_t psa_algorithm = PSA_ALG_CMAC;

  if (P_pAESCMACctx == NULL)
 800463a:	b1e4      	cbz	r4, 8004676 <AES_CMAC_Encrypt_Init+0x5a>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if ((P_pAESCMACctx->pmKey == NULL)
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	b1f3      	cbz	r3, 800467e <AES_CMAC_Encrypt_Init+0x62>
      || (P_pAESCMACctx->mKeySize == 0)
 8004640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004642:	b1e3      	cbz	r3, 800467e <AES_CMAC_Encrypt_Init+0x62>
      || (P_pAESCMACctx->mTagSize == 0))
 8004644:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004648:	b1cb      	cbz	r3, 800467e <AES_CMAC_Encrypt_Init+0x62>
  {
    return AES_ERR_BAD_CONTEXT;
  }

  /* Initialize MBED crypto library*/
  psa_ret_status = psa_crypto_init();
 800464a:	f00f f9f1 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status == PSA_SUCCESS)
 800464e:	b990      	cbnz	r0, 8004676 <AES_CMAC_Encrypt_Init+0x5a>
  {
    /*Import the raw AES key into a PSA struct*/
    psa_ret_status = wrap_import_raw_aes_key_into_psa(&(wrap_aes_cmac_enc.psa_key_handle),
 8004650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <AES_CMAC_Encrypt_Init+0x6c>)
 8004656:	68a3      	ldr	r3, [r4, #8]
 8004658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800465c:	f505 70ac 	add.w	r0, r5, #344	; 0x158
 8004660:	f7ff fc76 	bl	8003f50 <wrap_import_raw_aes_key_into_psa>
                                                      PSA_KEY_USAGE_SIGN,
                                                      psa_algorithm,
                                                      P_pAESCMACctx->pmKey,
                                                      (uint32_t) P_pAESCMACctx->mKeySize);
    if (psa_ret_status == PSA_SUCCESS)
 8004664:	b938      	cbnz	r0, 8004676 <AES_CMAC_Encrypt_Init+0x5a>
    {
      /*Setup CMAC*/
      psa_ret_status = psa_mac_sign_setup(&(wrap_aes_cmac_enc.cmac_op),
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <AES_CMAC_Encrypt_Init+0x6c>)
 8004668:	f8b5 1158 	ldrh.w	r1, [r5, #344]	; 0x158
 800466c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8004670:	f00e fe22 	bl	80132b8 <psa_mac_sign_setup>
                                          wrap_aes_cmac_enc.psa_key_handle,
                                          psa_algorithm);
      if (psa_ret_status == PSA_SUCCESS)
 8004674:	b108      	cbz	r0, 800467a <AES_CMAC_Encrypt_Init+0x5e>
      {
        aes_ret_status = AES_SUCCESS;
      }
      else
      {
        aes_ret_status = AES_ERR_BAD_PARAMETER;
 8004676:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  else
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }
  return aes_ret_status;
}
 800467a:	b031      	add	sp, #196	; 0xc4
 800467c:	bd30      	pop	{r4, r5, pc}
    return AES_ERR_BAD_CONTEXT;
 800467e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004682:	e7fa      	b.n	800467a <AES_CMAC_Encrypt_Init+0x5e>
 8004684:	20002630 	.word	0x20002630
 8004688:	02c00002 	.word	0x02c00002

0800468c <AES_CMAC_Encrypt_Append>:
  * @retval     AES_ERR_BAD_OPERATION: Append not allowed
  */
int32_t AES_CMAC_Encrypt_Append(AESCMACctx_stt *P_pAESCMACctx,
                                const uint8_t  *P_pInputBuffer,
                                int32_t         P_inputSize)
{
 800468c:	b510      	push	{r4, lr}
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;
  if ((P_pAESCMACctx == NULL) || (P_pInputBuffer == NULL))
 800468e:	b158      	cbz	r0, 80046a8 <AES_CMAC_Encrypt_Append+0x1c>
 8004690:	b151      	cbz	r1, 80046a8 <AES_CMAC_Encrypt_Append+0x1c>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < 0)
 8004692:	2a00      	cmp	r2, #0
 8004694:	db0b      	blt.n	80046ae <AES_CMAC_Encrypt_Append+0x22>
  {
    return AES_ERR_BAD_INPUT_SIZE;
  }

  /*Update CMAC*/
  psa_ret_status = psa_mac_update(&(wrap_aes_cmac_enc.cmac_op),
 8004696:	4807      	ldr	r0, [pc, #28]	; (80046b4 <AES_CMAC_Encrypt_Append+0x28>)
 8004698:	f00e fe14 	bl	80132c4 <psa_mac_update>
                                  P_pInputBuffer,
                                  (uint32_t) P_inputSize);
  if (psa_ret_status == PSA_SUCCESS)
 800469c:	2800      	cmp	r0, #0
  {
    aes_ret_status = AES_SUCCESS;
  }
  else
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
 800469e:	f640 401e 	movw	r0, #3102	; 0xc1e
 80046a2:	bf08      	it	eq
 80046a4:	2000      	moveq	r0, #0
  }

  return aes_ret_status;
}
 80046a6:	bd10      	pop	{r4, pc}
    return AES_ERR_BAD_PARAMETER;
 80046a8:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80046ac:	e7fb      	b.n	80046a6 <AES_CMAC_Encrypt_Append+0x1a>
    return AES_ERR_BAD_INPUT_SIZE;
 80046ae:	f640 401d 	movw	r0, #3101	; 0xc1d
 80046b2:	e7f8      	b.n	80046a6 <AES_CMAC_Encrypt_Append+0x1a>
 80046b4:	200026d0 	.word	0x200026d0

080046b8 <AES_CMAC_Encrypt_Finish>:
  *             see note
  */
int32_t AES_CMAC_Encrypt_Finish(AESCMACctx_stt *P_pAESCMACctx,
                                uint8_t        *P_pOutputBuffer,
                                int32_t        *P_pOutputSize)
{
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	460e      	mov	r6, r1
 80046bc:	4617      	mov	r7, r2
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;
  if ((P_pAESCMACctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80046be:	4604      	mov	r4, r0
 80046c0:	b910      	cbnz	r0, 80046c8 <AES_CMAC_Encrypt_Finish+0x10>
  {
    return AES_ERR_BAD_PARAMETER;
 80046c2:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 80046c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESCMACctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80046c8:	2900      	cmp	r1, #0
 80046ca:	d0fa      	beq.n	80046c2 <AES_CMAC_Encrypt_Finish+0xa>
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	d0f8      	beq.n	80046c2 <AES_CMAC_Encrypt_Finish+0xa>
  if ((P_pAESCMACctx->mTagSize < 1) || (P_pAESCMACctx->mTagSize > 16))
 80046d0:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 80046d4:	3801      	subs	r0, #1
 80046d6:	280f      	cmp	r0, #15
 80046d8:	d814      	bhi.n	8004704 <AES_CMAC_Encrypt_Finish+0x4c>
  psa_ret_status = psa_destroy_key(wrap_aes_cmac_enc.psa_key_handle);
 80046da:	4d0c      	ldr	r5, [pc, #48]	; (800470c <AES_CMAC_Encrypt_Finish+0x54>)
 80046dc:	f8b5 0158 	ldrh.w	r0, [r5, #344]	; 0x158
 80046e0:	f00e fa96 	bl	8012c10 <psa_destroy_key>
  if (psa_ret_status == PSA_SUCCESS)
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d1ec      	bne.n	80046c2 <AES_CMAC_Encrypt_Finish+0xa>
    psa_ret_status = psa_mac_sign_finish(&(wrap_aes_cmac_enc.cmac_op),
 80046e8:	463b      	mov	r3, r7
 80046ea:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 80046ee:	4631      	mov	r1, r6
 80046f0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80046f4:	f00e fe16 	bl	8013324 <psa_mac_sign_finish>
      aes_ret_status = AES_ERR_BAD_OPERATION;
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f640 401e 	movw	r0, #3102	; 0xc1e
 80046fe:	bf08      	it	eq
 8004700:	2000      	moveq	r0, #0
 8004702:	e7e0      	b.n	80046c6 <AES_CMAC_Encrypt_Finish+0xe>
    return AES_ERR_BAD_CONTEXT;
 8004704:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004708:	e7dd      	b.n	80046c6 <AES_CMAC_Encrypt_Finish+0xe>
 800470a:	bf00      	nop
 800470c:	20002630 	.word	0x20002630

08004710 <AES_CMAC_Decrypt_Init>:
  * @retval     AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     AES_ERR_BAD_CONTEXT: Context not initialized with valid values,
  *                                   see the note below
  */
int32_t AES_CMAC_Decrypt_Init(AESCMACctx_stt *P_pAESCMACctx)
{
 8004710:	b530      	push	{r4, r5, lr}
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;
  wrap_aes_cmac_dec.cmac_op = psa_mac_operation_init();
 8004712:	4d1b      	ldr	r5, [pc, #108]	; (8004780 <AES_CMAC_Decrypt_Init+0x70>)
{
 8004714:	b0b1      	sub	sp, #196	; 0xc4
 8004716:	4604      	mov	r4, r0
 8004718:	22b8      	movs	r2, #184	; 0xb8
 800471a:	2100      	movs	r1, #0
 800471c:	a802      	add	r0, sp, #8
 800471e:	f012 f9f0 	bl	8016b02 <memset>
  wrap_aes_cmac_dec.cmac_op = psa_mac_operation_init();
 8004722:	22b8      	movs	r2, #184	; 0xb8
 8004724:	a902      	add	r1, sp, #8
 8004726:	f505 70ae 	add.w	r0, r5, #348	; 0x15c
 800472a:	f012 f9c6 	bl	8016aba <memcpy>
  psa_algorithm_t psa_algorithm = PSA_ALG_CMAC;

  if (P_pAESCMACctx == NULL)
 800472e:	b1fc      	cbz	r4, 8004770 <AES_CMAC_Decrypt_Init+0x60>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if ((P_pAESCMACctx->pmKey == NULL)
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	b30b      	cbz	r3, 8004778 <AES_CMAC_Decrypt_Init+0x68>
      || (P_pAESCMACctx->pmTag == NULL)
 8004734:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8004738:	b1f3      	cbz	r3, 8004778 <AES_CMAC_Decrypt_Init+0x68>
      || (P_pAESCMACctx->mKeySize == 0)
 800473a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800473c:	b1e3      	cbz	r3, 8004778 <AES_CMAC_Decrypt_Init+0x68>
      || (P_pAESCMACctx->mTagSize == 0))
 800473e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004742:	b1cb      	cbz	r3, 8004778 <AES_CMAC_Decrypt_Init+0x68>
  {
    return AES_ERR_BAD_CONTEXT;
  }

  /* Initialize MBED crypto library*/
  psa_ret_status = psa_crypto_init();
 8004744:	f00f f974 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status == PSA_SUCCESS)
 8004748:	b990      	cbnz	r0, 8004770 <AES_CMAC_Decrypt_Init+0x60>
  {
    /*Import the raw AES key into a PSA struct*/
    psa_ret_status = wrap_import_raw_aes_key_into_psa(&(wrap_aes_cmac_dec.psa_key_handle),
 800474a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <AES_CMAC_Decrypt_Init+0x74>)
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004756:	f505 7005 	add.w	r0, r5, #532	; 0x214
 800475a:	f7ff fbf9 	bl	8003f50 <wrap_import_raw_aes_key_into_psa>
                                                      PSA_KEY_USAGE_VERIFY,
                                                      psa_algorithm,
                                                      P_pAESCMACctx->pmKey,
                                                      (uint32_t) P_pAESCMACctx->mKeySize);
    if (psa_ret_status == PSA_SUCCESS)
 800475e:	b938      	cbnz	r0, 8004770 <AES_CMAC_Decrypt_Init+0x60>
    {
      /*Setup CMAC*/
      psa_ret_status = psa_mac_verify_setup(&(wrap_aes_cmac_dec.cmac_op),
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <AES_CMAC_Decrypt_Init+0x74>)
 8004762:	f8b5 1214 	ldrh.w	r1, [r5, #532]	; 0x214
 8004766:	f505 70ae 	add.w	r0, r5, #348	; 0x15c
 800476a:	f00e fda8 	bl	80132be <psa_mac_verify_setup>
                                            wrap_aes_cmac_dec.psa_key_handle,
                                            psa_algorithm);
      if (psa_ret_status == PSA_SUCCESS)
 800476e:	b108      	cbz	r0, 8004774 <AES_CMAC_Decrypt_Init+0x64>
      {
        aes_ret_status = AES_SUCCESS;
      }
      else
      {
        aes_ret_status = AES_ERR_BAD_PARAMETER;
 8004770:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 8004774:	b031      	add	sp, #196	; 0xc4
 8004776:	bd30      	pop	{r4, r5, pc}
    return AES_ERR_BAD_CONTEXT;
 8004778:	f640 401f 	movw	r0, #3103	; 0xc1f
 800477c:	e7fa      	b.n	8004774 <AES_CMAC_Decrypt_Init+0x64>
 800477e:	bf00      	nop
 8004780:	20002630 	.word	0x20002630
 8004784:	02c00002 	.word	0x02c00002

08004788 <AES_CMAC_Decrypt_Append>:
  * @retval     AES_ERR_BAD_OPERATION: Append not allowed
  */
int32_t AES_CMAC_Decrypt_Append(AESCMACctx_stt *P_pAESCMACctx,
                                const uint8_t  *P_pInputBuffer,
                                int32_t         P_inputSize)
{
 8004788:	b510      	push	{r4, lr}
  int32_t aes_ret_status;
  psa_status_t psa_ret_status;

  if ((P_pAESCMACctx == NULL) || (P_pInputBuffer == NULL))
 800478a:	b158      	cbz	r0, 80047a4 <AES_CMAC_Decrypt_Append+0x1c>
 800478c:	b151      	cbz	r1, 80047a4 <AES_CMAC_Decrypt_Append+0x1c>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < 0)
 800478e:	2a00      	cmp	r2, #0
 8004790:	db0b      	blt.n	80047aa <AES_CMAC_Decrypt_Append+0x22>
  {
    return AES_ERR_BAD_INPUT_SIZE;
  }

  /*Update CMAC*/
  psa_ret_status = psa_mac_update(&(wrap_aes_cmac_dec.cmac_op),
 8004792:	4807      	ldr	r0, [pc, #28]	; (80047b0 <AES_CMAC_Decrypt_Append+0x28>)
 8004794:	f00e fd96 	bl	80132c4 <psa_mac_update>
                                  P_pInputBuffer,
                                  (uint32_t) P_inputSize);
  if (psa_ret_status == PSA_SUCCESS)
 8004798:	2800      	cmp	r0, #0
  {
    aes_ret_status = AES_SUCCESS;
  }
  else
  {
    aes_ret_status = AES_ERR_BAD_OPERATION;
 800479a:	f640 401e 	movw	r0, #3102	; 0xc1e
 800479e:	bf08      	it	eq
 80047a0:	2000      	moveq	r0, #0
  }

  return aes_ret_status;
}
 80047a2:	bd10      	pop	{r4, pc}
    return AES_ERR_BAD_PARAMETER;
 80047a4:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80047a8:	e7fb      	b.n	80047a2 <AES_CMAC_Decrypt_Append+0x1a>
    return AES_ERR_BAD_INPUT_SIZE;
 80047aa:	f640 401d 	movw	r0, #3101	; 0xc1d
 80047ae:	e7f8      	b.n	80047a2 <AES_CMAC_Decrypt_Append+0x1a>
 80047b0:	2000278c 	.word	0x2000278c

080047b4 <AES_CMAC_Decrypt_Finish>:
  *             see note
  */
int32_t AES_CMAC_Decrypt_Finish(AESCMACctx_stt *P_pAESCMACctx,
                                uint8_t        *P_pOutputBuffer,
                                int32_t        *P_pOutputSize)
{
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4615      	mov	r5, r2
  int32_t aes_ret_status = AES_SUCCESS;
  psa_status_t psa_ret_status = AES_SUCCESS;

  if ((P_pAESCMACctx == NULL) || (P_pOutputSize == NULL))
 80047b8:	4604      	mov	r4, r0
 80047ba:	b910      	cbnz	r0, 80047c2 <AES_CMAC_Decrypt_Finish+0xe>
  {
    return AES_ERR_BAD_PARAMETER;
 80047bc:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
  }

  return aes_ret_status;
}
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
  if ((P_pAESCMACctx == NULL) || (P_pOutputSize == NULL))
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d0fa      	beq.n	80047bc <AES_CMAC_Decrypt_Finish+0x8>
      || (P_pAESCMACctx->mTagSize > 16)
 80047c6:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80047ca:	3b01      	subs	r3, #1
  if ((P_pAESCMACctx->mTagSize < 1)
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d81c      	bhi.n	800480a <AES_CMAC_Decrypt_Finish+0x56>
      || (P_pAESCMACctx->pmTag == NULL))
 80047d0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80047d4:	b1cb      	cbz	r3, 800480a <AES_CMAC_Decrypt_Finish+0x56>
  psa_ret_status = psa_destroy_key(wrap_aes_cmac_dec.psa_key_handle);
 80047d6:	4e10      	ldr	r6, [pc, #64]	; (8004818 <AES_CMAC_Decrypt_Finish+0x64>)
 80047d8:	f8b6 0214 	ldrh.w	r0, [r6, #532]	; 0x214
 80047dc:	f00e fa18 	bl	8012c10 <psa_destroy_key>
  if (psa_ret_status == PSA_SUCCESS)
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1eb      	bne.n	80047bc <AES_CMAC_Decrypt_Finish+0x8>
    psa_ret_status = psa_mac_verify_finish(&(wrap_aes_cmac_dec.cmac_op),
 80047e4:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 80047e8:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
 80047ec:	f506 70ae 	add.w	r0, r6, #348	; 0x15c
 80047f0:	f00e fdc8 	bl	8013384 <psa_mac_verify_finish>
    if (psa_ret_status == PSA_ERROR_INVALID_SIGNATURE)
 80047f4:	f110 0f95 	cmn.w	r0, #149	; 0x95
 80047f8:	d00a      	beq.n	8004810 <AES_CMAC_Decrypt_Finish+0x5c>
    else if (psa_ret_status == PSA_SUCCESS)
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d1de      	bne.n	80047bc <AES_CMAC_Decrypt_Finish+0x8>
      *P_pOutputSize = P_pAESCMACctx->mTagSize;
 80047fe:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8004802:	602b      	str	r3, [r5, #0]
      aes_ret_status = AUTHENTICATION_SUCCESSFUL;
 8004804:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8004808:	e7da      	b.n	80047c0 <AES_CMAC_Decrypt_Finish+0xc>
    return AES_ERR_BAD_CONTEXT;
 800480a:	f640 401f 	movw	r0, #3103	; 0xc1f
 800480e:	e7d7      	b.n	80047c0 <AES_CMAC_Decrypt_Finish+0xc>
      aes_ret_status = AUTHENTICATION_FAILED;
 8004810:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8004814:	e7d4      	b.n	80047c0 <AES_CMAC_Decrypt_Finish+0xc>
 8004816:	bf00      	nop
 8004818:	20002630 	.word	0x20002630

0800481c <AES_ECB_Encrypt_Init>:
  *                                  See note
  */
int32_t AES_ECB_Encrypt_Init(AESECBctx_stt *P_pAESECBctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	460d      	mov	r5, r1
  int32_t aes_ret_status;
  int32_t mbedtls_ret_status;

  if ((P_pAESECBctx == NULL) || (P_pKey == NULL))
 8004820:	4604      	mov	r4, r0
 8004822:	b160      	cbz	r0, 800483e <AES_ECB_Encrypt_Init+0x22>
 8004824:	b159      	cbz	r1, 800483e <AES_ECB_Encrypt_Init+0x22>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESECBctx->mKeySize == 0)
 8004826:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004828:	b163      	cbz	r3, 8004844 <AES_ECB_Encrypt_Init+0x28>
  {
    return AES_ERR_BAD_CONTEXT;
  }

  mbedtls_aes_init(wrap_aes_ecb_enc.mbedtls_ctx);
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <AES_ECB_Encrypt_Init+0x30>)
 800482c:	f005 fd00 	bl	800a230 <mbedtls_aes_init>
  mbedtls_ret_status = mbedtls_aes_setkey_enc(wrap_aes_ecb_enc.mbedtls_ctx,
                                              P_pKey,
                                              P_pAESECBctx->mKeySize * 8U);
 8004830:	6a62      	ldr	r2, [r4, #36]	; 0x24
  mbedtls_ret_status = mbedtls_aes_setkey_enc(wrap_aes_ecb_enc.mbedtls_ctx,
 8004832:	4806      	ldr	r0, [pc, #24]	; (800484c <AES_ECB_Encrypt_Init+0x30>)
 8004834:	00d2      	lsls	r2, r2, #3
 8004836:	4629      	mov	r1, r5
 8004838:	f005 fd06 	bl	800a248 <mbedtls_aes_setkey_enc>
  if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 800483c:	b108      	cbz	r0, 8004842 <AES_ECB_Encrypt_Init+0x26>
  {
    aes_ret_status = AES_SUCCESS;
  }
  else
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
 800483e:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  }

  return aes_ret_status;
}
 8004842:	bd38      	pop	{r3, r4, r5, pc}
    return AES_ERR_BAD_CONTEXT;
 8004844:	f640 401f 	movw	r0, #3103	; 0xc1f
 8004848:	e7fb      	b.n	8004842 <AES_ECB_Encrypt_Init+0x26>
 800484a:	bf00      	nop
 800484c:	20002848 	.word	0x20002848

08004850 <AES_ECB_Encrypt_Append>:
int32_t AES_ECB_Encrypt_Append(AESECBctx_stt *P_pAESECBctx,
                               const uint8_t *P_pInputBuffer,
                               int32_t        P_inputSize,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	9e08      	ldr	r6, [sp, #32]
 8004856:	460f      	mov	r7, r1
 8004858:	4615      	mov	r5, r2
  int32_t aes_ret_status = AES_SUCCESS;
  int32_t mbedtls_ret_status;
  uint32_t wrap_computed;

  if ((P_pOutputBuffer == NULL) || (P_pInputBuffer == NULL) || (P_pOutputSize == NULL))
 800485a:	4698      	mov	r8, r3
 800485c:	b1db      	cbz	r3, 8004896 <AES_ECB_Encrypt_Append+0x46>
 800485e:	b1d1      	cbz	r1, 8004896 <AES_ECB_Encrypt_Append+0x46>
 8004860:	b1ce      	cbz	r6, 8004896 <AES_ECB_Encrypt_Append+0x46>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if ((P_inputSize < 16) || ((P_inputSize % 16) != 0))
 8004862:	2a0f      	cmp	r2, #15
 8004864:	dd1a      	ble.n	800489c <AES_ECB_Encrypt_Append+0x4c>
 8004866:	f012 040f 	ands.w	r4, r2, #15
 800486a:	d117      	bne.n	800489c <AES_ECB_Encrypt_Append+0x4c>
    return AES_ERR_BAD_INPUT_SIZE;
  }

  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
  {
    mbedtls_ret_status = mbedtls_aes_crypt_ecb(wrap_aes_ecb_enc.mbedtls_ctx,
 800486c:	f8df a034 	ldr.w	sl, [pc, #52]	; 80048a4 <AES_ECB_Encrypt_Append+0x54>
    {
      aes_ret_status = AES_SUCCESS;
    }
    else
    {
      aes_ret_status = AES_ERR_BAD_OPERATION;
 8004870:	f640 491e 	movw	r9, #3102	; 0xc1e
    mbedtls_ret_status = mbedtls_aes_crypt_ecb(wrap_aes_ecb_enc.mbedtls_ctx,
 8004874:	eb08 0304 	add.w	r3, r8, r4
 8004878:	193a      	adds	r2, r7, r4
 800487a:	2101      	movs	r1, #1
 800487c:	4650      	mov	r0, sl
 800487e:	f006 f9d3 	bl	800ac28 <mbedtls_aes_crypt_ecb>
  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
 8004882:	3410      	adds	r4, #16
      aes_ret_status = AES_ERR_BAD_OPERATION;
 8004884:	2800      	cmp	r0, #0
 8004886:	bf0c      	ite	eq
 8004888:	2000      	moveq	r0, #0
 800488a:	4648      	movne	r0, r9
  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
 800488c:	42a5      	cmp	r5, r4
 800488e:	d8f1      	bhi.n	8004874 <AES_ECB_Encrypt_Append+0x24>
    }
  }
  *P_pOutputSize = P_inputSize;
 8004890:	6035      	str	r5, [r6, #0]
  return aes_ret_status;
}
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return AES_ERR_BAD_PARAMETER;
 8004896:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800489a:	e7fa      	b.n	8004892 <AES_ECB_Encrypt_Append+0x42>
    return AES_ERR_BAD_INPUT_SIZE;
 800489c:	f640 401d 	movw	r0, #3101	; 0xc1d
 80048a0:	e7f7      	b.n	8004892 <AES_ECB_Encrypt_Append+0x42>
 80048a2:	bf00      	nop
 80048a4:	20002848 	.word	0x20002848

080048a8 <AES_ECB_Encrypt_Finish>:
  * @retval     AES_SUCCESS: Operation Successful
  */
int32_t AES_ECB_Encrypt_Finish(AESECBctx_stt *P_pAESECBctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 80048a8:	b508      	push	{r3, lr}
  /*According to documentation does not output any data*/
  mbedtls_aes_free(wrap_aes_ecb_enc.mbedtls_ctx);
 80048aa:	4802      	ldr	r0, [pc, #8]	; (80048b4 <AES_ECB_Encrypt_Finish+0xc>)
 80048ac:	f005 fcc5 	bl	800a23a <mbedtls_aes_free>
  return AES_SUCCESS;
}
 80048b0:	2000      	movs	r0, #0
 80048b2:	bd08      	pop	{r3, pc}
 80048b4:	20002848 	.word	0x20002848

080048b8 <AES_ECB_Decrypt_Init>:
  *                                  See note
  */
int32_t AES_ECB_Decrypt_Init(AESECBctx_stt *P_pAESECBctx,
                             const uint8_t *P_pKey,
                             const uint8_t *P_pIv)
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	460d      	mov	r5, r1
  int32_t aes_ret_status;
  int32_t mbedtls_ret_status;

  if ((P_pAESECBctx == NULL) || (P_pKey == NULL))
 80048bc:	4604      	mov	r4, r0
 80048be:	b160      	cbz	r0, 80048da <AES_ECB_Decrypt_Init+0x22>
 80048c0:	b159      	cbz	r1, 80048da <AES_ECB_Decrypt_Init+0x22>
  {
    return AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESECBctx->mKeySize == 0)
 80048c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048c4:	b163      	cbz	r3, 80048e0 <AES_ECB_Decrypt_Init+0x28>
  {
    return AES_ERR_BAD_CONTEXT;
  }

  mbedtls_aes_init(wrap_aes_ecb_dec.mbedtls_ctx);
 80048c6:	4808      	ldr	r0, [pc, #32]	; (80048e8 <AES_ECB_Decrypt_Init+0x30>)
 80048c8:	f005 fcb2 	bl	800a230 <mbedtls_aes_init>
  mbedtls_ret_status = mbedtls_aes_setkey_dec(wrap_aes_ecb_dec.mbedtls_ctx,
                                              P_pKey,
                                              P_pAESECBctx->mKeySize * 8U);
 80048cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  mbedtls_ret_status = mbedtls_aes_setkey_dec(wrap_aes_ecb_dec.mbedtls_ctx,
 80048ce:	4806      	ldr	r0, [pc, #24]	; (80048e8 <AES_ECB_Decrypt_Init+0x30>)
 80048d0:	00d2      	lsls	r2, r2, #3
 80048d2:	4629      	mov	r1, r5
 80048d4:	f005 fdcc 	bl	800a470 <mbedtls_aes_setkey_dec>
  if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 80048d8:	b108      	cbz	r0, 80048de <AES_ECB_Decrypt_Init+0x26>
  {
    aes_ret_status = AES_SUCCESS;
  }
  else
  {
    aes_ret_status = AES_ERR_BAD_PARAMETER;
 80048da:	f44f 6042 	mov.w	r0, #3104	; 0xc20
  }

  return aes_ret_status;
}
 80048de:	bd38      	pop	{r3, r4, r5, pc}
    return AES_ERR_BAD_CONTEXT;
 80048e0:	f640 401f 	movw	r0, #3103	; 0xc1f
 80048e4:	e7fb      	b.n	80048de <AES_ECB_Decrypt_Init+0x26>
 80048e6:	bf00      	nop
 80048e8:	20002960 	.word	0x20002960

080048ec <AES_ECB_Decrypt_Append>:
{
  int32_t aes_ret_status = AES_SUCCESS;
  uint8_t mbedtls_ret_status;
  uint32_t wrap_computed;

  if ((P_inputSize < 16) || ((P_inputSize % 16) != 0))
 80048ec:	2a0f      	cmp	r2, #15
{
 80048ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f2:	460f      	mov	r7, r1
 80048f4:	4615      	mov	r5, r2
 80048f6:	4698      	mov	r8, r3
  if ((P_inputSize < 16) || ((P_inputSize % 16) != 0))
 80048f8:	dd1a      	ble.n	8004930 <AES_ECB_Decrypt_Append+0x44>
 80048fa:	f012 040f 	ands.w	r4, r2, #15
 80048fe:	d117      	bne.n	8004930 <AES_ECB_Decrypt_Append+0x44>
    return AES_ERR_BAD_INPUT_SIZE;
  }

  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
  {
    mbedtls_ret_status = mbedtls_aes_crypt_ecb(wrap_aes_ecb_dec.mbedtls_ctx,
 8004900:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8004938 <AES_ECB_Decrypt_Append+0x4c>
    {
      aes_ret_status = AES_SUCCESS;
    }
    else
    {
      aes_ret_status = AES_ERR_BAD_OPERATION;
 8004904:	f640 461e 	movw	r6, #3102	; 0xc1e
    mbedtls_ret_status = mbedtls_aes_crypt_ecb(wrap_aes_ecb_dec.mbedtls_ctx,
 8004908:	eb08 0304 	add.w	r3, r8, r4
 800490c:	193a      	adds	r2, r7, r4
 800490e:	2100      	movs	r1, #0
 8004910:	4648      	mov	r0, r9
 8004912:	f006 f989 	bl	800ac28 <mbedtls_aes_crypt_ecb>
    if (mbedtls_ret_status == MBEDTLS_SUCCESS)
 8004916:	b2c0      	uxtb	r0, r0
      aes_ret_status = AES_ERR_BAD_OPERATION;
 8004918:	2800      	cmp	r0, #0
  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
 800491a:	f104 0410 	add.w	r4, r4, #16
      aes_ret_status = AES_ERR_BAD_OPERATION;
 800491e:	bf0c      	ite	eq
 8004920:	2000      	moveq	r0, #0
 8004922:	4630      	movne	r0, r6
  for (wrap_computed = 0U; wrap_computed < P_inputSize; wrap_computed += 16U)
 8004924:	42a5      	cmp	r5, r4
 8004926:	d8ef      	bhi.n	8004908 <AES_ECB_Decrypt_Append+0x1c>
    }
  }

  *P_pOutputSize = P_inputSize;
 8004928:	9b08      	ldr	r3, [sp, #32]
 800492a:	601d      	str	r5, [r3, #0]
  return aes_ret_status;
}
 800492c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return AES_ERR_BAD_INPUT_SIZE;
 8004930:	f640 401d 	movw	r0, #3101	; 0xc1d
 8004934:	e7fa      	b.n	800492c <AES_ECB_Decrypt_Append+0x40>
 8004936:	bf00      	nop
 8004938:	20002960 	.word	0x20002960

0800493c <AES_ECB_Decrypt_Finish>:
  * @retval     AES_SUCCESS: Operation Successful
  */
int32_t AES_ECB_Decrypt_Finish(AESECBctx_stt *P_pAESECBctx,
                               uint8_t       *P_pOutputBuffer,
                               int32_t       *P_pOutputSize)
{
 800493c:	b508      	push	{r3, lr}
  /*According to documentation does not output any data*/
  mbedtls_aes_free(wrap_aes_ecb_dec.mbedtls_ctx);
 800493e:	4802      	ldr	r0, [pc, #8]	; (8004948 <AES_ECB_Decrypt_Finish+0xc>)
 8004940:	f005 fc7b 	bl	800a23a <mbedtls_aes_free>
  return AES_SUCCESS;
}
 8004944:	2000      	movs	r0, #0
 8004946:	bd08      	pop	{r3, pc}
 8004948:	20002960 	.word	0x20002960

0800494c <SHA1_Init>:
  *             *P_pSHA1ctx: The context that will be initialized. Not used
  * @retval     HASH_SUCCESS: Operation Successful
  * @retval     HASH_ERR_BAD_PARAMETER
  */
int32_t SHA1_Init(SHA1ctx_stt *P_pSHA1ctx)
{
 800494c:	b500      	push	{lr}
 800494e:	b09d      	sub	sp, #116	; 0x74
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;

  /*Init mbed*/
  psa_ret_status = psa_crypto_init();
 8004950:	f00f f86e 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status == PSA_SUCCESS)
 8004954:	4601      	mov	r1, r0
 8004956:	b968      	cbnz	r0, 8004974 <SHA1_Init+0x28>
    return( v );
 8004958:	2270      	movs	r2, #112	; 0x70
 800495a:	4668      	mov	r0, sp
 800495c:	f012 f8d1 	bl	8016b02 <memset>
  {
    /*Init the hash operation*/
    hash_op_1 = psa_hash_operation_init();
 8004960:	4669      	mov	r1, sp
 8004962:	2270      	movs	r2, #112	; 0x70
 8004964:	4806      	ldr	r0, [pc, #24]	; (8004980 <SHA1_Init+0x34>)
 8004966:	f012 f8a8 	bl	8016aba <memcpy>
    psa_ret_status = psa_hash_setup(&hash_op_1, PSA_ALG_SHA_1);
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <SHA1_Init+0x38>)
 800496c:	4804      	ldr	r0, [pc, #16]	; (8004980 <SHA1_Init+0x34>)
 800496e:	f00e f9a5 	bl	8012cbc <psa_hash_setup>
    if (psa_ret_status == PSA_SUCCESS)
 8004972:	b108      	cbz	r0, 8004978 <SHA1_Init+0x2c>
    {
      hash_ret_status = HASH_SUCCESS;
    }
    else
    {
      hash_ret_status = HASH_ERR_BAD_PARAMETER;
 8004974:	f640 70a3 	movw	r0, #4003	; 0xfa3
  else
  {
    hash_ret_status = HASH_ERR_BAD_PARAMETER;
  }
  return hash_ret_status;
}
 8004978:	b01d      	add	sp, #116	; 0x74
 800497a:	f85d fb04 	ldr.w	pc, [sp], #4
 800497e:	bf00      	nop
 8004980:	20002f20 	.word	0x20002f20
 8004984:	01000005 	.word	0x01000005

08004988 <SHA1_Append>:
  * @retval     HASH_ERR_BAD_OPERATION
  */
int32_t SHA1_Append(SHA1ctx_stt *P_pSHA1ctx,
                    const uint8_t *P_pInputBuffer,
                    int32_t P_inputSize)
{
 8004988:	b508      	push	{r3, lr}
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;
  if (P_pInputBuffer == NULL)
 800498a:	b141      	cbz	r1, 800499e <SHA1_Append+0x16>
  {
    return HASH_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_hash_update(&hash_op_1,
 800498c:	4805      	ldr	r0, [pc, #20]	; (80049a4 <SHA1_Append+0x1c>)
 800498e:	f00e f9d5 	bl	8012d3c <psa_hash_update>
                                   P_pInputBuffer,
                                   (uint32_t) P_inputSize);
  if (psa_ret_status == PSA_SUCCESS)
 8004992:	2800      	cmp	r0, #0
  {
    hash_ret_status = HASH_SUCCESS;
  }
  else
  {
    hash_ret_status = HASH_ERR_BAD_OPERATION;
 8004994:	f640 70a1 	movw	r0, #4001	; 0xfa1
 8004998:	bf08      	it	eq
 800499a:	2000      	moveq	r0, #0
  }

  return hash_ret_status;
}
 800499c:	bd08      	pop	{r3, pc}
    return HASH_ERR_BAD_PARAMETER;
 800499e:	f640 70a3 	movw	r0, #4003	; 0xfa3
 80049a2:	e7fb      	b.n	800499c <SHA1_Append+0x14>
 80049a4:	20002f20 	.word	0x20002f20

080049a8 <SHA1_Finish>:
  * @retval     HASH_ERR_BAD_CONTEXT
  */
int32_t SHA1_Finish(SHA1ctx_stt *P_pSHA1ctx,
                    uint8_t *P_pOutputBuffer,
                    int32_t *P_pOutputSize)
{
 80049a8:	4613      	mov	r3, r2
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;
  size_t hash_length = PSA_HASH_SIZE(hash_op_1.alg);
 80049aa:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <SHA1_Finish+0x94>)
 80049ac:	7812      	ldrb	r2, [r2, #0]
 80049ae:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
{
 80049b2:	b510      	push	{r4, lr}
  size_t hash_length = PSA_HASH_SIZE(hash_op_1.alg);
 80049b4:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
 80049b8:	3c01      	subs	r4, #1
 80049ba:	2c02      	cmp	r4, #2
 80049bc:	d92f      	bls.n	8004a1e <SHA1_Finish+0x76>
 80049be:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
 80049c2:	3c04      	subs	r4, #4
 80049c4:	2c01      	cmp	r4, #1
 80049c6:	d92c      	bls.n	8004a22 <SHA1_Finish+0x7a>
 80049c8:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <SHA1_Finish+0x98>)
 80049ca:	4290      	cmp	r0, r2
 80049cc:	d02d      	beq.n	8004a2a <SHA1_Finish+0x82>
 80049ce:	3201      	adds	r2, #1
 80049d0:	4290      	cmp	r0, r2
 80049d2:	d02c      	beq.n	8004a2e <SHA1_Finish+0x86>
 80049d4:	3201      	adds	r2, #1
 80049d6:	4290      	cmp	r0, r2
 80049d8:	d02b      	beq.n	8004a32 <SHA1_Finish+0x8a>
 80049da:	3201      	adds	r2, #1
 80049dc:	4290      	cmp	r0, r2
 80049de:	d022      	beq.n	8004a26 <SHA1_Finish+0x7e>
 80049e0:	3201      	adds	r2, #1
 80049e2:	4290      	cmp	r0, r2
 80049e4:	d021      	beq.n	8004a2a <SHA1_Finish+0x82>
 80049e6:	3201      	adds	r2, #1
 80049e8:	4290      	cmp	r0, r2
 80049ea:	d020      	beq.n	8004a2e <SHA1_Finish+0x86>
 80049ec:	3203      	adds	r2, #3
 80049ee:	4290      	cmp	r0, r2
 80049f0:	d01b      	beq.n	8004a2a <SHA1_Finish+0x82>
 80049f2:	3201      	adds	r2, #1
 80049f4:	4290      	cmp	r0, r2
 80049f6:	d01a      	beq.n	8004a2e <SHA1_Finish+0x86>
 80049f8:	3201      	adds	r2, #1
 80049fa:	4290      	cmp	r0, r2
 80049fc:	d019      	beq.n	8004a32 <SHA1_Finish+0x8a>
 80049fe:	3201      	adds	r2, #1
 8004a00:	4290      	cmp	r0, r2
 8004a02:	bf0c      	ite	eq
 8004a04:	2240      	moveq	r2, #64	; 0x40
 8004a06:	2200      	movne	r2, #0
  if ((P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8004a08:	b1a9      	cbz	r1, 8004a36 <SHA1_Finish+0x8e>
 8004a0a:	b1a3      	cbz	r3, 8004a36 <SHA1_Finish+0x8e>
  {
    return HASH_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_hash_finish(&hash_op_1, P_pOutputBuffer, hash_length, (size_t *)P_pOutputSize);
 8004a0c:	480b      	ldr	r0, [pc, #44]	; (8004a3c <SHA1_Finish+0x94>)
 8004a0e:	f00e f99b 	bl	8012d48 <psa_hash_finish>
  if (psa_ret_status == PSA_SUCCESS)
 8004a12:	2800      	cmp	r0, #0
  {
    hash_ret_status = HASH_SUCCESS;
  }
  else
  {
    hash_ret_status = HASH_ERR_BAD_CONTEXT;
 8004a14:	f640 70a2 	movw	r0, #4002	; 0xfa2
 8004a18:	bf08      	it	eq
 8004a1a:	2000      	moveq	r0, #0
  }

  return hash_ret_status;
}
 8004a1c:	bd10      	pop	{r4, pc}
  size_t hash_length = PSA_HASH_SIZE(hash_op_1.alg);
 8004a1e:	2210      	movs	r2, #16
 8004a20:	e7f2      	b.n	8004a08 <SHA1_Finish+0x60>
 8004a22:	2214      	movs	r2, #20
 8004a24:	e7f0      	b.n	8004a08 <SHA1_Finish+0x60>
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	e7ee      	b.n	8004a08 <SHA1_Finish+0x60>
 8004a2a:	221c      	movs	r2, #28
 8004a2c:	e7ec      	b.n	8004a08 <SHA1_Finish+0x60>
 8004a2e:	2220      	movs	r2, #32
 8004a30:	e7ea      	b.n	8004a08 <SHA1_Finish+0x60>
 8004a32:	2230      	movs	r2, #48	; 0x30
 8004a34:	e7e8      	b.n	8004a08 <SHA1_Finish+0x60>
    return HASH_ERR_BAD_PARAMETER;
 8004a36:	f640 70a3 	movw	r0, #4003	; 0xfa3
 8004a3a:	e7ef      	b.n	8004a1c <SHA1_Finish+0x74>
 8004a3c:	20002f20 	.word	0x20002f20
 8004a40:	01000008 	.word	0x01000008

08004a44 <SHA256_Init>:
  *             *P_pSHA256ctx: The context that will be initialized. Not used
  * @retval     HASH_SUCCESS: Operation Successful
  * @retval     HASH_ERR_BAD_PARAMETER
  */
int32_t SHA256_Init(SHA256ctx_stt *P_pSHA256ctx)
{
 8004a44:	b500      	push	{lr}
 8004a46:	b09d      	sub	sp, #116	; 0x74
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;

  /* Initialize MBED crypto library*/
  psa_ret_status = psa_crypto_init();
 8004a48:	f00e fff2 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status == PSA_SUCCESS) 
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	b968      	cbnz	r0, 8004a6c <SHA256_Init+0x28>
 8004a50:	2270      	movs	r2, #112	; 0x70
 8004a52:	4668      	mov	r0, sp
 8004a54:	f012 f855 	bl	8016b02 <memset>
  {
    /* Initialize hash operation*/
    hash_op_256 = psa_hash_operation_init();
 8004a58:	4669      	mov	r1, sp
 8004a5a:	2270      	movs	r2, #112	; 0x70
 8004a5c:	4806      	ldr	r0, [pc, #24]	; (8004a78 <SHA256_Init+0x34>)
 8004a5e:	f012 f82c 	bl	8016aba <memcpy>
    psa_ret_status = psa_hash_setup(&hash_op_256, PSA_ALG_SHA_256);
 8004a62:	4906      	ldr	r1, [pc, #24]	; (8004a7c <SHA256_Init+0x38>)
 8004a64:	4804      	ldr	r0, [pc, #16]	; (8004a78 <SHA256_Init+0x34>)
 8004a66:	f00e f929 	bl	8012cbc <psa_hash_setup>
    if (psa_ret_status == PSA_SUCCESS)
 8004a6a:	b108      	cbz	r0, 8004a70 <SHA256_Init+0x2c>
    {
      hash_ret_status = HASH_SUCCESS;
    }
    else
    {
      hash_ret_status = HASH_ERR_BAD_PARAMETER;
 8004a6c:	f640 70a3 	movw	r0, #4003	; 0xfa3
  {
    hash_ret_status = HASH_ERR_BAD_PARAMETER;
  }
 
  return hash_ret_status;
}
 8004a70:	b01d      	add	sp, #116	; 0x74
 8004a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a76:	bf00      	nop
 8004a78:	20002f90 	.word	0x20002f90
 8004a7c:	01000009 	.word	0x01000009

08004a80 <SHA256_Append>:
  * @retval     HASH_ERR_BAD_OPERATION
  */
int32_t SHA256_Append(SHA256ctx_stt *P_pSHA256ctx,
                        const uint8_t *P_pInputBuffer,
                        int32_t P_inputSize)
{
 8004a80:	b508      	push	{r3, lr}
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;

   if (P_pInputBuffer == NULL)
 8004a82:	b141      	cbz	r1, 8004a96 <SHA256_Append+0x16>
  {
    return HASH_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_hash_update(&hash_op_256,
 8004a84:	4805      	ldr	r0, [pc, #20]	; (8004a9c <SHA256_Append+0x1c>)
 8004a86:	f00e f959 	bl	8012d3c <psa_hash_update>
                                   P_pInputBuffer,
                                   (uint32_t) P_inputSize);
  if (psa_ret_status == PSA_SUCCESS)
 8004a8a:	2800      	cmp	r0, #0
  {
    hash_ret_status = HASH_SUCCESS;
  }
  else
  {
    hash_ret_status = HASH_ERR_BAD_OPERATION;
 8004a8c:	f640 70a1 	movw	r0, #4001	; 0xfa1
 8004a90:	bf08      	it	eq
 8004a92:	2000      	moveq	r0, #0
  }

  return hash_ret_status;
}
 8004a94:	bd08      	pop	{r3, pc}
    return HASH_ERR_BAD_PARAMETER;
 8004a96:	f640 70a3 	movw	r0, #4003	; 0xfa3
 8004a9a:	e7fb      	b.n	8004a94 <SHA256_Append+0x14>
 8004a9c:	20002f90 	.word	0x20002f90

08004aa0 <SHA256_Finish>:
  * @retval     HASH_ERR_BAD_CONTEXT
  */
int32_t SHA256_Finish(SHA256ctx_stt *P_pSHA256ctx,
                      uint8_t *P_pOutputBuffer,
                      int32_t *P_pOutputSize)
{
 8004aa0:	4613      	mov	r3, r2
  int32_t hash_ret_status;
  psa_status_t psa_ret_status;
  size_t hash_length = PSA_HASH_SIZE(hash_op_256.alg);
 8004aa2:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <SHA256_Finish+0x98>)
 8004aa4:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8004aa8:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
{
 8004aac:	b510      	push	{r4, lr}
  size_t hash_length = PSA_HASH_SIZE(hash_op_256.alg);
 8004aae:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
 8004ab2:	3c01      	subs	r4, #1
 8004ab4:	2c02      	cmp	r4, #2
 8004ab6:	d92f      	bls.n	8004b18 <SHA256_Finish+0x78>
 8004ab8:	f100 447f 	add.w	r4, r0, #4278190080	; 0xff000000
 8004abc:	3c04      	subs	r4, #4
 8004abe:	2c01      	cmp	r4, #1
 8004ac0:	d92c      	bls.n	8004b1c <SHA256_Finish+0x7c>
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <SHA256_Finish+0x9c>)
 8004ac4:	4290      	cmp	r0, r2
 8004ac6:	d02d      	beq.n	8004b24 <SHA256_Finish+0x84>
 8004ac8:	3201      	adds	r2, #1
 8004aca:	4290      	cmp	r0, r2
 8004acc:	d02c      	beq.n	8004b28 <SHA256_Finish+0x88>
 8004ace:	3201      	adds	r2, #1
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d02b      	beq.n	8004b2c <SHA256_Finish+0x8c>
 8004ad4:	3201      	adds	r2, #1
 8004ad6:	4290      	cmp	r0, r2
 8004ad8:	d022      	beq.n	8004b20 <SHA256_Finish+0x80>
 8004ada:	3201      	adds	r2, #1
 8004adc:	4290      	cmp	r0, r2
 8004ade:	d021      	beq.n	8004b24 <SHA256_Finish+0x84>
 8004ae0:	3201      	adds	r2, #1
 8004ae2:	4290      	cmp	r0, r2
 8004ae4:	d020      	beq.n	8004b28 <SHA256_Finish+0x88>
 8004ae6:	3203      	adds	r2, #3
 8004ae8:	4290      	cmp	r0, r2
 8004aea:	d01b      	beq.n	8004b24 <SHA256_Finish+0x84>
 8004aec:	3201      	adds	r2, #1
 8004aee:	4290      	cmp	r0, r2
 8004af0:	d01a      	beq.n	8004b28 <SHA256_Finish+0x88>
 8004af2:	3201      	adds	r2, #1
 8004af4:	4290      	cmp	r0, r2
 8004af6:	d019      	beq.n	8004b2c <SHA256_Finish+0x8c>
 8004af8:	3201      	adds	r2, #1
 8004afa:	4290      	cmp	r0, r2
 8004afc:	bf0c      	ite	eq
 8004afe:	2240      	moveq	r2, #64	; 0x40
 8004b00:	2200      	movne	r2, #0

   if ((P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8004b02:	b1a9      	cbz	r1, 8004b30 <SHA256_Finish+0x90>
 8004b04:	b1a3      	cbz	r3, 8004b30 <SHA256_Finish+0x90>
  {
    return HASH_ERR_BAD_PARAMETER;
  }

  psa_ret_status = psa_hash_finish(&hash_op_256, P_pOutputBuffer, hash_length, (size_t *)P_pOutputSize);
 8004b06:	480e      	ldr	r0, [pc, #56]	; (8004b40 <SHA256_Finish+0xa0>)
 8004b08:	f00e f91e 	bl	8012d48 <psa_hash_finish>
  if (psa_ret_status == PSA_SUCCESS)
 8004b0c:	2800      	cmp	r0, #0
  {
    hash_ret_status = HASH_SUCCESS;
  }
  else
  {
    hash_ret_status = HASH_ERR_BAD_CONTEXT;
 8004b0e:	f640 70a2 	movw	r0, #4002	; 0xfa2
 8004b12:	bf08      	it	eq
 8004b14:	2000      	moveq	r0, #0
  }

  return hash_ret_status;
}
 8004b16:	bd10      	pop	{r4, pc}
  size_t hash_length = PSA_HASH_SIZE(hash_op_256.alg);
 8004b18:	2210      	movs	r2, #16
 8004b1a:	e7f2      	b.n	8004b02 <SHA256_Finish+0x62>
 8004b1c:	2214      	movs	r2, #20
 8004b1e:	e7f0      	b.n	8004b02 <SHA256_Finish+0x62>
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	e7ee      	b.n	8004b02 <SHA256_Finish+0x62>
 8004b24:	221c      	movs	r2, #28
 8004b26:	e7ec      	b.n	8004b02 <SHA256_Finish+0x62>
 8004b28:	2220      	movs	r2, #32
 8004b2a:	e7ea      	b.n	8004b02 <SHA256_Finish+0x62>
 8004b2c:	2230      	movs	r2, #48	; 0x30
 8004b2e:	e7e8      	b.n	8004b02 <SHA256_Finish+0x62>
    return HASH_ERR_BAD_PARAMETER;
 8004b30:	f640 70a3 	movw	r0, #4003	; 0xfa3
 8004b34:	e7ef      	b.n	8004b16 <SHA256_Finish+0x76>
 8004b36:	bf00      	nop
 8004b38:	20002f20 	.word	0x20002f20
 8004b3c:	01000008 	.word	0x01000008
 8004b40:	20002f90 	.word	0x20002f90

08004b44 <wrap_BigNum_to_uint8>:
  * @reval      WRAP_FAILURE: An error occure
  */
static uint8_t wrap_BigNum_to_uint8(uint8_t *P_pArray,
                                    const BigNum_stt *P_pBigNum,
                                    int32_t *P_psize)
{
 8004b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;
  uint8_t j;
  if ((P_pBigNum == NULL) 
 8004b48:	b311      	cbz	r1, 8004b90 <wrap_BigNum_to_uint8+0x4c>
      || (P_pArray == NULL) 
 8004b4a:	b150      	cbz	r0, 8004b62 <wrap_BigNum_to_uint8+0x1e>
      || (P_psize == NULL) )
 8004b4c:	b312      	cbz	r2, 8004b94 <wrap_BigNum_to_uint8+0x50>
 8004b4e:	2600      	movs	r6, #0
  /*uint32 -> uint8*/
  for (i = 0U; i < P_pBigNum->mSize; i++)
  {
    for (j = 4U; j > 0U; j--)
    {
      P_pArray[(P_pBigNum->mSize * 4U) - (i * 4U) - j] = P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U);
 8004b50:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
  for (i = 0U; i < P_pBigNum->mSize; i++)
 8004b54:	798b      	ldrb	r3, [r1, #6]
 8004b56:	b2f5      	uxtb	r5, r6
 8004b58:	429d      	cmp	r5, r3
 8004b5a:	d304      	bcc.n	8004b66 <wrap_BigNum_to_uint8+0x22>
    }
  }
  *P_psize = P_pBigNum->mSize * 4U; /*uint8 -> uint32*/
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	2001      	movs	r0, #1

  return WRAP_SUCCESS;
}
 8004b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      P_pArray[(P_pBigNum->mSize * 4U) - (i * 4U) - j] = P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U);
 8004b66:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	eb03 070c 	add.w	r7, r3, ip
 8004b70:	798c      	ldrb	r4, [r1, #6]
 8004b72:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8004b76:	680f      	ldr	r7, [r1, #0]
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	f857 700e 	ldr.w	r7, [r7, lr]
 8004b7e:	ebc3 0484 	rsb	r4, r3, r4, lsl #2
 8004b82:	fa27 f708 	lsr.w	r7, r7, r8
    for (j = 4U; j > 0U; j--)
 8004b86:	3b01      	subs	r3, #1
      P_pArray[(P_pBigNum->mSize * 4U) - (i * 4U) - j] = P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U);
 8004b88:	5507      	strb	r7, [r0, r4]
    for (j = 4U; j > 0U; j--)
 8004b8a:	d1ef      	bne.n	8004b6c <wrap_BigNum_to_uint8+0x28>
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	e7e1      	b.n	8004b54 <wrap_BigNum_to_uint8+0x10>
    return WRAP_FAILURE;
 8004b90:	4608      	mov	r0, r1
 8004b92:	e7e6      	b.n	8004b62 <wrap_BigNum_to_uint8+0x1e>
 8004b94:	4610      	mov	r0, r2
 8004b96:	e7e4      	b.n	8004b62 <wrap_BigNum_to_uint8+0x1e>

08004b98 <wrap_uint8_to_BigNum>:
{
 8004b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	460f      	mov	r7, r1
 8004b9e:	4616      	mov	r6, r2
  if ((P_pBigNum == NULL) 
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	b910      	cbnz	r0, 8004baa <wrap_uint8_to_BigNum+0x12>
    return WRAP_FAILURE;
 8004ba4:	2000      	movs	r0, #0
}
 8004ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      || (P_pArray == NULL) )
 8004baa:	2900      	cmp	r1, #0
 8004bac:	d0fa      	beq.n	8004ba4 <wrap_uint8_to_BigNum+0xc>
  if (Psize <= 0)
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	ddf8      	ble.n	8004ba4 <wrap_uint8_to_BigNum+0xc>
  if ( (Psize % 4U) > 0)
 8004bb2:	f012 0303 	ands.w	r3, r2, #3
 8004bb6:	ea4f 04a2 	mov.w	r4, r2, asr #2
 8004bba:	d01d      	beq.n	8004bf8 <wrap_uint8_to_BigNum+0x60>
    P_pBigNum->pmDigit = malloc((uint32_t)(Psize + 4 - (Psize % 4)) ); /*uin32_t*/
 8004bbc:	1d10      	adds	r0, r2, #4
 8004bbe:	1ac0      	subs	r0, r0, r3
 8004bc0:	f011 ff5c 	bl	8016a7c <malloc>
    size_tp = (uint32_t)((Psize / 4) + 1);
 8004bc4:	3401      	adds	r4, #1
    P_pBigNum->pmDigit = malloc((uint32_t)(Psize + 4 - (Psize % 4)) ); /*uin32_t*/
 8004bc6:	6028      	str	r0, [r5, #0]
  if (P_pBigNum->pmDigit == NULL)
 8004bc8:	6828      	ldr	r0, [r5, #0]
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0ea      	beq.n	8004ba4 <wrap_uint8_to_BigNum+0xc>
    (void)memset(P_pBigNum->pmDigit, 0, size_tp * 4U);
 8004bce:	2100      	movs	r1, #0
 8004bd0:	00a2      	lsls	r2, r4, #2
 8004bd2:	f011 ff96 	bl	8016b02 <memset>
 8004bd6:	2100      	movs	r1, #0
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8004bd8:	f104 4c80 	add.w	ip, r4, #1073741824	; 0x40000000
  int32_t size_counter = 0;
 8004bdc:	4608      	mov	r0, r1
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8004bde:	f10c 3cff 	add.w	ip, ip, #4294967295
          P_pBigNum->pmDigit[size_tp - i - 1U] += P_pArray[ (4U * i) + j] << (8U * (3U - j));
 8004be2:	f06f 0e07 	mvn.w	lr, #7
 8004be6:	b2cb      	uxtb	r3, r1
    for (i = 0U; i < size_tp; i++)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	d80a      	bhi.n	8004c02 <wrap_uint8_to_BigNum+0x6a>
    P_pBigNum->mSignFlag = SIGN_POSITIVE;
 8004bec:	2300      	movs	r3, #0
    P_pBigNum->mNumDigits = (uint16_t) size_tp;
 8004bee:	80ac      	strh	r4, [r5, #4]
    P_pBigNum->mSize = (uint8_t) size_tp;
 8004bf0:	71ac      	strb	r4, [r5, #6]
    P_pBigNum->mSignFlag = SIGN_POSITIVE;
 8004bf2:	71eb      	strb	r3, [r5, #7]
  return WRAP_SUCCESS;
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	e7d6      	b.n	8004ba6 <wrap_uint8_to_BigNum+0xe>
    P_pBigNum->pmDigit = malloc(Psize); /*uin32_t*/
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f011 ff3f 	bl	8016a7c <malloc>
 8004bfe:	6028      	str	r0, [r5, #0]
 8004c00:	e7e2      	b.n	8004bc8 <wrap_uint8_to_BigNum+0x30>
 8004c02:	682a      	ldr	r2, [r5, #0]
          P_pBigNum->pmDigit[size_tp - i - 1U] += P_pArray[ (4U * i) + j] << (8U * (3U - j));
 8004c04:	ea4f 0883 	mov.w	r8, r3, lsl #2
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8004c08:	ebac 0303 	sub.w	r3, ip, r3
 8004c0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
          P_pBigNum->pmDigit[size_tp - i - 1U] += P_pArray[ (4U * i) + j] << (8U * (3U - j));
 8004c10:	2301      	movs	r3, #1
 8004c12:	eb00 0903 	add.w	r9, r0, r3
        if (size_counter <= Psize)
 8004c16:	454e      	cmp	r6, r9
 8004c18:	f8d2 a000 	ldr.w	sl, [r2]
 8004c1c:	db13      	blt.n	8004c46 <wrap_uint8_to_BigNum+0xae>
          P_pBigNum->pmDigit[size_tp - i - 1U] += P_pArray[ (4U * i) + j] << (8U * (3U - j));
 8004c1e:	eb03 0908 	add.w	r9, r3, r8
 8004c22:	44b9      	add	r9, r7
 8004c24:	fb0e fb03 	mul.w	fp, lr, r3
 8004c28:	f819 9c01 	ldrb.w	r9, [r9, #-1]
 8004c2c:	f10b 0b20 	add.w	fp, fp, #32
 8004c30:	fa09 f90b 	lsl.w	r9, r9, fp
 8004c34:	44d1      	add	r9, sl
 8004c36:	f8c2 9000 	str.w	r9, [r2]
 8004c3a:	3301      	adds	r3, #1
      for (j = 0U; j < 4U; j++)
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d1e8      	bne.n	8004c12 <wrap_uint8_to_BigNum+0x7a>
 8004c40:	3004      	adds	r0, #4
 8004c42:	3101      	adds	r1, #1
 8004c44:	e7cf      	b.n	8004be6 <wrap_uint8_to_BigNum+0x4e>
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8004c46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8004c4a:	f8c2 a000 	str.w	sl, [r2]
 8004c4e:	e7f4      	b.n	8004c3a <wrap_uint8_to_BigNum+0xa2>

08004c50 <wrap_import_der_Key_into_psa>:
                                                 psa_key_usage_t P_Psa_Usage,
                                                 psa_algorithm_t  P_Psa_Algorithm,
                                                 psa_key_type_t P_Psa_key_type,
                                                 const uint8_t *P_pDer_pubKey,
                                                 uint32_t P_KeySize)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	461d      	mov	r5, r3
  psa_status_t psa_ret_status;
  psa_key_policy_t key_policy = {0};
 8004c56:	2300      	movs	r3, #0
{
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	4617      	mov	r7, r2
  psa_key_policy_t key_policy = {0};
 8004c5e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004c62:	9303      	str	r3, [sp, #12]

  /* Import key into psa struct*/
  /*Allocate key*/
  psa_ret_status = psa_allocate_key(P_Key_Handle);
 8004c64:	f00e ff8a 	bl	8013b7c <psa_allocate_key>
  if (psa_ret_status == PSA_SUCCESS)
 8004c68:	b980      	cbnz	r0, 8004c8c <wrap_import_der_Key_into_psa+0x3c>
  {
    /*Set algorithm*/
    psa_key_policy_set_usage(&key_policy, P_Psa_Usage, P_Psa_Algorithm);
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	a801      	add	r0, sp, #4
 8004c6e:	463a      	mov	r2, r7
 8004c70:	f00e fea4 	bl	80139bc <psa_key_policy_set_usage>
    psa_ret_status = psa_set_key_policy(*P_Key_Handle, &key_policy);
 8004c74:	a901      	add	r1, sp, #4
 8004c76:	8820      	ldrh	r0, [r4, #0]
 8004c78:	f00e fea3 	bl	80139c2 <psa_set_key_policy>
    if (psa_ret_status == PSA_SUCCESS)
 8004c7c:	b930      	cbnz	r0, 8004c8c <wrap_import_der_Key_into_psa+0x3c>
    {
      /*Import key*/
      psa_ret_status = psa_import_key(*P_Key_Handle,
 8004c7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c82:	4629      	mov	r1, r5
 8004c84:	8820      	ldrh	r0, [r4, #0]
 8004c86:	f00d ffaf 	bl	8012be8 <psa_import_key>
                                      P_Psa_key_type,
                                      P_pDer_pubKey,
                                      P_KeySize);
      if (psa_ret_status == PSA_SUCCESS)
 8004c8a:	b108      	cbz	r0, 8004c90 <wrap_import_der_Key_into_psa+0x40>
      {
        psa_ret_status = RSA_SUCCESS;
      }
      else
      {
        psa_ret_status = RSA_ERR_BAD_PARAMETER;
 8004c8c:	f241 30f0 	movw	r0, #5104	; 0x13f0
  else
  {
    psa_ret_status = RSA_ERR_BAD_PARAMETER;
  }
  return psa_ret_status;
}
 8004c90:	b005      	add	sp, #20
 8004c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c94 <uint8_t_to_mpi>:
{
 8004c94:	b513      	push	{r0, r1, r4, lr}
 8004c96:	4604      	mov	r4, r0
      || (P_pArray == NULL) )
 8004c98:	4608      	mov	r0, r1
 8004c9a:	b189      	cbz	r1, 8004cc0 <uint8_t_to_mpi+0x2c>
  wrap_ret_status = wrap_uint8_to_BigNum(&BigNum, P_pArray, Psize);
 8004c9c:	4668      	mov	r0, sp
 8004c9e:	f7ff ff7b 	bl	8004b98 <wrap_uint8_to_BigNum>
  if (wrap_ret_status == WRAP_SUCCESS)
 8004ca2:	2801      	cmp	r0, #1
 8004ca4:	d10e      	bne.n	8004cc4 <uint8_t_to_mpi+0x30>
  P_pMpi->s = (P_pBigNum->mSignFlag == 0) ? 1 : -1;
 8004ca6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	f04f 33ff 	movne.w	r3, #4294967295
 8004cb4:	6023      	str	r3, [r4, #0]
  P_pMpi->n = P_pBigNum->mSize;
 8004cb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004cba:	6063      	str	r3, [r4, #4]
  P_pMpi->p = P_pBigNum->pmDigit;
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	60a3      	str	r3, [r4, #8]
}
 8004cc0:	b002      	add	sp, #8
 8004cc2:	bd10      	pop	{r4, pc}
    wrap_ret_status = WRAP_FAILURE;
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	e7fb      	b.n	8004cc0 <uint8_t_to_mpi+0x2c>

08004cc8 <ECCinitEC>:
  *             to store the Ellitpic Curve internal values. NOT USED
  * @retval     ECC_SUCCESS: Operation Successful
  * @retval     ECC_ERR_BAD_PARAMETER: otherwise
  */
int32_t ECCinitEC(EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
{
 8004cc8:	b508      	push	{r3, lr}
  int32_t ecc_ret_status = ECC_SUCCESS;
  psa_status_t psa_ret_status;

  /* Initialize MBED crypto library */
  psa_ret_status = psa_crypto_init();
 8004cca:	f00e feb1 	bl	8013a30 <psa_crypto_init>
  if (psa_ret_status != PSA_SUCCESS)
 8004cce:	2800      	cmp	r0, #0
  {
    ecc_ret_status = ECC_ERR_BAD_OPERATION;
  }
  return ecc_ret_status;
}
 8004cd0:	f241 4052 	movw	r0, #5202	; 0x1452
 8004cd4:	bf08      	it	eq
 8004cd6:	2000      	moveq	r0, #0
 8004cd8:	bd08      	pop	{r3, pc}

08004cda <ECCfreeEC>:
  * @retval     ECC_SUCCESS
  */
int32_t ECCfreeEC(EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
{
  return ECC_SUCCESS;
}
 8004cda:	2000      	movs	r0, #0
 8004cdc:	4770      	bx	lr

08004cde <ECCinitPoint>:
  * @retval     ECC_SUCCESS: Operation Successful
  * @retval     ECC_ERR_BAD_PARAMETER: P_ppECPnt == NULL
  * @retval     ERR_MEMORY_FAIL: Not enough memory
  */
int32_t ECCinitPoint(ECpoint_stt **P_ppECPnt, const EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
{
 8004cde:	b538      	push	{r3, r4, r5, lr}
  int32_t ecc_ret_status;

  if (P_ppECPnt == NULL)
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	b1e0      	cbz	r0, 8004d1e <ECCinitPoint+0x40>
  }
  else
  {
    /* Allocation of points, use of malloc,
    because we don't know the maximum number of points*/
    *P_ppECPnt = malloc(sizeof(ECpoint_stt));
 8004ce4:	2010      	movs	r0, #16
 8004ce6:	f011 fec9 	bl	8016a7c <malloc>
 8004cea:	4604      	mov	r4, r0
 8004cec:	6028      	str	r0, [r5, #0]
    if (*P_ppECPnt  == NULL)
 8004cee:	b910      	cbnz	r0, 8004cf6 <ECCinitPoint+0x18>
    {
      ecc_ret_status = ERR_MEMORY_FAIL;
 8004cf0:	f240 30ed 	movw	r0, #1005	; 0x3ed
        }
      }
    }
  }
  return ecc_ret_status;
}
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
      (**P_ppECPnt).pmX = malloc(sizeof(BigNum_stt));
 8004cf6:	2008      	movs	r0, #8
 8004cf8:	f011 fec0 	bl	8016a7c <malloc>
 8004cfc:	6020      	str	r0, [r4, #0]
      if ((**P_ppECPnt).pmX == NULL)
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0f6      	beq.n	8004cf0 <ECCinitPoint+0x12>
        (**P_ppECPnt).pmY = malloc(sizeof(BigNum_stt));
 8004d02:	2008      	movs	r0, #8
 8004d04:	f011 feba 	bl	8016a7c <malloc>
 8004d08:	6060      	str	r0, [r4, #4]
        if ((**P_ppECPnt).pmY == NULL)
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <ECCinitPoint+0x12>
          (**P_ppECPnt).pmZ = malloc(sizeof(BigNum_stt));
 8004d0e:	2008      	movs	r0, #8
 8004d10:	f011 feb4 	bl	8016a7c <malloc>
 8004d14:	60a0      	str	r0, [r4, #8]
          if ((**P_ppECPnt).pmZ == NULL)
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0ea      	beq.n	8004cf0 <ECCinitPoint+0x12>
            ecc_ret_status = ECC_SUCCESS;
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7ea      	b.n	8004cf4 <ECCinitPoint+0x16>
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
 8004d1e:	f241 4054 	movw	r0, #5204	; 0x1454
  return ecc_ret_status;
 8004d22:	e7e7      	b.n	8004cf4 <ECCinitPoint+0x16>

08004d24 <ECCfreePoint>:
  * @retval     ECC_SUCCESS: Operation Successful
  * @retval     ECC_ERR_BAD_PARAMETER P_pECPnt == NULL
  * @retval     ECC_ERR_BAD_CONTEXT  *P_pECPnt == NULL
  */
int32_t ECCfreePoint(ECpoint_stt **P_pECPnt, membuf_stt *P_pMemBuf)
{
 8004d24:	b510      	push	{r4, lr}
  if (P_pECPnt == NULL)
 8004d26:	4604      	mov	r4, r0
 8004d28:	b1d8      	cbz	r0, 8004d62 <ECCfreePoint+0x3e>
  {
    return ECC_ERR_BAD_PARAMETER;
  }
  if (*P_pECPnt == NULL)
 8004d2a:	6803      	ldr	r3, [r0, #0]
 8004d2c:	b1e3      	cbz	r3, 8004d68 <ECCfreePoint+0x44>
  {
    return ECC_ERR_BAD_CONTEXT;
  }

  /*Reset and delete links*/
  free(((**P_pECPnt).pmX)->pmDigit);
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f011 feab 	bl	8016a8c <free>
  free(((**P_pECPnt).pmY)->pmDigit);
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	f011 fea6 	bl	8016a8c <free>
  free((**P_pECPnt).pmX);
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	f011 fea2 	bl	8016a8c <free>
  free((**P_pECPnt).pmY);
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6858      	ldr	r0, [r3, #4]
 8004d4c:	f011 fe9e 	bl	8016a8c <free>
  free((**P_pECPnt).pmZ);
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	6898      	ldr	r0, [r3, #8]
 8004d54:	f011 fe9a 	bl	8016a8c <free>
  free(*P_pECPnt);
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	f011 fe97 	bl	8016a8c <free>

  return ECC_SUCCESS;
 8004d5e:	2000      	movs	r0, #0
}
 8004d60:	bd10      	pop	{r4, pc}
    return ECC_ERR_BAD_PARAMETER;
 8004d62:	f241 4054 	movw	r0, #5204	; 0x1454
 8004d66:	e7fb      	b.n	8004d60 <ECCfreePoint+0x3c>
    return ECC_ERR_BAD_CONTEXT;
 8004d68:	f241 4053 	movw	r0, #5203	; 0x1453
 8004d6c:	e7f8      	b.n	8004d60 <ECCfreePoint+0x3c>

08004d6e <ECCsetPointCoordinate>:
  */
int32_t ECCsetPointCoordinate(ECpoint_stt *P_pECPnt,
                              ECcoordinate_et P_Coordinate,
                              const uint8_t *P_pCoordinateValue,
                              int32_t P_coordinateSize)
{
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	460c      	mov	r4, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
  int32_t wrap_ret_status;
  int32_t ecc_ret_status;

  if ((P_pECPnt == NULL) || (P_pCoordinateValue == NULL))
 8004d76:	b140      	cbz	r0, 8004d8a <ECCsetPointCoordinate+0x1c>
 8004d78:	b139      	cbz	r1, 8004d8a <ECCsetPointCoordinate+0x1c>
  {
    return ECC_ERR_BAD_PARAMETER;
  }

  /* Are we setting the X coordinate ?*/
  if (P_Coordinate == E_ECC_POINT_COORDINATE_X)
 8004d7a:	b94c      	cbnz	r4, 8004d90 <ECCsetPointCoordinate+0x22>
  {
    /*Set X*/
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmX,
 8004d7c:	6800      	ldr	r0, [r0, #0]
 8004d7e:	f7ff ff0b 	bl	8004b98 <wrap_uint8_to_BigNum>
                                              P_pCoordinateValue,
                                              P_coordinateSize);
    if (wrap_ret_status == WRAP_SUCCESS)
 8004d82:	2801      	cmp	r0, #1
 8004d84:	d101      	bne.n	8004d8a <ECCsetPointCoordinate+0x1c>
    {
      ecc_ret_status = ECC_SUCCESS;
 8004d86:	2000      	movs	r0, #0
  {
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
  }

  return ecc_ret_status;
}
 8004d88:	bd10      	pop	{r4, pc}
      ecc_ret_status = ECC_ERR_BAD_PARAMETER;
 8004d8a:	f241 4054 	movw	r0, #5204	; 0x1454
 8004d8e:	e7fb      	b.n	8004d88 <ECCsetPointCoordinate+0x1a>
  else if (P_Coordinate == E_ECC_POINT_COORDINATE_Y)
 8004d90:	2c01      	cmp	r4, #1
 8004d92:	d1fa      	bne.n	8004d8a <ECCsetPointCoordinate+0x1c>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmY,
 8004d94:	6840      	ldr	r0, [r0, #4]
 8004d96:	e7f2      	b.n	8004d7e <ECCsetPointCoordinate+0x10>

08004d98 <ECDSAinitSign>:
  * @retval ECC_ERR_BAD_PARAMETER: P_ppSignature == NULL
  */
int32_t ECDSAinitSign(ECDSAsignature_stt **P_ppSignature, const EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
{
  int32_t ecc_ret_status;
  if (P_ppSignature == NULL)
 8004d98:	b158      	cbz	r0, 8004db2 <ECDSAinitSign+0x1a>
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
  }
  else
  {
    /*Init with static array*/
    *P_ppSignature = &static_ECC_Sign;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <ECDSAinitSign+0x20>)
 8004d9c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004da0:	6002      	str	r2, [r0, #0]
    (**P_ppSignature).pmR = &static_ECDSA_R;
 8004da2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8004da6:	63da      	str	r2, [r3, #60]	; 0x3c
    (**P_ppSignature).pmS = &static_ECDSA_S;
 8004da8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
    ecc_ret_status = ECC_SUCCESS;
 8004dae:	2000      	movs	r0, #0
 8004db0:	4770      	bx	lr
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
 8004db2:	f241 4054 	movw	r0, #5204	; 0x1454
  }
  return ecc_ret_status;
}
 8004db6:	4770      	bx	lr
 8004db8:	20003000 	.word	0x20003000

08004dbc <ECDSAfreeSign>:
  *             stores the ECDSA signature internal values NOT USED
  * @retval     ECC_SUCCESS Operation Successful
  * @retval     ECC_ERR_BAD_PARAMETER: P_pSignature == NULL
  */
int32_t ECDSAfreeSign(ECDSAsignature_stt **P_pSignature, membuf_stt *P_pMemBuf)
{
 8004dbc:	b510      	push	{r4, lr}
  if ((P_pSignature == NULL))
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	b178      	cbz	r0, 8004de2 <ECDSAfreeSign+0x26>
  {
    return ECC_ERR_BAD_PARAMETER;
  }

  /*Free and reset*/
  free((**P_pSignature).pmR->pmDigit);
 8004dc2:	6803      	ldr	r3, [r0, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	f011 fe60 	bl	8016a8c <free>
  free((**P_pSignature).pmS->pmDigit);
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	f011 fe5b 	bl	8016a8c <free>
  (**P_pSignature).pmR = NULL;
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	2000      	movs	r0, #0
  (**P_pSignature).pmS = NULL;
 8004dda:	e9c3 0000 	strd	r0, r0, [r3]
  *P_pSignature = NULL;
 8004dde:	6020      	str	r0, [r4, #0]
  return ECC_SUCCESS;
}
 8004de0:	bd10      	pop	{r4, pc}
    return ECC_ERR_BAD_PARAMETER;
 8004de2:	f241 4054 	movw	r0, #5204	; 0x1454
 8004de6:	e7fb      	b.n	8004de0 <ECDSAfreeSign+0x24>

08004de8 <ECDSAsetSignature>:
  */
int32_t ECDSAsetSignature(ECDSAsignature_stt *P_pSignature,
                          ECDSAsignValues_et P_RorS,
                          const uint8_t *P_pValue,
                          int32_t P_valueSize)
{
 8004de8:	b510      	push	{r4, lr}
 8004dea:	460c      	mov	r4, r1
  uint8_t wrap_ret_status = WRAP_SUCCESS;
  int32_t ecc_ret_status = ECC_SUCCESS;

  if ((P_pValue == NULL) || (P_pSignature == NULL) )
 8004dec:	4611      	mov	r1, r2
 8004dee:	b132      	cbz	r2, 8004dfe <ECDSAsetSignature+0x16>
 8004df0:	b128      	cbz	r0, 8004dfe <ECDSAsetSignature+0x16>
  {
    return ECC_ERR_BAD_PARAMETER;
  }
  /*Are we setting R ?*/
  if (P_RorS == E_ECDSA_SIGNATURE_R_VALUE)
 8004df2:	b93c      	cbnz	r4, 8004e04 <ECDSAsetSignature+0x1c>
  {
    /*Set R*/
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmR, P_pValue, P_valueSize);
 8004df4:	6800      	ldr	r0, [r0, #0]
 8004df6:	461a      	mov	r2, r3
  }
  /*Or S ?*/
  else if (P_RorS == E_ECDSA_SIGNATURE_S_VALUE)
  {
    /*Set S*/
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8004df8:	f7ff fece 	bl	8004b98 <wrap_uint8_to_BigNum>
  }
  else
  {
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
  }
  if (wrap_ret_status == WRAP_FAILURE)
 8004dfc:	b938      	cbnz	r0, 8004e0e <ECDSAsetSignature+0x26>
  {
    ecc_ret_status = ECC_ERR_BAD_PARAMETER;
 8004dfe:	f241 4054 	movw	r0, #5204	; 0x1454
  }
  return ecc_ret_status;
}
 8004e02:	bd10      	pop	{r4, pc}
  else if (P_RorS == E_ECDSA_SIGNATURE_S_VALUE)
 8004e04:	2c01      	cmp	r4, #1
 8004e06:	d1fa      	bne.n	8004dfe <ECDSAsetSignature+0x16>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6840      	ldr	r0, [r0, #4]
 8004e0c:	e7f4      	b.n	8004df8 <ECDSAsetSignature+0x10>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	e7f7      	b.n	8004e02 <ECDSAsetSignature+0x1a>
	...

08004e14 <ECDSAverify>:
int32_t ECDSAverify(const uint8_t      *P_pDigest,
                    int32_t             P_digestSize,
                    const ECDSAsignature_stt   *P_pSignature,
                    const ECDSAverifyCtx_stt *P_pVerifyCtx,
                    membuf_stt *P_pMemBuf)
{
 8004e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e18:	b08b      	sub	sp, #44	; 0x2c
 8004e1a:	461c      	mov	r4, r3
  int8_t wrap_ret_status;
  int32_t ecc_ret_status;
  psa_status_t psa_ret_status;
  psa_status_t psa_ret_status_tp;
  const psa_algorithm_t psa_algorithm = PSA_ALG_ECDSA_BASE;
  int32_t wrap_sign_R_size = 0;
 8004e1c:	2300      	movs	r3, #0
{
 8004e1e:	4689      	mov	r9, r1
 8004e20:	4616      	mov	r6, r2
  int32_t wrap_sign_S_size = 0;
 8004e22:	e9cd 3303 	strd	r3, r3, [sp, #12]
  int32_t wrap_pubKey_x = 0;
  int32_t wrap_pubKey_y = 0;
 8004e26:	e9cd 3305 	strd	r3, r3, [sp, #20]
  uint32_t wrap_pubKey;
  psa_ecc_curve_t wrap_ecc_curve;
  psa_key_handle_t ECDSAkeyHandle = {0};
 8004e2a:	f8ad 300a 	strh.w	r3, [sp, #10]

  if ((P_pDigest == NULL) || (P_pVerifyCtx == NULL) || (P_pSignature == NULL) )
 8004e2e:	4680      	mov	r8, r0
 8004e30:	b920      	cbnz	r0, 8004e3c <ECDSAverify+0x28>
  {
    return ECC_ERR_BAD_PARAMETER;
 8004e32:	f241 4054 	movw	r0, #5204	; 0x1454
  {
    ecc_ret_status = ECC_ERR_BAD_OPERATION;
  }

  return ecc_ret_status;
}
 8004e36:	b00b      	add	sp, #44	; 0x2c
 8004e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((P_pDigest == NULL) || (P_pVerifyCtx == NULL) || (P_pSignature == NULL) )
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d0f8      	beq.n	8004e32 <ECDSAverify+0x1e>
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d0f6      	beq.n	8004e32 <ECDSAverify+0x1e>
  if ((P_pVerifyCtx->pmPubKey == NULL) || (P_pVerifyCtx->pmEC == NULL) )
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f3      	beq.n	8004e32 <ECDSAverify+0x1e>
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <ECDSAverify+0x1e>
  wrap_ret_status = wrap_BigNum_to_uint8(static_ECDSA_Sign,
 8004e50:	4d41      	ldr	r5, [pc, #260]	; (8004f58 <ECDSAverify+0x144>)
 8004e52:	6831      	ldr	r1, [r6, #0]
 8004e54:	aa03      	add	r2, sp, #12
 8004e56:	4628      	mov	r0, r5
 8004e58:	f7ff fe74 	bl	8004b44 <wrap_BigNum_to_uint8>
  if (wrap_ret_status == WRAP_SUCCESS)
 8004e5c:	2801      	cmp	r0, #1
 8004e5e:	d1e8      	bne.n	8004e32 <ECDSAverify+0x1e>
    wrap_ret_status = wrap_BigNum_to_uint8(&static_ECDSA_Sign[wrap_sign_R_size],
 8004e60:	9803      	ldr	r0, [sp, #12]
 8004e62:	6871      	ldr	r1, [r6, #4]
 8004e64:	aa04      	add	r2, sp, #16
 8004e66:	4428      	add	r0, r5
 8004e68:	f7ff fe6c 	bl	8004b44 <wrap_BigNum_to_uint8>
  if (wrap_sign_R_size == 24) /*192 /8*/
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	2b18      	cmp	r3, #24
 8004e70:	d042      	beq.n	8004ef8 <ECDSAverify+0xe4>
  else if (wrap_sign_R_size == 32) /*256 /8 */
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d042      	beq.n	8004efc <ECDSAverify+0xe8>
  else if (wrap_sign_R_size == 48) /*384 /8 */
 8004e76:	2b30      	cmp	r3, #48	; 0x30
 8004e78:	d1db      	bne.n	8004e32 <ECDSAverify+0x1e>
    wrap_ecc_curve = PSA_ECC_CURVE_SECP384R1;
 8004e7a:	2718      	movs	r7, #24
  static_ECDSA_pubKey[0] = 0x04;
 8004e7c:	4837      	ldr	r0, [pc, #220]	; (8004f5c <ECDSAverify+0x148>)
 8004e7e:	4606      	mov	r6, r0
 8004e80:	2304      	movs	r3, #4
 8004e82:	f806 3fb4 	strb.w	r3, [r6, #180]!
                                         P_pVerifyCtx->pmPubKey->pmX,
 8004e86:	6823      	ldr	r3, [r4, #0]
  wrap_ret_status = wrap_BigNum_to_uint8(&static_ECDSA_pubKey[1],
 8004e88:	aa05      	add	r2, sp, #20
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	30b5      	adds	r0, #181	; 0xb5
 8004e8e:	f7ff fe59 	bl	8004b44 <wrap_BigNum_to_uint8>
  if (wrap_ret_status == WRAP_SUCCESS)
 8004e92:	2801      	cmp	r0, #1
 8004e94:	d1cd      	bne.n	8004e32 <ECDSAverify+0x1e>
    wrap_ret_status = wrap_BigNum_to_uint8(&static_ECDSA_pubKey[1 + wrap_pubKey_x],
 8004e96:	9805      	ldr	r0, [sp, #20]
                                           P_pVerifyCtx->pmPubKey->pmY,
 8004e98:	6823      	ldr	r3, [r4, #0]
    wrap_ret_status = wrap_BigNum_to_uint8(&static_ECDSA_pubKey[1 + wrap_pubKey_x],
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	aa06      	add	r2, sp, #24
 8004ea0:	4430      	add	r0, r6
 8004ea2:	f7ff fe4f 	bl	8004b44 <wrap_BigNum_to_uint8>
    wrap_pubKey = wrap_pubKey_x + wrap_pubKey_y + 1U;
 8004ea6:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 8004eaa:	441c      	add	r4, r3
 8004eac:	3401      	adds	r4, #1
  if (wrap_pubKey > ECDSA_PUBKEY_MAXSIZE)
 8004eae:	2c61      	cmp	r4, #97	; 0x61
 8004eb0:	d8bf      	bhi.n	8004e32 <ECDSAverify+0x1e>
  psa_key_policy_t key_policy = {0};
 8004eb2:	2300      	movs	r3, #0
  psa_ret_status = psa_allocate_key(P_Key_Handle);
 8004eb4:	f10d 000a 	add.w	r0, sp, #10
  psa_key_policy_t key_policy = {0};
 8004eb8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
  psa_ret_status = psa_allocate_key(P_Key_Handle);
 8004ebe:	f00e fe5d 	bl	8013b7c <psa_allocate_key>
  if (psa_ret_status == PSA_SUCCESS)
 8004ec2:	b9b0      	cbnz	r0, 8004ef2 <ECDSAverify+0xde>
    psa_key_policy_set_usage(&key_policy, P_Psa_Usage, P_Psa_Algorithm);
 8004ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ec8:	a807      	add	r0, sp, #28
 8004eca:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <ECDSAverify+0x14c>)
 8004ecc:	f00e fd76 	bl	80139bc <psa_key_policy_set_usage>
    psa_ret_status = psa_set_key_policy(*P_Key_Handle, &key_policy);
 8004ed0:	a907      	add	r1, sp, #28
 8004ed2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8004ed6:	f00e fd74 	bl	80139c2 <psa_set_key_policy>
    if (psa_ret_status == PSA_SUCCESS)
 8004eda:	b950      	cbnz	r0, 8004ef2 <ECDSAverify+0xde>
      psa_ret_status = psa_import_key(*P_Key_Handle,
 8004edc:	f047 41c0 	orr.w	r1, r7, #1610612736	; 0x60000000
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	4632      	mov	r2, r6
 8004ee4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8004ee8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8004eec:	f00d fe7c 	bl	8012be8 <psa_import_key>
      if (psa_ret_status != PSA_SUCCESS)
 8004ef0:	b130      	cbz	r0, 8004f00 <ECDSAverify+0xec>
      ecc_ret_status = ECC_ERR_BAD_OPERATION;
 8004ef2:	f241 4052 	movw	r0, #5202	; 0x1452
 8004ef6:	e79e      	b.n	8004e36 <ECDSAverify+0x22>
    wrap_ecc_curve = PSA_ECC_CURVE_SECP192R1;
 8004ef8:	2713      	movs	r7, #19
 8004efa:	e7bf      	b.n	8004e7c <ECDSAverify+0x68>
    wrap_ecc_curve = PSA_ECC_CURVE_SECP256R1;
 8004efc:	2717      	movs	r7, #23
 8004efe:	e7bd      	b.n	8004e7c <ECDSAverify+0x68>
                                           (uint32_t) (wrap_sign_R_size + wrap_sign_S_size) );
 8004f00:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8004f04:	4413      	add	r3, r2
    psa_ret_status = psa_asymmetric_verify(ECDSAkeyHandle,
 8004f06:	e9cd 5300 	strd	r5, r3, [sp]
 8004f0a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8004f0e:	4914      	ldr	r1, [pc, #80]	; (8004f60 <ECDSAverify+0x14c>)
 8004f10:	464b      	mov	r3, r9
 8004f12:	4642      	mov	r2, r8
 8004f14:	f00e fb4a 	bl	80135ac <psa_asymmetric_verify>
 8004f18:	4604      	mov	r4, r0
    psa_ret_status_tp = psa_destroy_key(ECDSAkeyHandle);
 8004f1a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8004f1e:	f00d fe77 	bl	8012c10 <psa_destroy_key>
    if (psa_ret_status_tp == PSA_SUCCESS)
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d1e5      	bne.n	8004ef2 <ECDSAverify+0xde>
      if (psa_ret_status == PSA_ERROR_INVALID_SIGNATURE)
 8004f26:	f114 0f95 	cmn.w	r4, #149	; 0x95
 8004f2a:	d00e      	beq.n	8004f4a <ECDSAverify+0x136>
      else if (psa_ret_status == PSA_ERROR_INSUFFICIENT_MEMORY)
 8004f2c:	f114 0f8d 	cmn.w	r4, #141	; 0x8d
 8004f30:	d00e      	beq.n	8004f50 <ECDSAverify+0x13c>
      else if (psa_ret_status == PSA_ERROR_INVALID_ARGUMENT)
 8004f32:	f114 0f87 	cmn.w	r4, #135	; 0x87
 8004f36:	f43f af7c 	beq.w	8004e32 <ECDSAverify+0x1e>
        ecc_ret_status = ECC_ERR_BAD_CONTEXT;
 8004f3a:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8004f3e:	f241 4353 	movw	r3, #5203	; 0x1453
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	bf18      	it	ne
 8004f46:	4618      	movne	r0, r3
 8004f48:	e775      	b.n	8004e36 <ECDSAverify+0x22>
        ecc_ret_status = SIGNATURE_INVALID;
 8004f4a:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 8004f4e:	e772      	b.n	8004e36 <ECDSAverify+0x22>
        ecc_ret_status = ERR_MEMORY_FAIL;
 8004f50:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8004f54:	e76f      	b.n	8004e36 <ECDSAverify+0x22>
 8004f56:	bf00      	nop
 8004f58:	20003054 	.word	0x20003054
 8004f5c:	20003000 	.word	0x20003000
 8004f60:	10060000 	.word	0x10060000

08004f64 <ECCvalidatePubKey>:
  * @retval ECC_ERR_BAD_PARAMETER One of the input parameter is NULL
  * @retval ECC_ERR_BAD_CONTEXT One of the values inside P_pECctx is invalid
  * @retval ECC_ERR_BAD_OPERATION Default error value
  */
int32_t ECCvalidatePubKey(const ECpoint_stt *pECCpubKey, const EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
{
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	460e      	mov	r6, r1
 8004f68:	b09e      	sub	sp, #120	; 0x78
  mbedtls_mpi X2;
  mbedtls_mpi X3;
  mbedtls_mpi Yc;
  mbedtls_mpi Y;

  if ((pECCpubKey == NULL) || (P_pECctx == NULL) )
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f000 80a0 	beq.w	80050b0 <ECCvalidatePubKey+0x14c>
 8004f70:	2900      	cmp	r1, #0
 8004f72:	f000 809d 	beq.w	80050b0 <ECCvalidatePubKey+0x14c>
  /*Put x in yc^2 = x^3 + ax + b */
  /*if yc == y it is a valid key, otherwise it's not */


  /*init*/
  wrap_ret_status = bignum_to_mpi(&x, pECCpubKey->pmX);
 8004f76:	6805      	ldr	r5, [r0, #0]
      || (P_pBigNum == NULL) )
 8004f78:	b165      	cbz	r5, 8004f94 <ECCvalidatePubKey+0x30>
  P_pMpi->s = (P_pBigNum->mSignFlag == 0) ? 1 : -1;
 8004f7a:	f995 3007 	ldrsb.w	r3, [r5, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	f04f 33ff 	movne.w	r3, #4294967295
 8004f88:	9300      	str	r3, [sp, #0]
  P_pMpi->n = P_pBigNum->mSize;
 8004f8a:	79ab      	ldrb	r3, [r5, #6]
 8004f8c:	9301      	str	r3, [sp, #4]
  P_pMpi->p = P_pBigNum->pmDigit;
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	2501      	movs	r5, #1
  wrap_ret_status &= bignum_to_mpi(&y, pECCpubKey->pmY);
 8004f94:	6844      	ldr	r4, [r0, #4]
      || (P_pBigNum == NULL) )
 8004f96:	b164      	cbz	r4, 8004fb2 <ECCvalidatePubKey+0x4e>
  P_pMpi->s = (P_pBigNum->mSignFlag == 0) ? 1 : -1;
 8004f98:	f994 3007 	ldrsb.w	r3, [r4, #7]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	f04f 33ff 	movne.w	r3, #4294967295
 8004fa6:	9303      	str	r3, [sp, #12]
  P_pMpi->n = P_pBigNum->mSize;
 8004fa8:	79a3      	ldrb	r3, [r4, #6]
 8004faa:	9304      	str	r3, [sp, #16]
  P_pMpi->p = P_pBigNum->pmDigit;
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	2401      	movs	r4, #1
  wrap_ret_status &= uint8_t_to_mpi(&a, P_pECctx->pmA, P_pECctx->mAsize);
 8004fb2:	e9d6 1200 	ldrd	r1, r2, [r6]
 8004fb6:	a806      	add	r0, sp, #24
 8004fb8:	f7ff fe6c 	bl	8004c94 <uint8_t_to_mpi>
  wrap_ret_status &= uint8_t_to_mpi(&b, P_pECctx->pmB, P_pECctx->mBsize);
 8004fbc:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
  wrap_ret_status &= uint8_t_to_mpi(&a, P_pECctx->pmA, P_pECctx->mAsize);
 8004fc0:	4004      	ands	r4, r0
  wrap_ret_status &= uint8_t_to_mpi(&b, P_pECctx->pmB, P_pECctx->mBsize);
 8004fc2:	a809      	add	r0, sp, #36	; 0x24
 8004fc4:	f7ff fe66 	bl	8004c94 <uint8_t_to_mpi>
  wrap_ret_status &= uint8_t_to_mpi(&a, P_pECctx->pmA, P_pECctx->mAsize);
 8004fc8:	402c      	ands	r4, r5
  wrap_ret_status &= uint8_t_to_mpi(&b, P_pECctx->pmB, P_pECctx->mBsize);
 8004fca:	4004      	ands	r4, r0
  wrap_ret_status &= uint8_t_to_mpi(&p, P_pECctx->pmP, P_pECctx->mPsize);
 8004fcc:	e9d6 1204 	ldrd	r1, r2, [r6, #16]
 8004fd0:	a80c      	add	r0, sp, #48	; 0x30
 8004fd2:	f7ff fe5f 	bl	8004c94 <uint8_t_to_mpi>
  if (wrap_ret_status == WRAP_SUCCESS)
 8004fd6:	4204      	tst	r4, r0
 8004fd8:	d067      	beq.n	80050aa <ECCvalidatePubKey+0x146>
  {  
  
    mbedtls_mpi_init(&aX);
 8004fda:	a80f      	add	r0, sp, #60	; 0x3c
 8004fdc:	f006 fa17 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init(&X2);
 8004fe0:	a812      	add	r0, sp, #72	; 0x48
 8004fe2:	f006 fa14 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init(&X3);
 8004fe6:	a815      	add	r0, sp, #84	; 0x54
 8004fe8:	f006 fa11 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init(&Yc);
 8004fec:	a818      	add	r0, sp, #96	; 0x60
 8004fee:	f006 fa0e 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init(&Y);
 8004ff2:	a81b      	add	r0, sp, #108	; 0x6c
 8004ff4:	f006 fa0b 	bl	800b40e <mbedtls_mpi_init>

    /*Compute*/
    ret_status = mbedtls_mpi_mul_mpi(&X2, &x, &x);       /*X2 = x^2*/
 8004ff8:	466a      	mov	r2, sp
 8004ffa:	4669      	mov	r1, sp
 8004ffc:	a812      	add	r0, sp, #72	; 0x48
 8004ffe:	f006 fe3d 	bl	800bc7c <mbedtls_mpi_mul_mpi>
    ret_status += mbedtls_mpi_mul_mpi(&X3, &X2, &x);      /*X3 = x^3 = X2*x*/
 8005002:	466a      	mov	r2, sp
    ret_status = mbedtls_mpi_mul_mpi(&X2, &x, &x);       /*X2 = x^2*/
 8005004:	4604      	mov	r4, r0
    ret_status += mbedtls_mpi_mul_mpi(&X3, &X2, &x);      /*X3 = x^3 = X2*x*/
 8005006:	a912      	add	r1, sp, #72	; 0x48
 8005008:	a815      	add	r0, sp, #84	; 0x54
 800500a:	f006 fe37 	bl	800bc7c <mbedtls_mpi_mul_mpi>
    ret_status += mbedtls_mpi_mul_mpi(&aX, &a, &x);       /*X = a*x*/
 800500e:	466a      	mov	r2, sp
    ret_status += mbedtls_mpi_mul_mpi(&X3, &X2, &x);      /*X3 = x^3 = X2*x*/
 8005010:	4404      	add	r4, r0
    ret_status += mbedtls_mpi_mul_mpi(&aX, &a, &x);       /*X = a*x*/
 8005012:	a906      	add	r1, sp, #24
 8005014:	a80f      	add	r0, sp, #60	; 0x3c
 8005016:	f006 fe31 	bl	800bc7c <mbedtls_mpi_mul_mpi>
    ret_status += mbedtls_mpi_add_mpi(&Yc, &X3, &aX);     /*Yc = X^3+ax*/
 800501a:	aa0f      	add	r2, sp, #60	; 0x3c
    ret_status += mbedtls_mpi_mul_mpi(&aX, &a, &x);       /*X = a*x*/
 800501c:	4404      	add	r4, r0
    ret_status += mbedtls_mpi_add_mpi(&Yc, &X3, &aX);     /*Yc = X^3+ax*/
 800501e:	a915      	add	r1, sp, #84	; 0x54
 8005020:	a818      	add	r0, sp, #96	; 0x60
 8005022:	f006 fdba 	bl	800bb9a <mbedtls_mpi_add_mpi>
    ret_status += mbedtls_mpi_add_mpi(&Yc, &Yc, &b);      /*Yc = X^3+aX+b*/
 8005026:	a918      	add	r1, sp, #96	; 0x60
    ret_status += mbedtls_mpi_add_mpi(&Yc, &X3, &aX);     /*Yc = X^3+ax*/
 8005028:	4404      	add	r4, r0
    ret_status += mbedtls_mpi_add_mpi(&Yc, &Yc, &b);      /*Yc = X^3+aX+b*/
 800502a:	aa09      	add	r2, sp, #36	; 0x24
 800502c:	4608      	mov	r0, r1
 800502e:	f006 fdb4 	bl	800bb9a <mbedtls_mpi_add_mpi>
    ret_status += mbedtls_mpi_mod_mpi(&Yc, &Yc, &p);      /*Yc = Yc mod p*/
 8005032:	a918      	add	r1, sp, #96	; 0x60
    ret_status += mbedtls_mpi_add_mpi(&Yc, &Yc, &b);      /*Yc = X^3+aX+b*/
 8005034:	4404      	add	r4, r0
    ret_status += mbedtls_mpi_mod_mpi(&Yc, &Yc, &p);      /*Yc = Yc mod p*/
 8005036:	aa0c      	add	r2, sp, #48	; 0x30
 8005038:	4608      	mov	r0, r1
 800503a:	f007 f84c 	bl	800c0d6 <mbedtls_mpi_mod_mpi>

    if (ret_status == 0)
 800503e:	42c4      	cmn	r4, r0
 8005040:	d01c      	beq.n	800507c <ECCvalidatePubKey+0x118>
        ecc_ret_status = ECC_ERR_BAD_CONTEXT;
      }
    }
    else
    {
      ecc_ret_status = ECC_ERR_BAD_CONTEXT;
 8005042:	f241 4453 	movw	r4, #5203	; 0x1453
    }
  }
  /*Free all*/
  free(a.p);
 8005046:	9808      	ldr	r0, [sp, #32]
 8005048:	f011 fd20 	bl	8016a8c <free>
  free(b.p);
 800504c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800504e:	f011 fd1d 	bl	8016a8c <free>
  free(p.p);
 8005052:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005054:	f011 fd1a 	bl	8016a8c <free>
  mbedtls_mpi_free(&aX);
 8005058:	a80f      	add	r0, sp, #60	; 0x3c
 800505a:	f006 f9de 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&X2);
 800505e:	a812      	add	r0, sp, #72	; 0x48
 8005060:	f006 f9db 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&X3);
 8005064:	a815      	add	r0, sp, #84	; 0x54
 8005066:	f006 f9d8 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&Yc);
 800506a:	a818      	add	r0, sp, #96	; 0x60
 800506c:	f006 f9d5 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&Y);
 8005070:	a81b      	add	r0, sp, #108	; 0x6c
 8005072:	f006 f9d2 	bl	800b41a <mbedtls_mpi_free>

  return ecc_ret_status;
}
 8005076:	4620      	mov	r0, r4
 8005078:	b01e      	add	sp, #120	; 0x78
 800507a:	bd70      	pop	{r4, r5, r6, pc}
      ret_status = mbedtls_mpi_mul_mpi(&Y, &y, &y);       /*Y = y^2*/
 800507c:	aa03      	add	r2, sp, #12
 800507e:	4611      	mov	r1, r2
 8005080:	a81b      	add	r0, sp, #108	; 0x6c
 8005082:	f006 fdfb 	bl	800bc7c <mbedtls_mpi_mul_mpi>
      ret_status += mbedtls_mpi_mod_mpi(&Y, &Y, &p);      /*Y = Y mod p*/
 8005086:	a91b      	add	r1, sp, #108	; 0x6c
      ret_status = mbedtls_mpi_mul_mpi(&Y, &y, &y);       /*Y = y^2*/
 8005088:	4604      	mov	r4, r0
      ret_status += mbedtls_mpi_mod_mpi(&Y, &Y, &p);      /*Y = Y mod p*/
 800508a:	aa0c      	add	r2, sp, #48	; 0x30
 800508c:	4608      	mov	r0, r1
 800508e:	f007 f822 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
      if (ret_status == 0)
 8005092:	42c4      	cmn	r4, r0
 8005094:	d1d5      	bne.n	8005042 <ECCvalidatePubKey+0xde>
        ret_status = mbedtls_mpi_cmp_mpi(&Yc, &Y);        /*Yc ?= Y */
 8005096:	a91b      	add	r1, sp, #108	; 0x6c
 8005098:	a818      	add	r0, sp, #96	; 0x60
 800509a:	f006 fc87 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        if (ret_status == 0)
 800509e:	2800      	cmp	r0, #0
          ecc_ret_status = ECC_ERR_BAD_PUBLIC_KEY;
 80050a0:	f241 4455 	movw	r4, #5205	; 0x1455
 80050a4:	bf08      	it	eq
 80050a6:	2400      	moveq	r4, #0
 80050a8:	e7cd      	b.n	8005046 <ECCvalidatePubKey+0xe2>
  int32_t ecc_ret_status = ECC_ERR_BAD_OPERATION;
 80050aa:	f241 4452 	movw	r4, #5202	; 0x1452
 80050ae:	e7ca      	b.n	8005046 <ECCvalidatePubKey+0xe2>
    return ECC_ERR_BAD_PARAMETER;
 80050b0:	f241 4454 	movw	r4, #5204	; 0x1454
 80050b4:	e7df      	b.n	8005076 <ECCvalidatePubKey+0x112>
	...

080050b8 <RSA_PKCS1v15_Sign>:
int32_t RSA_PKCS1v15_Sign(const RSAprivKey_stt *P_pPrivKey,
                          const uint8_t *P_pDigest,
                          hashType_et P_hashType,
                          uint8_t *P_pSignature,
                          membuf_stt *P_pMemBuf)
{
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	f2ad 5d8c 	subw	sp, sp, #1420	; 0x58c
 80050c0:	468a      	mov	sl, r1
 80050c2:	9304      	str	r3, [sp, #16]
  psa_status_t psa_ret_status;
  psa_algorithm_t psa_algorithm;
  psa_key_handle_t psa_key_handle = 0;
  uint8_t wrap_hash_size;
  uint8_t *pubExponent;
  uint8_t pubExponent1024[3] = {0x01, 0x00, 0x01}; /*e = 65537 for RSA1024*/
 80050c4:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <RSA_PKCS1v15_Sign+0x1f8>)
{
 80050c6:	4611      	mov	r1, r2
  uint8_t pubExponent1024[3] = {0x01, 0x00, 0x01}; /*e = 65537 for RSA1024*/
 80050c8:	789a      	ldrb	r2, [r3, #2]
 80050ca:	881c      	ldrh	r4, [r3, #0]
 80050cc:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
  uint8_t pubExponent2048[3] = {0x26, 0x04, 0x45};
 80050d0:	f833 2f03 	ldrh.w	r2, [r3, #3]!
  uint8_t pubExponent1024[3] = {0x01, 0x00, 0x01}; /*e = 65537 for RSA1024*/
 80050d4:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  psa_key_handle_t psa_key_handle = 0;
 80050d8:	f04f 0800 	mov.w	r8, #0
  uint8_t pubExponent2048[3] = {0x26, 0x04, 0x45};
 80050dc:	789b      	ldrb	r3, [r3, #2]
  psa_key_handle_t psa_key_handle = 0;
 80050de:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  uint8_t pubExponent2048[3] = {0x26, 0x04, 0x45};
 80050e2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80050e6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  uint8_t DER_privKey[RSA_PRIVKEY_MAXSIZE];
  int32_t wrap_pubExponent_size = 0; /*Bytes*/
  int32_t wrap_signature_lenth = 0;
 80050ea:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  uint8_t wrap_ret_status = 0;
  uint32_t length = 0;
  uint32_t wrap_der_size = sizeof(DER_privKey);

  if ((P_pPrivKey == NULL)
 80050ee:	4605      	mov	r5, r0
 80050f0:	b1a8      	cbz	r0, 800511e <RSA_PKCS1v15_Sign+0x66>
      || (P_pDigest == NULL)
 80050f2:	f1ba 0f00 	cmp.w	sl, #0
 80050f6:	d012      	beq.n	800511e <RSA_PKCS1v15_Sign+0x66>
      || (P_pSignature == NULL))
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	b183      	cbz	r3, 800511e <RSA_PKCS1v15_Sign+0x66>
  {
    return RSA_ERR_BAD_PARAMETER;
  }
  if (P_pPrivKey->mModulusSize > RSA_PUBKEY_MAXSIZE)
 80050fc:	6842      	ldr	r2, [r0, #4]
 80050fe:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8005102:	dc0c      	bgt.n	800511e <RSA_PKCS1v15_Sign+0x66>
  {
    return RSA_ERR_BAD_PARAMETER;
  }
  /*Define algorithm and hash size with hash type*/
  switch (P_hashType)
 8005104:	2901      	cmp	r1, #1
 8005106:	d004      	beq.n	8005112 <RSA_PKCS1v15_Sign+0x5a>
 8005108:	2903      	cmp	r1, #3
 800510a:	f000 80c7 	beq.w	800529c <RSA_PKCS1v15_Sign+0x1e4>
      wrap_hash_size = WRAP_SHA256_SIZE;
      psa_algorithm = PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_256);
      break;
    default:
      /*Not supported Hash*/
      RSA_ret_status = RSA_ERR_UNSUPPORTED_HASH;
 800510e:	f241 38f1 	movw	r8, #5105	; 0x13f1
      break;
  }

  /*Are we doing a 1024 or 2048 RSA ?*/
  switch (P_pPrivKey->mModulusSize)
 8005112:	2a80      	cmp	r2, #128	; 0x80
 8005114:	d006      	beq.n	8005124 <RSA_PKCS1v15_Sign+0x6c>
 8005116:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800511a:	f000 80a8 	beq.w	800526e <RSA_PKCS1v15_Sign+0x1b6>
      wrap_pubExponent_size = (int32_t) sizeof(pubExponent2048);
      break;

    default:
      /*Not Supported*/
      RSA_ret_status = RSA_ERR_BAD_PARAMETER;
 800511e:	f241 38f0 	movw	r8, #5104	; 0x13f0
 8005122:	e09c      	b.n	800525e <RSA_PKCS1v15_Sign+0x1a6>
  switch (P_pPrivKey->mModulusSize)
 8005124:	4e63      	ldr	r6, [pc, #396]	; (80052b4 <RSA_PKCS1v15_Sign+0x1fc>)
 8005126:	2714      	movs	r7, #20
      pubExponent = pubExponent1024;
 8005128:	ac0a      	add	r4, sp, #40	; 0x28
      break;
  }
  
  /*Stop if any unsupported hash or algorithm is used*/
  if (RSA_ret_status != RSA_SUCCESS)
 800512a:	f1b8 0f00 	cmp.w	r8, #0
 800512e:	f040 8096 	bne.w	800525e <RSA_PKCS1v15_Sign+0x1a6>
  {
    return RSA_ret_status;
  }   
    
  /*Fill a DER structure from a psa key*/
  wrap_ret_status = wrap_keypair_rsa_to_der(DER_privKey,
 8005132:	6829      	ldr	r1, [r5, #0]
      || (P_pRsa_Modulus == NULL)
 8005134:	2900      	cmp	r1, #0
 8005136:	d0f2      	beq.n	800511e <RSA_PKCS1v15_Sign+0x66>
  wrap_ret_status = wrap_keypair_rsa_to_der(DER_privKey,
 8005138:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800513c:	9107      	str	r1, [sp, #28]
      || (P_pRsa_PrivExponent == NULL)
 800513e:	f1bb 0f00 	cmp.w	fp, #0
 8005142:	d0ec      	beq.n	800511e <RSA_PKCS1v15_Sign+0x66>
  if (P_Rsa_Modulus_Size < 0
 8005144:	2a00      	cmp	r2, #0
 8005146:	9206      	str	r2, [sp, #24]
 8005148:	dbe9      	blt.n	800511e <RSA_PKCS1v15_Sign+0x66>
  wrap_ret_status = wrap_keypair_rsa_to_der(DER_privKey,
 800514a:	68eb      	ldr	r3, [r5, #12]
      || P_Rsa_PrivExponent_Size < 0
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dbe5      	blt.n	800511e <RSA_PKCS1v15_Sign+0x66>
  mbedtls_mpi_init(&N);
 8005152:	a80f      	add	r0, sp, #60	; 0x3c
  mbedtls_mpi_init(&D);
 8005154:	f10d 0848 	add.w	r8, sp, #72	; 0x48
  mbedtls_mpi_init(&N);
 8005158:	f006 f959 	bl	800b40e <mbedtls_mpi_init>
  mbedtls_mpi_init(&E);
 800515c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
  mbedtls_mpi_init(&D);
 8005160:	4640      	mov	r0, r8
 8005162:	f006 f954 	bl	800b40e <mbedtls_mpi_init>
  mbedtls_mpi_init(&E);
 8005166:	4648      	mov	r0, r9
 8005168:	f006 f951 	bl	800b40e <mbedtls_mpi_init>
  (void)uint8_t_to_mpi(&N, P_pRsa_Modulus, P_Rsa_Modulus_Size);
 800516c:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8005170:	a80f      	add	r0, sp, #60	; 0x3c
 8005172:	f7ff fd8f 	bl	8004c94 <uint8_t_to_mpi>
  (void)uint8_t_to_mpi(&D, P_pRsa_PrivExponent, P_Rsa_PrivExponent_Size);
 8005176:	9b05      	ldr	r3, [sp, #20]
 8005178:	4659      	mov	r1, fp
 800517a:	461a      	mov	r2, r3
 800517c:	4640      	mov	r0, r8
 800517e:	f7ff fd89 	bl	8004c94 <uint8_t_to_mpi>
  (void)uint8_t_to_mpi(&E, P_pRsa_PubExponent, P_Rsa_PubExponent_Size);
 8005182:	4621      	mov	r1, r4
 8005184:	2203      	movs	r2, #3
 8005186:	4648      	mov	r0, r9
 8005188:	f7ff fd84 	bl	8004c94 <uint8_t_to_mpi>
  mbedtls_pk_init(&pk_ctx);
 800518c:	a80d      	add	r0, sp, #52	; 0x34
 800518e:	f00c f9b5 	bl	80114fc <mbedtls_pk_init>
  mbedtls_ret = mbedtls_pk_setup(&pk_ctx, &mbedtls_rsa_info);
 8005192:	4949      	ldr	r1, [pc, #292]	; (80052b8 <RSA_PKCS1v15_Sign+0x200>)
 8005194:	a80d      	add	r0, sp, #52	; 0x34
 8005196:	f00c f9d1 	bl	801153c <mbedtls_pk_setup>
  if (mbedtls_ret == 0)
 800519a:	4604      	mov	r4, r0
 800519c:	2800      	cmp	r0, #0
 800519e:	d16a      	bne.n	8005276 <RSA_PKCS1v15_Sign+0x1be>
    rsa_ctx = mbedtls_pk_rsa(pk_ctx);
 80051a0:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    mbedtls_rsa_init(rsa_ctx, MBEDTLS_RSA_PKCS_V15, 0);
 80051a4:	4602      	mov	r2, r0
 80051a6:	4601      	mov	r1, r0
 80051a8:	4658      	mov	r0, fp
 80051aa:	f00e ffa5 	bl	80140f8 <mbedtls_rsa_init>
    mbedtls_ret = mbedtls_rsa_import(rsa_ctx, &N, NULL, NULL, &D, &E);
 80051ae:	e9cd 8900 	strd	r8, r9, [sp]
 80051b2:	4623      	mov	r3, r4
 80051b4:	4622      	mov	r2, r4
 80051b6:	a90f      	add	r1, sp, #60	; 0x3c
 80051b8:	4658      	mov	r0, fp
 80051ba:	f00e fdcb 	bl	8013d54 <mbedtls_rsa_import>
    if (mbedtls_ret == 0)
 80051be:	4680      	mov	r8, r0
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d15c      	bne.n	800527e <RSA_PKCS1v15_Sign+0x1c6>
      mbedtls_ret = mbedtls_rsa_complete(rsa_ctx);
 80051c4:	4658      	mov	r0, fp
 80051c6:	f00e fe4b 	bl	8013e60 <mbedtls_rsa_complete>
      if (mbedtls_ret == 0)
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d15a      	bne.n	8005284 <RSA_PKCS1v15_Sign+0x1cc>
        *P_plength = (uint32_t) mbedtls_pk_write_key_der(&pk_ctx, P_pDer, P_pDer_size);
 80051ce:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 80051d2:	a918      	add	r1, sp, #96	; 0x60
 80051d4:	a80d      	add	r0, sp, #52	; 0x34
 80051d6:	f00c ff05 	bl	8011fe4 <mbedtls_pk_write_key_der>
        wrap_ret = WRAP_SUCCESS;
 80051da:	f04f 0801 	mov.w	r8, #1
        *P_plength = (uint32_t) mbedtls_pk_write_key_der(&pk_ctx, P_pDer, P_pDer_size);
 80051de:	4604      	mov	r4, r0
  mbedtls_rsa_free(rsa_ctx);
 80051e0:	4658      	mov	r0, fp
 80051e2:	f00f fc55 	bl	8014a90 <mbedtls_rsa_free>
  mbedtls_pk_free(&pk_ctx);
 80051e6:	a80d      	add	r0, sp, #52	; 0x34
 80051e8:	f00c f98c 	bl	8011504 <mbedtls_pk_free>
  mbedtls_mpi_free(&N);
 80051ec:	a80f      	add	r0, sp, #60	; 0x3c
 80051ee:	f006 f914 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&D);
 80051f2:	a812      	add	r0, sp, #72	; 0x48
 80051f4:	f006 f911 	bl	800b41a <mbedtls_mpi_free>
  mbedtls_mpi_free(&E);
 80051f8:	a815      	add	r0, sp, #84	; 0x54
 80051fa:	f006 f90e 	bl	800b41a <mbedtls_mpi_free>
                                            wrap_der_size,
                                            P_pPrivKey->mModulusSize,
                                            P_pPrivKey->mExponentSize,
                                            wrap_pubExponent_size,
                                            &length);
  if (wrap_ret_status == WRAP_SUCCESS)
 80051fe:	f1b8 0f01 	cmp.w	r8, #1
 8005202:	d144      	bne.n	800528e <RSA_PKCS1v15_Sign+0x1d6>
    and the data are written starting at the end of the buffer*/
    psa_ret_status = wrap_import_der_Key_into_psa(&psa_key_handle,
                                                  PSA_KEY_USAGE_SIGN,
                                                  psa_algorithm,
                                                  PSA_KEY_TYPE_RSA_KEYPAIR,
                                                  &DER_privKey[wrap_der_size - length],
 8005204:	f50d 63b1 	add.w	r3, sp, #1416	; 0x588
    psa_ret_status = wrap_import_der_Key_into_psa(&psa_key_handle,
 8005208:	9401      	str	r4, [sp, #4]
                                                  &DER_privKey[wrap_der_size - length],
 800520a:	1b1c      	subs	r4, r3, r4
    psa_ret_status = wrap_import_der_Key_into_psa(&psa_key_handle,
 800520c:	9400      	str	r4, [sp, #0]
 800520e:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <RSA_PKCS1v15_Sign+0x204>)
 8005210:	4632      	mov	r2, r6
 8005212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005216:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 800521a:	f7ff fd19 	bl	8004c50 <wrap_import_der_Key_into_psa>
                                                  length);
    if (psa_ret_status == PSA_SUCCESS)
 800521e:	2800      	cmp	r0, #0
 8005220:	f47f af7d 	bne.w	800511e <RSA_PKCS1v15_Sign+0x66>
    {
      /*Sign*/
      psa_ret_status = psa_asymmetric_sign(psa_key_handle,
 8005224:	ab0c      	add	r3, sp, #48	; 0x30
 8005226:	9302      	str	r3, [sp, #8]
 8005228:	686b      	ldr	r3, [r5, #4]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8005234:	463b      	mov	r3, r7
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	f00e f8d9 	bl	80133f0 <psa_asymmetric_sign>
                                           wrap_hash_size,
                                           P_pSignature,
                                           (uint32_t) P_pPrivKey->mModulusSize,
                                           (size_t *)&wrap_signature_lenth);

      if (psa_ret_status == PSA_ERROR_INSUFFICIENT_MEMORY)
 800523e:	f110 0f8d 	cmn.w	r0, #141	; 0x8d
 8005242:	d021      	beq.n	8005288 <RSA_PKCS1v15_Sign+0x1d0>
        RSA_ret_status =  RSA_SUCCESS;
      }
      /* In case of other return status*/
      else
      {
        RSA_ret_status = RSA_ERR_BAD_PARAMETER;
 8005244:	2800      	cmp	r0, #0
 8005246:	f241 38f0 	movw	r8, #5104	; 0x13f0
 800524a:	bf08      	it	eq
 800524c:	f04f 0800 	moveq.w	r8, #0
      }

      /*We won't be able to reuse the key, so we destroy it*/
      psa_ret_status = psa_destroy_key(psa_key_handle);
 8005250:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8005254:	f00d fcdc 	bl	8012c10 <psa_destroy_key>
      if (psa_ret_status != PSA_SUCCESS)
 8005258:	2800      	cmp	r0, #0
 800525a:	f47f af60 	bne.w	800511e <RSA_PKCS1v15_Sign+0x66>
  else
  {
    RSA_ret_status = RSA_ERR_BAD_PARAMETER;
  }
  return RSA_ret_status;
}
 800525e:	4640      	mov	r0, r8
 8005260:	f20d 5d8c 	addw	sp, sp, #1420	; 0x58c
 8005264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      wrap_hash_size = WRAP_SHA256_SIZE;
 8005268:	2720      	movs	r7, #32
      psa_algorithm = PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_256);
 800526a:	4e15      	ldr	r6, [pc, #84]	; (80052c0 <RSA_PKCS1v15_Sign+0x208>)
 800526c:	e75c      	b.n	8005128 <RSA_PKCS1v15_Sign+0x70>
  switch (P_pPrivKey->mModulusSize)
 800526e:	2714      	movs	r7, #20
 8005270:	4e10      	ldr	r6, [pc, #64]	; (80052b4 <RSA_PKCS1v15_Sign+0x1fc>)
      pubExponent = pubExponent2048;
 8005272:	ac0b      	add	r4, sp, #44	; 0x2c
 8005274:	e759      	b.n	800512a <RSA_PKCS1v15_Sign+0x72>
  uint32_t length = 0;
 8005276:	2400      	movs	r4, #0
  mbedtls_rsa_context *rsa_ctx = NULL;
 8005278:	46a3      	mov	fp, r4
        wrap_ret = WRAP_FAILURE;
 800527a:	46a0      	mov	r8, r4
 800527c:	e7b0      	b.n	80051e0 <RSA_PKCS1v15_Sign+0x128>
      wrap_ret = WRAP_BAD_KEY;
 800527e:	f04f 0802 	mov.w	r8, #2
 8005282:	e7ad      	b.n	80051e0 <RSA_PKCS1v15_Sign+0x128>
  uint32_t length = 0;
 8005284:	4644      	mov	r4, r8
 8005286:	e7f8      	b.n	800527a <RSA_PKCS1v15_Sign+0x1c2>
        RSA_ret_status =  ERR_MEMORY_FAIL;
 8005288:	f240 38ed 	movw	r8, #1005	; 0x3ed
 800528c:	e7e0      	b.n	8005250 <RSA_PKCS1v15_Sign+0x198>
  else if (wrap_ret_status == WRAP_BAD_KEY)
 800528e:	f1b8 0f02 	cmp.w	r8, #2
 8005292:	f47f af44 	bne.w	800511e <RSA_PKCS1v15_Sign+0x66>
    RSA_ret_status = RSA_ERR_BAD_KEY;
 8005296:	f241 38ef 	movw	r8, #5103	; 0x13ef
 800529a:	e7e0      	b.n	800525e <RSA_PKCS1v15_Sign+0x1a6>
  switch (P_pPrivKey->mModulusSize)
 800529c:	2a80      	cmp	r2, #128	; 0x80
 800529e:	d0e3      	beq.n	8005268 <RSA_PKCS1v15_Sign+0x1b0>
 80052a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80052a4:	f47f af3b 	bne.w	800511e <RSA_PKCS1v15_Sign+0x66>
      pubExponent = pubExponent2048;
 80052a8:	ac0b      	add	r4, sp, #44	; 0x2c
      wrap_hash_size = WRAP_SHA256_SIZE;
 80052aa:	2720      	movs	r7, #32
      psa_algorithm = PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_256);
 80052ac:	4e04      	ldr	r6, [pc, #16]	; (80052c0 <RSA_PKCS1v15_Sign+0x208>)
 80052ae:	e740      	b.n	8005132 <RSA_PKCS1v15_Sign+0x7a>
 80052b0:	080179ba 	.word	0x080179ba
 80052b4:	10020005 	.word	0x10020005
 80052b8:	08019610 	.word	0x08019610
 80052bc:	70010000 	.word	0x70010000
 80052c0:	10020009 	.word	0x10020009

080052c4 <RSA_PKCS1v15_Verify>:
int32_t RSA_PKCS1v15_Verify(const RSApubKey_stt *P_pPubKey,
                            const uint8_t *P_pDigest,
                            hashType_et P_hashType,
                            const uint8_t *P_pSignature,
                            membuf_stt *P_pMemBuf)
{
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80052cc:	e9cd 1306 	strd	r1, r3, [sp, #24]
  int32_t RSA_ret_status = RSA_SUCCESS;
  uint32_t pwrap_der_size = 0;
  psa_status_t psa_ret_status;
  psa_status_t psa_ret_status_tp;
  psa_algorithm_t psa_algorithm;
  psa_key_handle_t psa_key_handle = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  uint8_t wrap_ret_status;
  uint8_t wrap_hash_size;
  uint8_t DER_pubKey[RSA_PUBKEY_MAXSIZE];

  if ((P_pPubKey == NULL)
 80052d6:	4607      	mov	r7, r0
 80052d8:	2800      	cmp	r0, #0
 80052da:	f000 80bf 	beq.w	800545c <RSA_PKCS1v15_Verify+0x198>
      || (P_pDigest == NULL)
 80052de:	2900      	cmp	r1, #0
 80052e0:	f000 80bc 	beq.w	800545c <RSA_PKCS1v15_Verify+0x198>
      || (P_pSignature == NULL))
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80b8 	beq.w	800545c <RSA_PKCS1v15_Verify+0x198>
  {
    return RSA_ERR_BAD_PARAMETER;
  }
  if (P_pPubKey->mModulusSize > RSA_PUBKEY_MAXSIZE)
 80052ec:	6846      	ldr	r6, [r0, #4]
 80052ee:	f5b6 7f04 	cmp.w	r6, #528	; 0x210
 80052f2:	f300 80b3 	bgt.w	800545c <RSA_PKCS1v15_Verify+0x198>
  {
    return RSA_ERR_BAD_PARAMETER;
  }

  switch (P_hashType)
 80052f6:	2a01      	cmp	r2, #1
 80052f8:	d005      	beq.n	8005306 <RSA_PKCS1v15_Verify+0x42>
 80052fa:	2a03      	cmp	r2, #3
 80052fc:	f000 80b4 	beq.w	8005468 <RSA_PKCS1v15_Verify+0x1a4>
 8005300:	f241 30f1 	movw	r0, #5105	; 0x13f1
 8005304:	e0ac      	b.n	8005460 <RSA_PKCS1v15_Verify+0x19c>
  {
    /*Supported Hash*/
    case (E_SHA1):
      wrap_hash_size = WRAP_SHA1_SIZE;
 8005306:	2314      	movs	r3, #20
      psa_algorithm = PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_1);
 8005308:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80054c8 <RSA_PKCS1v15_Verify+0x204>
      wrap_hash_size = WRAP_SHA1_SIZE;
 800530c:	9305      	str	r3, [sp, #20]
  {
    return RSA_ret_status;
  }
  
  /*Change the key to a DER format*/
  wrap_ret_status = wrap_pubkey_rsa_to_der(DER_pubKey,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9302      	str	r3, [sp, #8]
      || (P_pRsa_Modulus == NULL)
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 80a2 	beq.w	800545c <RSA_PKCS1v15_Verify+0x198>
  wrap_ret_status = wrap_pubkey_rsa_to_der(DER_pubKey,
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	9303      	str	r3, [sp, #12]
      || (P_pRsa_PubExponent == NULL) )
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 809d 	beq.w	800545c <RSA_PKCS1v15_Verify+0x198>
  if ((P_Rsa_Modulus_Size < 0) || (P_Rsa_PubExponent_Size < 0) )
 8005322:	2e00      	cmp	r6, #0
 8005324:	f2c0 809a 	blt.w	800545c <RSA_PKCS1v15_Verify+0x198>
  wrap_ret_status = wrap_pubkey_rsa_to_der(DER_pubKey,
 8005328:	f8d7 900c 	ldr.w	r9, [r7, #12]
  if ((P_Rsa_Modulus_Size < 0) || (P_Rsa_PubExponent_Size < 0) )
 800532c:	f1b9 0f00 	cmp.w	r9, #0
 8005330:	f2c0 8094 	blt.w	800545c <RSA_PKCS1v15_Verify+0x198>
 8005334:	4634      	mov	r4, r6
 8005336:	2300      	movs	r3, #0
 8005338:	b2da      	uxtb	r2, r3
 800533a:	9208      	str	r2, [sp, #32]
 800533c:	1c5a      	adds	r2, r3, #1
  while (temp_modulus_size > 0)
 800533e:	2c00      	cmp	r4, #0
 8005340:	f040 8097 	bne.w	8005472 <RSA_PKCS1v15_Verify+0x1ae>
 8005344:	4648      	mov	r0, r9
 8005346:	b2e2      	uxtb	r2, r4
 8005348:	9204      	str	r2, [sp, #16]
 800534a:	1c62      	adds	r2, r4, #1
  while (temp_pubexponent_size > 0)
 800534c:	2800      	cmp	r0, #0
 800534e:	f040 8093 	bne.w	8005478 <RSA_PKCS1v15_Verify+0x1b4>
  wrap_out_size = (uint32_t) (P_Rsa_Modulus_Size + P_Rsa_PubExponent_Size + DER_NB_PUB_TYPE \
 8005352:	eb06 0209 	add.w	r2, r6, r9
                  + DER_NB_PUB_SIZE + (int32_t) wrap_bytes_modulus + (int32_t) wrap_bytes_exponent + 4);
 8005356:	3206      	adds	r2, #6
 8005358:	9904      	ldr	r1, [sp, #16]
 800535a:	fa52 f283 	uxtab	r2, r2, r3
 800535e:	440a      	add	r2, r1
 8005360:	3204      	adds	r2, #4
  if (wrap_out_size > (uint32_t)RSA_PUBKEY_MAXSIZE)
 8005362:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8005366:	dc79      	bgt.n	800545c <RSA_PKCS1v15_Verify+0x198>
  wrap_out_size = (uint32_t) (P_Rsa_Modulus_Size + P_Rsa_PubExponent_Size + DER_NB_PUB_TYPE \
 8005368:	4615      	mov	r5, r2
 800536a:	b2c1      	uxtb	r1, r0
 800536c:	3001      	adds	r0, #1
  while (temp_output_size > 0U)
 800536e:	2d00      	cmp	r5, #0
 8005370:	f040 8085 	bne.w	800547e <RSA_PKCS1v15_Verify+0x1ba>
 8005374:	1f10      	subs	r0, r2, #4
  P_pDer[0] = 0x30;
 8005376:	ad0c      	add	r5, sp, #48	; 0x30
  wrap_out_size = wrap_out_size - 4U + wrap_bytes_out;
 8005378:	1808      	adds	r0, r1, r0
 800537a:	9009      	str	r0, [sp, #36]	; 0x24
  P_pDer[0] = 0x30;
 800537c:	2030      	movs	r0, #48	; 0x30
 800537e:	7028      	strb	r0, [r5, #0]
 8005380:	f101 0e02 	add.w	lr, r1, #2
  P_pDer[1] = wrap_bytes_out + (uint8_t)0x80; /*Number of bytes of total der key*/
 8005384:	f1a1 0080 	sub.w	r0, r1, #128	; 0x80
 8005388:	f10d 0a32 	add.w	sl, sp, #50	; 0x32
 800538c:	7068      	strb	r0, [r5, #1]
 800538e:	eb05 0c0e 	add.w	ip, r5, lr
    P_pDer[1U + i] = (wrap_out_size - 2U - wrap_bytes_out) >> (8 * (wrap_bytes_out - i));
 8005392:	3a06      	subs	r2, #6
 8005394:	eb0a 0b01 	add.w	fp, sl, r1
  for (i = wrap_bytes_out; i > 0; i--)
 8005398:	45d4      	cmp	ip, sl
 800539a:	d172      	bne.n	8005482 <RSA_PKCS1v15_Verify+0x1be>
  P_pDer[2U + wrap_bytes_out] = 0x02; /*INTEGER*/
 800539c:	2202      	movs	r2, #2
 800539e:	f805 200e 	strb.w	r2, [r5, lr]
  P_pDer[3U + wrap_bytes_out] = wrap_bytes_modulus + (uint8_t)0x80; /*Number of bytes of datas*/
 80053a2:	9a08      	ldr	r2, [sp, #32]
 80053a4:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80053a8:	3a80      	subs	r2, #128	; 0x80
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	5442      	strb	r2, [r0, r1]
 80053ae:	1d1a      	adds	r2, r3, #4
 80053b0:	a80c      	add	r0, sp, #48	; 0x30
 80053b2:	440a      	add	r2, r1
 80053b4:	4402      	add	r2, r0
 80053b6:	1d28      	adds	r0, r5, #4
 80053b8:	eb00 0e01 	add.w	lr, r0, r1
    P_pDer[3U + wrap_bytes_out + i] = P_Rsa_Modulus_Size >> (8U * (wrap_bytes_modulus - i));
 80053bc:	4418      	add	r0, r3
 80053be:	4408      	add	r0, r1
  for (i = wrap_bytes_modulus; i > 0U; i--)
 80053c0:	4572      	cmp	r2, lr
 80053c2:	d166      	bne.n	8005492 <RSA_PKCS1v15_Verify+0x1ce>
  (void)memcpy(&P_pDer[4U + wrap_bytes_out + wrap_bytes_modulus],
 80053c4:	eb01 0a03 	add.w	sl, r1, r3
 80053c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80053cc:	f10a 0004 	add.w	r0, sl, #4
 80053d0:	4632      	mov	r2, r6
 80053d2:	9902      	ldr	r1, [sp, #8]
 80053d4:	4458      	add	r0, fp
 80053d6:	f011 fb70 	bl	8016aba <memcpy>
  wrap_pos_buffer = 4U + wrap_bytes_out + wrap_bytes_modulus + P_Rsa_Modulus_Size;
 80053da:	eb0a 0106 	add.w	r1, sl, r6
 80053de:	1d08      	adds	r0, r1, #4
  P_pDer[wrap_pos_buffer] = 0x02; /*INTEGER*/
 80053e0:	2302      	movs	r3, #2
 80053e2:	f80b 3000 	strb.w	r3, [fp, r0]
  P_pDer[1U + wrap_pos_buffer] = wrap_bytes_exponent + (uint8_t)0x80; /*Number of bytes of datas*/
 80053e6:	9b04      	ldr	r3, [sp, #16]
 80053e8:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 80053ec:	b2e4      	uxtb	r4, r4
 80053ee:	3b80      	subs	r3, #128	; 0x80
 80053f0:	5453      	strb	r3, [r2, r1]
 80053f2:	3506      	adds	r5, #6
 80053f4:	1da2      	adds	r2, r4, #6
 80053f6:	440a      	add	r2, r1
 80053f8:	eb05 0c01 	add.w	ip, r5, r1
    P_pDer[1U + wrap_pos_buffer + i] = P_Rsa_PubExponent_Size >>( 8 * (wrap_bytes_exponent - i));
 80053fc:	4425      	add	r5, r4
 80053fe:	445a      	add	r2, fp
 8005400:	4429      	add	r1, r5
  for (i = wrap_bytes_exponent; i > 0U; i--)
 8005402:	4594      	cmp	ip, r2
 8005404:	d14e      	bne.n	80054a4 <RSA_PKCS1v15_Verify+0x1e0>
  (void)memcpy(&P_pDer[2U + wrap_pos_buffer + wrap_bytes_exponent],
 8005406:	3402      	adds	r4, #2
 8005408:	4420      	add	r0, r4
 800540a:	464a      	mov	r2, r9
 800540c:	9903      	ldr	r1, [sp, #12]
 800540e:	4458      	add	r0, fp
 8005410:	f011 fb53 	bl	8016aba <memcpy>
                                           P_pPubKey->mModulusSize,
                                           P_pPubKey->mExponentSize);
  if (wrap_ret_status == WRAP_SUCCESS)
  {
    /*Import the key into psa*/
    psa_ret_status = wrap_import_der_Key_into_psa(&psa_key_handle,
 8005414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005416:	4642      	mov	r2, r8
 8005418:	e9cd b300 	strd	fp, r3, [sp]
 800541c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <RSA_PKCS1v15_Verify+0x200>)
 8005422:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8005426:	f7ff fc13 	bl	8004c50 <wrap_import_der_Key_into_psa>
                                                  PSA_KEY_USAGE_VERIFY,
                                                  psa_algorithm,
                                                  PSA_KEY_TYPE_RSA_PUBLIC_KEY,
                                                  DER_pubKey,
                                                  pwrap_der_size);
    if (psa_ret_status == RSA_SUCCESS)
 800542a:	b9b8      	cbnz	r0, 800545c <RSA_PKCS1v15_Verify+0x198>
    {
      /*Verify*/
      psa_ret_status = psa_asymmetric_verify(psa_key_handle,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	9b07      	ldr	r3, [sp, #28]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8005438:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800543c:	4641      	mov	r1, r8
 800543e:	f00e f8b5 	bl	80135ac <psa_asymmetric_verify>
 8005442:	4604      	mov	r4, r0
                                             wrap_hash_size,
                                             P_pSignature,
                                             (uint32_t) P_pPubKey->mModulusSize);

      /*We won't be able to reuse the key, so we destroy it*/
      psa_ret_status_tp = psa_destroy_key(psa_key_handle);
 8005444:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8005448:	f00d fbe2 	bl	8012c10 <psa_destroy_key>
      if (psa_ret_status_tp == PSA_SUCCESS)
 800544c:	b930      	cbnz	r0, 800545c <RSA_PKCS1v15_Verify+0x198>
      {
        if (psa_ret_status == PSA_ERROR_INVALID_SIGNATURE)
 800544e:	f114 0f95 	cmn.w	r4, #149	; 0x95
 8005452:	d02e      	beq.n	80054b2 <RSA_PKCS1v15_Verify+0x1ee>
        {
          RSA_ret_status = SIGNATURE_INVALID;
        }
        else if (psa_ret_status == PSA_ERROR_INSUFFICIENT_MEMORY)
 8005454:	f114 0f8d 	cmn.w	r4, #141	; 0x8d
 8005458:	d02e      	beq.n	80054b8 <RSA_PKCS1v15_Verify+0x1f4>
        else if (psa_ret_status == PSA_ERROR_INVALID_ARGUMENT)
        {
          RSA_ret_status = RSA_ERR_BAD_PARAMETER;
        }
        /*Success*/
        else if (psa_ret_status == PSA_SUCCESS)
 800545a:	b384      	cbz	r4, 80054be <RSA_PKCS1v15_Verify+0x1fa>
          RSA_ret_status =  SIGNATURE_VALID;
        }
        /* In case of other return status*/
        else
        {
          RSA_ret_status = RSA_ERR_BAD_PARAMETER;
 800545c:	f241 30f0 	movw	r0, #5104	; 0x13f0
  else
  {
    RSA_ret_status = RSA_ERR_BAD_PARAMETER;
  }
  return RSA_ret_status;
}
 8005460:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      wrap_hash_size = WRAP_SHA256_SIZE;
 8005468:	2320      	movs	r3, #32
 800546a:	9305      	str	r3, [sp, #20]
      psa_algorithm = PSA_ALG_RSA_PKCS1V15_SIGN(PSA_ALG_SHA_256);
 800546c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80054cc <RSA_PKCS1v15_Verify+0x208>
 8005470:	e74d      	b.n	800530e <RSA_PKCS1v15_Verify+0x4a>
    temp_modulus_size = temp_modulus_size >> 8U;
 8005472:	1224      	asrs	r4, r4, #8
 8005474:	4613      	mov	r3, r2
 8005476:	e75f      	b.n	8005338 <RSA_PKCS1v15_Verify+0x74>
    temp_pubexponent_size = temp_pubexponent_size >> 8U;
 8005478:	1200      	asrs	r0, r0, #8
 800547a:	4614      	mov	r4, r2
 800547c:	e763      	b.n	8005346 <RSA_PKCS1v15_Verify+0x82>
    temp_output_size = temp_output_size >> 8U;
 800547e:	0a2d      	lsrs	r5, r5, #8
 8005480:	e773      	b.n	800536a <RSA_PKCS1v15_Verify+0xa6>
    P_pDer[1U + i] = (wrap_out_size - 2U - wrap_bytes_out) >> (8 * (wrap_bytes_out - i));
 8005482:	ebab 000c 	sub.w	r0, fp, ip
 8005486:	00c0      	lsls	r0, r0, #3
 8005488:	fa22 f000 	lsr.w	r0, r2, r0
 800548c:	f80c 0d01 	strb.w	r0, [ip, #-1]!
 8005490:	e782      	b.n	8005398 <RSA_PKCS1v15_Verify+0xd4>
    P_pDer[3U + wrap_bytes_out + i] = P_Rsa_Modulus_Size >> (8U * (wrap_bytes_modulus - i));
 8005492:	eba0 0c02 	sub.w	ip, r0, r2
 8005496:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800549a:	fa46 fc0c 	asr.w	ip, r6, ip
 800549e:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80054a2:	e78d      	b.n	80053c0 <RSA_PKCS1v15_Verify+0xfc>
    P_pDer[1U + wrap_pos_buffer + i] = P_Rsa_PubExponent_Size >>( 8 * (wrap_bytes_exponent - i));
 80054a4:	1a8b      	subs	r3, r1, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	fa49 f303 	asr.w	r3, r9, r3
 80054ac:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80054b0:	e7a7      	b.n	8005402 <RSA_PKCS1v15_Verify+0x13e>
          RSA_ret_status = SIGNATURE_INVALID;
 80054b2:	f44f 707b 	mov.w	r0, #1004	; 0x3ec
 80054b6:	e7d3      	b.n	8005460 <RSA_PKCS1v15_Verify+0x19c>
          RSA_ret_status = ERR_MEMORY_FAIL;
 80054b8:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80054bc:	e7d0      	b.n	8005460 <RSA_PKCS1v15_Verify+0x19c>
          RSA_ret_status =  SIGNATURE_VALID;
 80054be:	f240 30eb 	movw	r0, #1003	; 0x3eb
 80054c2:	e7cd      	b.n	8005460 <RSA_PKCS1v15_Verify+0x19c>
 80054c4:	60010000 	.word	0x60010000
 80054c8:	10020005 	.word	0x10020005
 80054cc:	10020009 	.word	0x10020009

080054d0 <KMS_InitBufferAlloc>:
{
  int32_t i;

  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE ; i++)
  {
    ptKeyValBuffer[i][0] = 0;
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <KMS_InitBufferAlloc+0x34>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
    ptKeyValBufferState[i] = 0;
 80054d6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    ptKeyValBuffer[i][0] = 0;
 80054da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    ptKeyValBufferState[i] = 0;
 80054de:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
    ptKeyValBuffer[i][0] = 0;
 80054e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ptKeyValBufferState[i] = 0;
 80054e6:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
    ptKeyValBuffer[i][0] = 0;
 80054ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ptKeyValBufferState[i] = 0;
 80054ee:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
    ptKeyValBuffer[i][0] = 0;
 80054f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ptKeyValBufferState[i] = 0;
 80054f6:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
  }
  vFlagInitBufferDone = KMS_ALLOC_BUFFER_DONE;
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <KMS_InitBufferAlloc+0x38>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20003118 	.word	0x20003118
 8005508:	200020c8 	.word	0x200020c8

0800550c <KMS_FinalizeBufferAlloc>:
/**
  * @brief  This function clean up the structures used to manage key buffer allocation
  *         It is called from KMS_Finalize()
  */
void KMS_FinalizeBufferAlloc(void)
{
 800550c:	4a09      	ldr	r2, [pc, #36]	; (8005534 <KMS_FinalizeBufferAlloc+0x28>)
  int32_t i;
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE ; i++)
 800550e:	2300      	movs	r3, #0
{
 8005510:	b510      	push	{r4, lr}
  {

    ptKeyValBufferState[i] = 0;
 8005512:	4618      	mov	r0, r3
 8005514:	f502 7440 	add.w	r4, r2, #768	; 0x300
 8005518:	5518      	strb	r0, [r3, r4]
    uint32_t j;
    /* We clean-up the buffer containing the keys (for security reasons) */
    for (j = 0U; j < KMS_SIZE_AES_KEY; j++)
 800551a:	2100      	movs	r1, #0
    {
      ptKeyValBuffer[i][j] = 0U;
 800551c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    for (j = 0U; j < KMS_SIZE_AES_KEY; j++)
 8005520:	3101      	adds	r1, #1
 8005522:	2920      	cmp	r1, #32
 8005524:	d1fa      	bne.n	800551c <KMS_FinalizeBufferAlloc+0x10>
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE ; i++)
 8005526:	3301      	adds	r3, #1
 8005528:	2b05      	cmp	r3, #5
 800552a:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800552e:	d1f3      	bne.n	8005518 <KMS_FinalizeBufferAlloc+0xc>
    }

  }
}
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	20003118 	.word	0x20003118

08005538 <KMS_AllocKey>:
{
  int32_t i;
  (void)(size); /* PArameter for future use */

  /* The buffer alloc has not be initialized */
  if (vFlagInitBufferDone != KMS_ALLOC_BUFFER_DONE)
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <KMS_AllocKey+0x2c>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10f      	bne.n	8005560 <KMS_AllocKey+0x28>
    return NULL;
  }

  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
  {
    if (ptKeyValBufferState[i] == 0U)
 8005540:	4809      	ldr	r0, [pc, #36]	; (8005568 <KMS_AllocKey+0x30>)
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
 8005542:	2300      	movs	r3, #0
    if (ptKeyValBufferState[i] == 0U)
 8005544:	f500 7240 	add.w	r2, r0, #768	; 0x300
 8005548:	5c99      	ldrb	r1, [r3, r2]
 800554a:	b931      	cbnz	r1, 800555a <KMS_AllocKey+0x22>
    {
      ptKeyValBufferState[i] = 1U;
 800554c:	18c2      	adds	r2, r0, r3
 800554e:	2101      	movs	r1, #1
 8005550:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
      return ((void *)ptKeyValBuffer[i]) ;
 8005554:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8005558:	4770      	bx	lr
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
 800555a:	3301      	adds	r3, #1
 800555c:	2b05      	cmp	r3, #5
 800555e:	d1f3      	bne.n	8005548 <KMS_AllocKey+0x10>
    return NULL;
 8005560:	2000      	movs	r0, #0
    }
  }
  return NULL;
}
 8005562:	4770      	bx	lr
 8005564:	200020c8 	.word	0x200020c8
 8005568:	20003118 	.word	0x20003118

0800556c <encrypt_decrypt_init>:
{
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	4690      	mov	r8, r2
  if (pMechanism->mechanism == CKM_AES_CBC)
 8005572:	680a      	ldr	r2, [r1, #0]
{
 8005574:	469a      	mov	sl, r3
  if (pMechanism->mechanism == CKM_AES_CBC)
 8005576:	f241 0382 	movw	r3, #4226	; 0x1082
 800557a:	429a      	cmp	r2, r3
{
 800557c:	b085      	sub	sp, #20
 800557e:	4607      	mov	r7, r0
 8005580:	460e      	mov	r6, r1
  if (pMechanism->mechanism == CKM_AES_CBC)
 8005582:	f000 81c2 	beq.w	800590a <encrypt_decrypt_init+0x39e>
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 8005586:	f640 451e 	movw	r5, #3102	; 0xc1e
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 800558a:	2406      	movs	r4, #6
  if (pMechanism->mechanism == CKM_AES_ECB)
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	f241 0381 	movw	r3, #4225	; 0x1081
 8005592:	429a      	cmp	r2, r3
 8005594:	d151      	bne.n	800563a <encrypt_decrypt_init+0xce>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 8005596:	48c0      	ldr	r0, [pc, #768]	; (8005898 <encrypt_decrypt_init+0x32c>)
 8005598:	f107 39ff 	add.w	r9, r7, #4294967295
 800559c:	2328      	movs	r3, #40	; 0x28
 800559e:	fb03 0309 	mla	r3, r3, r9, r0
 80055a2:	4683      	mov	fp, r0
 80055a4:	69d9      	ldr	r1, [r3, #28]
 80055a6:	2900      	cmp	r1, #0
 80055a8:	f040 81b8 	bne.w	800591c <encrypt_decrypt_init+0x3b0>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 80055ac:	e9c3 2806 	strd	r2, r8, [r3, #24]
    pkms_object = KMS_Objects_GetPointer(hKey);
 80055b0:	4640      	mov	r0, r8
 80055b2:	f002 fbf1 	bl	8007d98 <KMS_Objects_GetPointer>
    if (pkms_object != NULL)
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f000 8218 	beq.w	80059ec <encrypt_decrypt_init+0x480>
      e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 80055bc:	4601      	mov	r1, r0
 80055be:	9000      	str	r0, [sp, #0]
 80055c0:	aa03      	add	r2, sp, #12
 80055c2:	2011      	movs	r0, #17
 80055c4:	f002 fc1d 	bl	8007e02 <KMS_Objects_SearchAttributes>
      if ((e_ret_status == CKR_OK) &&
 80055c8:	4604      	mov	r4, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d135      	bne.n	800563a <encrypt_decrypt_init+0xce>
 80055ce:	9b00      	ldr	r3, [sp, #0]
 80055d0:	4ab2      	ldr	r2, [pc, #712]	; (800589c <encrypt_decrypt_init+0x330>)
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	4291      	cmp	r1, r2
 80055d6:	d130      	bne.n	800563a <encrypt_decrypt_init+0xce>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	4bb1      	ldr	r3, [pc, #708]	; (80058a0 <encrypt_decrypt_init+0x334>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	d12c      	bne.n	800563a <encrypt_decrypt_init+0xce>
        if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 80055e0:	9b03      	ldr	r3, [sp, #12]
        aesecb_ctx.mFlags = E_SK_DEFAULT;
 80055e2:	4db0      	ldr	r5, [pc, #704]	; (80058a4 <encrypt_decrypt_init+0x338>)
 80055e4:	f885 0424 	strb.w	r0, [r5, #1060]	; 0x424
        if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 80055e8:	6858      	ldr	r0, [r3, #4]
 80055ea:	f020 0308 	bic.w	r3, r0, #8
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d002      	beq.n	80055f8 <encrypt_decrypt_init+0x8c>
            (P_pKeyAttribute->size == 24U) ||     /* 192 bits */
 80055f2:	2820      	cmp	r0, #32
 80055f4:	f040 81fc 	bne.w	80059f0 <encrypt_decrypt_init+0x484>
          aesecb_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 80055f8:	f8c5 0444 	str.w	r0, [r5, #1092]	; 0x444
          pKeyBuffer = KMS_AllocKey((uint32_t)P_pKeyAttribute->size);
 80055fc:	f7ff ff9c 	bl	8005538 <KMS_AllocKey>
          if (pKeyBuffer == NULL)
 8005600:	4601      	mov	r1, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	f000 81c2 	beq.w	800598c <encrypt_decrypt_init+0x420>
          KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 8005608:	2328      	movs	r3, #40	; 0x28
 800560a:	fb03 b909 	mla	r9, r3, r9, fp
          aesecb_ctx.pmKey = KMS_GETSESSSION(hSession).pKeyAllocBuffer;
 800560e:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
          KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 8005612:	f8c9 0020 	str.w	r0, [r9, #32]
          if (KMS_Objects_TranslateKey(P_pKeyAttribute, KMS_GETSESSSION(hSession).pKeyAllocBuffer) != CKR_OK)
 8005616:	9803      	ldr	r0, [sp, #12]
 8005618:	f002 fc0d 	bl	8007e36 <KMS_Objects_TranslateKey>
 800561c:	4604      	mov	r4, r0
 800561e:	2800      	cmp	r0, #0
 8005620:	f040 81c2 	bne.w	80059a8 <encrypt_decrypt_init+0x43c>
 8005624:	f8d9 1020 	ldr.w	r1, [r9, #32]
          if (encdec_flag == KMS_FLAG_ENCRYPT)
 8005628:	f1ba 0f00 	cmp.w	sl, #0
 800562c:	f040 81d9 	bne.w	80059e2 <encrypt_decrypt_init+0x476>
            cryptolib_status = AES_ECB_Encrypt_Init(&aesecb_ctx, KMS_GETSESSSION(hSession).pKeyAllocBuffer, NULL);
 8005630:	4652      	mov	r2, sl
 8005632:	489d      	ldr	r0, [pc, #628]	; (80058a8 <encrypt_decrypt_init+0x33c>)
 8005634:	f7ff f8f2 	bl	800481c <AES_ECB_Encrypt_Init>
            cryptolib_status = AES_ECB_Decrypt_Init(&aesecb_ctx, KMS_GETSESSSION(hSession).pKeyAllocBuffer, NULL);
 8005638:	4605      	mov	r5, r0
  if (pMechanism->mechanism == CKM_AES_CCM)
 800563a:	6830      	ldr	r0, [r6, #0]
 800563c:	f241 0388 	movw	r3, #4232	; 0x1088
 8005640:	4298      	cmp	r0, r3
 8005642:	d177      	bne.n	8005734 <encrypt_decrypt_init+0x1c8>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 8005644:	4a94      	ldr	r2, [pc, #592]	; (8005898 <encrypt_decrypt_init+0x32c>)
 8005646:	9200      	str	r2, [sp, #0]
 8005648:	f107 3bff 	add.w	fp, r7, #4294967295
 800564c:	2328      	movs	r3, #40	; 0x28
 800564e:	fb03 230b 	mla	r3, r3, fp, r2
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	2900      	cmp	r1, #0
 8005656:	f040 8161 	bne.w	800591c <encrypt_decrypt_init+0x3b0>
    pCCMParams = (CK_CCM_PARAMS *)pMechanism->pParameter;
 800565a:	f8d6 9004 	ldr.w	r9, [r6, #4]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800565e:	e9c3 0806 	strd	r0, r8, [r3, #24]
    pkms_object = KMS_Objects_GetPointer(hKey);
 8005662:	4640      	mov	r0, r8
 8005664:	f002 fb98 	bl	8007d98 <KMS_Objects_GetPointer>
    if (pkms_object != NULL)
 8005668:	2800      	cmp	r0, #0
 800566a:	f000 81c7 	beq.w	80059fc <encrypt_decrypt_init+0x490>
      if ((pMechanism->pParameter != NULL) &&
 800566e:	6872      	ldr	r2, [r6, #4]
 8005670:	2a00      	cmp	r2, #0
 8005672:	d05f      	beq.n	8005734 <encrypt_decrypt_init+0x1c8>
 8005674:	68b2      	ldr	r2, [r6, #8]
 8005676:	2a00      	cmp	r2, #0
 8005678:	d05c      	beq.n	8005734 <encrypt_decrypt_init+0x1c8>
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 800567a:	4601      	mov	r1, r0
 800567c:	9001      	str	r0, [sp, #4]
 800567e:	aa03      	add	r2, sp, #12
 8005680:	2011      	movs	r0, #17
 8005682:	f002 fbbe 	bl	8007e02 <KMS_Objects_SearchAttributes>
        if ((e_ret_status == CKR_OK) &&
 8005686:	4604      	mov	r4, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d153      	bne.n	8005734 <encrypt_decrypt_init+0x1c8>
 800568c:	9b01      	ldr	r3, [sp, #4]
 800568e:	4a83      	ldr	r2, [pc, #524]	; (800589c <encrypt_decrypt_init+0x330>)
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	4291      	cmp	r1, r2
 8005694:	d14e      	bne.n	8005734 <encrypt_decrypt_init+0x1c8>
            (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b81      	ldr	r3, [pc, #516]	; (80058a0 <encrypt_decrypt_init+0x334>)
 800569a:	429a      	cmp	r2, r3
 800569c:	d14a      	bne.n	8005734 <encrypt_decrypt_init+0x1c8>
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 800569e:	9b03      	ldr	r3, [sp, #12]
          aesccm_ctx.mFlags = E_SK_DEFAULT;
 80056a0:	4d80      	ldr	r5, [pc, #512]	; (80058a4 <encrypt_decrypt_init+0x338>)
 80056a2:	f885 053c 	strb.w	r0, [r5, #1340]	; 0x53c
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 80056a6:	6858      	ldr	r0, [r3, #4]
 80056a8:	f020 0308 	bic.w	r3, r0, #8
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d002      	beq.n	80056b6 <encrypt_decrypt_init+0x14a>
              (P_pKeyAttribute->size == 24U) ||     /* 192 bits */
 80056b0:	2820      	cmp	r0, #32
 80056b2:	f040 81a5 	bne.w	8005a00 <encrypt_decrypt_init+0x494>
            aesccm_ctx.mKeySize = (int32_t)P_pKeyAttribute->size;
 80056b6:	f8c5 056c 	str.w	r0, [r5, #1388]	; 0x56c
            pKeyBuffer = KMS_AllocKey((uint32_t)aesccm_ctx.mKeySize);
 80056ba:	f7ff ff3d 	bl	8005538 <KMS_AllocKey>
            if (pKeyBuffer == NULL)
 80056be:	4601      	mov	r1, r0
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f000 8163 	beq.w	800598c <encrypt_decrypt_init+0x420>
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80056c6:	9a00      	ldr	r2, [sp, #0]
            aesccm_ctx.pmKey = KMS_GETSESSSION(hSession).pKeyAllocBuffer;
 80056c8:	f8c5 0540 	str.w	r0, [r5, #1344]	; 0x540
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80056cc:	2328      	movs	r3, #40	; 0x28
 80056ce:	fb03 2b0b 	mla	fp, r3, fp, r2
 80056d2:	f8cb 0020 	str.w	r0, [fp, #32]
            if (KMS_Objects_TranslateKey(P_pKeyAttribute, KMS_GETSESSSION(hSession).pKeyAllocBuffer) != CKR_OK)
 80056d6:	9803      	ldr	r0, [sp, #12]
 80056d8:	f002 fbad 	bl	8007e36 <KMS_Objects_TranslateKey>
 80056dc:	4604      	mov	r4, r0
 80056de:	2800      	cmp	r0, #0
 80056e0:	f040 8162 	bne.w	80059a8 <encrypt_decrypt_init+0x43c>
            aesccm_ctx.mNonceSize = (int32_t)pCCMParams->ulNonceLen;
 80056e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80056e8:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
            aesccm_ctx.mTagSize = (int32_t)pCCMParams->ulMACLen;
 80056ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
            aesccm_ctx.pmNonce = pCCMParams->pNonce;
 80056f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
            aesccm_ctx.mTagSize = (int32_t)pCCMParams->ulMACLen;
 80056f4:	f8c5 3574 	str.w	r3, [r5, #1396]	; 0x574
            aesccm_ctx.mAssDataSize = (int32_t)pCCMParams->ulAADLen;
 80056f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056fc:	f8c5 3578 	str.w	r3, [r5, #1400]	; 0x578
            aesccm_ctx.mPayloadSize = (int32_t)pCCMParams->ulDataLen;
 8005700:	f8d9 3000 	ldr.w	r3, [r9]
            aesccm_ctx.pmNonce = pCCMParams->pNonce;
 8005704:	f8c5 2544 	str.w	r2, [r5, #1348]	; 0x544
            aesccm_ctx.mPayloadSize = (int32_t)pCCMParams->ulDataLen;
 8005708:	f8c5 357c 	str.w	r3, [r5, #1404]	; 0x57c
 800570c:	f8db 1020 	ldr.w	r1, [fp, #32]
              cryptolib_status = AES_CCM_Encrypt_Init(&aesccm_ctx,
 8005710:	4866      	ldr	r0, [pc, #408]	; (80058ac <encrypt_decrypt_init+0x340>)
            if (encdec_flag == KMS_FLAG_ENCRYPT)
 8005712:	f1ba 0f00 	cmp.w	sl, #0
 8005716:	f040 816e 	bne.w	80059f6 <encrypt_decrypt_init+0x48a>
              cryptolib_status = AES_CCM_Encrypt_Init(&aesccm_ctx,
 800571a:	f7fe fe71 	bl	8004400 <AES_CCM_Encrypt_Init>
              cryptolib_status = AES_CCM_Decrypt_Init(&aesccm_ctx,
 800571e:	4605      	mov	r5, r0
            if ((cryptolib_status == AES_SUCCESS) && (pCCMParams->ulAADLen != 0UL))
 8005720:	b940      	cbnz	r0, 8005734 <encrypt_decrypt_init+0x1c8>
 8005722:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005726:	b12a      	cbz	r2, 8005734 <encrypt_decrypt_init+0x1c8>
              cryptolib_status = AES_CCM_Header_Append(&aesccm_ctx, pCCMParams->pAAD, (int32_t)pCCMParams->ulAADLen);
 8005728:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800572c:	485f      	ldr	r0, [pc, #380]	; (80058ac <encrypt_decrypt_init+0x340>)
 800572e:	f7fe fe97 	bl	8004460 <AES_CCM_Header_Append>
 8005732:	4605      	mov	r5, r0
  if (pMechanism->mechanism == CKM_AES_GCM)
 8005734:	6830      	ldr	r0, [r6, #0]
 8005736:	f241 0387 	movw	r3, #4231	; 0x1087
 800573a:	4298      	cmp	r0, r3
 800573c:	d176      	bne.n	800582c <encrypt_decrypt_init+0x2c0>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 800573e:	4a56      	ldr	r2, [pc, #344]	; (8005898 <encrypt_decrypt_init+0x32c>)
 8005740:	9200      	str	r2, [sp, #0]
 8005742:	f107 3bff 	add.w	fp, r7, #4294967295
 8005746:	2328      	movs	r3, #40	; 0x28
 8005748:	fb03 230b 	mla	r3, r3, fp, r2
 800574c:	69d9      	ldr	r1, [r3, #28]
 800574e:	2900      	cmp	r1, #0
 8005750:	f040 80e4 	bne.w	800591c <encrypt_decrypt_init+0x3b0>
    pGCMParams = (CK_GCM_PARAMS *)pMechanism->pParameter;
 8005754:	f8d6 9004 	ldr.w	r9, [r6, #4]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 8005758:	e9c3 0806 	strd	r0, r8, [r3, #24]
    pkms_object = KMS_Objects_GetPointer(hKey);
 800575c:	4640      	mov	r0, r8
 800575e:	f002 fb1b 	bl	8007d98 <KMS_Objects_GetPointer>
    if (pkms_object != NULL)
 8005762:	2800      	cmp	r0, #0
 8005764:	f000 8152 	beq.w	8005a0c <encrypt_decrypt_init+0x4a0>
      if ((pMechanism->pParameter != NULL) &&
 8005768:	6872      	ldr	r2, [r6, #4]
 800576a:	2a00      	cmp	r2, #0
 800576c:	d05e      	beq.n	800582c <encrypt_decrypt_init+0x2c0>
 800576e:	68b2      	ldr	r2, [r6, #8]
 8005770:	2a00      	cmp	r2, #0
 8005772:	d05b      	beq.n	800582c <encrypt_decrypt_init+0x2c0>
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8005774:	4601      	mov	r1, r0
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	aa03      	add	r2, sp, #12
 800577a:	2011      	movs	r0, #17
 800577c:	f002 fb41 	bl	8007e02 <KMS_Objects_SearchAttributes>
        if ((e_ret_status == CKR_OK) &&
 8005780:	4604      	mov	r4, r0
 8005782:	2800      	cmp	r0, #0
 8005784:	d152      	bne.n	800582c <encrypt_decrypt_init+0x2c0>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	4a44      	ldr	r2, [pc, #272]	; (800589c <encrypt_decrypt_init+0x330>)
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	4291      	cmp	r1, r2
 800578e:	d14d      	bne.n	800582c <encrypt_decrypt_init+0x2c0>
            (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	4b43      	ldr	r3, [pc, #268]	; (80058a0 <encrypt_decrypt_init+0x334>)
 8005794:	429a      	cmp	r2, r3
 8005796:	d149      	bne.n	800582c <encrypt_decrypt_init+0x2c0>
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 8005798:	9b03      	ldr	r3, [sp, #12]
          aesgcm_ctx.mFlags = E_SK_DEFAULT;
 800579a:	4d42      	ldr	r5, [pc, #264]	; (80058a4 <encrypt_decrypt_init+0x338>)
 800579c:	f885 0688 	strb.w	r0, [r5, #1672]	; 0x688
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 80057a0:	6858      	ldr	r0, [r3, #4]
 80057a2:	f020 0308 	bic.w	r3, r0, #8
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d002      	beq.n	80057b0 <encrypt_decrypt_init+0x244>
              (P_pKeyAttribute->size == 24U) ||     /* 192 bits */
 80057aa:	2820      	cmp	r0, #32
 80057ac:	f040 8130 	bne.w	8005a10 <encrypt_decrypt_init+0x4a4>
            aesgcm_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 80057b0:	f8c5 06a8 	str.w	r0, [r5, #1704]	; 0x6a8
            pKeyBuffer = KMS_AllocKey((uint32_t)aesgcm_ctx.mKeySize);
 80057b4:	f7ff fec0 	bl	8005538 <KMS_AllocKey>
            if (pKeyBuffer == NULL)
 80057b8:	4601      	mov	r1, r0
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f000 80e6 	beq.w	800598c <encrypt_decrypt_init+0x420>
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80057c0:	9a00      	ldr	r2, [sp, #0]
            aesgcm_ctx.pmKey = KMS_GETSESSSION(hSession).pKeyAllocBuffer;
 80057c2:	f8c5 068c 	str.w	r0, [r5, #1676]	; 0x68c
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80057c6:	2328      	movs	r3, #40	; 0x28
 80057c8:	fb03 2b0b 	mla	fp, r3, fp, r2
 80057cc:	f8cb 0020 	str.w	r0, [fp, #32]
            if (KMS_Objects_TranslateKey(P_pKeyAttribute, KMS_GETSESSSION(hSession).pKeyAllocBuffer) != CKR_OK)
 80057d0:	9803      	ldr	r0, [sp, #12]
 80057d2:	f002 fb30 	bl	8007e36 <KMS_Objects_TranslateKey>
 80057d6:	4604      	mov	r4, r0
 80057d8:	2800      	cmp	r0, #0
 80057da:	f040 80e5 	bne.w	80059a8 <encrypt_decrypt_init+0x43c>
            aesgcm_ctx.pmTag = gcm_tag;
 80057de:	4834      	ldr	r0, [pc, #208]	; (80058b0 <encrypt_decrypt_init+0x344>)
            aesgcm_ctx.mIvSize = (int32_t)pGCMParams->ulIvLen;
 80057e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80057e4:	f8c5 3694 	str.w	r3, [r5, #1684]	; 0x694
            aesgcm_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 80057e8:	2208      	movs	r2, #8
 80057ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80057ee:	f8db 1020 	ldr.w	r1, [fp, #32]
 80057f2:	fb93 f3f2 	sdiv	r3, r3, r2
            aesgcm_ctx.pmTag = gcm_tag;
 80057f6:	f8c5 06ac 	str.w	r0, [r5, #1708]	; 0x6ac
            aesgcm_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 80057fa:	f8c5 36b0 	str.w	r3, [r5, #1712]	; 0x6b0
            aesgcm_ctx.mPayloadSize = 0;
 80057fe:	f8c5 46b8 	str.w	r4, [r5, #1720]	; 0x6b8
 8005802:	f8d9 2000 	ldr.w	r2, [r9]
              cryptolib_status = AES_GCM_Encrypt_Init(&aesgcm_ctx,
 8005806:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
            if (encdec_flag == KMS_FLAG_ENCRYPT)
 800580a:	f1ba 0f00 	cmp.w	sl, #0
 800580e:	f040 80fa 	bne.w	8005a06 <encrypt_decrypt_init+0x49a>
              cryptolib_status = AES_GCM_Encrypt_Init(&aesgcm_ctx,
 8005812:	f7fe fce1 	bl	80041d8 <AES_GCM_Encrypt_Init>
              cryptolib_status = AES_GCM_Decrypt_Init(&aesgcm_ctx,
 8005816:	4605      	mov	r5, r0
            if ((cryptolib_status == AES_SUCCESS) && (pGCMParams->ulAADLen != 0UL))
 8005818:	b940      	cbnz	r0, 800582c <encrypt_decrypt_init+0x2c0>
 800581a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800581e:	b12a      	cbz	r2, 800582c <encrypt_decrypt_init+0x2c0>
              cryptolib_status = AES_GCM_Header_Append(&aesgcm_ctx, pGCMParams->pAAD, (int32_t)pGCMParams->ulAADLen);
 8005820:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005824:	4823      	ldr	r0, [pc, #140]	; (80058b4 <encrypt_decrypt_init+0x348>)
 8005826:	f7fe fd0f 	bl	8004248 <AES_GCM_Header_Append>
 800582a:	4605      	mov	r5, r0
  if (pMechanism->mechanism == CKM_AES_CMAC)
 800582c:	6832      	ldr	r2, [r6, #0]
 800582e:	f241 038a 	movw	r3, #4234	; 0x108a
 8005832:	429a      	cmp	r2, r3
 8005834:	d165      	bne.n	8005902 <encrypt_decrypt_init+0x396>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 8005836:	4e18      	ldr	r6, [pc, #96]	; (8005898 <encrypt_decrypt_init+0x32c>)
 8005838:	3f01      	subs	r7, #1
 800583a:	2328      	movs	r3, #40	; 0x28
 800583c:	fb03 6307 	mla	r3, r3, r7, r6
 8005840:	69d9      	ldr	r1, [r3, #28]
 8005842:	2900      	cmp	r1, #0
 8005844:	d16a      	bne.n	800591c <encrypt_decrypt_init+0x3b0>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 8005846:	e9c3 2806 	strd	r2, r8, [r3, #24]
    pkms_object = KMS_Objects_GetPointer(hKey);
 800584a:	4640      	mov	r0, r8
 800584c:	f002 faa4 	bl	8007d98 <KMS_Objects_GetPointer>
    if (pkms_object != NULL)
 8005850:	4680      	mov	r8, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	f000 80e2 	beq.w	8005a1c <encrypt_decrypt_init+0x4b0>
      e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8005858:	4601      	mov	r1, r0
 800585a:	aa03      	add	r2, sp, #12
 800585c:	2011      	movs	r0, #17
 800585e:	f002 fad0 	bl	8007e02 <KMS_Objects_SearchAttributes>
      if ((e_ret_status == CKR_OK) &&
 8005862:	4604      	mov	r4, r0
 8005864:	2800      	cmp	r0, #0
 8005866:	d14c      	bne.n	8005902 <encrypt_decrypt_init+0x396>
 8005868:	f8d8 2000 	ldr.w	r2, [r8]
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <encrypt_decrypt_init+0x330>)
 800586e:	429a      	cmp	r2, r3
 8005870:	d147      	bne.n	8005902 <encrypt_decrypt_init+0x396>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8005872:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005876:	f46f 710f 	mvn.w	r1, #572	; 0x23c
 800587a:	440b      	add	r3, r1
 800587c:	429a      	cmp	r2, r3
 800587e:	d140      	bne.n	8005902 <encrypt_decrypt_init+0x396>
        if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 8005880:	9b03      	ldr	r3, [sp, #12]
        aescmac_ctx.mFlags = E_SK_DEFAULT;
 8005882:	4d08      	ldr	r5, [pc, #32]	; (80058a4 <encrypt_decrypt_init+0x338>)
 8005884:	f885 0fd0 	strb.w	r0, [r5, #4048]	; 0xfd0
        if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 8005888:	6858      	ldr	r0, [r3, #4]
 800588a:	f020 0308 	bic.w	r3, r0, #8
 800588e:	2b10      	cmp	r3, #16
 8005890:	d012      	beq.n	80058b8 <encrypt_decrypt_init+0x34c>
            (P_pKeyAttribute->size == 24U) ||     /* 192 bits */
 8005892:	2820      	cmp	r0, #32
 8005894:	d143      	bne.n	800591e <encrypt_decrypt_init+0x3b2>
 8005896:	e00f      	b.n	80058b8 <encrypt_decrypt_init+0x34c>
 8005898:	20007874 	.word	0x20007874
 800589c:	b10b0240 	.word	0xb10b0240
 80058a0:	b10b0003 	.word	0xb10b0003
 80058a4:	20003118 	.word	0x20003118
 80058a8:	20003538 	.word	0x20003538
 80058ac:	20003650 	.word	0x20003650
 80058b0:	200040d4 	.word	0x200040d4
 80058b4:	2000379c 	.word	0x2000379c
          aescmac_ctx.mFlags = E_SK_FINAL_APPEND;
 80058b8:	2320      	movs	r3, #32
 80058ba:	f885 3fd0 	strb.w	r3, [r5, #4048]	; 0xfd0
          aescmac_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 80058be:	f8c5 0ff0 	str.w	r0, [r5, #4080]	; 0xff0
          pKeyBuffer = KMS_AllocKey((uint32_t)aescmac_ctx.mKeySize);
 80058c2:	f7ff fe39 	bl	8005538 <KMS_AllocKey>
          if (pKeyBuffer == NULL)
 80058c6:	4601      	mov	r1, r0
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d05f      	beq.n	800598c <encrypt_decrypt_init+0x420>
          KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80058cc:	2328      	movs	r3, #40	; 0x28
 80058ce:	fb03 6707 	mla	r7, r3, r7, r6
          aescmac_ctx.pmKey = KMS_GETSESSSION(hSession).pKeyAllocBuffer;
 80058d2:	f8c5 0fd4 	str.w	r0, [r5, #4052]	; 0xfd4
          KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 80058d6:	6238      	str	r0, [r7, #32]
          if (KMS_Objects_TranslateKey(P_pKeyAttribute, KMS_GETSESSSION(hSession).pKeyAllocBuffer) != CKR_OK)
 80058d8:	9803      	ldr	r0, [sp, #12]
 80058da:	f002 faac 	bl	8007e36 <KMS_Objects_TranslateKey>
 80058de:	4604      	mov	r4, r0
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d161      	bne.n	80059a8 <encrypt_decrypt_init+0x43c>
          aescmac_ctx.mTagSize = CMAC_CRL_AES_BLOCK;
 80058e4:	f241 03e8 	movw	r3, #4328	; 0x10e8
 80058e8:	2210      	movs	r2, #16
 80058ea:	50ea      	str	r2, [r5, r3]
          aesgcm_ctx.pmTag = cmac_tag;
 80058ec:	4b4c      	ldr	r3, [pc, #304]	; (8005a20 <encrypt_decrypt_init+0x4b4>)
 80058ee:	f8c5 36ac 	str.w	r3, [r5, #1708]	; 0x6ac
            cryptolib_status = AES_CMAC_Encrypt_Init(&aescmac_ctx);
 80058f2:	484c      	ldr	r0, [pc, #304]	; (8005a24 <encrypt_decrypt_init+0x4b8>)
          if (encdec_flag == KMS_FLAG_ENCRYPT)
 80058f4:	f1ba 0f00 	cmp.w	sl, #0
 80058f8:	f040 808d 	bne.w	8005a16 <encrypt_decrypt_init+0x4aa>
            cryptolib_status = AES_CMAC_Encrypt_Init(&aescmac_ctx);
 80058fc:	f7fe fe8e 	bl	800461c <AES_CMAC_Encrypt_Init>
            cryptolib_status = AES_CMAC_Decrypt_Init(&aescmac_ctx);
 8005900:	4605      	mov	r5, r0
    e_ret_status = CKR_OK;
 8005902:	2d00      	cmp	r5, #0
 8005904:	bf08      	it	eq
 8005906:	2400      	moveq	r4, #0
 8005908:	e009      	b.n	800591e <encrypt_decrypt_init+0x3b2>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 800590a:	4947      	ldr	r1, [pc, #284]	; (8005a28 <encrypt_decrypt_init+0x4bc>)
 800590c:	f100 39ff 	add.w	r9, r0, #4294967295
 8005910:	2328      	movs	r3, #40	; 0x28
 8005912:	fb03 1309 	mla	r3, r3, r9, r1
 8005916:	468b      	mov	fp, r1
 8005918:	69d8      	ldr	r0, [r3, #28]
 800591a:	b120      	cbz	r0, 8005926 <encrypt_decrypt_init+0x3ba>
      return CKR_KEY_HANDLE_INVALID;
 800591c:	2460      	movs	r4, #96	; 0x60
}
 800591e:	4620      	mov	r0, r4
 8005920:	b005      	add	sp, #20
 8005922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 8005926:	e9c3 2806 	strd	r2, r8, [r3, #24]
    pkms_object = KMS_Objects_GetPointer(hKey);
 800592a:	4640      	mov	r0, r8
 800592c:	f002 fa34 	bl	8007d98 <KMS_Objects_GetPointer>
    if (pkms_object != NULL)
 8005930:	4605      	mov	r5, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d04b      	beq.n	80059ce <encrypt_decrypt_init+0x462>
      if ((pMechanism->pParameter != NULL) &&
 8005936:	6873      	ldr	r3, [r6, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f43f ae24 	beq.w	8005586 <encrypt_decrypt_init+0x1a>
 800593e:	68b3      	ldr	r3, [r6, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f43f ae20 	beq.w	8005586 <encrypt_decrypt_init+0x1a>
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8005946:	4601      	mov	r1, r0
 8005948:	aa03      	add	r2, sp, #12
 800594a:	2011      	movs	r0, #17
 800594c:	f002 fa59 	bl	8007e02 <KMS_Objects_SearchAttributes>
        if ((e_ret_status == CKR_OK) &&
 8005950:	4604      	mov	r4, r0
 8005952:	2800      	cmp	r0, #0
 8005954:	d13f      	bne.n	80059d6 <encrypt_decrypt_init+0x46a>
 8005956:	682a      	ldr	r2, [r5, #0]
 8005958:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <encrypt_decrypt_init+0x4c0>)
 800595a:	429a      	cmp	r2, r3
 800595c:	d13b      	bne.n	80059d6 <encrypt_decrypt_init+0x46a>
            (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 800595e:	686a      	ldr	r2, [r5, #4]
 8005960:	f46f 700f 	mvn.w	r0, #572	; 0x23c
 8005964:	4403      	add	r3, r0
 8005966:	429a      	cmp	r2, r3
 8005968:	d135      	bne.n	80059d6 <encrypt_decrypt_init+0x46a>
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 800596a:	9b03      	ldr	r3, [sp, #12]
          aescbc_ctx.mFlags = E_SK_DEFAULT;
 800596c:	4d30      	ldr	r5, [pc, #192]	; (8005a30 <encrypt_decrypt_init+0x4c4>)
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 800596e:	6858      	ldr	r0, [r3, #4]
          aescbc_ctx.mFlags = E_SK_DEFAULT;
 8005970:	f885 430c 	strb.w	r4, [r5, #780]	; 0x30c
          if ((P_pKeyAttribute->size == 16U) ||    /* 128 bits */
 8005974:	f020 0308 	bic.w	r3, r0, #8
 8005978:	2b10      	cmp	r3, #16
 800597a:	d001      	beq.n	8005980 <encrypt_decrypt_init+0x414>
              (P_pKeyAttribute->size == 24U) ||     /* 192 bits */
 800597c:	2820      	cmp	r0, #32
 800597e:	d12d      	bne.n	80059dc <encrypt_decrypt_init+0x470>
            aescbc_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8005980:	f8c5 032c 	str.w	r0, [r5, #812]	; 0x32c
            pKeyBuffer = KMS_AllocKey((uint32_t)aescbc_ctx.mKeySize);
 8005984:	f7ff fdd8 	bl	8005538 <KMS_AllocKey>
            if (pKeyBuffer == NULL)
 8005988:	4601      	mov	r1, r0
 800598a:	b908      	cbnz	r0, 8005990 <encrypt_decrypt_init+0x424>
              return CKR_DEVICE_MEMORY;
 800598c:	2431      	movs	r4, #49	; 0x31
 800598e:	e7c6      	b.n	800591e <encrypt_decrypt_init+0x3b2>
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 8005990:	2328      	movs	r3, #40	; 0x28
 8005992:	fb03 b909 	mla	r9, r3, r9, fp
            aescbc_ctx.pmKey = KMS_GETSESSSION(hSession).pKeyAllocBuffer;
 8005996:	f8c5 0310 	str.w	r0, [r5, #784]	; 0x310
            KMS_GETSESSSION(hSession).pKeyAllocBuffer = pKeyBuffer;
 800599a:	f8c9 0020 	str.w	r0, [r9, #32]
            if (KMS_Objects_TranslateKey(P_pKeyAttribute, KMS_GETSESSSION(hSession).pKeyAllocBuffer) != CKR_OK)
 800599e:	9803      	ldr	r0, [sp, #12]
 80059a0:	f002 fa49 	bl	8007e36 <KMS_Objects_TranslateKey>
 80059a4:	4604      	mov	r4, r0
 80059a6:	b108      	cbz	r0, 80059ac <encrypt_decrypt_init+0x440>
              return  CKR_ATTRIBUTE_VALUE_INVALID;
 80059a8:	2413      	movs	r4, #19
 80059aa:	e7b8      	b.n	800591e <encrypt_decrypt_init+0x3b2>
            aescbc_ctx.mIvSize = (int32_t)pMechanism->ulParameterLen;
 80059ac:	68b3      	ldr	r3, [r6, #8]
 80059ae:	f8c5 3318 	str.w	r3, [r5, #792]	; 0x318
 80059b2:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80059b6:	6872      	ldr	r2, [r6, #4]
              cryptolib_status = AES_CBC_Encrypt_Init(&aescbc_ctx,
 80059b8:	481e      	ldr	r0, [pc, #120]	; (8005a34 <encrypt_decrypt_init+0x4c8>)
            if (encdec_flag == KMS_FLAG_ENCRYPT)
 80059ba:	f1ba 0f00 	cmp.w	sl, #0
 80059be:	d103      	bne.n	80059c8 <encrypt_decrypt_init+0x45c>
              cryptolib_status = AES_CBC_Encrypt_Init(&aescbc_ctx,
 80059c0:	f7fe faec 	bl	8003f9c <AES_CBC_Encrypt_Init>
              cryptolib_status = AES_CBC_Decrypt_Init(&aescbc_ctx,
 80059c4:	4605      	mov	r5, r0
 80059c6:	e5e1      	b.n	800558c <encrypt_decrypt_init+0x20>
 80059c8:	f7fe fb76 	bl	80040b8 <AES_CBC_Decrypt_Init>
 80059cc:	e7fa      	b.n	80059c4 <encrypt_decrypt_init+0x458>
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 80059ce:	f640 451e 	movw	r5, #3102	; 0xc1e
      e_ret_status = CKR_SLOT_ID_INVALID;
 80059d2:	2403      	movs	r4, #3
 80059d4:	e5da      	b.n	800558c <encrypt_decrypt_init+0x20>
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 80059d6:	f640 451e 	movw	r5, #3102	; 0xc1e
 80059da:	e5d7      	b.n	800558c <encrypt_decrypt_init+0x20>
            cryptolib_status = AES_ERR_BAD_PARAMETER;
 80059dc:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 80059e0:	e5d4      	b.n	800558c <encrypt_decrypt_init+0x20>
            cryptolib_status = AES_ECB_Decrypt_Init(&aesecb_ctx, KMS_GETSESSSION(hSession).pKeyAllocBuffer, NULL);
 80059e2:	4602      	mov	r2, r0
 80059e4:	4814      	ldr	r0, [pc, #80]	; (8005a38 <encrypt_decrypt_init+0x4cc>)
 80059e6:	f7fe ff67 	bl	80048b8 <AES_ECB_Decrypt_Init>
 80059ea:	e625      	b.n	8005638 <encrypt_decrypt_init+0xcc>
      e_ret_status = CKR_SLOT_ID_INVALID;
 80059ec:	2403      	movs	r4, #3
 80059ee:	e624      	b.n	800563a <encrypt_decrypt_init+0xce>
          cryptolib_status = AES_ERR_BAD_PARAMETER;
 80059f0:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 80059f4:	e621      	b.n	800563a <encrypt_decrypt_init+0xce>
              cryptolib_status = AES_CCM_Decrypt_Init(&aesccm_ctx,
 80059f6:	f7fe fd93 	bl	8004520 <AES_CCM_Decrypt_Init>
 80059fa:	e690      	b.n	800571e <encrypt_decrypt_init+0x1b2>
      e_ret_status = CKR_SLOT_ID_INVALID;
 80059fc:	2403      	movs	r4, #3
 80059fe:	e699      	b.n	8005734 <encrypt_decrypt_init+0x1c8>
            cryptolib_status = AES_ERR_BAD_INPUT_SIZE;
 8005a00:	f640 451d 	movw	r5, #3101	; 0xc1d
 8005a04:	e696      	b.n	8005734 <encrypt_decrypt_init+0x1c8>
              cryptolib_status = AES_GCM_Decrypt_Init(&aesgcm_ctx,
 8005a06:	f7fe fc87 	bl	8004318 <AES_GCM_Decrypt_Init>
 8005a0a:	e704      	b.n	8005816 <encrypt_decrypt_init+0x2aa>
      e_ret_status = CKR_SLOT_ID_INVALID;
 8005a0c:	2403      	movs	r4, #3
 8005a0e:	e70d      	b.n	800582c <encrypt_decrypt_init+0x2c0>
            cryptolib_status = AES_ERR_BAD_INPUT_SIZE;
 8005a10:	f640 451d 	movw	r5, #3101	; 0xc1d
 8005a14:	e70a      	b.n	800582c <encrypt_decrypt_init+0x2c0>
            cryptolib_status = AES_CMAC_Decrypt_Init(&aescmac_ctx);
 8005a16:	f7fe fe7b 	bl	8004710 <AES_CMAC_Decrypt_Init>
 8005a1a:	e771      	b.n	8005900 <encrypt_decrypt_init+0x394>
      e_ret_status = CKR_SLOT_ID_INVALID;
 8005a1c:	2403      	movs	r4, #3
 8005a1e:	e770      	b.n	8005902 <encrypt_decrypt_init+0x396>
 8005a20:	20004204 	.word	0x20004204
 8005a24:	200040e4 	.word	0x200040e4
 8005a28:	20007874 	.word	0x20007874
 8005a2c:	b10b0240 	.word	0xb10b0240
 8005a30:	20003118 	.word	0x20003118
 8005a34:	20003420 	.word	0x20003420
 8005a38:	20003538 	.word	0x20003538

08005a3c <KMS_FreeKey>:

  int32_t i;

  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
  {
    if (ptKeyValBuffer[i] == pBufferToRelease)
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <KMS_FreeKey+0x54>)
 8005a3e:	4298      	cmp	r0, r3
 8005a40:	d01d      	beq.n	8005a7e <KMS_FreeKey+0x42>
 8005a42:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8005a46:	4290      	cmp	r0, r2
 8005a48:	d01b      	beq.n	8005a82 <KMS_FreeKey+0x46>
 8005a4a:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8005a4e:	4290      	cmp	r0, r2
 8005a50:	d019      	beq.n	8005a86 <KMS_FreeKey+0x4a>
 8005a52:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8005a56:	4290      	cmp	r0, r2
 8005a58:	d017      	beq.n	8005a8a <KMS_FreeKey+0x4e>
 8005a5a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8005a5e:	4290      	cmp	r0, r2
 8005a60:	d10c      	bne.n	8005a7c <KMS_FreeKey+0x40>
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
 8005a62:	2104      	movs	r1, #4
    {
      /* We freeze the buffer usage */
      ptKeyValBufferState[i] = 0;
 8005a64:	1858      	adds	r0, r3, r1
 8005a66:	2200      	movs	r2, #0
 8005a68:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 8005a6c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
      uint32_t j;
      /* We clean-up the buffer containing the keys (for security reasons) */
      for (j = 0; j < KMS_SIZE_AES_KEY; j++)
      {
        ptKeyValBuffer[i][j] = 0;
 8005a70:	4611      	mov	r1, r2
 8005a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (j = 0; j < KMS_SIZE_AES_KEY; j++)
 8005a76:	3201      	adds	r2, #1
 8005a78:	2a20      	cmp	r2, #32
 8005a7a:	d1fa      	bne.n	8005a72 <KMS_FreeKey+0x36>
      }
      break;
    }
  }
}
 8005a7c:	4770      	bx	lr
  for (i = 0; i < KMS_MAX_AES_PARRALEL_USAGE; i++)
 8005a7e:	2100      	movs	r1, #0
 8005a80:	e7f0      	b.n	8005a64 <KMS_FreeKey+0x28>
 8005a82:	2101      	movs	r1, #1
 8005a84:	e7ee      	b.n	8005a64 <KMS_FreeKey+0x28>
 8005a86:	2102      	movs	r1, #2
 8005a88:	e7ec      	b.n	8005a64 <KMS_FreeKey+0x28>
 8005a8a:	2103      	movs	r1, #3
 8005a8c:	e7ea      	b.n	8005a64 <KMS_FreeKey+0x28>
 8005a8e:	bf00      	nop
 8005a90:	20003118 	.word	0x20003118

08005a94 <KMS_EncryptInit>:
                               CK_MECHANISM_PTR pMechanism, CK_OBJECT_HANDLE hKey)
{
  CK_RV e_ret_status;

  /* We reuse similar code between Encrypt & Decrypt Init */
  e_ret_status = encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_ENCRYPT);
 8005a94:	2300      	movs	r3, #0
 8005a96:	f7ff bd69 	b.w	800556c <encrypt_decrypt_init>
	...

08005a9c <KMS_EncryptUpdate>:
  */
CK_RV          KMS_EncryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pPart, CK_ULONG ulPartLen,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG_PTR pulEncryptedPartLen)
{
 8005a9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
  int32_t lEncryptPartLen = 0;
 8005aa0:	2400      	movs	r4, #0

  /* Check that a Processing is already on going. */
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005aa2:	4d32      	ldr	r5, [pc, #200]	; (8005b6c <KMS_EncryptUpdate+0xd0>)
  int32_t lEncryptPartLen = 0;
 8005aa4:	9403      	str	r4, [sp, #12]
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005aa6:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8005aaa:	1e44      	subs	r4, r0, #1
 8005aac:	fb0c 5c04 	mla	ip, ip, r4, r5
{
 8005ab0:	460e      	mov	r6, r1
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005ab2:	f8dc 001c 	ldr.w	r0, [ip, #28]
{
 8005ab6:	4617      	mov	r7, r2
 8005ab8:	4698      	mov	r8, r3
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d054      	beq.n	8005b68 <KMS_EncryptUpdate+0xcc>
  }
  else
  {

#ifdef KMS_AES_CBC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CBC)
 8005abe:	f8dc c018 	ldr.w	ip, [ip, #24]
 8005ac2:	f241 0082 	movw	r0, #4226	; 0x1082
 8005ac6:	4584      	cmp	ip, r0
 8005ac8:	d14b      	bne.n	8005b62 <KMS_EncryptUpdate+0xc6>
    {

      /* Encrypt Data */
      cryptolib_status = AES_CBC_Encrypt_Append(&aescbc_ctx, pPart, (int32_t)ulPartLen,
 8005aca:	a803      	add	r0, sp, #12
 8005acc:	9000      	str	r0, [sp, #0]
 8005ace:	4828      	ldr	r0, [pc, #160]	; (8005b70 <KMS_EncryptUpdate+0xd4>)
 8005ad0:	f7fe fab2 	bl	8004038 <AES_CBC_Encrypt_Append>

    }
#endif /* KMS_AES_CBC */

#ifdef KMS_AES_ECB
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_ECB)
 8005ad4:	2328      	movs	r3, #40	; 0x28
 8005ad6:	fb03 5304 	mla	r3, r3, r4, r5
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	f241 0381 	movw	r3, #4225	; 0x1081
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d107      	bne.n	8005af4 <KMS_EncryptUpdate+0x58>
    {

      /* Encrypt Data */
      cryptolib_status = AES_ECB_Encrypt_Append(&aesecb_ctx, pPart, (int32_t)ulPartLen,
 8005ae4:	ab03      	add	r3, sp, #12
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	463a      	mov	r2, r7
 8005aea:	4643      	mov	r3, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4821      	ldr	r0, [pc, #132]	; (8005b74 <KMS_EncryptUpdate+0xd8>)
 8005af0:	f7fe feae 	bl	8004850 <AES_ECB_Encrypt_Append>

    }
#endif /* KMS_AES_ECB */

#ifdef KMS_AES_CCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CCM)
 8005af4:	2328      	movs	r3, #40	; 0x28
 8005af6:	fb03 5304 	mla	r3, r3, r4, r5
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	f241 0388 	movw	r3, #4232	; 0x1088
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d107      	bne.n	8005b14 <KMS_EncryptUpdate+0x78>
    {
      /* Encrypt Data */
      cryptolib_status = AES_CCM_Encrypt_Append(&aesccm_ctx, pPart, (int32_t)ulPartLen,
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	463a      	mov	r2, r7
 8005b0a:	4643      	mov	r3, r8
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	481a      	ldr	r0, [pc, #104]	; (8005b78 <KMS_EncryptUpdate+0xdc>)
 8005b10:	f7fe fcc4 	bl	800449c <AES_CCM_Encrypt_Append>
    }
#endif /* KMS_AES_CCM */


#ifdef KMS_AES_GCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_GCM)
 8005b14:	2328      	movs	r3, #40	; 0x28
 8005b16:	fb03 5304 	mla	r3, r3, r4, r5
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	f241 0387 	movw	r3, #4231	; 0x1087
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d107      	bne.n	8005b34 <KMS_EncryptUpdate+0x98>
    {
      /* Encrypt Data */
      cryptolib_status = AES_GCM_Encrypt_Append(&aesgcm_ctx, pPart, (int32_t)ulPartLen,
 8005b24:	ab03      	add	r3, sp, #12
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	463a      	mov	r2, r7
 8005b2a:	4643      	mov	r3, r8
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4813      	ldr	r0, [pc, #76]	; (8005b7c <KMS_EncryptUpdate+0xe0>)
 8005b30:	f7fe fbb2 	bl	8004298 <AES_GCM_Encrypt_Append>

    }
#endif /* KMS_AES_GCM */

#ifdef KMS_AES_CMAC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CMAC)
 8005b34:	2328      	movs	r3, #40	; 0x28
 8005b36:	fb03 5404 	mla	r4, r3, r4, r5
 8005b3a:	f241 038a 	movw	r3, #4234	; 0x108a
 8005b3e:	69a2      	ldr	r2, [r4, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d104      	bne.n	8005b4e <KMS_EncryptUpdate+0xb2>
    {

      /* Encrypt Data */
      cryptolib_status = AES_CMAC_Encrypt_Append(&aescmac_ctx, pPart,
 8005b44:	463a      	mov	r2, r7
 8005b46:	4631      	mov	r1, r6
 8005b48:	480d      	ldr	r0, [pc, #52]	; (8005b80 <KMS_EncryptUpdate+0xe4>)
 8005b4a:	f7fe fd9f 	bl	800468c <AES_CMAC_Encrypt_Append>
    }
#endif /* KMS_AES_CMAC */

  }

  *pulEncryptedPartLen = (uint32_t)lEncryptPartLen;
 8005b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b50:	9a03      	ldr	r2, [sp, #12]
 8005b52:	601a      	str	r2, [r3, #0]

  /* Return status*/
  if (cryptolib_status == AES_SUCCESS)
  {
    e_ret_status = CKR_OK;
 8005b54:	2800      	cmp	r0, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2006      	movne	r0, #6
 8005b5a:	2000      	moveq	r0, #0
  }

  return e_ret_status;
}
 8005b5c:	b004      	add	sp, #16
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 8005b62:	f640 401e 	movw	r0, #3102	; 0xc1e
 8005b66:	e7b5      	b.n	8005ad4 <KMS_EncryptUpdate+0x38>
    return CKR_KEY_HANDLE_INVALID;
 8005b68:	2060      	movs	r0, #96	; 0x60
 8005b6a:	e7f7      	b.n	8005b5c <KMS_EncryptUpdate+0xc0>
 8005b6c:	20007874 	.word	0x20007874
 8005b70:	20003420 	.word	0x20003420
 8005b74:	20003538 	.word	0x20003538
 8005b78:	20003650 	.word	0x20003650
 8005b7c:	2000379c 	.word	0x2000379c
 8005b80:	200040e4 	.word	0x200040e4

08005b84 <KMS_Encrypt>:
{
 8005b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 8005b86:	9d06      	ldr	r5, [sp, #24]
 8005b88:	9500      	str	r5, [sp, #0]
{
 8005b8a:	4604      	mov	r4, r0
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 8005b8c:	f7ff ff86 	bl	8005a9c <KMS_EncryptUpdate>
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <KMS_Encrypt+0x2c>)
 8005b92:	3c01      	subs	r4, #1
 8005b94:	2228      	movs	r2, #40	; 0x28
 8005b96:	fb02 3404 	mla	r4, r2, r4, r3
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 8005b9a:	4606      	mov	r6, r0
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005b9c:	6a20      	ldr	r0, [r4, #32]
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	61e5      	str	r5, [r4, #28]
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005ba2:	b110      	cbz	r0, 8005baa <KMS_Encrypt+0x26>
    KMS_FreeKey(KMS_GETSESSSION(hSession).pKeyAllocBuffer);
 8005ba4:	f7ff ff4a 	bl	8005a3c <KMS_FreeKey>
    KMS_GETSESSSION(hSession).pKeyAllocBuffer = NULL;
 8005ba8:	6225      	str	r5, [r4, #32]
}
 8005baa:	4630      	mov	r0, r6
 8005bac:	b002      	add	sp, #8
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	20007874 	.word	0x20007874

08005bb4 <KMS_EncryptFinal>:
  * @param  pulLastEncryptedPartLen length of the last encrypted data part
  * @retval Operation status
  */
CK_RV          KMS_EncryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastEncryptedPart,
                                CK_ULONG_PTR pulLastEncryptedPartLen)
{
 8005bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
  int32_t lEncryptPartLen = 0;
 8005bb8:	2300      	movs	r3, #0

  /* Check that a Processing is already on going. */
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005bba:	4d37      	ldr	r5, [pc, #220]	; (8005c98 <KMS_EncryptFinal+0xe4>)
  int32_t lEncryptPartLen = 0;
 8005bbc:	9301      	str	r3, [sp, #4]
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005bbe:	1e44      	subs	r4, r0, #1
 8005bc0:	2328      	movs	r3, #40	; 0x28
 8005bc2:	fb03 5304 	mla	r3, r3, r4, r5
{
 8005bc6:	4690      	mov	r8, r2
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005bc8:	69da      	ldr	r2, [r3, #28]
{
 8005bca:	460f      	mov	r7, r1
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005bcc:	2a00      	cmp	r2, #0
 8005bce:	d061      	beq.n	8005c94 <KMS_EncryptFinal+0xe0>
  }
  else
  {

#ifdef KMS_AES_CCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CCM)
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	f241 0388 	movw	r3, #4232	; 0x1088
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d159      	bne.n	8005c8e <KMS_EncryptFinal+0xda>
    {
      /* aesccm_ctx.pmTag = pLastEncryptedPart; */
      cryptolib_status = AES_CCM_Encrypt_Finish(&aesccm_ctx,
 8005bda:	aa01      	add	r2, sp, #4
 8005bdc:	482f      	ldr	r0, [pc, #188]	; (8005c9c <KMS_EncryptFinal+0xe8>)
 8005bde:	f7fe fc85 	bl	80044ec <AES_CCM_Encrypt_Finish>
 8005be2:	4606      	mov	r6, r0
                                                &lEncryptPartLen);
    }
#endif /* KMS_AES_CCM */

#ifdef KMS_AES_GCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_GCM)
 8005be4:	2328      	movs	r3, #40	; 0x28
 8005be6:	fb03 5304 	mla	r3, r3, r4, r5
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	f241 0387 	movw	r3, #4231	; 0x1087
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d109      	bne.n	8005c08 <KMS_EncryptFinal+0x54>
    {
      aesgcm_ctx.pmTag = pLastEncryptedPart;
 8005bf4:	482a      	ldr	r0, [pc, #168]	; (8005ca0 <KMS_EncryptFinal+0xec>)
      cryptolib_status = AES_GCM_Encrypt_Finish(&aesgcm_ctx,
 8005bf6:	aa01      	add	r2, sp, #4
      aesgcm_ctx.pmTag = pLastEncryptedPart;
 8005bf8:	f8c0 76ac 	str.w	r7, [r0, #1708]	; 0x6ac
      cryptolib_status = AES_GCM_Encrypt_Finish(&aesgcm_ctx,
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f200 6084 	addw	r0, r0, #1668	; 0x684
 8005c02:	f7fe fb69 	bl	80042d8 <AES_GCM_Encrypt_Finish>
 8005c06:	4606      	mov	r6, r0
                                                &lEncryptPartLen);
    }
#endif /* KMS_AES_GCM */

#ifdef KMS_AES_CBC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CBC)
 8005c08:	2328      	movs	r3, #40	; 0x28
 8005c0a:	fb03 5304 	mla	r3, r3, r4, r5
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	f241 0382 	movw	r3, #4226	; 0x1082
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d105      	bne.n	8005c24 <KMS_EncryptFinal+0x70>
    {
      cryptolib_status = AES_CBC_Encrypt_Finish(&aescbc_ctx,
 8005c18:	aa01      	add	r2, sp, #4
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4821      	ldr	r0, [pc, #132]	; (8005ca4 <KMS_EncryptFinal+0xf0>)
 8005c1e:	f7fe fa31 	bl	8004084 <AES_CBC_Encrypt_Finish>
 8005c22:	4606      	mov	r6, r0
                                                &lEncryptPartLen);
    }
#endif /* KMS_AES_CBC */

#ifdef KMS_AES_ECB
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_ECB)
 8005c24:	2328      	movs	r3, #40	; 0x28
 8005c26:	fb03 5304 	mla	r3, r3, r4, r5
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	f241 0381 	movw	r3, #4225	; 0x1081
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d105      	bne.n	8005c40 <KMS_EncryptFinal+0x8c>
    {
      cryptolib_status = AES_ECB_Encrypt_Finish(&aesecb_ctx,
 8005c34:	aa01      	add	r2, sp, #4
 8005c36:	4639      	mov	r1, r7
 8005c38:	481b      	ldr	r0, [pc, #108]	; (8005ca8 <KMS_EncryptFinal+0xf4>)
 8005c3a:	f7fe fe35 	bl	80048a8 <AES_ECB_Encrypt_Finish>
 8005c3e:	4606      	mov	r6, r0
                                                &lEncryptPartLen);
    }
#endif /* KMS_AES_ECB */

#ifdef KMS_AES_CMAC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CMAC)
 8005c40:	2328      	movs	r3, #40	; 0x28
 8005c42:	fb03 5304 	mla	r3, r3, r4, r5
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	f241 038a 	movw	r3, #4234	; 0x108a
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d10a      	bne.n	8005c66 <KMS_EncryptFinal+0xb2>
    {

      aescmac_ctx.pmTag = pLastEncryptedPart;
 8005c50:	4813      	ldr	r0, [pc, #76]	; (8005ca0 <KMS_EncryptFinal+0xec>)
 8005c52:	f241 03e4 	movw	r3, #4324	; 0x10e4

      /* Finalize data */
      cryptolib_status = AES_CMAC_Encrypt_Finish(&aescmac_ctx,
 8005c56:	aa01      	add	r2, sp, #4
      aescmac_ctx.pmTag = pLastEncryptedPart;
 8005c58:	50c7      	str	r7, [r0, r3]
      cryptolib_status = AES_CMAC_Encrypt_Finish(&aescmac_ctx,
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f600 70cc 	addw	r0, r0, #4044	; 0xfcc
 8005c60:	f7fe fd2a 	bl	80046b8 <AES_CMAC_Encrypt_Finish>
 8005c64:	4606      	mov	r6, r0
                                                 &lEncryptPartLen);
    }
#endif /* KMS_AES_CMAC */
  }

  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005c66:	2328      	movs	r3, #40	; 0x28
 8005c68:	fb03 5404 	mla	r4, r3, r4, r5
 8005c6c:	2500      	movs	r5, #0

  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005c6e:	6a20      	ldr	r0, [r4, #32]
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005c70:	61e5      	str	r5, [r4, #28]
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005c72:	b110      	cbz	r0, 8005c7a <KMS_EncryptFinal+0xc6>
  {
    KMS_FreeKey(KMS_GETSESSSION(hSession).pKeyAllocBuffer);
 8005c74:	f7ff fee2 	bl	8005a3c <KMS_FreeKey>
    KMS_GETSESSSION(hSession).pKeyAllocBuffer = NULL;
 8005c78:	6225      	str	r5, [r4, #32]
  }

  /* Return status*/
  if (cryptolib_status == AES_SUCCESS)
  {
    e_ret_status = CKR_OK;
 8005c7a:	2e00      	cmp	r6, #0
  }

  *pulLastEncryptedPartLen = (uint32_t)lEncryptPartLen;
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	f8c8 3000 	str.w	r3, [r8]
    e_ret_status = CKR_OK;
 8005c82:	bf14      	ite	ne
 8005c84:	2006      	movne	r0, #6
 8005c86:	2000      	moveq	r0, #0

  return e_ret_status;
}
 8005c88:	b002      	add	sp, #8
 8005c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 8005c8e:	f640 461e 	movw	r6, #3102	; 0xc1e
 8005c92:	e7a7      	b.n	8005be4 <KMS_EncryptFinal+0x30>
    return CKR_KEY_HANDLE_INVALID;
 8005c94:	2060      	movs	r0, #96	; 0x60
 8005c96:	e7f7      	b.n	8005c88 <KMS_EncryptFinal+0xd4>
 8005c98:	20007874 	.word	0x20007874
 8005c9c:	20003650 	.word	0x20003650
 8005ca0:	20003118 	.word	0x20003118
 8005ca4:	20003420 	.word	0x20003420
 8005ca8:	20003538 	.word	0x20003538

08005cac <KMS_DecryptInit>:
CK_RV          KMS_DecryptInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                               CK_OBJECT_HANDLE hKey)
{

  /* We reuse similar code between Encrypt & Decrypt Init */
  return    encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_DECRYPT);
 8005cac:	2301      	movs	r3, #1
 8005cae:	f7ff bc5d 	b.w	800556c <encrypt_decrypt_init>
	...

08005cb4 <KMS_DecryptUpdate>:
  */
CK_RV          KMS_DecryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG ulEncryptedPartLen,
                                 CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)
{
 8005cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	b085      	sub	sp, #20

  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
  int32_t lPartLen = 0;
 8005cba:	2400      	movs	r4, #0

  /* Check that a Processing is already on going. */
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005cbc:	4d3b      	ldr	r5, [pc, #236]	; (8005dac <KMS_DecryptUpdate+0xf8>)
  int32_t lPartLen = 0;
 8005cbe:	9403      	str	r4, [sp, #12]
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005cc0:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8005cc4:	1e44      	subs	r4, r0, #1
 8005cc6:	fb0c 5c04 	mla	ip, ip, r4, r5
{
 8005cca:	460e      	mov	r6, r1
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005ccc:	f8dc 001c 	ldr.w	r0, [ip, #28]
{
 8005cd0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005cd4:	4617      	mov	r7, r2
 8005cd6:	4699      	mov	r9, r3
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d064      	beq.n	8005da6 <KMS_DecryptUpdate+0xf2>
  }
  else
  {

#ifdef KMS_AES_CBC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CBC)
 8005cdc:	f8dc c018 	ldr.w	ip, [ip, #24]
 8005ce0:	f241 0082 	movw	r0, #4226	; 0x1082
 8005ce4:	4584      	cmp	ip, r0
 8005ce6:	d15b      	bne.n	8005da0 <KMS_DecryptUpdate+0xec>
    {

      /* Encrypt Data */
      cryptolib_status = AES_CBC_Decrypt_Append(&aescbc_ctx, pEncryptedPart,
 8005ce8:	a803      	add	r0, sp, #12
 8005cea:	9000      	str	r0, [sp, #0]
 8005cec:	4830      	ldr	r0, [pc, #192]	; (8005db0 <KMS_DecryptUpdate+0xfc>)
 8005cee:	f7fe fa33 	bl	8004158 <AES_CBC_Decrypt_Append>
                                                (int32_t)ulEncryptedPartLen,  pPart,
                                                (int32_t *)&lPartLen);
      *pulPartLen = (uint32_t)lPartLen;
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	f8c8 3000 	str.w	r3, [r8]

    }
#endif /* KMS_AES_CBC */

#ifdef KMS_AES_ECB
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_ECB)
 8005cf8:	2328      	movs	r3, #40	; 0x28
 8005cfa:	fb03 5304 	mla	r3, r3, r4, r5
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	f241 0381 	movw	r3, #4225	; 0x1081
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d10a      	bne.n	8005d1e <KMS_DecryptUpdate+0x6a>
    {

      /* Encrypt Data */
      cryptolib_status = AES_ECB_Decrypt_Append(&aesecb_ctx, pEncryptedPart,
 8005d08:	ab03      	add	r3, sp, #12
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	464b      	mov	r3, r9
 8005d10:	4631      	mov	r1, r6
 8005d12:	4828      	ldr	r0, [pc, #160]	; (8005db4 <KMS_DecryptUpdate+0x100>)
 8005d14:	f7fe fdea 	bl	80048ec <AES_ECB_Decrypt_Append>
                                                (int32_t)ulEncryptedPartLen,  pPart,
                                                (int32_t *)&lPartLen);
      *pulPartLen = (uint32_t)lPartLen;
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	f8c8 3000 	str.w	r3, [r8]

    }
#endif /* KMS_AES_ECB */

#ifdef KMS_AES_CCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CCM)
 8005d1e:	2328      	movs	r3, #40	; 0x28
 8005d20:	fb03 5304 	mla	r3, r3, r4, r5
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	f241 0388 	movw	r3, #4232	; 0x1088
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d111      	bne.n	8005d52 <KMS_DecryptUpdate+0x9e>
    {

      /* Set the pointer to the TAG to be checked */
      aesccm_ctx.pmTag = &pEncryptedPart[aesccm_ctx.mPayloadSize];
 8005d2e:	4822      	ldr	r0, [pc, #136]	; (8005db8 <KMS_DecryptUpdate+0x104>)
 8005d30:	f8d0 357c 	ldr.w	r3, [r0, #1404]	; 0x57c
 8005d34:	4433      	add	r3, r6
 8005d36:	f8c0 3570 	str.w	r3, [r0, #1392]	; 0x570

      /* Encrypt Data */
      cryptolib_status = AES_CCM_Decrypt_Append(&aesccm_ctx, pEncryptedPart,
 8005d3a:	ab03      	add	r3, sp, #12
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	463a      	mov	r2, r7
 8005d40:	464b      	mov	r3, r9
 8005d42:	4631      	mov	r1, r6
 8005d44:	f500 60a7 	add.w	r0, r0, #1336	; 0x538
 8005d48:	f7fe fc1e 	bl	8004588 <AES_CCM_Decrypt_Append>
                                                (int32_t)ulEncryptedPartLen,  pPart,
                                                (int32_t *)&lPartLen);
      *pulPartLen = (uint32_t)lPartLen;
 8005d4c:	9b03      	ldr	r3, [sp, #12]
 8005d4e:	f8c8 3000 	str.w	r3, [r8]
    }
#endif /* KMS_AES_CCM */

#ifdef KMS_AES_GCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_GCM)
 8005d52:	2328      	movs	r3, #40	; 0x28
 8005d54:	fb03 5304 	mla	r3, r3, r4, r5
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	f241 0387 	movw	r3, #4231	; 0x1087
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d10a      	bne.n	8005d78 <KMS_DecryptUpdate+0xc4>
    {
      /* Encrypt Data */
      cryptolib_status = AES_GCM_Decrypt_Append(&aesgcm_ctx, pEncryptedPart,
 8005d62:	ab03      	add	r3, sp, #12
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	463a      	mov	r2, r7
 8005d68:	464b      	mov	r3, r9
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4813      	ldr	r0, [pc, #76]	; (8005dbc <KMS_DecryptUpdate+0x108>)
 8005d6e:	f7fe fb03 	bl	8004378 <AES_GCM_Decrypt_Append>
                                                (int32_t)ulEncryptedPartLen,  pPart,
                                                (int32_t *)&lPartLen);
      *pulPartLen = (uint32_t)lPartLen;
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	f8c8 3000 	str.w	r3, [r8]

    }
#endif /* KMS_AES_GCM */

#ifdef KMS_AES_CMAC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CMAC)
 8005d78:	2328      	movs	r3, #40	; 0x28
 8005d7a:	fb03 5404 	mla	r4, r3, r4, r5
 8005d7e:	f241 038a 	movw	r3, #4234	; 0x108a
 8005d82:	69a2      	ldr	r2, [r4, #24]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d104      	bne.n	8005d92 <KMS_DecryptUpdate+0xde>
    {
      /* Encrypt Data */
      cryptolib_status = AES_CMAC_Decrypt_Append(&aescmac_ctx, pEncryptedPart,
 8005d88:	463a      	mov	r2, r7
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	480c      	ldr	r0, [pc, #48]	; (8005dc0 <KMS_DecryptUpdate+0x10c>)
 8005d8e:	f7fe fcfb 	bl	8004788 <AES_CMAC_Decrypt_Append>


  /* Return status*/
  if (cryptolib_status == AES_SUCCESS)
  {
    e_ret_status = CKR_OK;
 8005d92:	2800      	cmp	r0, #0
 8005d94:	bf14      	ite	ne
 8005d96:	2006      	movne	r0, #6
 8005d98:	2000      	moveq	r0, #0
  }
  return e_ret_status;

}
 8005d9a:	b005      	add	sp, #20
 8005d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 8005da0:	f640 401e 	movw	r0, #3102	; 0xc1e
 8005da4:	e7a8      	b.n	8005cf8 <KMS_DecryptUpdate+0x44>
    return CKR_KEY_HANDLE_INVALID;
 8005da6:	2060      	movs	r0, #96	; 0x60
 8005da8:	e7f7      	b.n	8005d9a <KMS_DecryptUpdate+0xe6>
 8005daa:	bf00      	nop
 8005dac:	20007874 	.word	0x20007874
 8005db0:	20003420 	.word	0x20003420
 8005db4:	20003538 	.word	0x20003538
 8005db8:	20003118 	.word	0x20003118
 8005dbc:	2000379c 	.word	0x2000379c
 8005dc0:	200040e4 	.word	0x200040e4

08005dc4 <KMS_Decrypt>:
{
 8005dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8005dc6:	9d06      	ldr	r5, [sp, #24]
 8005dc8:	9500      	str	r5, [sp, #0]
{
 8005dca:	4604      	mov	r4, r0
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8005dcc:	f7ff ff72 	bl	8005cb4 <KMS_DecryptUpdate>
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <KMS_Decrypt+0x2c>)
 8005dd2:	3c01      	subs	r4, #1
 8005dd4:	2228      	movs	r2, #40	; 0x28
 8005dd6:	fb02 3404 	mla	r4, r2, r4, r3
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8005dda:	4606      	mov	r6, r0
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005ddc:	6a20      	ldr	r0, [r4, #32]
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005dde:	2500      	movs	r5, #0
 8005de0:	61e5      	str	r5, [r4, #28]
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005de2:	b110      	cbz	r0, 8005dea <KMS_Decrypt+0x26>
    KMS_FreeKey(KMS_GETSESSSION(hSession).pKeyAllocBuffer);
 8005de4:	f7ff fe2a 	bl	8005a3c <KMS_FreeKey>
    KMS_GETSESSSION(hSession).pKeyAllocBuffer = NULL;
 8005de8:	6225      	str	r5, [r4, #32]
}
 8005dea:	4630      	mov	r0, r6
 8005dec:	b002      	add	sp, #8
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	20007874 	.word	0x20007874

08005df4 <KMS_DecryptFinal>:
  * @param  pLastPart last decrypted data part
  * @param  pulLastPartLen length of the last decrypted data part
  * @retval Operation status
  */
CK_RV          KMS_DecryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastPart, CK_ULONG_PTR pulLastPartLen)
{
 8005df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
  int32_t lPartLen = 0;
 8005df8:	2300      	movs	r3, #0

  /* Check that a Processing is already on going. */
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005dfa:	4e37      	ldr	r6, [pc, #220]	; (8005ed8 <KMS_DecryptFinal+0xe4>)
  int32_t lPartLen = 0;
 8005dfc:	9301      	str	r3, [sp, #4]
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005dfe:	1e45      	subs	r5, r0, #1
 8005e00:	2328      	movs	r3, #40	; 0x28
 8005e02:	fb03 6305 	mla	r3, r3, r5, r6
{
 8005e06:	4690      	mov	r8, r2
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005e08:	69da      	ldr	r2, [r3, #28]
{
 8005e0a:	460f      	mov	r7, r1
  if (KMS_GETSESSSION(hSession).hKey == KMS_HANDLE_KEY_NOT_KNOWN)
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d05f      	beq.n	8005ed0 <KMS_DecryptFinal+0xdc>
  else
  {


#ifdef KMS_AES_CCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CCM)
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	f241 0388 	movw	r3, #4232	; 0x1088
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d157      	bne.n	8005eca <KMS_DecryptFinal+0xd6>
    {
      cryptolib_status = AES_CCM_Decrypt_Finish(&aesccm_ctx,
 8005e1a:	aa01      	add	r2, sp, #4
 8005e1c:	482f      	ldr	r0, [pc, #188]	; (8005edc <KMS_DecryptFinal+0xe8>)
 8005e1e:	f7fe fbcf 	bl	80045c0 <AES_CCM_Decrypt_Finish>
 8005e22:	4604      	mov	r4, r0
                                                (int32_t *)&lPartLen);
    }
#endif /* KMS_AES_CCM */

#ifdef KMS_AES_GCM
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_GCM)
 8005e24:	2328      	movs	r3, #40	; 0x28
 8005e26:	fb03 6305 	mla	r3, r3, r5, r6
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	f241 0387 	movw	r3, #4231	; 0x1087
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d109      	bne.n	8005e48 <KMS_DecryptFinal+0x54>
    {
      aesgcm_ctx.pmTag = pLastPart;
 8005e34:	482a      	ldr	r0, [pc, #168]	; (8005ee0 <KMS_DecryptFinal+0xec>)
      cryptolib_status = AES_GCM_Decrypt_Finish(&aesgcm_ctx,
 8005e36:	aa01      	add	r2, sp, #4
      aesgcm_ctx.pmTag = pLastPart;
 8005e38:	f8c0 76ac 	str.w	r7, [r0, #1708]	; 0x6ac
      cryptolib_status = AES_GCM_Decrypt_Finish(&aesgcm_ctx,
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f200 6084 	addw	r0, r0, #1668	; 0x684
 8005e42:	f7fe fab1 	bl	80043a8 <AES_GCM_Decrypt_Finish>
 8005e46:	4604      	mov	r4, r0
                                                (int32_t *)&lPartLen);
    }
#endif /* KMS_AES_GCM */

#ifdef KMS_AES_CBC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CBC)
 8005e48:	2328      	movs	r3, #40	; 0x28
 8005e4a:	fb03 6305 	mla	r3, r3, r5, r6
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	f241 0382 	movw	r3, #4226	; 0x1082
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d105      	bne.n	8005e64 <KMS_DecryptFinal+0x70>
    {
      cryptolib_status = AES_CBC_Decrypt_Finish(&aescbc_ctx,
 8005e58:	aa01      	add	r2, sp, #4
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	4821      	ldr	r0, [pc, #132]	; (8005ee4 <KMS_DecryptFinal+0xf0>)
 8005e5e:	f7fe f9a1 	bl	80041a4 <AES_CBC_Decrypt_Finish>
 8005e62:	4604      	mov	r4, r0
                                                (int32_t *)&lPartLen);
    }
#endif /* KMS_AES_CBC */

#ifdef KMS_AES_ECB
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_ECB)
 8005e64:	2328      	movs	r3, #40	; 0x28
 8005e66:	fb03 6305 	mla	r3, r3, r5, r6
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	f241 0381 	movw	r3, #4225	; 0x1081
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d105      	bne.n	8005e80 <KMS_DecryptFinal+0x8c>
    {
      cryptolib_status = AES_ECB_Decrypt_Finish(&aesecb_ctx,
 8005e74:	aa01      	add	r2, sp, #4
 8005e76:	4639      	mov	r1, r7
 8005e78:	481b      	ldr	r0, [pc, #108]	; (8005ee8 <KMS_DecryptFinal+0xf4>)
 8005e7a:	f7fe fd5f 	bl	800493c <AES_ECB_Decrypt_Finish>
 8005e7e:	4604      	mov	r4, r0
                                                (int32_t *)&lPartLen);
    }
#endif /* KMS_AES_ECB */

#ifdef KMS_AES_CMAC
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_AES_CMAC)
 8005e80:	2328      	movs	r3, #40	; 0x28
 8005e82:	fb03 6305 	mla	r3, r3, r5, r6
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	f241 038a 	movw	r3, #4234	; 0x108a
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d105      	bne.n	8005e9c <KMS_DecryptFinal+0xa8>
    {
      /* aescmac_ctx.pmTag = pLastPart; */

      /* Finalize data */
      cryptolib_status = AES_CMAC_Decrypt_Finish(&aescmac_ctx,
 8005e90:	aa01      	add	r2, sp, #4
 8005e92:	4639      	mov	r1, r7
 8005e94:	4815      	ldr	r0, [pc, #84]	; (8005eec <KMS_DecryptFinal+0xf8>)
 8005e96:	f7fe fc8d 	bl	80047b4 <AES_CMAC_Decrypt_Finish>
 8005e9a:	4604      	mov	r4, r0
                                                 (int32_t *)&lPartLen);
    }
#endif /* KMS_AES_CMAC */
  }

  *pulLastPartLen = (uint32_t)lPartLen;
 8005e9c:	9b01      	ldr	r3, [sp, #4]
 8005e9e:	f8c8 3000 	str.w	r3, [r8]

  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005ea2:	2328      	movs	r3, #40	; 0x28
 8005ea4:	fb03 6505 	mla	r5, r3, r5, r6
 8005ea8:	2600      	movs	r6, #0

  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005eaa:	6a28      	ldr	r0, [r5, #32]
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8005eac:	61ee      	str	r6, [r5, #28]
  if (KMS_GETSESSSION(hSession).pKeyAllocBuffer != NULL)
 8005eae:	b110      	cbz	r0, 8005eb6 <KMS_DecryptFinal+0xc2>
  {
    KMS_FreeKey(KMS_GETSESSSION(hSession).pKeyAllocBuffer);
 8005eb0:	f7ff fdc4 	bl	8005a3c <KMS_FreeKey>
    KMS_GETSESSSION(hSession).pKeyAllocBuffer = NULL;
 8005eb4:	622e      	str	r6, [r5, #32]
  }

  /* Return status*/
  if ((cryptolib_status == AES_SUCCESS) || (cryptolib_status == AUTHENTICATION_SUCCESSFUL))
 8005eb6:	b16c      	cbz	r4, 8005ed4 <KMS_DecryptFinal+0xe0>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8005eb8:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8005ebc:	4284      	cmp	r4, r0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2006      	movne	r0, #6
 8005ec2:	2000      	moveq	r0, #0
  {
    e_ret_status = CKR_OK;
  }

  return e_ret_status;
}
 8005ec4:	b002      	add	sp, #8
 8005ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int32_t cryptolib_status = AES_ERR_BAD_OPERATION;    /* CryptoLib Error Status */
 8005eca:	f640 441e 	movw	r4, #3102	; 0xc1e
 8005ece:	e7a9      	b.n	8005e24 <KMS_DecryptFinal+0x30>
    return CKR_KEY_HANDLE_INVALID;
 8005ed0:	2060      	movs	r0, #96	; 0x60
 8005ed2:	e7f7      	b.n	8005ec4 <KMS_DecryptFinal+0xd0>
    e_ret_status = CKR_OK;
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	e7f5      	b.n	8005ec4 <KMS_DecryptFinal+0xd0>
 8005ed8:	20007874 	.word	0x20007874
 8005edc:	20003650 	.word	0x20003650
 8005ee0:	20003118 	.word	0x20003118
 8005ee4:	20003420 	.word	0x20003420
 8005ee8:	20003538 	.word	0x20003538
 8005eec:	200040e4 	.word	0x200040e4

08005ef0 <KMS_DigestInit>:
  * @param  hSession session handle
  * @param  pMechanism digest mechanism
  * @retval Operation status
  */
CK_RV     KMS_DigestInit(CK_SESSION_HANDLE hSession,  CK_MECHANISM_PTR pMechanism)
{
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  #define CKM_SHA1               0x00000220UL
  #define CKM_SHA256             0x00000250UL
  */

  /* Check that we support the expected mechanism. */
  if ((pMechanism->mechanism == CKM_SHA_1) ||
 8005ef2:	680b      	ldr	r3, [r1, #0]
 8005ef4:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
{
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460c      	mov	r4, r1
  if ((pMechanism->mechanism == CKM_SHA_1) ||
 8005efc:	d002      	beq.n	8005f04 <KMS_DigestInit+0x14>
 8005efe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005f02:	d137      	bne.n	8005f74 <KMS_DigestInit+0x84>
      (pMechanism->mechanism == CKM_SHA256))
  {
    if (KMS_LL_CRC_Init() == CKR_OK)
 8005f04:	f7fc fbc0 	bl	8002688 <KMS_LL_CRC_Init>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d135      	bne.n	8005f78 <KMS_DigestInit+0x88>
    {
      /* No processing already on going. */
      if (KMS_GETSESSSION(hSession).state != KMS_SESSION_IDLE)
 8005f0c:	4f1d      	ldr	r7, [pc, #116]	; (8005f84 <KMS_DigestInit+0x94>)
 8005f0e:	3e01      	subs	r6, #1
 8005f10:	2328      	movs	r3, #40	; 0x28
 8005f12:	fb03 7306 	mla	r3, r3, r6, r7
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	bb82      	cbnz	r2, 8005f7c <KMS_DigestInit+0x8c>
        e_ret_status = CKR_KEY_HANDLE_INVALID;
      }
      else
      {
        /* Verify that the HASH Ctxt is available */
        if (hash_ctx.mTagSize == 0)
 8005f1a:	4d1b      	ldr	r5, [pc, #108]	; (8005f88 <KMS_DigestInit+0x98>)
 8005f1c:	68aa      	ldr	r2, [r5, #8]
 8005f1e:	bb7a      	cbnz	r2, 8005f80 <KMS_DigestInit+0x90>
        {
          KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 8005f20:	6821      	ldr	r1, [r4, #0]
 8005f22:	6199      	str	r1, [r3, #24]

          if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA_1)
 8005f24:	f5b1 7f08 	cmp.w	r1, #544	; 0x220
 8005f28:	d00a      	beq.n	8005f40 <KMS_DigestInit+0x50>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8005f2a:	2406      	movs	r4, #6
            {
              e_ret_status = CKR_OK ;
            }
          }

          if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA256)
 8005f2c:	2328      	movs	r3, #40	; 0x28
 8005f2e:	fb03 7306 	mla	r3, r3, r6, r7
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005f38:	d00c      	beq.n	8005f54 <KMS_DigestInit+0x64>
  else
  {
    e_ret_status = CKR_MECHANISM_INVALID;
  }

  if (e_ret_status == CKR_OK)
 8005f3a:	b1a4      	cbz	r4, 8005f66 <KMS_DigestInit+0x76>
  {
    KMS_GETSESSSION(hSession).state = KMS_SESSION_DIGEST;
  }
  return e_ret_status;
}
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hash_ctx.mTagSize = CRL_SHA1_SIZE;
 8005f40:	2314      	movs	r3, #20
            if (SHA1_Init(&hash_ctx) == HASH_SUCCESS)
 8005f42:	4628      	mov	r0, r5
            hash_ctx.mFlags = E_HASH_DEFAULT;
 8005f44:	712a      	strb	r2, [r5, #4]
            hash_ctx.mTagSize = CRL_SHA1_SIZE;
 8005f46:	60ab      	str	r3, [r5, #8]
            if (SHA1_Init(&hash_ctx) == HASH_SUCCESS)
 8005f48:	f7fe fd00 	bl	800494c <SHA1_Init>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1ec      	bne.n	8005f2a <KMS_DigestInit+0x3a>
              e_ret_status = CKR_OK ;
 8005f50:	4604      	mov	r4, r0
 8005f52:	e7eb      	b.n	8005f2c <KMS_DigestInit+0x3c>
            hash_ctx.mFlags = E_HASH_DEFAULT;
 8005f54:	2300      	movs	r3, #0
 8005f56:	712b      	strb	r3, [r5, #4]
            if (SHA256_Init(&hash_ctx) == HASH_SUCCESS)
 8005f58:	480b      	ldr	r0, [pc, #44]	; (8005f88 <KMS_DigestInit+0x98>)
            hash_ctx.mTagSize = CRL_SHA256_SIZE;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	60ab      	str	r3, [r5, #8]
            if (SHA256_Init(&hash_ctx) == HASH_SUCCESS)
 8005f5e:	f7fe fd71 	bl	8004a44 <SHA256_Init>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d1e9      	bne.n	8005f3a <KMS_DigestInit+0x4a>
    KMS_GETSESSSION(hSession).state = KMS_SESSION_DIGEST;
 8005f66:	2328      	movs	r3, #40	; 0x28
 8005f68:	fb03 7606 	mla	r6, r3, r6, r7
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	6073      	str	r3, [r6, #4]
 8005f70:	2400      	movs	r4, #0
 8005f72:	e7e3      	b.n	8005f3c <KMS_DigestInit+0x4c>
    e_ret_status = CKR_MECHANISM_INVALID;
 8005f74:	2470      	movs	r4, #112	; 0x70
 8005f76:	e7e1      	b.n	8005f3c <KMS_DigestInit+0x4c>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8005f78:	2406      	movs	r4, #6
 8005f7a:	e7df      	b.n	8005f3c <KMS_DigestInit+0x4c>
        e_ret_status = CKR_KEY_HANDLE_INVALID;
 8005f7c:	2460      	movs	r4, #96	; 0x60
 8005f7e:	e7dd      	b.n	8005f3c <KMS_DigestInit+0x4c>
          e_ret_status = CKR_DEVICE_MEMORY ;
 8005f80:	2431      	movs	r4, #49	; 0x31
  return e_ret_status;
 8005f82:	e7db      	b.n	8005f3c <KMS_DigestInit+0x4c>
 8005f84:	20007874 	.word	0x20007874
 8005f88:	20004214 	.word	0x20004214

08005f8c <KMS_Digest>:
  * @param  pulDigestLen length of the digest message
  * @retval Operation status
  */
CK_RV   KMS_Digest(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                   CK_ULONG ulDataLen, CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)
{
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib Error Status */

  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 8005f8e:	4e1a      	ldr	r6, [pc, #104]	; (8005ff8 <KMS_Digest+0x6c>)
 8005f90:	1e45      	subs	r5, r0, #1
 8005f92:	2028      	movs	r0, #40	; 0x28
 8005f94:	fb00 6005 	mla	r0, r0, r5, r6
{
 8005f98:	461f      	mov	r7, r3
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 8005f9a:	6844      	ldr	r4, [r0, #4]
 8005f9c:	2c01      	cmp	r4, #1
 8005f9e:	4c17      	ldr	r4, [pc, #92]	; (8005ffc <KMS_Digest+0x70>)
 8005fa0:	d126      	bne.n	8005ff0 <KMS_Digest+0x64>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA_1)
 8005fa2:	6983      	ldr	r3, [r0, #24]
 8005fa4:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8005fa8:	d114      	bne.n	8005fd4 <KMS_Digest+0x48>
  {
    /* Add data to be hashed */
    cryptolib_status = SHA1_Append(&hash_ctx, pData, (int32_t)ulDataLen);
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7fe fcec 	bl	8004988 <SHA1_Append>

    if (cryptolib_status == HASH_SUCCESS)
 8005fb0:	b138      	cbz	r0, 8005fc2 <KMS_Digest+0x36>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8005fb2:	2006      	movs	r0, #6
      e_ret_status = CKR_MECHANISM_INVALID    ;
    }
  }

  /* We termintae the Digest */
  KMS_GETSESSSION(hSession).state = KMS_SESSION_IDLE;
 8005fb4:	2328      	movs	r3, #40	; 0x28
 8005fb6:	fb03 6505 	mla	r5, r3, r5, r6
 8005fba:	2300      	movs	r3, #0
 8005fbc:	606b      	str	r3, [r5, #4]

  /* The Hash ctxt is now free */
  hash_ctx.mTagSize = 0;
 8005fbe:	60a3      	str	r3, [r4, #8]

  return e_ret_status;

}
 8005fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      cryptolib_status = SHA1_Finish(&hash_ctx, pDigest, (int32_t *)pulDigestLen);
 8005fc2:	9a06      	ldr	r2, [sp, #24]
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7fe fcee 	bl	80049a8 <SHA1_Finish>
      if (cryptolib_status == HASH_SUCCESS)
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d1f0      	bne.n	8005fb2 <KMS_Digest+0x26>
        e_ret_status = CKR_OK;
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7ef      	b.n	8005fb4 <KMS_Digest+0x28>
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA256)
 8005fd4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005fd8:	d10c      	bne.n	8005ff4 <KMS_Digest+0x68>
      cryptolib_status = SHA256_Append(&hash_ctx, pData, (int32_t)ulDataLen);
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7fe fd50 	bl	8004a80 <SHA256_Append>
      if (cryptolib_status == HASH_SUCCESS)
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <KMS_Digest+0x26>
        cryptolib_status = SHA256_Finish(&hash_ctx, pDigest, (int32_t *)pulDigestLen);
 8005fe4:	9a06      	ldr	r2, [sp, #24]
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7fe fd59 	bl	8004aa0 <SHA256_Finish>
 8005fee:	e7ed      	b.n	8005fcc <KMS_Digest+0x40>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8005ff0:	2091      	movs	r0, #145	; 0x91
 8005ff2:	e7df      	b.n	8005fb4 <KMS_Digest+0x28>
      e_ret_status = CKR_MECHANISM_INVALID    ;
 8005ff4:	2070      	movs	r0, #112	; 0x70
 8005ff6:	e7dd      	b.n	8005fb4 <KMS_Digest+0x28>
 8005ff8:	20007874 	.word	0x20007874
 8005ffc:	20004214 	.word	0x20004214

08006000 <KMS_DigestUpdate>:

  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib Error Status */

  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <KMS_DigestUpdate+0x40>)
{
 8006002:	b510      	push	{r4, lr}
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 8006004:	3801      	subs	r0, #1
 8006006:	2428      	movs	r4, #40	; 0x28
 8006008:	fb04 3000 	mla	r0, r4, r0, r3
 800600c:	6843      	ldr	r3, [r0, #4]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d112      	bne.n	8006038 <KMS_DigestUpdate+0x38>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA_1)
 8006012:	6983      	ldr	r3, [r0, #24]
 8006014:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8006018:	d107      	bne.n	800602a <KMS_DigestUpdate+0x2a>
  {
    /* Add data to be hashed */
    cryptolib_status = SHA1_Append(&hash_ctx, pPart, (int32_t)ulPartLen);
 800601a:	480a      	ldr	r0, [pc, #40]	; (8006044 <KMS_DigestUpdate+0x44>)
 800601c:	f7fe fcb4 	bl	8004988 <SHA1_Append>
    if (cryptolib_status == HASH_SUCCESS)
 8006020:	b108      	cbz	r0, 8006026 <KMS_DigestUpdate+0x26>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8006022:	2006      	movs	r0, #6
    }
  }

  return e_ret_status;

}
 8006024:	bd10      	pop	{r4, pc}
      e_ret_status = CKR_OK;
 8006026:	2000      	movs	r0, #0
 8006028:	e7fc      	b.n	8006024 <KMS_DigestUpdate+0x24>
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA256)
 800602a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800602e:	d105      	bne.n	800603c <KMS_DigestUpdate+0x3c>
      cryptolib_status = SHA256_Append(&hash_ctx, pPart, (int32_t)ulPartLen);
 8006030:	4804      	ldr	r0, [pc, #16]	; (8006044 <KMS_DigestUpdate+0x44>)
 8006032:	f7fe fd25 	bl	8004a80 <SHA256_Append>
 8006036:	e7f3      	b.n	8006020 <KMS_DigestUpdate+0x20>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8006038:	2091      	movs	r0, #145	; 0x91
 800603a:	e7f3      	b.n	8006024 <KMS_DigestUpdate+0x24>
      e_ret_status = CKR_MECHANISM_INVALID;
 800603c:	2070      	movs	r0, #112	; 0x70
  return e_ret_status;
 800603e:	e7f1      	b.n	8006024 <KMS_DigestUpdate+0x24>
 8006040:	20007874 	.word	0x20007874
 8006044:	20004214 	.word	0x20004214

08006048 <KMS_DigestKey>:
  (void)(hSession);
  (void)(hKey);
  /* Not supported yet ! */
  return CKR_FUNCTION_FAILED;

}
 8006048:	2006      	movs	r0, #6
 800604a:	4770      	bx	lr

0800604c <KMS_DigestFinal>:
  * @param  pulDigestLen length of the digest message
  * @retval Operation status
  */
CK_RV   KMS_DigestFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pDigest,
                        CK_ULONG_PTR pulDigestLen)
{
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib Error Status */

  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 800604e:	4e1e      	ldr	r6, [pc, #120]	; (80060c8 <KMS_DigestFinal+0x7c>)
 8006050:	1e45      	subs	r5, r0, #1
 8006052:	2028      	movs	r0, #40	; 0x28
 8006054:	fb00 6005 	mla	r0, r0, r5, r6
{
 8006058:	460b      	mov	r3, r1
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 800605a:	6847      	ldr	r7, [r0, #4]
 800605c:	2f01      	cmp	r7, #1
{
 800605e:	4614      	mov	r4, r2
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_DIGEST)
 8006060:	d12e      	bne.n	80060c0 <KMS_DigestFinal+0x74>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA_1)
 8006062:	6980      	ldr	r0, [r0, #24]
 8006064:	f5b0 7f08 	cmp.w	r0, #544	; 0x220
 8006068:	d11b      	bne.n	80060a2 <KMS_DigestFinal+0x56>
  {
    KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, SHA1_LENGTH);
 800606a:	b919      	cbnz	r1, 8006074 <KMS_DigestFinal+0x28>
 800606c:	2214      	movs	r2, #20
  }
  else
  {
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA256)
    {
      KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, SHA256_LENGTH);
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	4618      	mov	r0, r3
  /* The Hash ctxt is now free */
  hash_ctx.mTagSize = 0;

  return e_ret_status;

}
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, SHA1_LENGTH);
 8006074:	6813      	ldr	r3, [r2, #0]
 8006076:	2b13      	cmp	r3, #19
 8006078:	d804      	bhi.n	8006084 <KMS_DigestFinal+0x38>
 800607a:	2314      	movs	r3, #20
      KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, SHA256_LENGTH);
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8006082:	e7f6      	b.n	8006072 <KMS_DigestFinal+0x26>
    cryptolib_status = SHA1_Finish(&hash_ctx, pDigest, (int32_t *)pulDigestLen);
 8006084:	4811      	ldr	r0, [pc, #68]	; (80060cc <KMS_DigestFinal+0x80>)
 8006086:	f7fe fc8f 	bl	80049a8 <SHA1_Finish>
    if (cryptolib_status == HASH_SUCCESS)
 800608a:	b140      	cbz	r0, 800609e <KMS_DigestFinal+0x52>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 800608c:	2006      	movs	r0, #6
  KMS_GETSESSSION(hSession).state = KMS_SESSION_IDLE;
 800608e:	2328      	movs	r3, #40	; 0x28
 8006090:	fb03 6505 	mla	r5, r3, r5, r6
  hash_ctx.mTagSize = 0;
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <KMS_DigestFinal+0x80>)
  KMS_GETSESSSION(hSession).state = KMS_SESSION_IDLE;
 8006096:	2300      	movs	r3, #0
 8006098:	606b      	str	r3, [r5, #4]
  hash_ctx.mTagSize = 0;
 800609a:	6093      	str	r3, [r2, #8]
  return e_ret_status;
 800609c:	e7e9      	b.n	8006072 <KMS_DigestFinal+0x26>
      e_ret_status = CKR_OK;
 800609e:	2000      	movs	r0, #0
 80060a0:	e7f5      	b.n	800608e <KMS_DigestFinal+0x42>
    if (KMS_GETSESSSION(hSession).Mechanism == CKM_SHA256)
 80060a2:	f5b0 7f14 	cmp.w	r0, #592	; 0x250
 80060a6:	d10d      	bne.n	80060c4 <KMS_DigestFinal+0x78>
      KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, SHA256_LENGTH);
 80060a8:	b909      	cbnz	r1, 80060ae <KMS_DigestFinal+0x62>
 80060aa:	2220      	movs	r2, #32
 80060ac:	e7df      	b.n	800606e <KMS_DigestFinal+0x22>
 80060ae:	6813      	ldr	r3, [r2, #0]
 80060b0:	2b1f      	cmp	r3, #31
 80060b2:	d801      	bhi.n	80060b8 <KMS_DigestFinal+0x6c>
 80060b4:	2320      	movs	r3, #32
 80060b6:	e7e1      	b.n	800607c <KMS_DigestFinal+0x30>
      cryptolib_status = SHA256_Finish(&hash_ctx, pDigest, (int32_t *)pulDigestLen);
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <KMS_DigestFinal+0x80>)
 80060ba:	f7fe fcf1 	bl	8004aa0 <SHA256_Finish>
 80060be:	e7e4      	b.n	800608a <KMS_DigestFinal+0x3e>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 80060c0:	2091      	movs	r0, #145	; 0x91
 80060c2:	e7e4      	b.n	800608e <KMS_DigestFinal+0x42>
      e_ret_status = CKR_MECHANISM_INVALID;
 80060c4:	2070      	movs	r0, #112	; 0x70
 80060c6:	e7e2      	b.n	800608e <KMS_DigestFinal+0x42>
 80060c8:	20007874 	.word	0x20007874
 80060cc:	20004214 	.word	0x20004214

080060d0 <KMS_DestroyObject>:
  * @param  hObject object handle
  * @retval Operation status
  */
CK_RV  KMS_DestroyObject(CK_SESSION_HANDLE hSession,
                         CK_OBJECT_HANDLE hObject)
{
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)(hSession);
  /* Verify that the object is removable, reading the attributes */

  /* Read the key value from the Key Handle                 */
  /* Key Handle is the index to one of static or nvm        */
  pkms_object = KMS_Objects_GetPointer(hObject);
 80060d2:	4608      	mov	r0, r1
{
 80060d4:	460d      	mov	r5, r1
  pkms_object = KMS_Objects_GetPointer(hObject);
 80060d6:	f001 fe5f 	bl	8007d98 <KMS_Objects_GetPointer>

  /* Check that hKey is valid */
  if (pkms_object != NULL)
 80060da:	4601      	mov	r1, r0
 80060dc:	b198      	cbz	r0, 8006106 <KMS_DestroyObject+0x36>
  {
    /* Check the CKA_DESTROYABLE attribute = CK_TRUE      */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_DESTROYABLE, pkms_object, &pDeriveAttribute);
 80060de:	aa01      	add	r2, sp, #4
 80060e0:	f44f 70b9 	mov.w	r0, #370	; 0x172
 80060e4:	f001 fe8d 	bl	8007e02 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not destroyable */
    if ((e_ret_status != CKR_OK) || (*(pDeriveAttribute->data) != CK_TRUE))
 80060e8:	4604      	mov	r4, r0
 80060ea:	b970      	cbnz	r0, 800610a <KMS_DestroyObject+0x3a>
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10a      	bne.n	800610a <KMS_DestroyObject+0x3a>
      /* Object cannot be removed. */
      return (CKR_ACTION_PROHIBITED);
    }

    /* Object is removable */
    rv_nvm =   KMS_PlatfObjects_NvmRemoveObject(hObject);
 80060f4:	4628      	mov	r0, r5
 80060f6:	f001 ffe1 	bl	80080bc <KMS_PlatfObjects_NvmRemoveObject>
    if (rv_nvm == NVMS_NOERROR)
 80060fa:	b908      	cbnz	r0, 8006100 <KMS_DestroyObject+0x30>
    {
      KMS_PlatfObjects_NvmDynamicObjectList();
 80060fc:	f001 ff80 	bl	8008000 <KMS_PlatfObjects_NvmDynamicObjectList>
      e_ret_status = CKR_OK;
    }
  }

  return e_ret_status;
}
 8006100:	4620      	mov	r0, r4
 8006102:	b003      	add	sp, #12
 8006104:	bd30      	pop	{r4, r5, pc}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8006106:	2406      	movs	r4, #6
 8006108:	e7fa      	b.n	8006100 <KMS_DestroyObject+0x30>
      return (CKR_ACTION_PROHIBITED);
 800610a:	241b      	movs	r4, #27
 800610c:	e7f8      	b.n	8006100 <KMS_DestroyObject+0x30>
	...

08006110 <KMS_Entry>:
  * @param  eID KMS function ID
  * @param  arguments function ID dependent arguments
  * @retval Operation status
  */
CK_RV KMS_Entry(KMS_FunctionIDTypeDef eID, va_list arguments)
{
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /**
    * @brief Provides import and storage of a single client certificate and
    * associated private key.
    */
  switch (eID)
 8006114:	f100 4070 	add.w	r0, r0, #4026531840	; 0xf0000000
{
 8006118:	b089      	sub	sp, #36	; 0x24
  switch (eID)
 800611a:	2826      	cmp	r0, #38	; 0x26
 800611c:	f200 8136 	bhi.w	800638c <KMS_Entry+0x27c>
 8006120:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006124:	00400027 	.word	0x00400027
 8006128:	00740050 	.word	0x00740050
 800612c:	00ae008b 	.word	0x00ae008b
 8006130:	013400b9 	.word	0x013400b9
 8006134:	010800d4 	.word	0x010800d4
 8006138:	013f011f 	.word	0x013f011f
 800613c:	017d0164 	.word	0x017d0164
 8006140:	01af019e 	.word	0x01af019e
 8006144:	01e401c3 	.word	0x01e401c3
 8006148:	021d0205 	.word	0x021d0205
 800614c:	02530232 	.word	0x02530232
 8006150:	028c0274 	.word	0x028c0274
 8006154:	02b40299 	.word	0x02b40299
 8006158:	02d602c3 	.word	0x02d602c3
 800615c:	032402ed 	.word	0x032402ed
 8006160:	039b0377 	.word	0x039b0377
 8006164:	03e304d0 	.word	0x03e304d0
 8006168:	04210134 	.word	0x04210134
 800616c:	04840457 	.word	0x04840457
 8006170:	04bb      	.short	0x04bb
        CK_C_Initialize pC_Initialize;

        /* check if a Token is plugged in */

        /* Read the FunctionList supported by the Token */
        KMS_EXT_TOKEN_GetFunctionList(&pExtToken_FunctionList);
 8006172:	4cb6      	ldr	r4, [pc, #728]	; (800644c <KMS_Entry+0x33c>)
      pInitArgs = va_arg(arguments, void *);
 8006174:	680d      	ldr	r5, [r1, #0]
        KMS_EXT_TOKEN_GetFunctionList(&pExtToken_FunctionList);
 8006176:	4620      	mov	r0, r4
 8006178:	f7fa fc7c 	bl	8000a74 <KMS_EXT_TOKEN_GetFunctionList>

        /* If the Token support Initialize() function, call it */
        pC_Initialize = pExtToken_FunctionList->C_Initialize;
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	685b      	ldr	r3, [r3, #4]

        if (pC_Initialize != NULL)
        {
          /* Call the C_Initialize function in the library */
          e_ret_ext_status = (*pC_Initialize)(pInitArgs);
 8006180:	4628      	mov	r0, r5
        if (pC_Initialize != NULL)
 8006182:	b15b      	cbz	r3, 800619c <KMS_Entry+0x8c>
          e_ret_ext_status = (*pC_Initialize)(pInitArgs);
 8006184:	4798      	blx	r3
 8006186:	4604      	mov	r4, r0

          /* We call also the Initialize of the KMS */
          e_ret_status = KMS_Initialize(pInitArgs);
 8006188:	4628      	mov	r0, r5
 800618a:	f000 fcb9 	bl	8006b00 <KMS_Initialize>

          /* Handle error on Ext_Token but not on KMS, to ensure error is */
          /* returned whether issue happens on KMS or Ext_Token           */
          if (e_ret_status == CKR_OK)
          {
            e_ret_status = e_ret_ext_status;
 800618e:	2800      	cmp	r0, #0
 8006190:	bf18      	it	ne
 8006192:	4604      	movne	r4, r0

  /* Clean up */
  va_end(arguments);

  return e_ret_status;
}
 8006194:	4620      	mov	r0, r4
 8006196:	b009      	add	sp, #36	; 0x24
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          e_ret_status = KMS_Initialize(pInitArgs);
 800619c:	f000 fcb0 	bl	8006b00 <KMS_Initialize>
      e_ret_status = KMS_GetTokenInfo(slotID, pInfo);
 80061a0:	4604      	mov	r4, r0
      break;
 80061a2:	e7f7      	b.n	8006194 <KMS_Entry+0x84>
        if ((pExtToken_FunctionList != NULL) &&
 80061a4:	4ba9      	ldr	r3, [pc, #676]	; (800644c <KMS_Entry+0x33c>)
      pReserved = va_arg(arguments, CK_VOID_PTR);
 80061a6:	680d      	ldr	r5, [r1, #0]
        if ((pExtToken_FunctionList != NULL) &&
 80061a8:	681b      	ldr	r3, [r3, #0]
          e_ret_ext_status = (*pC_Finalize)(pReserved);
 80061aa:	4628      	mov	r0, r5
        if ((pExtToken_FunctionList != NULL) &&
 80061ac:	b13b      	cbz	r3, 80061be <KMS_Entry+0xae>
            (pExtToken_FunctionList->C_Finalize != NULL))
 80061ae:	689b      	ldr	r3, [r3, #8]
        if ((pExtToken_FunctionList != NULL) &&
 80061b0:	b12b      	cbz	r3, 80061be <KMS_Entry+0xae>
          e_ret_ext_status = (*pC_Finalize)(pReserved);
 80061b2:	4798      	blx	r3
 80061b4:	4604      	mov	r4, r0
          e_ret_status = KMS_Finalize(pReserved);
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fcd8 	bl	8006b6c <KMS_Finalize>
 80061bc:	e7e7      	b.n	800618e <KMS_Entry+0x7e>
          e_ret_status = KMS_Finalize(pReserved);
 80061be:	f000 fcd5 	bl	8006b6c <KMS_Finalize>
 80061c2:	e7ed      	b.n	80061a0 <KMS_Entry+0x90>
      pInfo = va_arg(arguments, CK_INFO_PTR);
 80061c4:	680d      	ldr	r5, [r1, #0]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, 32);
 80061c6:	2120      	movs	r1, #32
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7fc fa75 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      pInfo->cryptokiVersion.major = 2;
 80061ce:	462b      	mov	r3, r5
 80061d0:	f642 0202 	movw	r2, #10242	; 0x2802
 80061d4:	f823 2b02 	strh.w	r2, [r3], #2
      (void)memcpy(&pInfo->manufacturerID[0], "ST Microelectronics             ", 32);
 80061d8:	4a9d      	ldr	r2, [pc, #628]	; (8006450 <KMS_Entry+0x340>)
 80061da:	f102 0120 	add.w	r1, r2, #32
 80061de:	f852 0b04 	ldr.w	r0, [r2], #4
 80061e2:	f843 0b04 	str.w	r0, [r3], #4
 80061e6:	428a      	cmp	r2, r1
 80061e8:	d1f9      	bne.n	80061de <KMS_Entry+0xce>
      pInfo->flags = 0;                         /* The spec say: MUST be Zero */
 80061ea:	2300      	movs	r3, #0
 80061ec:	626b      	str	r3, [r5, #36]	; 0x24
      (void)memcpy(&pInfo->libraryDescription[0], "KMS-EXT-TOKEN                     ", 32);
 80061ee:	4b99      	ldr	r3, [pc, #612]	; (8006454 <KMS_Entry+0x344>)
 80061f0:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80061f4:	f103 0120 	add.w	r1, r3, #32
 80061f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80061fc:	f842 0b04 	str.w	r0, [r2], #4
 8006200:	428b      	cmp	r3, r1
 8006202:	d1f9      	bne.n	80061f8 <KMS_Entry+0xe8>
      pInfo->libraryVersion.major = 0;
 8006204:	2400      	movs	r4, #0
 8006206:	f8a5 4048 	strh.w	r4, [r5, #72]	; 0x48
      break;
 800620a:	e7c3      	b.n	8006194 <KMS_Entry+0x84>
      pulCount = va_arg(arguments, CK_ULONG_PTR);
 800620c:	e9d1 4501 	ldrd	r4, r5, [r1, #4]
      if (pSlotList == NULL_PTR)
 8006210:	b92c      	cbnz	r4, 800621e <KMS_Entry+0x10e>
        if (pulCount != NULL_PTR)
 8006212:	2d00      	cmp	r5, #0
 8006214:	f000 8462 	beq.w	8006adc <KMS_Entry+0x9cc>
          *pulCount = 1;
 8006218:	2301      	movs	r3, #1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	e7ba      	b.n	8006194 <KMS_Entry+0x84>
        if (*pulCount >= 1UL)
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 845e 	beq.w	8006ae2 <KMS_Entry+0x9d2>
      KMS_LL_IsBufferInSecureEnclave((void *)pSlotList, sizeof(CK_SLOT_ID_PTR));
 8006226:	4620      	mov	r0, r4
 8006228:	2104      	movs	r1, #4
 800622a:	f7fc fa45 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
          pSlotList[0] = 0;
 800622e:	2300      	movs	r3, #0
          *pulCount = 1;
 8006230:	2201      	movs	r2, #1
          pSlotList[0] = 0;
 8006232:	6023      	str	r3, [r4, #0]
          *pulCount = 1;
 8006234:	602a      	str	r2, [r5, #0]
          e_ret_status = CKR_OK;
 8006236:	461c      	mov	r4, r3
 8006238:	e7ac      	b.n	8006194 <KMS_Entry+0x84>
      pInfo = va_arg(arguments, CK_SLOT_INFO_PTR);
 800623a:	e9d1 4500 	ldrd	r4, r5, [r1]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, 32);
 800623e:	2120      	movs	r1, #32
 8006240:	4628      	mov	r0, r5
 8006242:	f7fc fa39 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      if (slotID == 0UL)
 8006246:	2c00      	cmp	r4, #0
 8006248:	f040 8454 	bne.w	8006af4 <KMS_Entry+0x9e4>
        (void)memcpy(&pInfo->slotDescription[0],
 800624c:	4b82      	ldr	r3, [pc, #520]	; (8006458 <KMS_Entry+0x348>)
 800624e:	462a      	mov	r2, r5
 8006250:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006254:	f853 0b04 	ldr.w	r0, [r3], #4
 8006258:	f842 0b04 	str.w	r0, [r2], #4
 800625c:	428b      	cmp	r3, r1
 800625e:	d1f9      	bne.n	8006254 <KMS_Entry+0x144>
        (void)memcpy(&pInfo->manufacturerID[0], "ST Microelectronics             ", 32);
 8006260:	4b7b      	ldr	r3, [pc, #492]	; (8006450 <KMS_Entry+0x340>)
 8006262:	f105 0240 	add.w	r2, r5, #64	; 0x40
 8006266:	f103 0120 	add.w	r1, r3, #32
 800626a:	f853 0b04 	ldr.w	r0, [r3], #4
 800626e:	f842 0b04 	str.w	r0, [r2], #4
 8006272:	428b      	cmp	r3, r1
 8006274:	d1f9      	bne.n	800626a <KMS_Entry+0x15a>
        pInfo->flags = CKF_TOKEN_PRESENT;
 8006276:	2301      	movs	r3, #1
 8006278:	2400      	movs	r4, #0
 800627a:	e9c5 3418 	strd	r3, r4, [r5, #96]	; 0x60
 800627e:	e789      	b.n	8006194 <KMS_Entry+0x84>
      pInfo       = va_arg(arguments, CK_TOKEN_INFO_PTR);
 8006280:	e9d1 5400 	ldrd	r5, r4, [r1]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, 32);
 8006284:	2120      	movs	r1, #32
 8006286:	4620      	mov	r0, r4
 8006288:	f7fc fa16 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_GetTokenInfo(slotID, pInfo);
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fc82 	bl	8006b98 <KMS_GetTokenInfo>
 8006294:	e784      	b.n	80061a0 <KMS_Entry+0x90>
      pInfo       = va_arg(arguments, CK_MECHANISM_INFO_PTR);
 8006296:	688d      	ldr	r5, [r1, #8]
      type        = va_arg(arguments, CK_MECHANISM_TYPE);
 8006298:	e9d1 6700 	ldrd	r6, r7, [r1]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, 32);
 800629c:	4628      	mov	r0, r5
 800629e:	2120      	movs	r1, #32
 80062a0:	f7fc fa0a 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 80062a4:	4b69      	ldr	r3, [pc, #420]	; (800644c <KMS_Entry+0x33c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b92b      	cbnz	r3, 80062b6 <KMS_Entry+0x1a6>
        e_ret_status = KMS_GetMechanismInfo(slotID, type, pInfo);
 80062aa:	462a      	mov	r2, r5
 80062ac:	4639      	mov	r1, r7
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 fd62 	bl	8006d78 <KMS_GetMechanismInfo>
 80062b4:	e774      	b.n	80061a0 <KMS_Entry+0x90>
            (pExtToken_FunctionList->C_GetMechanismInfo != NULL))
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((pExtToken_FunctionList != NULL) &&
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f6      	beq.n	80062aa <KMS_Entry+0x19a>
          e_ret_status = pExtToken_FunctionList->C_GetMechanismInfo(slotID, type, pInfo);
 80062bc:	462a      	mov	r2, r5
 80062be:	4639      	mov	r1, r7
 80062c0:	4630      	mov	r0, r6
 80062c2:	4798      	blx	r3
      if (e_ret_status != CKR_OK)
 80062c4:	4604      	mov	r4, r0
 80062c6:	2800      	cmp	r0, #0
 80062c8:	d1ef      	bne.n	80062aa <KMS_Entry+0x19a>
 80062ca:	e763      	b.n	8006194 <KMS_Entry+0x84>
      Notify = va_arg(arguments, CK_NOTIFY);
 80062cc:	e9d1 a902 	ldrd	sl, r9, [r1, #8]
      flags = va_arg(arguments, uint32_t);
 80062d0:	e9d1 7800 	ldrd	r7, r8, [r1]
      phSession = va_arg(arguments, CK_SESSION_HANDLE_PTR);
 80062d4:	690d      	ldr	r5, [r1, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pApplication, sizeof(void *));
 80062d6:	4650      	mov	r0, sl
 80062d8:	2104      	movs	r1, #4
 80062da:	f7fc f9ed 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phSession, sizeof(void *));
 80062de:	2104      	movs	r1, #4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f7fc f9e9 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_OpenSession(slotID,  flags, pApplication, Notify, phSession);
 80062e6:	464b      	mov	r3, r9
 80062e8:	9500      	str	r5, [sp, #0]
 80062ea:	4652      	mov	r2, sl
 80062ec:	4641      	mov	r1, r8
 80062ee:	4638      	mov	r0, r7
 80062f0:	f000 fca6 	bl	8006c40 <KMS_OpenSession>
        if ((pExtToken_FunctionList != NULL) &&
 80062f4:	4b55      	ldr	r3, [pc, #340]	; (800644c <KMS_Entry+0x33c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
      e_ret_status = KMS_OpenSession(slotID,  flags, pApplication, Notify, phSession);
 80062f8:	4604      	mov	r4, r0
        if ((pExtToken_FunctionList != NULL) &&
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f af4a 	beq.w	8006194 <KMS_Entry+0x84>
            (pExtToken_FunctionList->C_OpenSession != NULL))
 8006300:	6b5e      	ldr	r6, [r3, #52]	; 0x34
        if ((pExtToken_FunctionList != NULL) &&
 8006302:	2e00      	cmp	r6, #0
 8006304:	f43f af46 	beq.w	8006194 <KMS_Entry+0x84>
 8006308:	ab07      	add	r3, sp, #28
            e_ret_status = (*pC_OpenSession)(slotID,
 800630a:	9300      	str	r3, [sp, #0]
          if (Notify != NULL)
 800630c:	f1b9 0f00 	cmp.w	r9, #0
 8006310:	d00d      	beq.n	800632e <KMS_Entry+0x21e>
            e_ret_status = (*pC_OpenSession)(slotID,
 8006312:	4b52      	ldr	r3, [pc, #328]	; (800645c <KMS_Entry+0x34c>)
 8006314:	4652      	mov	r2, sl
            e_ret_status = (*pC_OpenSession)(slotID,  flags, NULL, NULL, &hSession_ExtToken);
 8006316:	4641      	mov	r1, r8
 8006318:	4638      	mov	r0, r7
 800631a:	47b0      	blx	r6
            if (e_ret_status == CKR_OK)
 800631c:	4604      	mov	r4, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	f47f af38 	bne.w	8006194 <KMS_Entry+0x84>
              KMS_OpenSession_RegisterExtToken(*phSession, hSession_ExtToken);
 8006324:	9907      	ldr	r1, [sp, #28]
 8006326:	6828      	ldr	r0, [r5, #0]
 8006328:	f000 fce2 	bl	8006cf0 <KMS_OpenSession_RegisterExtToken>
      break;
 800632c:	e732      	b.n	8006194 <KMS_Entry+0x84>
            e_ret_status = (*pC_OpenSession)(slotID,  flags, NULL, NULL, &hSession_ExtToken);
 800632e:	464b      	mov	r3, r9
 8006330:	464a      	mov	r2, r9
 8006332:	e7f0      	b.n	8006316 <KMS_Entry+0x206>
      hSession = va_arg(arguments, CK_SESSION_HANDLE);
 8006334:	680d      	ldr	r5, [r1, #0]
      CHECK_SESSION_HANDLE(hSession);
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fd0c 	bl	8006d54 <KMS_Check_Session_Handle>
 800633c:	28b3      	cmp	r0, #179	; 0xb3
 800633e:	d101      	bne.n	8006344 <KMS_Entry+0x234>
 8006340:	24b3      	movs	r4, #179	; 0xb3
 8006342:	e727      	b.n	8006194 <KMS_Entry+0x84>
        if ((pExtToken_FunctionList != NULL) &&
 8006344:	4b41      	ldr	r3, [pc, #260]	; (800644c <KMS_Entry+0x33c>)
 8006346:	681b      	ldr	r3, [r3, #0]
          e_ret_ext_status = (*pC_CloseSession)(hSession);
 8006348:	4628      	mov	r0, r5
        if ((pExtToken_FunctionList != NULL) &&
 800634a:	b13b      	cbz	r3, 800635c <KMS_Entry+0x24c>
            (pExtToken_FunctionList->C_CloseSession != NULL))
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if ((pExtToken_FunctionList != NULL) &&
 800634e:	b12b      	cbz	r3, 800635c <KMS_Entry+0x24c>
          e_ret_ext_status = (*pC_CloseSession)(hSession);
 8006350:	4798      	blx	r3
 8006352:	4604      	mov	r4, r0
          e_ret_status = KMS_CloseSession(hSession);
 8006354:	4628      	mov	r0, r5
 8006356:	f000 fcdf 	bl	8006d18 <KMS_CloseSession>
 800635a:	e718      	b.n	800618e <KMS_Entry+0x7e>
          e_ret_status = KMS_CloseSession(hSession);
 800635c:	f000 fcdc 	bl	8006d18 <KMS_CloseSession>
 8006360:	e71e      	b.n	80061a0 <KMS_Entry+0x90>
      pTemplate = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8006362:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006366:	4628      	mov	r0, r5
      phObject = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8006368:	e9d1 7802 	ldrd	r7, r8, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 800636c:	f000 fcf2 	bl	8006d54 <KMS_Check_Session_Handle>
 8006370:	28b3      	cmp	r0, #179	; 0xb3
 8006372:	d0e5      	beq.n	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pTemplate, sizeof(CK_ATTRIBUTE)*ulCount);
 8006374:	210c      	movs	r1, #12
 8006376:	4379      	muls	r1, r7
 8006378:	4630      	mov	r0, r6
 800637a:	f7fc f99d 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE));
 800637e:	2104      	movs	r1, #4
 8006380:	4640      	mov	r0, r8
 8006382:	f7fc f999 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 8006386:	4b31      	ldr	r3, [pc, #196]	; (800644c <KMS_Entry+0x33c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	b90b      	cbnz	r3, 8006390 <KMS_Entry+0x280>
      e_ret_status = CKR_FUNCTION_FAILED;
 800638c:	2406      	movs	r4, #6
 800638e:	e701      	b.n	8006194 <KMS_Entry+0x84>
            (pExtToken_FunctionList->C_CreateObject != NULL))
 8006390:	6d5c      	ldr	r4, [r3, #84]	; 0x54
        if ((pExtToken_FunctionList != NULL) &&
 8006392:	2c00      	cmp	r4, #0
 8006394:	d0fa      	beq.n	800638c <KMS_Entry+0x27c>
          e_ret_status = (*pC_FindObjects)(hSession, phObject, ulMaxObjectCount, pulObjectCount);
 8006396:	4643      	mov	r3, r8
 8006398:	463a      	mov	r2, r7
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47a0      	blx	r4
 80063a0:	e6fe      	b.n	80061a0 <KMS_Entry+0x90>
      hObject = va_arg(arguments, CK_OBJECT_HANDLE);
 80063a2:	e9d1 5400 	ldrd	r5, r4, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 fcd4 	bl	8006d54 <KMS_Check_Session_Handle>
 80063ac:	28b3      	cmp	r0, #179	; 0xb3
 80063ae:	d0c7      	beq.n	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hObject);
 80063b0:	4620      	mov	r0, r4
 80063b2:	f001 fcad 	bl	8007d10 <KMS_Objects_GetRange>
 80063b6:	2805      	cmp	r0, #5
 80063b8:	d101      	bne.n	80063be <KMS_Entry+0x2ae>
 80063ba:	2482      	movs	r4, #130	; 0x82
 80063bc:	e6ea      	b.n	8006194 <KMS_Entry+0x84>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hObject);
 80063be:	4620      	mov	r0, r4
 80063c0:	f001 fca6 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 80063c4:	3803      	subs	r0, #3
 80063c6:	b2c0      	uxtb	r0, r0
 80063c8:	2801      	cmp	r0, #1
 80063ca:	d80a      	bhi.n	80063e2 <KMS_Entry+0x2d2>
          if ((pExtToken_FunctionList != NULL) &&
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <KMS_Entry+0x33c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0db      	beq.n	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_DestroyObject != NULL))
 80063d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
          if ((pExtToken_FunctionList != NULL) &&
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0d8      	beq.n	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_DestroyObject)(hSession, hObject);
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	4798      	blx	r3
 80063e0:	e6de      	b.n	80061a0 <KMS_Entry+0x90>
          e_ret_status = KMS_DestroyObject(hSession, hObject);
 80063e2:	4621      	mov	r1, r4
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff fe73 	bl	80060d0 <KMS_DestroyObject>
 80063ea:	e6d9      	b.n	80061a0 <KMS_Entry+0x90>
        pTemplate      = va_arg(arguments, CK_ATTRIBUTE_PTR);
 80063ec:	e9d1 4500 	ldrd	r4, r5, [r1]
        CHECK_SESSION_HANDLE(hSession);
 80063f0:	4620      	mov	r0, r4
        ulCount         = va_arg(arguments, CK_ULONG);
 80063f2:	688e      	ldr	r6, [r1, #8]
        CHECK_SESSION_HANDLE(hSession);
 80063f4:	f000 fcae 	bl	8006d54 <KMS_Check_Session_Handle>
 80063f8:	28b3      	cmp	r0, #179	; 0xb3
 80063fa:	d0a1      	beq.n	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pTemplate, sizeof(CK_ATTRIBUTE)*ulCount);
 80063fc:	210c      	movs	r1, #12
 80063fe:	4371      	muls	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	f7fc f959 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <KMS_Entry+0x33c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0be      	beq.n	800638c <KMS_Entry+0x27c>
            (pExtToken_FunctionList->C_FindObjectsInit != NULL))
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((pExtToken_FunctionList != NULL) &&
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0bb      	beq.n	800638c <KMS_Entry+0x27c>
          e_ret_status = (*pC_GenerateRandom)(hSession, pRandomData, ulRandomLen);
 8006414:	4632      	mov	r2, r6
 8006416:	4629      	mov	r1, r5
 8006418:	4620      	mov	r0, r4
 800641a:	4798      	blx	r3
 800641c:	e6c0      	b.n	80061a0 <KMS_Entry+0x90>
        phObject          = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 800641e:	e9d1 5600 	ldrd	r5, r6, [r1]
        CHECK_SESSION_HANDLE(hSession);
 8006422:	4628      	mov	r0, r5
        pulObjectCount    = va_arg(arguments, CK_ULONG_PTR);
 8006424:	e9d1 7802 	ldrd	r7, r8, [r1, #8]
        CHECK_SESSION_HANDLE(hSession);
 8006428:	f000 fc94 	bl	8006d54 <KMS_Check_Session_Handle>
 800642c:	28b3      	cmp	r0, #179	; 0xb3
 800642e:	d087      	beq.n	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE)*ulMaxObjectCount);
 8006430:	00b9      	lsls	r1, r7, #2
 8006432:	4630      	mov	r0, r6
 8006434:	f7fc f940 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulObjectCount, sizeof(void *));
 8006438:	2104      	movs	r1, #4
 800643a:	4640      	mov	r0, r8
 800643c:	f7fc f93c 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 8006440:	4b02      	ldr	r3, [pc, #8]	; (800644c <KMS_Entry+0x33c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0a1      	beq.n	800638c <KMS_Entry+0x27c>
            (pExtToken_FunctionList->C_FindObjects != NULL))
 8006448:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800644a:	e7a2      	b.n	8006392 <KMS_Entry+0x282>
 800644c:	200020cc 	.word	0x200020cc
 8006450:	080198a1 	.word	0x080198a1
 8006454:	080198c2 	.word	0x080198c2
 8006458:	080198e5 	.word	0x080198e5
 800645c:	08006cb9 	.word	0x08006cb9
        hSession          = va_arg(arguments, CK_SESSION_HANDLE);
 8006460:	680c      	ldr	r4, [r1, #0]
        CHECK_SESSION_HANDLE(hSession);
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fc76 	bl	8006d54 <KMS_Check_Session_Handle>
 8006468:	28b3      	cmp	r0, #179	; 0xb3
 800646a:	f43f af69 	beq.w	8006340 <KMS_Entry+0x230>
        if ((pExtToken_FunctionList != NULL) &&
 800646e:	4bbd      	ldr	r3, [pc, #756]	; (8006764 <KMS_Entry+0x654>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d08a      	beq.n	800638c <KMS_Entry+0x27c>
            (pExtToken_FunctionList->C_FindObjectsFinal != NULL))
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        if ((pExtToken_FunctionList != NULL) &&
 8006478:	2b00      	cmp	r3, #0
 800647a:	d087      	beq.n	800638c <KMS_Entry+0x27c>
          e_ret_status = (*pC_FindObjectsFinal)(hSession);
 800647c:	4620      	mov	r0, r4
 800647e:	4798      	blx	r3
 8006480:	e68e      	b.n	80061a0 <KMS_Entry+0x90>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8006482:	e9d1 4600 	ldrd	r4, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006486:	4620      	mov	r0, r4
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8006488:	688d      	ldr	r5, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 800648a:	f000 fc63 	bl	8006d54 <KMS_Check_Session_Handle>
 800648e:	28b3      	cmp	r0, #179	; 0xb3
 8006490:	f43f af56 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hKey);
 8006494:	4628      	mov	r0, r5
 8006496:	f001 fc3b 	bl	8007d10 <KMS_Objects_GetRange>
 800649a:	2805      	cmp	r0, #5
 800649c:	d08d      	beq.n	80063ba <KMS_Entry+0x2aa>
      e_ret_status = KMS_EncryptInit(hSession, pMechanism, hKey);
 800649e:	462a      	mov	r2, r5
 80064a0:	4631      	mov	r1, r6
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff faf6 	bl	8005a94 <KMS_EncryptInit>
 80064a8:	e67a      	b.n	80061a0 <KMS_Entry+0x90>
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 80064aa:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80064ae:	4628      	mov	r0, r5
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 80064b0:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
      pulEncryptedDataLen   = va_arg(arguments, CK_ULONG_PTR);
 80064b4:	f8d1 8010 	ldr.w	r8, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 80064b8:	f000 fc4c 	bl	8006d54 <KMS_Check_Session_Handle>
 80064bc:	28b3      	cmp	r0, #179	; 0xb3
 80064be:	f43f af3f 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen);
 80064c2:	4621      	mov	r1, r4
 80064c4:	4630      	mov	r0, r6
 80064c6:	f7fc f8f7 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulDataLen);
 80064ca:	4621      	mov	r1, r4
 80064cc:	4638      	mov	r0, r7
 80064ce:	f7fc f8f3 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedDataLen, sizeof(void *));
 80064d2:	4640      	mov	r0, r8
 80064d4:	2104      	movs	r1, #4
 80064d6:	f7fc f8ef 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_Encrypt(hSession, pData, ulDataLen, pEncryptedData, pulEncryptedDataLen);
 80064da:	f8cd 8000 	str.w	r8, [sp]
 80064de:	463b      	mov	r3, r7
 80064e0:	4622      	mov	r2, r4
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fb4d 	bl	8005b84 <KMS_Encrypt>
 80064ea:	e659      	b.n	80061a0 <KMS_Entry+0x90>
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 80064ec:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80064f0:	4628      	mov	r0, r5
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 80064f2:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
      pulEncryptedPartLen   = va_arg(arguments, CK_ULONG_PTR);
 80064f6:	f8d1 8010 	ldr.w	r8, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 80064fa:	f000 fc2b 	bl	8006d54 <KMS_Check_Session_Handle>
 80064fe:	28b3      	cmp	r0, #179	; 0xb3
 8006500:	f43f af1e 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen);
 8006504:	4621      	mov	r1, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f7fc f8d6 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulPartLen);
 800650c:	4621      	mov	r1, r4
 800650e:	4638      	mov	r0, r7
 8006510:	f7fc f8d2 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedPartLen, sizeof(void *));
 8006514:	4640      	mov	r0, r8
 8006516:	2104      	movs	r1, #4
 8006518:	f7fc f8ce 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_EncryptUpdate(hSession, pPart, ulPartLen, pEncryptedPart, pulEncryptedPartLen);
 800651c:	f8cd 8000 	str.w	r8, [sp]
 8006520:	463b      	mov	r3, r7
 8006522:	4622      	mov	r2, r4
 8006524:	4631      	mov	r1, r6
 8006526:	4628      	mov	r0, r5
 8006528:	f7ff fab8 	bl	8005a9c <KMS_EncryptUpdate>
 800652c:	e638      	b.n	80061a0 <KMS_Entry+0x90>
      pLastEncryptedPart            = va_arg(arguments, CK_BYTE_PTR);
 800652e:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006532:	4628      	mov	r0, r5
      pulLastEncryptedPartLen       = va_arg(arguments, CK_ULONG_PTR);
 8006534:	688c      	ldr	r4, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006536:	f000 fc0d 	bl	8006d54 <KMS_Check_Session_Handle>
 800653a:	28b3      	cmp	r0, #179	; 0xb3
 800653c:	f43f af00 	beq.w	8006340 <KMS_Entry+0x230>
      if(pulLastEncryptedPartLen != NULL)
 8006540:	b13c      	cbz	r4, 8006552 <KMS_Entry+0x442>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastEncryptedPart, *pulLastEncryptedPartLen);
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	4630      	mov	r0, r6
 8006546:	f7fc f8b7 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pulLastEncryptedPartLen, sizeof(void *));
 800654a:	2104      	movs	r1, #4
 800654c:	4620      	mov	r0, r4
 800654e:	f7fc f8b3 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_EncryptFinal(hSession, pLastEncryptedPart, pulLastEncryptedPartLen);
 8006552:	4622      	mov	r2, r4
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	f7ff fb2c 	bl	8005bb4 <KMS_EncryptFinal>
 800655c:	e620      	b.n	80061a0 <KMS_Entry+0x90>
      pMechanism    = va_arg(arguments, CK_MECHANISM_PTR);
 800655e:	e9d1 4600 	ldrd	r4, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006562:	4620      	mov	r0, r4
      hKey          = va_arg(arguments, CK_OBJECT_HANDLE);
 8006564:	688d      	ldr	r5, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006566:	f000 fbf5 	bl	8006d54 <KMS_Check_Session_Handle>
 800656a:	28b3      	cmp	r0, #179	; 0xb3
 800656c:	f43f aee8 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hKey);
 8006570:	4628      	mov	r0, r5
 8006572:	f001 fbcd 	bl	8007d10 <KMS_Objects_GetRange>
 8006576:	2805      	cmp	r0, #5
 8006578:	f43f af1f 	beq.w	80063ba <KMS_Entry+0x2aa>
      e_ret_status = KMS_DecryptInit(hSession, pMechanism, hKey);
 800657c:	462a      	mov	r2, r5
 800657e:	4631      	mov	r1, r6
 8006580:	4620      	mov	r0, r4
 8006582:	f7ff fb93 	bl	8005cac <KMS_DecryptInit>
 8006586:	e60b      	b.n	80061a0 <KMS_Entry+0x90>
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 8006588:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 800658c:	4628      	mov	r0, r5
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 800658e:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
      pulDataLen            = va_arg(arguments, CK_ULONG_PTR);
 8006592:	f8d1 8010 	ldr.w	r8, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 8006596:	f000 fbdd 	bl	8006d54 <KMS_Check_Session_Handle>
 800659a:	28b3      	cmp	r0, #179	; 0xb3
 800659c:	f43f aed0 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulEncryptedDataLen);
 80065a0:	4621      	mov	r1, r4
 80065a2:	4630      	mov	r0, r6
 80065a4:	f7fc f888 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulEncryptedDataLen);
 80065a8:	4621      	mov	r1, r4
 80065aa:	4638      	mov	r0, r7
 80065ac:	f7fc f884 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulDataLen, sizeof(void *));
 80065b0:	4640      	mov	r0, r8
 80065b2:	2104      	movs	r1, #4
 80065b4:	f7fc f880 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen,
 80065b8:	f8cd 8000 	str.w	r8, [sp]
 80065bc:	463b      	mov	r3, r7
 80065be:	4622      	mov	r2, r4
 80065c0:	4631      	mov	r1, r6
 80065c2:	4628      	mov	r0, r5
 80065c4:	f7ff fbfe 	bl	8005dc4 <KMS_Decrypt>
 80065c8:	e5ea      	b.n	80061a0 <KMS_Entry+0x90>
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 80065ca:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80065ce:	4628      	mov	r0, r5
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 80065d0:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
      pulPartLen            = va_arg(arguments, CK_ULONG_PTR);
 80065d4:	f8d1 8010 	ldr.w	r8, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 80065d8:	f000 fbbc 	bl	8006d54 <KMS_Check_Session_Handle>
 80065dc:	28b3      	cmp	r0, #179	; 0xb3
 80065de:	f43f aeaf 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulEncryptedPartLen);
 80065e2:	4621      	mov	r1, r4
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7fc f867 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulEncryptedPartLen);
 80065ea:	4621      	mov	r1, r4
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7fc f863 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulPartLen, sizeof(void *));
 80065f2:	4640      	mov	r0, r8
 80065f4:	2104      	movs	r1, #4
 80065f6:	f7fc f85f 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedPart, ulEncryptedPartLen, pPart, pulPartLen);
 80065fa:	f8cd 8000 	str.w	r8, [sp]
 80065fe:	463b      	mov	r3, r7
 8006600:	4622      	mov	r2, r4
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	f7ff fb55 	bl	8005cb4 <KMS_DecryptUpdate>
 800660a:	e5c9      	b.n	80061a0 <KMS_Entry+0x90>
      pLastPart       = va_arg(arguments, CK_BYTE_PTR);
 800660c:	e9d1 5600 	ldrd	r5, r6, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006610:	4628      	mov	r0, r5
      pulLastPartLen  = va_arg(arguments, CK_ULONG_PTR);
 8006612:	688c      	ldr	r4, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006614:	f000 fb9e 	bl	8006d54 <KMS_Check_Session_Handle>
 8006618:	28b3      	cmp	r0, #179	; 0xb3
 800661a:	f43f ae91 	beq.w	8006340 <KMS_Entry+0x230>
      if(pulLastPartLen != NULL)
 800661e:	b11c      	cbz	r4, 8006628 <KMS_Entry+0x518>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastPart, *pulLastPartLen);
 8006620:	6821      	ldr	r1, [r4, #0]
 8006622:	4630      	mov	r0, r6
 8006624:	f7fc f848 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulLastPartLen, sizeof(void *));
 8006628:	4620      	mov	r0, r4
 800662a:	2104      	movs	r1, #4
 800662c:	f7fc f844 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_DecryptFinal(hSession, pLastPart, pulLastPartLen);
 8006630:	4622      	mov	r2, r4
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	f7ff fbdd 	bl	8005df4 <KMS_DecryptFinal>
 800663a:	e5b1      	b.n	80061a0 <KMS_Entry+0x90>
      pMechanism       = va_arg(arguments, CK_MECHANISM_PTR);
 800663c:	e9d1 4500 	ldrd	r4, r5, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fb87 	bl	8006d54 <KMS_Check_Session_Handle>
 8006646:	28b3      	cmp	r0, #179	; 0xb3
 8006648:	f43f ae7a 	beq.w	8006340 <KMS_Entry+0x230>
      e_ret_status = KMS_DigestInit(hSession, pMechanism);
 800664c:	4629      	mov	r1, r5
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff fc4e 	bl	8005ef0 <KMS_DigestInit>
 8006654:	e5a4      	b.n	80061a0 <KMS_Entry+0x90>
      pData         = va_arg(arguments, CK_BYTE_PTR);
 8006656:	e9d1 4700 	ldrd	r4, r7, [r1]
      CHECK_SESSION_HANDLE(hSession);
 800665a:	4620      	mov	r0, r4
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 800665c:	e9d1 8502 	ldrd	r8, r5, [r1, #8]
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 8006660:	690e      	ldr	r6, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 8006662:	f000 fb77 	bl	8006d54 <KMS_Check_Session_Handle>
 8006666:	28b3      	cmp	r0, #179	; 0xb3
 8006668:	f43f ae6a 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pDigest, 32);
 800666c:	4628      	mov	r0, r5
 800666e:	2120      	movs	r1, #32
 8006670:	f7fc f822 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(void *));
 8006674:	4630      	mov	r0, r6
 8006676:	2104      	movs	r1, #4
 8006678:	f7fc f81e 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_Digest(hSession, pData, ulDataLen, pDigest, pulDigestLen);
 800667c:	9600      	str	r6, [sp, #0]
 800667e:	462b      	mov	r3, r5
 8006680:	4642      	mov	r2, r8
 8006682:	4639      	mov	r1, r7
 8006684:	4620      	mov	r0, r4
 8006686:	f7ff fc81 	bl	8005f8c <KMS_Digest>
 800668a:	e589      	b.n	80061a0 <KMS_Entry+0x90>
      pPart         = va_arg(arguments, CK_BYTE_PTR);
 800668c:	e9d1 4500 	ldrd	r4, r5, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006690:	4620      	mov	r0, r4
      ulPartLen     = va_arg(arguments, CK_ULONG);
 8006692:	688e      	ldr	r6, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006694:	f000 fb5e 	bl	8006d54 <KMS_Check_Session_Handle>
 8006698:	28b3      	cmp	r0, #179	; 0xb3
 800669a:	f43f ae51 	beq.w	8006340 <KMS_Entry+0x230>
      e_ret_status = KMS_DigestUpdate(hSession, pPart, ulPartLen);
 800669e:	4632      	mov	r2, r6
 80066a0:	4629      	mov	r1, r5
 80066a2:	4620      	mov	r0, r4
 80066a4:	f7ff fcac 	bl	8006000 <KMS_DigestUpdate>
 80066a8:	e57a      	b.n	80061a0 <KMS_Entry+0x90>
      hKey         = va_arg(arguments, CK_OBJECT_HANDLE);
 80066aa:	e9d1 4500 	ldrd	r4, r5, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fb50 	bl	8006d54 <KMS_Check_Session_Handle>
 80066b4:	28b3      	cmp	r0, #179	; 0xb3
 80066b6:	f43f ae43 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hKey);
 80066ba:	4628      	mov	r0, r5
 80066bc:	f001 fb28 	bl	8007d10 <KMS_Objects_GetRange>
 80066c0:	2805      	cmp	r0, #5
 80066c2:	f43f ae7a 	beq.w	80063ba <KMS_Entry+0x2aa>
      e_ret_status = KMS_DigestKey(hSession, hKey);
 80066c6:	4629      	mov	r1, r5
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff fcbd 	bl	8006048 <KMS_DigestKey>
 80066ce:	e567      	b.n	80061a0 <KMS_Entry+0x90>
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 80066d0:	e9d1 4500 	ldrd	r4, r5, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80066d4:	4620      	mov	r0, r4
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 80066d6:	688e      	ldr	r6, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 80066d8:	f000 fb3c 	bl	8006d54 <KMS_Check_Session_Handle>
 80066dc:	28b3      	cmp	r0, #179	; 0xb3
 80066de:	f43f ae2f 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pDigest, 32);
 80066e2:	4628      	mov	r0, r5
 80066e4:	2120      	movs	r1, #32
 80066e6:	f7fb ffe7 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(void *));
 80066ea:	4630      	mov	r0, r6
 80066ec:	2104      	movs	r1, #4
 80066ee:	f7fb ffe3 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_DigestFinal(hSession, pDigest, pulDigestLen);
 80066f2:	4632      	mov	r2, r6
 80066f4:	4629      	mov	r1, r5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f7ff fca8 	bl	800604c <KMS_DigestFinal>
 80066fc:	e550      	b.n	80061a0 <KMS_Entry+0x90>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 80066fe:	e9d1 5400 	ldrd	r5, r4, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006702:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8006704:	688e      	ldr	r6, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006706:	f000 fb25 	bl	8006d54 <KMS_Check_Session_Handle>
 800670a:	28b3      	cmp	r0, #179	; 0xb3
 800670c:	f43f ae18 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hKey);
 8006710:	4630      	mov	r0, r6
 8006712:	f001 fafd 	bl	8007d10 <KMS_Objects_GetRange>
 8006716:	2805      	cmp	r0, #5
 8006718:	f43f ae4f 	beq.w	80063ba <KMS_Entry+0x2aa>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hKey);
 800671c:	4630      	mov	r0, r6
 800671e:	f001 faf7 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006722:	3803      	subs	r0, #3
 8006724:	b2c0      	uxtb	r0, r0
 8006726:	2801      	cmp	r0, #1
 8006728:	d815      	bhi.n	8006756 <KMS_Entry+0x646>
          if ((pExtToken_FunctionList != NULL) &&
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <KMS_Entry+0x654>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f43f ae2c 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_SignInit != NULL))
 8006734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
          if ((pExtToken_FunctionList != NULL) &&
 8006738:	2b00      	cmp	r3, #0
 800673a:	f43f ae27 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_VerifyInit)(hSession, pMechanism, hKey);
 800673e:	4632      	mov	r2, r6
 8006740:	4621      	mov	r1, r4
 8006742:	4628      	mov	r0, r5
 8006744:	4798      	blx	r3
            KMS_GETSESSSION(hSession).hKey = hKey;
 8006746:	4b08      	ldr	r3, [pc, #32]	; (8006768 <KMS_Entry+0x658>)
 8006748:	3d01      	subs	r5, #1
 800674a:	2228      	movs	r2, #40	; 0x28
 800674c:	fb02 3505 	mla	r5, r2, r5, r3
            e_ret_status = (*pC_VerifyInit)(hSession, pMechanism, hKey);
 8006750:	4604      	mov	r4, r0
            KMS_GETSESSSION(hSession).hKey = hKey;
 8006752:	61ee      	str	r6, [r5, #28]
 8006754:	e51e      	b.n	8006194 <KMS_Entry+0x84>
          e_ret_status = KMS_SignInit(hSession, pMechanism, hKey);
 8006756:	4632      	mov	r2, r6
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f001 fcba 	bl	80080d4 <KMS_SignInit>
 8006760:	e51e      	b.n	80061a0 <KMS_Entry+0x90>
 8006762:	bf00      	nop
 8006764:	200020cc 	.word	0x200020cc
 8006768:	20007874 	.word	0x20007874
      pData         = va_arg(arguments, CK_BYTE_PTR);
 800676c:	e9d1 4900 	ldrd	r4, r9, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006770:	4620      	mov	r0, r4
      pSignature    = va_arg(arguments, CK_BYTE_PTR);
 8006772:	e9d1 a502 	ldrd	sl, r5, [r1, #8]
      pulSignatureLen = va_arg(arguments, CK_ULONG_PTR);
 8006776:	690e      	ldr	r6, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 8006778:	f000 faec 	bl	8006d54 <KMS_Check_Session_Handle>
 800677c:	28b3      	cmp	r0, #179	; 0xb3
 800677e:	f43f addf 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen);
 8006782:	4651      	mov	r1, sl
 8006784:	4648      	mov	r0, r9
 8006786:	f7fb ff97 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulSignatureLen, sizeof(void *));
 800678a:	4630      	mov	r0, r6
 800678c:	2104      	movs	r1, #4
 800678e:	f7fb ff93 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 8006792:	4bd6      	ldr	r3, [pc, #856]	; (8006aec <KMS_Entry+0x9dc>)
 8006794:	1e67      	subs	r7, r4, #1
 8006796:	2228      	movs	r2, #40	; 0x28
 8006798:	fb02 3207 	mla	r2, r2, r7, r3
 800679c:	4698      	mov	r8, r3
 800679e:	69d0      	ldr	r0, [r2, #28]
 80067a0:	b328      	cbz	r0, 80067ee <KMS_Entry+0x6de>
          ObjectRange = KMS_Objects_GetRange(KMS_GETSESSSION(hSession).hKey);
 80067a2:	f001 fab5 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 80067a6:	1ec3      	subs	r3, r0, #3
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d821      	bhi.n	80067f2 <KMS_Entry+0x6e2>
          if ((pExtToken_FunctionList != NULL) &&
 80067ae:	4bd0      	ldr	r3, [pc, #832]	; (8006af0 <KMS_Entry+0x9e0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f43f adea 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_Sign != NULL))
 80067b8:	f8d3 b0b0 	ldr.w	fp, [r3, #176]	; 0xb0
          if ((pExtToken_FunctionList != NULL) &&
 80067bc:	f1bb 0f00 	cmp.w	fp, #0
 80067c0:	f43f ade4 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_Sign)(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 80067c4:	4620      	mov	r0, r4
 80067c6:	9600      	str	r6, [sp, #0]
 80067c8:	462b      	mov	r3, r5
 80067ca:	4652      	mov	r2, sl
 80067cc:	4649      	mov	r1, r9
 80067ce:	47d8      	blx	fp
            if (!((e_ret_status == CKR_BUFFER_TOO_SMALL) || ((e_ret_status == CKR_OK) && (pSignature == NULL))))
 80067d0:	f5b0 7fa8 	cmp.w	r0, #336	; 0x150
            e_ret_status = (*pC_Sign)(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 80067d4:	4604      	mov	r4, r0
            if (!((e_ret_status == CKR_BUFFER_TOO_SMALL) || ((e_ret_status == CKR_OK) && (pSignature == NULL))))
 80067d6:	f43f acdd 	beq.w	8006194 <KMS_Entry+0x84>
 80067da:	b910      	cbnz	r0, 80067e2 <KMS_Entry+0x6d2>
 80067dc:	2d00      	cmp	r5, #0
 80067de:	f43f acd9 	beq.w	8006194 <KMS_Entry+0x84>
              KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80067e2:	2328      	movs	r3, #40	; 0x28
 80067e4:	fb03 8307 	mla	r3, r3, r7, r8
 80067e8:	2200      	movs	r2, #0
 80067ea:	61da      	str	r2, [r3, #28]
 80067ec:	e4d2      	b.n	8006194 <KMS_Entry+0x84>
          ObjectRange = KMS_OBJECT_RANGE_UNKNOWN;
 80067ee:	2005      	movs	r0, #5
 80067f0:	e7d9      	b.n	80067a6 <KMS_Entry+0x696>
          if (ObjectRange != KMS_OBJECT_RANGE_UNKNOWN)
 80067f2:	2805      	cmp	r0, #5
 80067f4:	f43f adca 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = KMS_Sign(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 80067f8:	4649      	mov	r1, r9
 80067fa:	9600      	str	r6, [sp, #0]
 80067fc:	462b      	mov	r3, r5
 80067fe:	4652      	mov	r2, sl
 8006800:	4620      	mov	r0, r4
 8006802:	f001 fca3 	bl	800814c <KMS_Sign>
      KMS_LL_IsBufferInSecureEnclave((void *)pSignature, *pulSignatureLen);
 8006806:	6831      	ldr	r1, [r6, #0]
            e_ret_status = KMS_Sign(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 8006808:	4604      	mov	r4, r0
      KMS_LL_IsBufferInSecureEnclave((void *)pSignature, *pulSignatureLen);
 800680a:	4628      	mov	r0, r5
 800680c:	f7fb ff54 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
 8006810:	e4c0      	b.n	8006194 <KMS_Entry+0x84>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8006812:	e9d1 5400 	ldrd	r5, r4, [r1]
      CHECK_SESSION_HANDLE(hSession);
 8006816:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8006818:	688e      	ldr	r6, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 800681a:	f000 fa9b 	bl	8006d54 <KMS_Check_Session_Handle>
 800681e:	28b3      	cmp	r0, #179	; 0xb3
 8006820:	f43f ad8e 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hKey);
 8006824:	4630      	mov	r0, r6
 8006826:	f001 fa73 	bl	8007d10 <KMS_Objects_GetRange>
 800682a:	2805      	cmp	r0, #5
 800682c:	f43f adc5 	beq.w	80063ba <KMS_Entry+0x2aa>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hKey);
 8006830:	4630      	mov	r0, r6
 8006832:	f001 fa6d 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006836:	3803      	subs	r0, #3
 8006838:	b2c0      	uxtb	r0, r0
 800683a:	2801      	cmp	r0, #1
 800683c:	d807      	bhi.n	800684e <KMS_Entry+0x73e>
          if ((pExtToken_FunctionList != NULL) &&
 800683e:	4bac      	ldr	r3, [pc, #688]	; (8006af0 <KMS_Entry+0x9e0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f43f ada2 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_VerifyInit != NULL))
 8006848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800684c:	e774      	b.n	8006738 <KMS_Entry+0x628>
          e_ret_status = KMS_VerifyInit(hSession, pMechanism, hKey);
 800684e:	4632      	mov	r2, r6
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f001 fd30 	bl	80082b8 <KMS_VerifyInit>
 8006858:	e4a2      	b.n	80061a0 <KMS_Entry+0x90>
      pData          = va_arg(arguments, CK_BYTE_PTR);
 800685a:	e9d1 4700 	ldrd	r4, r7, [r1]
      CHECK_SESSION_HANDLE(hSession);
 800685e:	4620      	mov	r0, r4
      pSignature     = va_arg(arguments, CK_BYTE_PTR);
 8006860:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
      ulSignatureLen = va_arg(arguments, CK_ULONG);
 8006864:	f8d1 a010 	ldr.w	sl, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 8006868:	f000 fa74 	bl	8006d54 <KMS_Check_Session_Handle>
 800686c:	28b3      	cmp	r0, #179	; 0xb3
 800686e:	f43f ad67 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen);
 8006872:	4641      	mov	r1, r8
 8006874:	4638      	mov	r0, r7
 8006876:	f7fb ff1f 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 800687a:	4e9c      	ldr	r6, [pc, #624]	; (8006aec <KMS_Entry+0x9dc>)
      KMS_LL_IsBufferInSecureEnclave((void *)pSignature, ulSignatureLen);
 800687c:	4648      	mov	r0, r9
 800687e:	4651      	mov	r1, sl
 8006880:	f7fb ff1a 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 8006884:	1e65      	subs	r5, r4, #1
 8006886:	2328      	movs	r3, #40	; 0x28
 8006888:	fb03 6305 	mla	r3, r3, r5, r6
 800688c:	69d8      	ldr	r0, [r3, #28]
 800688e:	b1f0      	cbz	r0, 80068ce <KMS_Entry+0x7be>
          ObjectRange = KMS_Objects_GetRange(KMS_GETSESSSION(hSession).hKey);
 8006890:	f001 fa3e 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006894:	1ec3      	subs	r3, r0, #3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d81a      	bhi.n	80068d2 <KMS_Entry+0x7c2>
          if ((pExtToken_FunctionList != NULL) &&
 800689c:	4b94      	ldr	r3, [pc, #592]	; (8006af0 <KMS_Entry+0x9e0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f43f ad73 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_Verify != NULL))
 80068a6:	f8d3 b0c8 	ldr.w	fp, [r3, #200]	; 0xc8
          if ((pExtToken_FunctionList != NULL) &&
 80068aa:	f1bb 0f00 	cmp.w	fp, #0
 80068ae:	f43f ad6d 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_Verify)(hSession, pData, ulDataLen, pSignature, ulSignatureLen);
 80068b2:	464b      	mov	r3, r9
 80068b4:	4620      	mov	r0, r4
 80068b6:	f8cd a000 	str.w	sl, [sp]
 80068ba:	4642      	mov	r2, r8
 80068bc:	4639      	mov	r1, r7
 80068be:	47d8      	blx	fp
            KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80068c0:	2328      	movs	r3, #40	; 0x28
 80068c2:	fb03 6505 	mla	r5, r3, r5, r6
 80068c6:	2300      	movs	r3, #0
            e_ret_status = (*pC_Verify)(hSession, pData, ulDataLen, pSignature, ulSignatureLen);
 80068c8:	4604      	mov	r4, r0
            KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80068ca:	61eb      	str	r3, [r5, #28]
 80068cc:	e462      	b.n	8006194 <KMS_Entry+0x84>
          ObjectRange = KMS_OBJECT_RANGE_UNKNOWN;
 80068ce:	2005      	movs	r0, #5
 80068d0:	e7e0      	b.n	8006894 <KMS_Entry+0x784>
          if (ObjectRange != KMS_OBJECT_RANGE_UNKNOWN)
 80068d2:	2805      	cmp	r0, #5
 80068d4:	f43f ad5a 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = KMS_Verify(hSession, pData, ulDataLen, pSignature, ulSignatureLen);
 80068d8:	f8cd a000 	str.w	sl, [sp]
 80068dc:	464b      	mov	r3, r9
 80068de:	4642      	mov	r2, r8
 80068e0:	4639      	mov	r1, r7
 80068e2:	4620      	mov	r0, r4
 80068e4:	f001 fd22 	bl	800832c <KMS_Verify>
 80068e8:	e45a      	b.n	80061a0 <KMS_Entry+0x90>
      pMechanism        = va_arg(arguments, CK_MECHANISM_PTR);
 80068ea:	e9d1 5800 	ldrd	r5, r8, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80068ee:	4628      	mov	r0, r5
      pTemplate         = va_arg(arguments, CK_ATTRIBUTE_PTR);
 80068f0:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
      phKey             = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 80068f4:	e9d1 7904 	ldrd	r7, r9, [r1, #16]
      CHECK_SESSION_HANDLE(hSession);
 80068f8:	f000 fa2c 	bl	8006d54 <KMS_Check_Session_Handle>
 80068fc:	28b3      	cmp	r0, #179	; 0xb3
 80068fe:	f43f ad1f 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hBaseKey);
 8006902:	4620      	mov	r0, r4
 8006904:	f001 fa04 	bl	8007d10 <KMS_Objects_GetRange>
 8006908:	2805      	cmp	r0, #5
 800690a:	f43f ad56 	beq.w	80063ba <KMS_Entry+0x2aa>
      KMS_LL_IsBufferInSecureEnclave((void *)pTemplate, sizeof(CK_ATTRIBUTE)*ulAttributeCount);
 800690e:	210c      	movs	r1, #12
 8006910:	4379      	muls	r1, r7
 8006912:	4630      	mov	r0, r6
 8006914:	f7fb fed0 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phKey, sizeof(void *));
 8006918:	2104      	movs	r1, #4
 800691a:	4648      	mov	r0, r9
 800691c:	f7fb fecc 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hBaseKey);
 8006920:	4620      	mov	r0, r4
 8006922:	f001 f9f5 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006926:	3803      	subs	r0, #3
 8006928:	b2c0      	uxtb	r0, r0
 800692a:	2801      	cmp	r0, #1
 800692c:	d812      	bhi.n	8006954 <KMS_Entry+0x844>
          if ((pExtToken_FunctionList != NULL) &&
 800692e:	4b70      	ldr	r3, [pc, #448]	; (8006af0 <KMS_Entry+0x9e0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f43f ad2a 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_DeriveKey != NULL))
 8006938:	f8d3 a0fc 	ldr.w	sl, [r3, #252]	; 0xfc
          if ((pExtToken_FunctionList != NULL) &&
 800693c:	f1ba 0f00 	cmp.w	sl, #0
 8006940:	f43f ad24 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_DeriveKey)(hSession, pMechanism, hBaseKey, pTemplate, ulAttributeCount, phKey);
 8006944:	e9cd 7900 	strd	r7, r9, [sp]
 8006948:	4633      	mov	r3, r6
 800694a:	4622      	mov	r2, r4
 800694c:	4641      	mov	r1, r8
 800694e:	4628      	mov	r0, r5
 8006950:	47d0      	blx	sl
 8006952:	e425      	b.n	80061a0 <KMS_Entry+0x90>
          e_ret_status = KMS_DeriveKey(hSession, pMechanism, hBaseKey, pTemplate, ulAttributeCount, phKey);
 8006954:	e9cd 7900 	strd	r7, r9, [sp]
 8006958:	4633      	mov	r3, r6
 800695a:	4622      	mov	r2, r4
 800695c:	4641      	mov	r1, r8
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fa62 	bl	8006e28 <KMS_DeriveKey>
 8006964:	e41c      	b.n	80061a0 <KMS_Entry+0x90>
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 8006966:	e9d1 6500 	ldrd	r6, r5, [r1]
      CHECK_SESSION_HANDLE(hSession);
 800696a:	4630      	mov	r0, r6
      ulCount        = va_arg(arguments, CK_ULONG);
 800696c:	e9d1 7402 	ldrd	r7, r4, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 8006970:	f000 f9f0 	bl	8006d54 <KMS_Check_Session_Handle>
 8006974:	28b3      	cmp	r0, #179	; 0xb3
 8006976:	f43f ace3 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hObject);
 800697a:	4628      	mov	r0, r5
 800697c:	f001 f9c8 	bl	8007d10 <KMS_Objects_GetRange>
 8006980:	2805      	cmp	r0, #5
 8006982:	f43f ad1a 	beq.w	80063ba <KMS_Entry+0x2aa>
      KMS_LL_IsBufferInSecureEnclave((void *)pTemplate, sizeof(CK_ATTRIBUTE)*ulCount);
 8006986:	210c      	movs	r1, #12
 8006988:	4361      	muls	r1, r4
 800698a:	4638      	mov	r0, r7
 800698c:	f7fb fe94 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hObject);
 8006990:	4628      	mov	r0, r5
 8006992:	f001 f9bd 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006996:	3803      	subs	r0, #3
 8006998:	b2c0      	uxtb	r0, r0
 800699a:	2801      	cmp	r0, #1
 800699c:	d811      	bhi.n	80069c2 <KMS_Entry+0x8b2>
          if ((pExtToken_FunctionList != NULL) &&
 800699e:	4b54      	ldr	r3, [pc, #336]	; (8006af0 <KMS_Entry+0x9e0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f43f acf2 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_GetAttributeValue != NULL))
 80069a8:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
          if ((pExtToken_FunctionList != NULL) &&
 80069ac:	f1b8 0f00 	cmp.w	r8, #0
 80069b0:	f43f acec 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_GetAttributeValue)(hSession, hObject, pTemplate, ulCount);
 80069b4:	4623      	mov	r3, r4
 80069b6:	463a      	mov	r2, r7
 80069b8:	4629      	mov	r1, r5
 80069ba:	4630      	mov	r0, r6
 80069bc:	47c0      	blx	r8
 80069be:	f7ff bbef 	b.w	80061a0 <KMS_Entry+0x90>
          e_ret_status = KMS_GetAttributeValue(hSession, hObject, pTemplate, ulCount);
 80069c2:	4623      	mov	r3, r4
 80069c4:	463a      	mov	r2, r7
 80069c6:	4629      	mov	r1, r5
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 fb57 	bl	800707c <KMS_GetAttributeValue>
 80069ce:	f7ff bbe7 	b.w	80061a0 <KMS_Entry+0x90>
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 80069d2:	e9d1 6400 	ldrd	r6, r4, [r1]
      CHECK_SESSION_HANDLE(hSession);
 80069d6:	4630      	mov	r0, r6
      ulCount        = va_arg(arguments, CK_ULONG);
 80069d8:	e9d1 7802 	ldrd	r7, r8, [r1, #8]
      CHECK_SESSION_HANDLE(hSession);
 80069dc:	f000 f9ba 	bl	8006d54 <KMS_Check_Session_Handle>
 80069e0:	28b3      	cmp	r0, #179	; 0xb3
 80069e2:	f43f acad 	beq.w	8006340 <KMS_Entry+0x230>
      CHECK_OBJECT_HANDLE(hObject);
 80069e6:	4620      	mov	r0, r4
 80069e8:	f001 f992 	bl	8007d10 <KMS_Objects_GetRange>
 80069ec:	2805      	cmp	r0, #5
 80069ee:	f43f ace4 	beq.w	80063ba <KMS_Entry+0x2aa>
      KMS_LL_IsBufferInSecureEnclave((void *)pTemplate, sizeof(CK_ATTRIBUTE)*ulCount);
 80069f2:	210c      	movs	r1, #12
 80069f4:	fb01 f108 	mul.w	r1, r1, r8
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7fb fe5d 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        kms_obj_range_t  ObjectRange = KMS_Objects_GetRange(hObject);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f001 f986 	bl	8007d10 <KMS_Objects_GetRange>
        if ((ObjectRange == KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID) ||
 8006a04:	3803      	subs	r0, #3
 8006a06:	b2c0      	uxtb	r0, r0
 8006a08:	2801      	cmp	r0, #1
 8006a0a:	d876      	bhi.n	8006afa <KMS_Entry+0x9ea>
          if ((pExtToken_FunctionList != NULL) &&
 8006a0c:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <KMS_Entry+0x9e0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f43f acbb 	beq.w	800638c <KMS_Entry+0x27c>
              (pExtToken_FunctionList->C_SetAttributeValue != NULL))
 8006a16:	6e9d      	ldr	r5, [r3, #104]	; 0x68
          if ((pExtToken_FunctionList != NULL) &&
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	f43f acb7 	beq.w	800638c <KMS_Entry+0x27c>
            e_ret_status = (*pC_SetAttributeValue)(hSession, hObject, pTemplate, ulCount);
 8006a1e:	4643      	mov	r3, r8
 8006a20:	463a      	mov	r2, r7
 8006a22:	4621      	mov	r1, r4
 8006a24:	4630      	mov	r0, r6
 8006a26:	47a8      	blx	r5
 8006a28:	f7ff bbba 	b.w	80061a0 <KMS_Entry+0x90>
        pMechanism                 = va_arg(arguments, CK_MECHANISM_PTR);
 8006a2c:	e9d1 5300 	ldrd	r5, r3, [r1]
        CHECK_SESSION_HANDLE(hSession);
 8006a30:	4628      	mov	r0, r5
        pMechanism                 = va_arg(arguments, CK_MECHANISM_PTR);
 8006a32:	9305      	str	r3, [sp, #20]
        ulPublicKeyAttributeCount  = va_arg(arguments, CK_ULONG);
 8006a34:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
        ulPrivateKeyAttributeCount = va_arg(arguments, CK_ULONG);
 8006a38:	e9d1 8904 	ldrd	r8, r9, [r1, #16]
        phPrivateKey               = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8006a3c:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
        CHECK_SESSION_HANDLE(hSession);
 8006a40:	f000 f988 	bl	8006d54 <KMS_Check_Session_Handle>
 8006a44:	28b3      	cmp	r0, #179	; 0xb3
 8006a46:	f43f ac7b 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pPublicKeyTemplate, sizeof(CK_ATTRIBUTE)*ulPublicKeyAttributeCount);
 8006a4a:	240c      	movs	r4, #12
 8006a4c:	fb04 f107 	mul.w	r1, r4, r7
 8006a50:	4630      	mov	r0, r6
 8006a52:	f7fb fe31 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pPrivateKeyTemplate, sizeof(CK_ATTRIBUTE)*ulPrivateKeyAttributeCount);
 8006a56:	fb04 f109 	mul.w	r1, r4, r9
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7fb fe2c 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phPublicKey, sizeof(void *));
 8006a60:	2104      	movs	r1, #4
 8006a62:	4650      	mov	r0, sl
 8006a64:	f7fb fe28 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phPrivateKey, sizeof(void *));
 8006a68:	2104      	movs	r1, #4
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	f7fb fe24 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 8006a70:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <KMS_Entry+0x9e0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f43f ac89 	beq.w	800638c <KMS_Entry+0x27c>
            (pExtToken_FunctionList->C_GenerateKeyPair != NULL))
 8006a7a:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
        if ((pExtToken_FunctionList != NULL) &&
 8006a7e:	2c00      	cmp	r4, #0
 8006a80:	f43f ac84 	beq.w	800638c <KMS_Entry+0x27c>
          e_ret_status = (*pC_GenerateKeyPair)(hSession, pMechanism, pPublicKeyTemplate,
 8006a84:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8006a88:	e9cd 8900 	strd	r8, r9, [sp]
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	4632      	mov	r2, r6
 8006a90:	9905      	ldr	r1, [sp, #20]
 8006a92:	4628      	mov	r0, r5
 8006a94:	47a0      	blx	r4
 8006a96:	f7ff bb83 	b.w	80061a0 <KMS_Entry+0x90>
        pRandomData   = va_arg(arguments, CK_BYTE_PTR);
 8006a9a:	e9d1 4500 	ldrd	r4, r5, [r1]
        CHECK_SESSION_HANDLE(hSession);
 8006a9e:	4620      	mov	r0, r4
        ulRandomLen   = va_arg(arguments, CK_ULONG);
 8006aa0:	688e      	ldr	r6, [r1, #8]
        CHECK_SESSION_HANDLE(hSession);
 8006aa2:	f000 f957 	bl	8006d54 <KMS_Check_Session_Handle>
 8006aa6:	28b3      	cmp	r0, #179	; 0xb3
 8006aa8:	f43f ac4a 	beq.w	8006340 <KMS_Entry+0x230>
      KMS_LL_IsBufferInSecureEnclave((void *)pRandomData, sizeof(CK_ULONG)*ulRandomLen);
 8006aac:	00b1      	lsls	r1, r6, #2
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7fb fe02 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
        if ((pExtToken_FunctionList != NULL) &&
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <KMS_Entry+0x9e0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f43f ac67 	beq.w	800638c <KMS_Entry+0x27c>
            (pExtToken_FunctionList->C_GenerateRandom != NULL))
 8006abe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006ac2:	e4a5      	b.n	8006410 <KMS_Entry+0x300>
      pImportBlobState  = va_arg(arguments, CK_ULONG_PTR);
 8006ac4:	e9d1 5400 	ldrd	r5, r4, [r1]
      KMS_LL_IsBufferInSecureEnclave((void *)pImportBlobState, sizeof(void *));
 8006ac8:	2104      	movs	r1, #4
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7fb fdf4 	bl	80026b8 <KMS_LL_IsBufferInSecureEnclave>
      e_ret_status = KMS_Objects_ImportBlob(pData, pImportBlobState);
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f001 fa0e 	bl	8007ef4 <KMS_Objects_ImportBlob>
 8006ad8:	f7ff bb62 	b.w	80061a0 <KMS_Entry+0x90>
          e_ret_status = CKR_HOST_MEMORY;
 8006adc:	2402      	movs	r4, #2
 8006ade:	f7ff bb59 	b.w	8006194 <KMS_Entry+0x84>
          e_ret_status = CKR_BUFFER_TOO_SMALL;
 8006ae2:	f44f 74a8 	mov.w	r4, #336	; 0x150
 8006ae6:	f7ff bb55 	b.w	8006194 <KMS_Entry+0x84>
 8006aea:	bf00      	nop
 8006aec:	20007874 	.word	0x20007874
 8006af0:	200020cc 	.word	0x200020cc
        e_ret_status = CKR_SLOT_ID_INVALID;
 8006af4:	2403      	movs	r4, #3
 8006af6:	f7ff bb4d 	b.w	8006194 <KMS_Entry+0x84>
          e_ret_status = CKR_ARGUMENTS_BAD;
 8006afa:	2407      	movs	r4, #7
  return e_ret_status;
 8006afc:	f7ff bb4a 	b.w	8006194 <KMS_Entry+0x84>

08006b00 <KMS_Initialize>:
  *         CK_C_INITIALIZE_ARGS structure containing information on how the
  *         library should deal with multi-threaded access
  * @retval Operation status
  */
CK_RV  KMS_Initialize(CK_VOID_PTR pInitArgs)
{
 8006b00:	b538      	push	{r3, r4, r5, lr}
  /* Check paremeters */
  if (pInitArgs != NULL)
 8006b02:	b148      	cbz	r0, 8006b18 <KMS_Initialize+0x18>
  {
    CK_C_INITIALIZE_ARGS_PTR  ptr = (CK_C_INITIALIZE_ARGS_PTR)pInitArgs;
    /* pReserved must be NULL */
    if (ptr->pReserved != NULL)
 8006b04:	6943      	ldr	r3, [r0, #20]
 8006b06:	bb43      	cbnz	r3, 8006b5a <KMS_Initialize+0x5a>
    {
      return CKR_ARGUMENTS_BAD;
    }
    if (
 8006b08:	e9d0 2300 	ldrd	r2, r3, [r0]
 8006b0c:	b9fa      	cbnz	r2, 8006b4e <KMS_Initialize+0x4e>
    /* if there is at least one pointer set */
    ((ptr->CreateMutex != NULL) || (ptr->DestroyMutex != NULL) || (ptr->LockMutex != NULL) || (ptr->UnlockMutex != NULL))
 8006b0e:	bb23      	cbnz	r3, 8006b5a <KMS_Initialize+0x5a>
 8006b10:	6883      	ldr	r3, [r0, #8]
 8006b12:	bb13      	cbnz	r3, 8006b5a <KMS_Initialize+0x5a>
 8006b14:	68c3      	ldr	r3, [r0, #12]
 8006b16:	bb03      	cbnz	r3, 8006b5a <KMS_Initialize+0x5a>
    {
      //return CKR_CANT_LOCK;  // Remove for now: to be handled properly later on
    }
  }
  /* Initialize KMS */
  session_nb = 0;
 8006b18:	4c12      	ldr	r4, [pc, #72]	; (8006b64 <KMS_Initialize+0x64>)

  /* Check if PKCS11 module has already been initialized */
  if (initialized == CK_TRUE)
 8006b1a:	7921      	ldrb	r1, [r4, #4]
  session_nb = 0;
 8006b1c:	2300      	movs	r3, #0
  if (initialized == CK_TRUE)
 8006b1e:	2901      	cmp	r1, #1
  session_nb = 0;
 8006b20:	6023      	str	r3, [r4, #0]
  if (initialized == CK_TRUE)
 8006b22:	d01c      	beq.n	8006b5e <KMS_Initialize+0x5e>
 8006b24:	4d10      	ldr	r5, [pc, #64]	; (8006b68 <KMS_Initialize+0x68>)
  }

  /* Initialize SessionList */
  for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
  {
    KMS_GETSESSSION(i).state = KMS_SESSION_NOT_USED;
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295
    KMS_GETSESSSION(i).pKeyAllocBuffer = NULL;
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	195a      	adds	r2, r3, r5
 8006b2e:	3328      	adds	r3, #40	; 0x28
  for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 8006b30:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    KMS_GETSESSSION(i).state = KMS_SESSION_NOT_USED;
 8006b34:	6050      	str	r0, [r2, #4]
    KMS_GETSESSSION(i).pKeyAllocBuffer = NULL;
 8006b36:	6211      	str	r1, [r2, #32]
  for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 8006b38:	d1f8      	bne.n	8006b2c <KMS_Initialize+0x2c>
  }

  /* Initialize the buffer alloc */
  KMS_InitBufferAlloc();
 8006b3a:	f7fe fcc9 	bl	80054d0 <KMS_InitBufferAlloc>

  /* This is to enable the CryptoLib */
  (void)KMS_LL_CRC_Init();
 8006b3e:	f7fb fda3 	bl	8002688 <KMS_LL_CRC_Init>

  /* Call the Platform Init function */
  KMS_PlatfObjects_Init();
 8006b42:	f001 fa91 	bl	8008068 <KMS_PlatfObjects_Init>

  /* Marking module as initialized */
  initialized = CK_TRUE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	7123      	strb	r3, [r4, #4]

  return CKR_OK;
 8006b4a:	2000      	movs	r0, #0
}
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
    ((ptr->CreateMutex == NULL) || (ptr->DestroyMutex == NULL) || (ptr->LockMutex == NULL) || (ptr->UnlockMutex == NULL))
 8006b4e:	b123      	cbz	r3, 8006b5a <KMS_Initialize+0x5a>
 8006b50:	6883      	ldr	r3, [r0, #8]
 8006b52:	b113      	cbz	r3, 8006b5a <KMS_Initialize+0x5a>
 8006b54:	68c3      	ldr	r3, [r0, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1de      	bne.n	8006b18 <KMS_Initialize+0x18>
      return CKR_ARGUMENTS_BAD;
 8006b5a:	2007      	movs	r0, #7
 8006b5c:	e7f6      	b.n	8006b4c <KMS_Initialize+0x4c>
    return CKR_CRYPTOKI_ALREADY_INITIALIZED;
 8006b5e:	f240 1091 	movw	r0, #401	; 0x191
 8006b62:	e7f3      	b.n	8006b4c <KMS_Initialize+0x4c>
 8006b64:	2000439c 	.word	0x2000439c
 8006b68:	20007874 	.word	0x20007874

08006b6c <KMS_Finalize>:
  *         for more details on the APIs, parameters and possible returned values
  * @param  pReserved reserved for future versions
  * @retval Operation status
  */
CK_RV KMS_Finalize(CK_VOID_PTR pReserved)
{
 8006b6c:	b538      	push	{r3, r4, r5, lr}
  /* To fullfill the PKCS11 spec the input parameter is expected to be NULL */
  if (pReserved != NULL_PTR)
 8006b6e:	4604      	mov	r4, r0
 8006b70:	b950      	cbnz	r0, 8006b88 <KMS_Finalize+0x1c>
  {
    return CKR_ARGUMENTS_BAD;
  }

  /* Check if PKCS11 module has already been initialized */
  if (initialized != CK_TRUE)
 8006b72:	4d08      	ldr	r5, [pc, #32]	; (8006b94 <KMS_Finalize+0x28>)
 8006b74:	792b      	ldrb	r3, [r5, #4]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d108      	bne.n	8006b8c <KMS_Finalize+0x20>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }

  /* Release the buffer alloc */
  KMS_FinalizeBufferAlloc();
 8006b7a:	f7fe fcc7 	bl	800550c <KMS_FinalizeBufferAlloc>

  /* Call the Platform Finalize function */
  KMS_PlatfObjects_Finalize();
 8006b7e:	f001 fa63 	bl	8008048 <KMS_PlatfObjects_Finalize>

  /* Marking module as not initialized */
  initialized = CK_FALSE;
 8006b82:	712c      	strb	r4, [r5, #4]

  return CKR_OK;
 8006b84:	4620      	mov	r0, r4
}
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
    return CKR_ARGUMENTS_BAD;
 8006b88:	2007      	movs	r0, #7
 8006b8a:	e7fc      	b.n	8006b86 <KMS_Finalize+0x1a>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8006b8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006b90:	e7f9      	b.n	8006b86 <KMS_Finalize+0x1a>
 8006b92:	bf00      	nop
 8006b94:	2000439c 	.word	0x2000439c

08006b98 <KMS_GetTokenInfo>:
  * @param  slotID token slot ID
  * @param  pInfo token information
  * @retval Operation status
  */
CK_RV KMS_GetTokenInfo(CK_SLOT_ID slotID, CK_TOKEN_INFO_PTR pInfo)
{
 8006b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  const CK_TOKEN_INFO token_desc_template =
 8006b9a:	2250      	movs	r2, #80	; 0x50
{
 8006b9c:	b0a9      	sub	sp, #164	; 0xa4
  const CK_TOKEN_INFO token_desc_template =
 8006b9e:	eb0d 0002 	add.w	r0, sp, r2
{
 8006ba2:	460d      	mov	r5, r1
  const CK_TOKEN_INFO token_desc_template =
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f00f ffac 	bl	8016b02 <memset>
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <KMS_GetTokenInfo+0x9c>)
 8006bac:	466a      	mov	r2, sp
 8006bae:	f103 0708 	add.w	r7, r3, #8
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	4614      	mov	r4, r2
 8006bba:	c403      	stmia	r4!, {r0, r1}
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	42bb      	cmp	r3, r7
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	d1f7      	bne.n	8006bb4 <KMS_GetTokenInfo+0x1c>
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	6020      	str	r0, [r4, #0]
 8006bca:	7123      	strb	r3, [r4, #4]
 8006bcc:	2213      	movs	r2, #19
 8006bce:	2100      	movs	r1, #0
 8006bd0:	f10d 000d 	add.w	r0, sp, #13
 8006bd4:	f00f ff95 	bl	8016b02 <memset>
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <KMS_GetTokenInfo+0xa0>)
 8006bda:	aa08      	add	r2, sp, #32
 8006bdc:	f103 0710 	add.w	r7, r3, #16
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	4614      	mov	r4, r2
 8006be6:	c403      	stmia	r4!, {r0, r1}
 8006be8:	3308      	adds	r3, #8
 8006bea:	42bb      	cmp	r3, r7
 8006bec:	4622      	mov	r2, r4
 8006bee:	d1f7      	bne.n	8006be0 <KMS_GetTokenInfo+0x48>
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	6020      	str	r0, [r4, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8006bfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <KMS_GetTokenInfo+0xa4>)
 8006bfe:	ac10      	add	r4, sp, #64	; 0x40
 8006c00:	f103 0710 	add.w	r7, r3, #16
 8006c04:	6818      	ldr	r0, [r3, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	4622      	mov	r2, r4
 8006c0a:	c203      	stmia	r2!, {r0, r1}
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	42bb      	cmp	r3, r7
 8006c10:	4614      	mov	r4, r2
 8006c12:	d1f7      	bne.n	8006c04 <KMS_GetTokenInfo+0x6c>
 8006c14:	230a      	movs	r3, #10
 8006c16:	9319      	str	r3, [sp, #100]	; 0x64
 8006c18:	931b      	str	r3, [sp, #108]	; 0x6c
  };

  (void)(slotID);

  /* Setup the structure with the default values */
  (void)memcpy(pInfo, &token_desc_template, sizeof(token_desc_template));
 8006c1a:	22a0      	movs	r2, #160	; 0xa0
  const CK_TOKEN_INFO token_desc_template =
 8006c1c:	2301      	movs	r3, #1
  (void)memcpy(pInfo, &token_desc_template, sizeof(token_desc_template));
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
  const CK_TOKEN_INFO token_desc_template =
 8006c22:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  (void)memcpy(pInfo, &token_desc_template, sizeof(token_desc_template));
 8006c26:	f00f ff48 	bl	8016aba <memcpy>

  /* Pass the Flag */
  pInfo->flags = CKF_WRITE_PROTECTED;
 8006c2a:	2302      	movs	r3, #2

  return CKR_OK;
}
 8006c2c:	2000      	movs	r0, #0
  pInfo->flags = CKF_WRITE_PROTECTED;
 8006c2e:	662b      	str	r3, [r5, #96]	; 0x60
}
 8006c30:	b029      	add	sp, #164	; 0xa4
 8006c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c34:	080179c0 	.word	0x080179c0
 8006c38:	080179e0 	.word	0x080179e0
 8006c3c:	08019926 	.word	0x08019926

08006c40 <KMS_OpenSession>:
  * @retval Operation status
  */
CK_RV KMS_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags,
                      CK_VOID_PTR pApplication, CK_NOTIFY Notify,
                      CK_SESSION_HANDLE_PTR phSession)
{
 8006c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* As defined in PKCS11 spec: For legacy reasons, the CKF_SERIAL_SESSION bit MUST
     always be set; if a call to C_OpenSession does not have this bit set, the call
     should return unsuccessfully with the error code CKR_SESSION_PARALLEL_NOT_SUPPORTED.
  */
  if ((flags & CKF_SERIAL_SESSION) == 0UL)
 8006c44:	074c      	lsls	r4, r1, #29
 8006c46:	d517      	bpl.n	8006c78 <KMS_OpenSession+0x38>
  {
    return CKR_SESSION_PARALLEL_NOT_SUPPORTED;
  }

  /* We reach the max number of opened sessions */
  if (session_nb >=  KMS_NB_SESSIONS_MAX)
 8006c48:	4f19      	ldr	r7, [pc, #100]	; (8006cb0 <KMS_OpenSession+0x70>)
 8006c4a:	f8d7 c000 	ldr.w	ip, [r7]
 8006c4e:	f1bc 0f09 	cmp.w	ip, #9
 8006c52:	46b9      	mov	r9, r7
 8006c54:	d80e      	bhi.n	8006c74 <KMS_OpenSession+0x34>

  /* Find a slot for a Session */
  session_index = 1;
  do
  {
    if (KMS_GETSESSSION(session_index).state == KMS_SESSION_NOT_USED)
 8006c56:	4e17      	ldr	r6, [pc, #92]	; (8006cb4 <KMS_OpenSession+0x74>)
  session_index = 1;
 8006c58:	2401      	movs	r4, #1
    if (KMS_GETSESSSION(session_index).state == KMS_SESSION_NOT_USED)
 8006c5a:	2528      	movs	r5, #40	; 0x28
 8006c5c:	fb05 6804 	mla	r8, r5, r4, r6
 8006c60:	f104 3eff 	add.w	lr, r4, #4294967295
 8006c64:	f858 8c24 	ldr.w	r8, [r8, #-36]
 8006c68:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c6c:	d007      	beq.n	8006c7e <KMS_OpenSession+0x3e>
    {
      break;
    }
    session_index++;
 8006c6e:	3401      	adds	r4, #1
  } while (session_index <= KMS_NB_SESSIONS_MAX); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 8006c70:	2c0b      	cmp	r4, #11
 8006c72:	d1f3      	bne.n	8006c5c <KMS_OpenSession+0x1c>
    return CKR_SESSION_COUNT;
 8006c74:	20b1      	movs	r0, #177	; 0xb1
 8006c76:	e000      	b.n	8006c7a <KMS_OpenSession+0x3a>
    return CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 8006c78:	20b4      	movs	r0, #180	; 0xb4

    return CKR_OK;
  }

  return CKR_SESSION_COUNT;
}
 8006c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *phSession = session_index;
 8006c7e:	9f07      	ldr	r7, [sp, #28]
    KMS_GETSESSSION(session_index).slotID = slotID;
 8006c80:	fb05 f50e 	mul.w	r5, r5, lr
    *phSession = session_index;
 8006c84:	603c      	str	r4, [r7, #0]
    KMS_GETSESSSION(session_index).slotID = slotID;
 8006c86:	1974      	adds	r4, r6, r5
    KMS_GETSESSSION(session_index).Notify = Notify;
 8006c88:	e9c4 2304 	strd	r2, r3, [r4, #16]
    KMS_GETSESSSION(session_index).Mechanism = CKM_VENDOR_DEFINED;
 8006c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c90:	61a3      	str	r3, [r4, #24]
    KMS_GETSESSSION(session_index).hSession_ExtToken = 0xFFFF;
 8006c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    KMS_GETSESSSION(session_index).slotID = slotID;
 8006c96:	5170      	str	r0, [r6, r5]
    KMS_GETSESSSION(session_index).hSession_ExtToken = 0xFFFF;
 8006c98:	6263      	str	r3, [r4, #36]	; 0x24
    KMS_GETSESSSION(session_index).state = KMS_SESSION_IDLE;      /* Initialized */
 8006c9a:	2000      	movs	r0, #0
    session_nb++;
 8006c9c:	f10c 0301 	add.w	r3, ip, #1
    KMS_GETSESSSION(session_index).flags = flags;
 8006ca0:	e9c4 0101 	strd	r0, r1, [r4, #4]
    KMS_GETSESSSION(session_index).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006ca4:	61e0      	str	r0, [r4, #28]
    KMS_GETSESSSION(session_index).pKeyAllocBuffer = NULL;
 8006ca6:	6220      	str	r0, [r4, #32]
    session_nb++;
 8006ca8:	f8c9 3000 	str.w	r3, [r9]
    return CKR_OK;
 8006cac:	e7e5      	b.n	8006c7a <KMS_OpenSession+0x3a>
 8006cae:	bf00      	nop
 8006cb0:	2000439c 	.word	0x2000439c
 8006cb4:	20007874 	.word	0x20007874

08006cb8 <KMS_CallbackFunction_ForExtToken>:
  /* Search corresponding session ID in KMS domain */
  /* Find a slot for a Session */
  session_index = 1;
  do
  {
    if (KMS_GETSESSSION(session_index).hSession_ExtToken == hSession)
 8006cb8:	4a0c      	ldr	r2, [pc, #48]	; (8006cec <KMS_CallbackFunction_ForExtToken+0x34>)
{
 8006cba:	b538      	push	{r3, r4, r5, lr}
 8006cbc:	4603      	mov	r3, r0
    if (KMS_GETSESSSION(session_index).hSession_ExtToken == hSession)
 8006cbe:	2428      	movs	r4, #40	; 0x28
  session_index = 1;
 8006cc0:	2001      	movs	r0, #1
    if (KMS_GETSESSSION(session_index).hSession_ExtToken == hSession)
 8006cc2:	fb04 2500 	mla	r5, r4, r0, r2
 8006cc6:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8006cca:	429d      	cmp	r5, r3
 8006ccc:	d004      	beq.n	8006cd8 <KMS_CallbackFunction_ForExtToken+0x20>
    {
      break;
    }
    session_index++;
 8006cce:	3001      	adds	r0, #1
  } while (session_index <= KMS_NB_SESSIONS_MAX);
 8006cd0:	280b      	cmp	r0, #11
 8006cd2:	d1f6      	bne.n	8006cc2 <KMS_CallbackFunction_ForExtToken+0xa>
      (KMS_GETSESSSION(hSession).Notify)(session_index, event, KMS_GETSESSSION(hSession).pApplication);
    }

  }
  return CKR_OK;
}
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
    if (KMS_GETSESSSION(hSession).Notify != NULL)
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	fb04 2303 	mla	r3, r4, r3, r2
 8006cde:	695c      	ldr	r4, [r3, #20]
 8006ce0:	2c00      	cmp	r4, #0
 8006ce2:	d0f7      	beq.n	8006cd4 <KMS_CallbackFunction_ForExtToken+0x1c>
      (KMS_GETSESSSION(hSession).Notify)(session_index, event, KMS_GETSESSSION(hSession).pApplication);
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	47a0      	blx	r4
 8006ce8:	e7f4      	b.n	8006cd4 <KMS_CallbackFunction_ForExtToken+0x1c>
 8006cea:	bf00      	nop
 8006cec:	20007874 	.word	0x20007874

08006cf0 <KMS_OpenSession_RegisterExtToken>:
  */
CK_RV  KMS_OpenSession_RegisterExtToken(CK_SESSION_HANDLE hSession,
                                        CK_SESSION_HANDLE hSession_ExtToken)
{
  /* Check that the session correspond to a waiting session */
  if ((KMS_GETSESSSION(hSession).state == KMS_SESSION_IDLE) &&
 8006cf0:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <KMS_OpenSession_RegisterExtToken+0x24>)
{
 8006cf2:	b510      	push	{r4, lr}
  if ((KMS_GETSESSSION(hSession).state == KMS_SESSION_IDLE) &&
 8006cf4:	1e43      	subs	r3, r0, #1
 8006cf6:	2428      	movs	r4, #40	; 0x28
 8006cf8:	fb04 2303 	mla	r3, r4, r3, r2
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	b93a      	cbnz	r2, 8006d10 <KMS_OpenSession_RegisterExtToken+0x20>
 8006d00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d06:	4294      	cmp	r4, r2
 8006d08:	d102      	bne.n	8006d10 <KMS_OpenSession_RegisterExtToken+0x20>
      (KMS_GETSESSSION(hSession).hSession_ExtToken == 0xFFFF) &&
 8006d0a:	280a      	cmp	r0, #10
      (hSession <= KMS_NB_SESSIONS_MAX))
  {
    /* Record the  corresponding SessionNumber of the External Token */
    KMS_GETSESSSION(hSession).hSession_ExtToken = hSession_ExtToken;
 8006d0c:	bf98      	it	ls
 8006d0e:	6259      	strls	r1, [r3, #36]	; 0x24
  }

  return CKR_OK;
}
 8006d10:	2000      	movs	r0, #0
 8006d12:	bd10      	pop	{r4, pc}
 8006d14:	20007874 	.word	0x20007874

08006d18 <KMS_CloseSession>:
  * @param  hSession session handle
  * @retval Operation status
  */
CK_RV KMS_CloseSession(CK_SESSION_HANDLE hSession)
{
  if (KMS_GETSESSSION(hSession).state != KMS_SESSION_NOT_USED)
 8006d18:	2328      	movs	r3, #40	; 0x28
 8006d1a:	3801      	subs	r0, #1
 8006d1c:	490b      	ldr	r1, [pc, #44]	; (8006d4c <KMS_CloseSession+0x34>)
 8006d1e:	4358      	muls	r0, r3
 8006d20:	180b      	adds	r3, r1, r0
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	3201      	adds	r2, #1
 8006d26:	d00f      	beq.n	8006d48 <KMS_CloseSession+0x30>
  {
    KMS_GETSESSSION(hSession).slotID = 0;
 8006d28:	2200      	movs	r2, #0
 8006d2a:	500a      	str	r2, [r1, r0]
    KMS_GETSESSSION(hSession).state = KMS_SESSION_NOT_USED;   /* Free session */
 8006d2c:	f04f 31ff 	mov.w	r1, #4294967295
    KMS_GETSESSSION(hSession).flags = 0;
 8006d30:	e9c3 1201 	strd	r1, r2, [r3, #4]
    KMS_GETSESSSION(hSession).pApplication = NULL;
    KMS_GETSESSSION(hSession).Notify = NULL;
 8006d34:	e9c3 2204 	strd	r2, r2, [r3, #16]
    KMS_GETSESSSION(hSession).pKeyAllocBuffer = NULL;
 8006d38:	621a      	str	r2, [r3, #32]

#ifdef KMS_EXT_TOKEN_ENABLED
    KMS_GETSESSSION(hSession).hSession_ExtToken = 0xFFFF;
 8006d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* KMS_EXT_TOKEN_ENABLED      */

    /* Decrement the session counter */
    session_nb--;
 8006d40:	4a03      	ldr	r2, [pc, #12]	; (8006d50 <KMS_CloseSession+0x38>)
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	440b      	add	r3, r1
 8006d46:	6013      	str	r3, [r2, #0]
  }

  return CKR_OK;
}
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4770      	bx	lr
 8006d4c:	20007874 	.word	0x20007874
 8006d50:	2000439c 	.word	0x2000439c

08006d54 <KMS_Check_Session_Handle>:
  * @retval Operation status
  */
CK_RV     KMS_Check_Session_Handle(CK_SESSION_HANDLE hSession)
{

  if ((hSession < 1UL) ||
 8006d54:	3801      	subs	r0, #1
 8006d56:	2809      	cmp	r0, #9
 8006d58:	d809      	bhi.n	8006d6e <KMS_Check_Session_Handle+0x1a>
      (hSession > KMS_NB_SESSIONS_MAX) ||
      (KMS_GETSESSSION(hSession).state == KMS_SESSION_NOT_USED))
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <KMS_Check_Session_Handle+0x20>)
 8006d5c:	2228      	movs	r2, #40	; 0x28
 8006d5e:	fb02 3000 	mla	r0, r2, r0, r3
      (hSession > KMS_NB_SESSIONS_MAX) ||
 8006d62:	6843      	ldr	r3, [r0, #4]
 8006d64:	3301      	adds	r3, #1
  {
    return   CKR_SESSION_HANDLE_INVALID;
  }
  else
  {
    return   CKR_OK;
 8006d66:	bf0c      	ite	eq
 8006d68:	20b3      	moveq	r0, #179	; 0xb3
 8006d6a:	2000      	movne	r0, #0
 8006d6c:	4770      	bx	lr
    return   CKR_SESSION_HANDLE_INVALID;
 8006d6e:	20b3      	movs	r0, #179	; 0xb3
  }
}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20007874 	.word	0x20007874

08006d78 <KMS_GetMechanismInfo>:
  */
CK_RV     KMS_GetMechanismInfo(CK_SLOT_ID slotID, CK_MECHANISM_TYPE type, CK_MECHANISM_INFO_PTR pInfo)
{
  CK_RV ret_status = CKR_MECHANISM_INVALID;

  switch (type)
 8006d78:	f241 0344 	movw	r3, #4164	; 0x1044
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d015      	beq.n	8006dac <KMS_GetMechanismInfo+0x34>
 8006d80:	d81c      	bhi.n	8006dbc <KMS_GetMechanismInfo+0x44>
 8006d82:	f5b1 7f08 	cmp.w	r1, #544	; 0x220
 8006d86:	d03e      	beq.n	8006e06 <KMS_GetMechanismInfo+0x8e>
 8006d88:	d809      	bhi.n	8006d9e <KMS_GetMechanismInfo+0x26>
 8006d8a:	2906      	cmp	r1, #6
 8006d8c:	d042      	beq.n	8006e14 <KMS_GetMechanismInfo+0x9c>
 8006d8e:	2940      	cmp	r1, #64	; 0x40
 8006d90:	d040      	beq.n	8006e14 <KMS_GetMechanismInfo+0x9c>
    }
#endif

    default:
    {
      pInfo->flags = 0;
 8006d92:	2300      	movs	r3, #0
      pInfo->ulMaxKeySize = 0;
 8006d94:	e9c2 3301 	strd	r3, r3, [r2, #4]
      pInfo->ulMinKeySize = 0;
 8006d98:	6013      	str	r3, [r2, #0]
  CK_RV ret_status = CKR_MECHANISM_INVALID;
 8006d9a:	2070      	movs	r0, #112	; 0x70
      break;
    }
  }

  return ret_status;
}
 8006d9c:	4770      	bx	lr
  switch (type)
 8006d9e:	f5b1 7f14 	cmp.w	r1, #592	; 0x250
 8006da2:	d030      	beq.n	8006e06 <KMS_GetMechanismInfo+0x8e>
 8006da4:	f241 0342 	movw	r3, #4162	; 0x1042
 8006da8:	4299      	cmp	r1, r3
 8006daa:	d1f2      	bne.n	8006d92 <KMS_GetMechanismInfo+0x1a>
      pInfo->ulMaxKeySize = 521;
 8006dac:	f240 2309 	movw	r3, #521	; 0x209
 8006db0:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006db4:	e9c2 3001 	strd	r3, r0, [r2, #4]
      pInfo->ulMinKeySize = 192;
 8006db8:	23c0      	movs	r3, #192	; 0xc0
 8006dba:	e013      	b.n	8006de4 <KMS_GetMechanismInfo+0x6c>
  switch (type)
 8006dbc:	f241 0388 	movw	r3, #4232	; 0x1088
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d812      	bhi.n	8006dea <KMS_GetMechanismInfo+0x72>
 8006dc4:	f241 0387 	movw	r3, #4231	; 0x1087
 8006dc8:	4299      	cmp	r1, r3
 8006dca:	d204      	bcs.n	8006dd6 <KMS_GetMechanismInfo+0x5e>
 8006dcc:	f5a1 5184 	sub.w	r1, r1, #4224	; 0x1080
 8006dd0:	3901      	subs	r1, #1
 8006dd2:	2901      	cmp	r1, #1
 8006dd4:	d8dd      	bhi.n	8006d92 <KMS_GetMechanismInfo+0x1a>
      pInfo->flags = CKF_ENCRYPT | CKF_DECRYPT;
 8006dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
      pInfo->flags = CKF_DERIVE;
 8006dda:	6093      	str	r3, [r2, #8]
      pInfo->ulMaxKeySize = 256;
 8006ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006de0:	6053      	str	r3, [r2, #4]
      pInfo->ulMinKeySize = 128;
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	6013      	str	r3, [r2, #0]
      ret_status = CKR_OK;
 8006de6:	2000      	movs	r0, #0
      break;
 8006de8:	4770      	bx	lr
  switch (type)
 8006dea:	f241 038a 	movw	r3, #4234	; 0x108a
 8006dee:	4299      	cmp	r1, r3
 8006df0:	d006      	beq.n	8006e00 <KMS_GetMechanismInfo+0x88>
 8006df2:	f241 1304 	movw	r3, #4356	; 0x1104
 8006df6:	4299      	cmp	r1, r3
 8006df8:	d1cb      	bne.n	8006d92 <KMS_GetMechanismInfo+0x1a>
      pInfo->flags = CKF_DERIVE;
 8006dfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006dfe:	e7ec      	b.n	8006dda <KMS_GetMechanismInfo+0x62>
      pInfo->flags = CKF_SIGN | CKF_VERIFY;
 8006e00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006e04:	e7e9      	b.n	8006dda <KMS_GetMechanismInfo+0x62>
      pInfo->ulMaxKeySize = 0;
 8006e06:	2000      	movs	r0, #0
 8006e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0c:	e9c2 0301 	strd	r0, r3, [r2, #4]
      pInfo->ulMinKeySize = 0;
 8006e10:	6010      	str	r0, [r2, #0]
      break;
 8006e12:	4770      	bx	lr
      pInfo->ulMaxKeySize = 2048;
 8006e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e18:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8006e1c:	e9c2 3101 	strd	r3, r1, [r2, #4]
      pInfo->ulMinKeySize = 1024;
 8006e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e24:	e7de      	b.n	8006de4 <KMS_GetMechanismInfo+0x6c>
	...

08006e28 <KMS_DeriveKey>:
  * @retval Operation status
  */
CK_RV          KMS_DeriveKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                             CK_OBJECT_HANDLE hBaseKey, CK_ATTRIBUTE_PTR  pTemplate,
                             CK_ULONG  ulAttributeCount, CK_OBJECT_HANDLE_PTR  phKey)
{
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	468a      	mov	sl, r1
 8006e2e:	b08b      	sub	sp, #44	; 0x2c
  CK_RV e_ret_status;
  CK_ULONG EncryptedLen;
  kms_obj_keyhead_t *pkms_object;
  kms_ref_t *P_pKeyAttribute;
  uint8_t *pKeyBuffer;
  CK_MECHANISM aes_ebc_mechanism = { CKM_AES_ECB, NULL, 0 };
 8006e30:	f241 0181 	movw	r1, #4225	; 0x1081
{
 8006e34:	461c      	mov	r4, r3
  CK_MECHANISM aes_ebc_mechanism = { CKM_AES_ECB, NULL, 0 };
 8006e36:	2300      	movs	r3, #0
 8006e38:	e9cd 1307 	strd	r1, r3, [sp, #28]

  static biggest_kms_obj_keyhead_t  for_dynamic_object_creation;

  /* Check that we support the expected mechanism. */
  if (pMechanism->mechanism != CKM_AES_ECB_ENCRYPT_DATA)
 8006e3c:	f8da 1000 	ldr.w	r1, [sl]
  CK_MECHANISM aes_ebc_mechanism = { CKM_AES_ECB, NULL, 0 };
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
  if (pMechanism->mechanism != CKM_AES_ECB_ENCRYPT_DATA)
 8006e42:	f241 1304 	movw	r3, #4356	; 0x1104
 8006e46:	4299      	cmp	r1, r3
{
 8006e48:	4605      	mov	r5, r0
 8006e4a:	4616      	mov	r6, r2
 8006e4c:	9f14      	ldr	r7, [sp, #80]	; 0x50
  if (pMechanism->mechanism != CKM_AES_ECB_ENCRYPT_DATA)
 8006e4e:	f040 810b 	bne.w	8007068 <KMS_DeriveKey+0x240>
  }

  /* We reuse the AES-EncryptInit function */
  /* The Encryption mechanism do not expect any param, we use one the local definition */

  e_ret_status = KMS_EncryptInit(hSession, &aes_ebc_mechanism, hBaseKey);
 8006e52:	a907      	add	r1, sp, #28
 8006e54:	f7fe fe1e 	bl	8005a94 <KMS_EncryptInit>

  if (e_ret_status == CKR_OK)
 8006e58:	4683      	mov	fp, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f040 80aa 	bne.w	8006fb4 <KMS_DeriveKey+0x18c>
  {

    /* The Key */
    /* Read the key value from the Key Handle                 */
    /* Key Handle is the index to one of static or nvm        */
    pkms_object = KMS_Objects_GetPointer(hBaseKey);
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 ff99 	bl	8007d98 <KMS_Objects_GetPointer>

    /* Check that hKey is valid */
    if (pkms_object != NULL)
 8006e66:	4606      	mov	r6, r0
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f000 80a3 	beq.w	8006fb4 <KMS_DeriveKey+0x18c>
    {

      /* Search for the Key Value to use */
      e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8006e6e:	4601      	mov	r1, r0
 8006e70:	aa04      	add	r2, sp, #16
 8006e72:	2011      	movs	r0, #17
 8006e74:	f000 ffc5 	bl	8007e02 <KMS_Objects_SearchAttributes>

      if ((e_ret_status == CKR_OK) &&
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f040 80f3 	bne.w	8007064 <KMS_DeriveKey+0x23c>
 8006e7e:	4a7c      	ldr	r2, [pc, #496]	; (8007070 <KMS_DeriveKey+0x248>)
 8006e80:	6831      	ldr	r1, [r6, #0]
 8006e82:	4291      	cmp	r1, r2
 8006e84:	4691      	mov	r9, r2
 8006e86:	f040 8095 	bne.w	8006fb4 <KMS_DeriveKey+0x18c>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8006e8a:	f46f 730f 	mvn.w	r3, #572	; 0x23c
 8006e8e:	6871      	ldr	r1, [r6, #4]
 8006e90:	441a      	add	r2, r3
 8006e92:	4291      	cmp	r1, r2
 8006e94:	4690      	mov	r8, r2
 8006e96:	f040 808d 	bne.w	8006fb4 <KMS_DeriveKey+0x18c>
        /* As stated in PKCS11 spec:                                                   */
        /* The CKA_DERIVE attribute has the value CK_TRUE if and only if it is         */
        /*   possible to derive other keys from the key.                               */
        /* Check that the object allows to DERIVE a KEY, checking ATTRIBUTE CKA_DERIVE */

        e_ret_status = KMS_Objects_SearchAttributes(CKA_DERIVE, pkms_object, &pDeriveAttribute);
 8006e9a:	aa05      	add	r2, sp, #20
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8006ea2:	f000 ffae 	bl	8007e02 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 8006ea6:	4683      	mov	fp, r0
 8006ea8:	b920      	cbnz	r0, 8006eb4 <KMS_DeriveKey+0x8c>
        {
          if (*pDeriveAttribute->data != CK_TRUE)
 8006eaa:	9a05      	ldr	r2, [sp, #20]
 8006eac:	6892      	ldr	r2, [r2, #8]
 8006eae:	2a01      	cmp	r2, #1
 8006eb0:	f040 80cc 	bne.w	800704c <KMS_DeriveKey+0x224>
            return (CKR_ACTION_PROHIBITED);
          }
        }

        /* Set key size with value from attribute  */
        if ((P_pKeyAttribute->size == 16UL) ||    /* 128 bits */
 8006eb4:	9a04      	ldr	r2, [sp, #16]
 8006eb6:	6850      	ldr	r0, [r2, #4]
 8006eb8:	f020 0208 	bic.w	r2, r0, #8
 8006ebc:	2a10      	cmp	r2, #16
 8006ebe:	d002      	beq.n	8006ec6 <KMS_DeriveKey+0x9e>
            (P_pKeyAttribute->size == 24UL) ||     /* 192 bits */
 8006ec0:	2820      	cmp	r0, #32
 8006ec2:	f040 80c9 	bne.w	8007058 <KMS_DeriveKey+0x230>
            (P_pKeyAttribute->size == 32UL))       /* 256 bits */
        {
          /* Allocate a Key buffer */
          pKeyBuffer = (uint8_t *)KMS_AllocKey(P_pKeyAttribute->size);
 8006ec6:	f7fe fb37 	bl	8005538 <KMS_AllocKey>
          if (pKeyBuffer == NULL)
 8006eca:	4606      	mov	r6, r0
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f000 80c6 	beq.w	800705e <KMS_DeriveKey+0x236>
          /* Unsupported key size */
          return (CKR_ATTRIBUTE_VALUE_INVALID);
        }

        /* Derivation is done based on the value passed in the MEchanism */
        if ((pMechanism->pParameter != NULL) &&
 8006ed2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	f000 80b1 	beq.w	800703e <KMS_DeriveKey+0x216>
            (pMechanism->ulParameterLen != 0UL))
 8006edc:	f8da 2008 	ldr.w	r2, [sl, #8]
        if ((pMechanism->pParameter != NULL) &&
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	f000 80ac 	beq.w	800703e <KMS_DeriveKey+0x216>
        {

          /* We calculate the derived KEY from the Encrypting the pMechanism->pParameter */
          /* with the hBaseKey */
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4603      	mov	r3, r0
 8006eec:	4628      	mov	r0, r5
 8006eee:	f7fe fe49 	bl	8005b84 <KMS_Encrypt>
                                     pMechanism->ulParameterLen, pKeyBuffer, &EncryptedLen);

          if (e_ret_status == CKR_OK)
 8006ef2:	4683      	mov	fp, r0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f040 80a2 	bne.w	800703e <KMS_DeriveKey+0x216>
          {
            /* At this stage, we can create an object to store the derived key, */
            /* The object should embed the created Key, and the Template part. */

            e_ret_status = fill_in_aes_object_instance(pKeyBuffer,
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	230c      	movs	r3, #12
 8006efe:	fb03 4307 	mla	r3, r3, r7, r4
  attributesSize = (5UL * sizeof(CK_ULONG)) + KeyLen;
 8006f02:	f101 0c14 	add.w	ip, r1, #20
 8006f06:	f104 0208 	add.w	r2, r4, #8
 8006f0a:	3314      	adds	r3, #20
 8006f0c:	320c      	adds	r2, #12
  for (AttributesToCopy = 0; AttributesToCopy < ulAttributeCount; AttributesToCopy++)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d158      	bne.n	8006fc4 <KMS_DeriveKey+0x19c>
  if (attributesSize <= (sizeof(biggest_kms_obj_keyhead_t) - sizeof(kms_obj_keyhead_no_blob_t)))
 8006f12:	f5bc 6fc0 	cmp.w	ip, #1536	; 0x600
 8006f16:	f200 808f 	bhi.w	8007038 <KMS_DeriveKey+0x210>
    pObjectToCreate->version = KMS_ABI_VERSION_CK_2_40;
 8006f1a:	4b56      	ldr	r3, [pc, #344]	; (8007074 <KMS_DeriveKey+0x24c>)
    pObjectToCreate->type  = CKK_AES;
 8006f1c:	2004      	movs	r0, #4
 8006f1e:	221f      	movs	r2, #31
 8006f20:	e9c3 0204 	strd	r0, r2, [r3, #16]
    pObjectToCreate->blobs[2] = CKK_AES;
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24
    pObjectToCreate->blobs[3] = CKA_VALUE;
 8006f26:	2211      	movs	r2, #17
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
    pObjectToCreate->blobs[4] = KeyLen;
 8006f2a:	461a      	mov	r2, r3
    pObjectToCreate->configuration = KMS_ABI_CONFIG_KEYHEAD;
 8006f2c:	e9c3 9800 	strd	r9, r8, [r3]
    pObjectToCreate->blobs[0] = CKA_KEY_TYPE;
 8006f30:	f44f 7c80 	mov.w	ip, #256	; 0x100
    pObjectToCreate->blobs[4] = KeyLen;
 8006f34:	f842 1f2c 	str.w	r1, [r2, #44]!
    for (Index = 0; Index < (KeyLen / 4UL); Index++)
 8006f38:	0889      	lsrs	r1, r1, #2
    pObjectToCreate->blobs[1] = sizeof(CK_KEY_TYPE);
 8006f3a:	e9c3 c007 	strd	ip, r0, [r3, #28]
 8006f3e:	4630      	mov	r0, r6
 8006f40:	eb01 0c06 	add.w	ip, r1, r6
    for (Index = 0; Index < (KeyLen / 4UL); Index++)
 8006f44:	4584      	cmp	ip, r0
 8006f46:	d142      	bne.n	8006fce <KMS_DeriveKey+0x1a6>
    e_ret_status = CKR_OK;
 8006f48:	f04f 0b00 	mov.w	fp, #0
        pObjectToCreate->blobs[Index] = pTemp->type;
 8006f4c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007074 <KMS_DeriveKey+0x24c>
 8006f50:	3105      	adds	r1, #5
    for (AttributesToCopy = 0; (AttributesToCopy < ulAttributeCount) && (e_ret_status == CKR_OK); AttributesToCopy++)
 8006f52:	46d9      	mov	r9, fp
 8006f54:	454f      	cmp	r7, r9
 8006f56:	d002      	beq.n	8006f5e <KMS_DeriveKey+0x136>
 8006f58:	f1bb 0f00 	cmp.w	fp, #0
 8006f5c:	d047      	beq.n	8006fee <KMS_DeriveKey+0x1c6>
    pObjectToCreate->blobs_size  = (Index * sizeof(uint32_t));
 8006f5e:	4a45      	ldr	r2, [pc, #276]	; (8007074 <KMS_DeriveKey+0x24c>)
 8006f60:	0089      	lsls	r1, r1, #2
    pObjectToCreate->blobs_count = 2UL + ulAttributeCount;
 8006f62:	3702      	adds	r7, #2
    pObjectToCreate->blobs_size  = (Index * sizeof(uint32_t));
 8006f64:	6091      	str	r1, [r2, #8]
    pObjectToCreate->blobs_count = 2UL + ulAttributeCount;
 8006f66:	60d7      	str	r7, [r2, #12]
                                                       pTemplate,
                                                       ulAttributeCount,
                                                       &for_dynamic_object_creation);

            /* Free the buffer */
            KMS_FreeKey(pKeyBuffer);
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7fe fd67 	bl	8005a3c <KMS_FreeKey>
            pKeyBuffer = NULL;

            if (e_ret_status == CKR_OK)
 8006f6e:	f1bb 0f00 	cmp.w	fp, #0
 8006f72:	d11f      	bne.n	8006fb4 <KMS_DeriveKey+0x18c>
            {

              /* Check that the pointer to return the KeyHandle is valid */
              if (phKey != NULL)
 8006f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d065      	beq.n	8007046 <KMS_DeriveKey+0x21e>
              {
                CK_OBJECT_HANDLE  ObjectId = 0;
 8006f7a:	a80a      	add	r0, sp, #40	; 0x28
 8006f7c:	f840 bd10 	str.w	fp, [r0, #-16]!
                nvms_error_t nvm_status;

                /* Create a new ObjectID */
                e_ret_status = KMS_PlatfObjects_AllocateNvmDynamicObjectId(&ObjectId);
 8006f80:	f001 f82e 	bl	8007fe0 <KMS_PlatfObjects_AllocateNvmDynamicObjectId>

                /* Return the ObjectId Handle */
                *phKey = ObjectId;
 8006f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f86:	9c06      	ldr	r4, [sp, #24]
 8006f88:	601c      	str	r4, [r3, #0]

                if (e_ret_status != CKR_OK)
 8006f8a:	4683      	mov	fp, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d15f      	bne.n	8007050 <KMS_DeriveKey+0x228>
                {
                  return e_ret_status;
                }

                /* Fill in the object_id in the object header */
                for_dynamic_object_creation.object_id = ObjectId;
 8006f90:	4938      	ldr	r1, [pc, #224]	; (8007074 <KMS_DeriveKey+0x24c>)

                /* Record the object in NVM */
                nvm_status = KMS_PlatfObjects_NvmStoreObject(ObjectId,
 8006f92:	688a      	ldr	r2, [r1, #8]
                for_dynamic_object_creation.object_id = ObjectId;
 8006f94:	618c      	str	r4, [r1, #24]
                nvm_status = KMS_PlatfObjects_NvmStoreObject(ObjectId,
 8006f96:	321c      	adds	r2, #28
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 f883 	bl	80080a4 <KMS_PlatfObjects_NvmStoreObject>
                                                             (uint8_t *)&for_dynamic_object_creation,
                                                             for_dynamic_object_creation.blobs_size
                                                             + sizeof(kms_obj_keyhead_no_blob_t));

                /* A Garbage generate a WARNING ==> Not an error */
                if ((nvm_status == NVMS_NOERROR) || (nvm_status == NVMS_WARNING))
 8006f9e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8006fa2:	d005      	beq.n	8006fb0 <KMS_DeriveKey+0x188>
                else
                {
                  /* error = NVMS_KEY_INVALID */
                  if (nvm_status == NVMS_SLOT_INVALID)
                  {
                    e_ret_status = CKR_SLOT_ID_INVALID;
 8006fa4:	2804      	cmp	r0, #4
 8006fa6:	bf14      	ite	ne
 8006fa8:	f04f 0b31 	movne.w	fp, #49	; 0x31
 8006fac:	f04f 0b03 	moveq.w	fp, #3
                  }
                }

                /* To take the latest entry (the derived key) into account in the table, */
                /* we have to refresh the list. */
                KMS_PlatfObjects_NvmDynamicObjectList();
 8006fb0:	f001 f826 	bl	8008000 <KMS_PlatfObjects_NvmDynamicObjectList>
      }
    }
  }

  /* No more crypto to manage with this key */
  KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006fb4:	4a30      	ldr	r2, [pc, #192]	; (8007078 <KMS_DeriveKey+0x250>)
 8006fb6:	3d01      	subs	r5, #1
 8006fb8:	2128      	movs	r1, #40	; 0x28
 8006fba:	fb01 2505 	mla	r5, r1, r5, r2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	61ea      	str	r2, [r5, #28]


  return e_ret_status;
 8006fc2:	e045      	b.n	8007050 <KMS_DeriveKey+0x228>
    attributesSize += pTemplate[AttributesToCopy].ulValueLen + (2UL * sizeof(CK_ULONG)) /* type & ulValueLen */;
 8006fc4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8006fc8:	3008      	adds	r0, #8
 8006fca:	4484      	add	ip, r0
 8006fcc:	e79e      	b.n	8006f0c <KMS_DeriveKey+0xe4>
      KeyValue_int_aligned = (uint32_t)pKeyBuffer[Index + 0UL] + ((uint32_t)pKeyBuffer[Index + 1UL] << 8) + \
 8006fce:	f890 e000 	ldrb.w	lr, [r0]
 8006fd2:	f810 8f01 	ldrb.w	r8, [r0, #1]!
                             ((uint32_t)pKeyBuffer[Index + 2UL] << 16) + ((uint32_t)pKeyBuffer[Index + 3UL] << 24);
 8006fd6:	7843      	ldrb	r3, [r0, #1]
 8006fd8:	041b      	lsls	r3, r3, #16
      KeyValue_int_aligned = (uint32_t)pKeyBuffer[Index + 0UL] + ((uint32_t)pKeyBuffer[Index + 1UL] << 8) + \
 8006fda:	eb03 2308 	add.w	r3, r3, r8, lsl #8
 8006fde:	4473      	add	r3, lr
                             ((uint32_t)pKeyBuffer[Index + 2UL] << 16) + ((uint32_t)pKeyBuffer[Index + 3UL] << 24);
 8006fe0:	f890 e002 	ldrb.w	lr, [r0, #2]
      KeyValue_int_aligned = (uint32_t)pKeyBuffer[Index + 0UL] + ((uint32_t)pKeyBuffer[Index + 1UL] << 8) + \
 8006fe4:	eb03 630e 	add.w	r3, r3, lr, lsl #24
      pObjectToCreate->blobs[5UL + Index] = KeyValue_int_aligned;
 8006fe8:	f842 3f04 	str.w	r3, [r2, #4]!
 8006fec:	e7aa      	b.n	8006f44 <KMS_DeriveKey+0x11c>
      if ((((Index + 2UL/* pTemplate->type & pTemplate->ulValueLen */)*sizeof(CK_ULONG)) + pTemp->ulValueLen)
 8006fee:	f101 0802 	add.w	r8, r1, #2
 8006ff2:	68a2      	ldr	r2, [r4, #8]
 8006ff4:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8006ff8:	eb00 0c02 	add.w	ip, r0, r2
 8006ffc:	f5bc 6fc0 	cmp.w	ip, #1536	; 0x600
 8007000:	d217      	bcs.n	8007032 <KMS_DeriveKey+0x20a>
        pObjectToCreate->blobs[Index] = pTemp->type;
 8007002:	eb0a 0c81 	add.w	ip, sl, r1, lsl #2
        (void)memcpy((uint8_t *) & (pObjectToCreate->blobs[Index]), pTemp->pValue, pTemp->ulValueLen);
 8007006:	301c      	adds	r0, #28
        pObjectToCreate->blobs[Index] = pTemp->type;
 8007008:	6823      	ldr	r3, [r4, #0]
        (void)memcpy((uint8_t *) & (pObjectToCreate->blobs[Index]), pTemp->pValue, pTemp->ulValueLen);
 800700a:	6861      	ldr	r1, [r4, #4]
        pObjectToCreate->blobs[Index] = pTemp->type;
 800700c:	f8cc 301c 	str.w	r3, [ip, #28]
        (void)memcpy((uint8_t *) & (pObjectToCreate->blobs[Index]), pTemp->pValue, pTemp->ulValueLen);
 8007010:	4450      	add	r0, sl
        pObjectToCreate->blobs[Index] = pTemp->ulValueLen;
 8007012:	f8cc 2020 	str.w	r2, [ip, #32]
        (void)memcpy((uint8_t *) & (pObjectToCreate->blobs[Index]), pTemp->pValue, pTemp->ulValueLen);
 8007016:	f00f fd50 	bl	8016aba <memcpy>
        Index += pTemp->ulValueLen / sizeof(uint32_t);
 800701a:	68a1      	ldr	r1, [r4, #8]
 800701c:	eb08 0891 	add.w	r8, r8, r1, lsr #2
        Index += ((pTemp->ulValueLen % sizeof(uint32_t)) != 0UL) ? 1UL : 0UL;
 8007020:	f011 0103 	ands.w	r1, r1, #3
 8007024:	bf18      	it	ne
 8007026:	2101      	movne	r1, #1
 8007028:	4441      	add	r1, r8
        pTemp++;
 800702a:	340c      	adds	r4, #12
    for (AttributesToCopy = 0; (AttributesToCopy < ulAttributeCount) && (e_ret_status == CKR_OK); AttributesToCopy++)
 800702c:	f109 0901 	add.w	r9, r9, #1
 8007030:	e790      	b.n	8006f54 <KMS_DeriveKey+0x12c>
        e_ret_status = CKR_FUNCTION_FAILED;
 8007032:	f04f 0b06 	mov.w	fp, #6
 8007036:	e7f9      	b.n	800702c <KMS_DeriveKey+0x204>
  CK_RV         e_ret_status = CKR_FUNCTION_FAILED;
 8007038:	f04f 0b06 	mov.w	fp, #6
 800703c:	e794      	b.n	8006f68 <KMS_DeriveKey+0x140>
          KMS_FreeKey(pKeyBuffer);
 800703e:	4630      	mov	r0, r6
 8007040:	f7fe fcfc 	bl	8005a3c <KMS_FreeKey>
 8007044:	e7b6      	b.n	8006fb4 <KMS_DeriveKey+0x18c>
                e_ret_status = CKR_ARGUMENTS_BAD;
 8007046:	f04f 0b07 	mov.w	fp, #7
 800704a:	e7b3      	b.n	8006fb4 <KMS_DeriveKey+0x18c>
            return (CKR_ACTION_PROHIBITED);
 800704c:	f04f 0b1b 	mov.w	fp, #27
}
 8007050:	4658      	mov	r0, fp
 8007052:	b00b      	add	sp, #44	; 0x2c
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return (CKR_ATTRIBUTE_VALUE_INVALID);
 8007058:	f04f 0b13 	mov.w	fp, #19
 800705c:	e7f8      	b.n	8007050 <KMS_DeriveKey+0x228>
            return CKR_DEVICE_MEMORY;
 800705e:	f04f 0b31 	mov.w	fp, #49	; 0x31
 8007062:	e7f5      	b.n	8007050 <KMS_DeriveKey+0x228>
      if ((e_ret_status == CKR_OK) &&
 8007064:	4683      	mov	fp, r0
 8007066:	e7a5      	b.n	8006fb4 <KMS_DeriveKey+0x18c>
    return CKR_MECHANISM_INVALID;
 8007068:	f04f 0b70 	mov.w	fp, #112	; 0x70
 800706c:	e7f0      	b.n	8007050 <KMS_DeriveKey+0x228>
 800706e:	bf00      	nop
 8007070:	b10b0240 	.word	0xb10b0240
 8007074:	200043a4 	.word	0x200043a4
 8007078:	20007874 	.word	0x20007874

0800707c <KMS_GetAttributeValue>:
  * @param  ulCount number of attributes in the template
  * @retval Operation status
  */
CK_RV KMS_GetAttributeValue(CK_SESSION_HANDLE hSession,  CK_OBJECT_HANDLE  hObject,
                            CK_ATTRIBUTE_PTR  pTemplate, CK_ULONG          ulCount)
{
 800707c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* GetAttribute() is only authorised for objects with attribut EXTRACTABLE = TRUE */
  /* Verify that the object is extractable, reading the attributes */

  /* Read the key value from the Key Handle                 */
  /* Key Handle is the index to one of static or nvm        */
  pkms_object = KMS_Objects_GetPointer(hObject);
 8007080:	4608      	mov	r0, r1
{
 8007082:	4614      	mov	r4, r2
 8007084:	469a      	mov	sl, r3
  pkms_object = KMS_Objects_GetPointer(hObject);
 8007086:	f000 fe87 	bl	8007d98 <KMS_Objects_GetPointer>

  /* Check that hObject is valid */
  if (pkms_object != NULL)
 800708a:	4606      	mov	r6, r0
 800708c:	2800      	cmp	r0, #0
 800708e:	d05c      	beq.n	800714a <KMS_GetAttributeValue+0xce>
  {
    kms_ref_t  *pDeriveAttribute;

    /* Check the CKA_EXTRACTABLE attribute = CK_TRUE      */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_EXTRACTABLE, pkms_object, &pDeriveAttribute);
 8007090:	4601      	mov	r1, r0
 8007092:	466a      	mov	r2, sp
 8007094:	f44f 70b1 	mov.w	r0, #354	; 0x162
 8007098:	f000 feb3 	bl	8007e02 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not destroyable */
    if ((e_ret_status != CKR_OK) || (*pDeriveAttribute->data != CK_TRUE))
 800709c:	bb50      	cbnz	r0, 80070f4 <KMS_GetAttributeValue+0x78>
 800709e:	9b00      	ldr	r3, [sp, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d126      	bne.n	80070f4 <KMS_GetAttributeValue+0x78>
 80070a6:	340c      	adds	r4, #12
    {
      kms_ref_t  *FoundAttribute;
      uint32_t Index;
      uint32_t IndexData;

      for (Index = 0; Index < ulCount; Index++)
 80070a8:	4605      	mov	r5, r0

          }
        }
        else
        {
          pTemp->ulValueLen = CK_UNAVAILABLE_INFORMATION;
 80070aa:	f04f 38ff 	mov.w	r8, #4294967295
              pTemp->ulValueLen = CKR_BUFFER_TOO_SMALL;
 80070ae:	f44f 79a8 	mov.w	r9, #336	; 0x150
      for (Index = 0; Index < ulCount; Index++)
 80070b2:	4555      	cmp	r5, sl
 80070b4:	d01f      	beq.n	80070f6 <KMS_GetAttributeValue+0x7a>
        e_ret_status = KMS_Objects_SearchAttributes(pTemp->type, pkms_object, &FoundAttribute);
 80070b6:	aa01      	add	r2, sp, #4
 80070b8:	4631      	mov	r1, r6
 80070ba:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80070be:	f000 fea0 	bl	8007e02 <KMS_Objects_SearchAttributes>
        if (e_ret_status == CKR_OK)
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d13e      	bne.n	8007144 <KMS_GetAttributeValue+0xc8>
          if (pTemp->type == CKA_VALUE)
 80070c6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80070ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80070ce:	2a11      	cmp	r2, #17
 80070d0:	d131      	bne.n	8007136 <KMS_GetAttributeValue+0xba>
            if (pTemp->ulValueLen >= FoundAttribute->size)
 80070d2:	9a01      	ldr	r2, [sp, #4]
 80070d4:	6852      	ldr	r2, [r2, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d82a      	bhi.n	8007130 <KMS_GetAttributeValue+0xb4>
 80070da:	f854 3c08 	ldr.w	r3, [r4, #-8]
              for (IndexData = 0; IndexData < (FoundAttribute->size / 4UL); IndexData++)
 80070de:	4601      	mov	r1, r0
 80070e0:	9a01      	ldr	r2, [sp, #4]
 80070e2:	6857      	ldr	r7, [r2, #4]
 80070e4:	ebb1 0f97 	cmp.w	r1, r7, lsr #2
 80070e8:	f103 0304 	add.w	r3, r3, #4
 80070ec:	d306      	bcc.n	80070fc <KMS_GetAttributeValue+0x80>
      for (Index = 0; Index < ulCount; Index++)
 80070ee:	3501      	adds	r5, #1
 80070f0:	340c      	adds	r4, #12
 80070f2:	e7de      	b.n	80070b2 <KMS_GetAttributeValue+0x36>
      return (CKR_ATTRIBUTE_SENSITIVE);
 80070f4:	2011      	movs	r0, #17
    }

  }

  return e_ret_status;
}
 80070f6:	b002      	add	sp, #8
 80070f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                pValue[IndexData * 4UL]         = (uint8_t)((FoundAttribute->data[IndexData] >> 24) & 0x000000FFUL);
 80070fc:	f101 0c02 	add.w	ip, r1, #2
              for (IndexData = 0; IndexData < (FoundAttribute->size / 4UL); IndexData++)
 8007100:	3101      	adds	r1, #1
                pValue[IndexData * 4UL]         = (uint8_t)((FoundAttribute->data[IndexData] >> 24) & 0x000000FFUL);
 8007102:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007106:	0e12      	lsrs	r2, r2, #24
 8007108:	f803 2c04 	strb.w	r2, [r3, #-4]
                pValue[(IndexData * 4UL) + 1UL] = (uint8_t)((FoundAttribute->data[IndexData] >> 16) & 0x000000FFUL);
 800710c:	9a01      	ldr	r2, [sp, #4]
 800710e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007112:	0c12      	lsrs	r2, r2, #16
 8007114:	f803 2c03 	strb.w	r2, [r3, #-3]
                pValue[(IndexData * 4UL) + 2UL] = (uint8_t)((FoundAttribute->data[IndexData] >> 8) & 0x000000FFUL);
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800711e:	0a12      	lsrs	r2, r2, #8
 8007120:	f803 2c02 	strb.w	r2, [r3, #-2]
                pValue[(IndexData * 4UL) + 3UL] = (uint8_t)(FoundAttribute->data[IndexData] & 0x000000FFUL);
 8007124:	9a01      	ldr	r2, [sp, #4]
 8007126:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800712a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800712e:	e7d7      	b.n	80070e0 <KMS_GetAttributeValue+0x64>
              pTemp->ulValueLen = CKR_BUFFER_TOO_SMALL;
 8007130:	f844 9c04 	str.w	r9, [r4, #-4]
 8007134:	e7db      	b.n	80070ee <KMS_GetAttributeValue+0x72>
            if (pTemp->ulValueLen <= 4UL)
 8007136:	2b04      	cmp	r3, #4
 8007138:	d8d9      	bhi.n	80070ee <KMS_GetAttributeValue+0x72>
              pTemp->pValue = FoundAttribute->data;
 800713a:	9b01      	ldr	r3, [sp, #4]
 800713c:	3308      	adds	r3, #8
 800713e:	f844 3c08 	str.w	r3, [r4, #-8]
 8007142:	e7d4      	b.n	80070ee <KMS_GetAttributeValue+0x72>
          pTemp->ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8007144:	f844 8c04 	str.w	r8, [r4, #-4]
 8007148:	e7d1      	b.n	80070ee <KMS_GetAttributeValue+0x72>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 800714a:	2006      	movs	r0, #6
 800714c:	e7d3      	b.n	80070f6 <KMS_GetAttributeValue+0x7a>
	...

08007150 <reset>:
  */
static void reset(void)
{
  uint32_t i;

  nvm.header = NULL;
 8007150:	4a07      	ldr	r2, [pc, #28]	; (8007170 <reset+0x20>)
 8007152:	2300      	movs	r3, #0
 8007154:	6013      	str	r3, [r2, #0]
  nvm.block = NVMS_BLOCK0;
 8007156:	7113      	strb	r3, [r2, #4]
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
  {
    nvm.slots[i] = NULL;
 8007158:	4619      	mov	r1, r3
 800715a:	18d0      	adds	r0, r2, r3
 800715c:	3304      	adds	r3, #4
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 800715e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    nvm.slots[i] = NULL;
 8007162:	6081      	str	r1, [r0, #8]
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8007164:	d1f9      	bne.n	800715a <reset+0xa>
  }
  nvm.free_next = NULL;
 8007166:	f8c2 1198 	str.w	r1, [r2, #408]	; 0x198
  nvm.used_size = 0;
 800716a:	f8c2 119c 	str.w	r1, [r2, #412]	; 0x19c
}
 800716e:	4770      	bx	lr
 8007170:	200049c0 	.word	0x200049c0

08007174 <null_callback>:
  */
static void null_callback(nvms_data_header_t *hdrp)
{

  (void)(hdrp);
}
 8007174:	4770      	bx	lr
	...

08007178 <use_slot_callback>:
  * @brief   Private callback of @p use().
  */
static void use_slot_callback(nvms_data_header_t *hdrp)
{

  nvm.slots[hdrp->fields.slot] = hdrp;
 8007178:	6883      	ldr	r3, [r0, #8]
 800717a:	4a02      	ldr	r2, [pc, #8]	; (8007184 <use_slot_callback+0xc>)
 800717c:	3302      	adds	r3, #2
 800717e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8007182:	4770      	bx	lr
 8007184:	200049c0 	.word	0x200049c0

08007188 <use_end_callback>:
  * @brief   Private callback of @p use().
  */
static void use_end_callback(nvms_data_header_t *hdrp)
{

  nvm.free_next = hdrp;
 8007188:	4b01      	ldr	r3, [pc, #4]	; (8007190 <use_end_callback+0x8>)
 800718a:	f8c3 0198 	str.w	r0, [r3, #408]	; 0x198
}
 800718e:	4770      	bx	lr
 8007190:	200049c0 	.word	0x200049c0

08007194 <block_erase>:
{
 8007194:	b508      	push	{r3, lr}
  result = NVMS_LL_BlockErase(block);
 8007196:	f7fb fb35 	bl	8002804 <NVMS_LL_BlockErase>
  if (result)
 800719a:	2800      	cmp	r0, #0
}
 800719c:	bf14      	ite	ne
 800719e:	2003      	movne	r0, #3
 80071a0:	2000      	moveq	r0, #0
 80071a2:	bd08      	pop	{r3, pc}

080071a4 <check_slot_instance>:
{
 80071a4:	b530      	push	{r4, r5, lr}
 80071a6:	1f0b      	subs	r3, r1, #4
 80071a8:	f101 021c 	add.w	r2, r1, #28
    if (hdrp->hdr32[i] != NVMS_LL_ERASED)
 80071ac:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80071b0:	3401      	adds	r4, #1
 80071b2:	d031      	beq.n	8007218 <check_slot_instance+0x74>
      if (((uint32_t)hdrp->fields.next & (NVMS_LL_PAGE_SIZE - 1UL)) != 0UL)
 80071b4:	690d      	ldr	r5, [r1, #16]
 80071b6:	076b      	lsls	r3, r5, #29
 80071b8:	d132      	bne.n	8007220 <check_slot_instance+0x7c>
 80071ba:	4b1a      	ldr	r3, [pc, #104]	; (8007224 <check_slot_instance+0x80>)
 80071bc:	4a1a      	ldr	r2, [pc, #104]	; (8007228 <check_slot_instance+0x84>)
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	0852      	lsrs	r2, r2, #1
  * @retval  pointer to the block base
  */
static inline uint32_t NVMS_LL_GetBlockAddress(nvms_block_t block)
{

  if (block == NVMS_BLOCK0)
 80071c2:	b100      	cbz	r0, 80071c6 <check_slot_instance+0x22>
  {
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
  }
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 80071c4:	4413      	add	r3, r2
      if ((hdrp->fields.next->hdr8 < (hdrp->hdr8 + sizeof(nvms_data_header_t))) ||
 80071c6:	f101 0420 	add.w	r4, r1, #32
 80071ca:	42a5      	cmp	r5, r4
 80071cc:	d328      	bcc.n	8007220 <check_slot_instance+0x7c>
      endp = &startp[NVMS_LL_GetBlockSize()];
 80071ce:	4413      	add	r3, r2
      if ((hdrp->fields.next->hdr8 < (hdrp->hdr8 + sizeof(nvms_data_header_t))) ||
 80071d0:	429d      	cmp	r5, r3
 80071d2:	d825      	bhi.n	8007220 <check_slot_instance+0x7c>
      if ((hdrp->fields.magic1 != NVMS_HEADER_MAGIC1) ||
 80071d4:	680a      	ldr	r2, [r1, #0]
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <check_slot_instance+0x88>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d121      	bne.n	8007220 <check_slot_instance+0x7c>
 80071dc:	684a      	ldr	r2, [r1, #4]
 80071de:	4b14      	ldr	r3, [pc, #80]	; (8007230 <check_slot_instance+0x8c>)
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d11d      	bne.n	8007220 <check_slot_instance+0x7c>
      if (hdrp->fields.slot >= NVMS_CFG_NUM_SLOTS)
 80071e4:	688b      	ldr	r3, [r1, #8]
 80071e6:	2b63      	cmp	r3, #99	; 0x63
 80071e8:	d81a      	bhi.n	8007220 <check_slot_instance+0x7c>
      if (hdrp->fields.instance == NVMS_LL_ERASED)
 80071ea:	68cb      	ldr	r3, [r1, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	d017      	beq.n	8007220 <check_slot_instance+0x7c>
      if ((hdrp->hdr8 + sizeof(nvms_data_header_t) + hdrp->fields.data_size) >
 80071f0:	698b      	ldr	r3, [r1, #24]
 80071f2:	f103 0220 	add.w	r2, r3, #32
 80071f6:	440a      	add	r2, r1
 80071f8:	4295      	cmp	r5, r2
 80071fa:	d311      	bcc.n	8007220 <check_slot_instance+0x7c>
 80071fc:	4423      	add	r3, r4
  checksum = 0;
 80071fe:	2200      	movs	r2, #0
  while (n != 0UL)
 8007200:	42a3      	cmp	r3, r4
 8007202:	d105      	bne.n	8007210 <check_slot_instance+0x6c>
      if (checksum != hdrp->fields.data_checksum)
 8007204:	69c8      	ldr	r0, [r1, #28]
        return NVMS_SLOT_STATUS_CRC;
 8007206:	4290      	cmp	r0, r2
 8007208:	bf0c      	ite	eq
 800720a:	2001      	moveq	r0, #1
 800720c:	2002      	movne	r0, #2
}
 800720e:	bd30      	pop	{r4, r5, pc}
    checksum += *p;
 8007210:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007214:	4402      	add	r2, r0
 8007216:	e7f3      	b.n	8007200 <check_slot_instance+0x5c>
  for (i = 0; i < 8U; i++)
 8007218:	429a      	cmp	r2, r3
 800721a:	d1c7      	bne.n	80071ac <check_slot_instance+0x8>
  return NVMS_SLOT_STATUS_ERASED;
 800721c:	2000      	movs	r0, #0
 800721e:	e7f6      	b.n	800720e <check_slot_instance+0x6a>
        return NVMS_SLOT_STATUS_BROKEN;
 8007220:	2003      	movs	r0, #3
 8007222:	e7f4      	b.n	800720e <check_slot_instance+0x6a>
 8007224:	08101000 	.word	0x08101000
 8007228:	08105000 	.word	0x08105000
 800722c:	5aa5f731 	.word	0x5aa5f731
 8007230:	137fa55a 	.word	0x137fa55a

08007234 <scan_slots>:
{
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	4c1d      	ldr	r4, [pc, #116]	; (80072b0 <scan_slots+0x7c>)
 800723a:	4d1e      	ldr	r5, [pc, #120]	; (80072b4 <scan_slots+0x80>)
 800723c:	1b2d      	subs	r5, r5, r4
 800723e:	460f      	mov	r7, r1
 8007240:	4616      	mov	r6, r2
 8007242:	086d      	lsrs	r5, r5, #1
  if (block == NVMS_BLOCK0)
 8007244:	4681      	mov	r9, r0
 8007246:	b100      	cbz	r0, 800724a <scan_slots+0x16>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8007248:	442c      	add	r4, r5
  slotsts = check_slot_instance(block, hdrp);
 800724a:	4621      	mov	r1, r4
 800724c:	4648      	mov	r0, r9
 800724e:	f7ff ffa9 	bl	80071a4 <check_slot_instance>
  if (slotsts != NVMS_SLOT_STATUS_OK)
 8007252:	2801      	cmp	r0, #1
 8007254:	d127      	bne.n	80072a6 <scan_slots+0x72>
  bool warning = false;
 8007256:	f04f 0800 	mov.w	r8, #0
  endp = &startp[NVMS_LL_GetBlockSize()];
 800725a:	4425      	add	r5, r4
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 800725c:	6924      	ldr	r4, [r4, #16]
    if (hdrp->hdr8 == endp)
 800725e:	42ac      	cmp	r4, r5
 8007260:	d108      	bne.n	8007274 <scan_slots+0x40>
      endcallback(hdrp);
 8007262:	4620      	mov	r0, r4
 8007264:	47b0      	blx	r6
        return NVMS_STATUS_PARTIAL;
 8007266:	f1b8 0f00 	cmp.w	r8, #0
 800726a:	bf0c      	ite	eq
 800726c:	2001      	moveq	r0, #1
 800726e:	2002      	movne	r0, #2
}
 8007270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    slotsts = check_slot_instance(block, hdrp);
 8007274:	4621      	mov	r1, r4
 8007276:	4648      	mov	r0, r9
 8007278:	f7ff ff94 	bl	80071a4 <check_slot_instance>
    switch (slotsts)
 800727c:	2803      	cmp	r0, #3
 800727e:	d8ed      	bhi.n	800725c <scan_slots+0x28>
 8007280:	e8df f000 	tbb	[pc, r0]
 8007284:	0d130a02 	.word	0x0d130a02
        endcallback(hdrp);
 8007288:	4620      	mov	r0, r4
 800728a:	47b0      	blx	r6
          status = NVMS_STATUS_NORMAL;
 800728c:	f1b8 0f00 	cmp.w	r8, #0
 8007290:	bf14      	ite	ne
 8007292:	2002      	movne	r0, #2
 8007294:	2001      	moveq	r0, #1
 8007296:	e7eb      	b.n	8007270 <scan_slots+0x3c>
        slotcallback(hdrp);
 8007298:	4620      	mov	r0, r4
 800729a:	47b8      	blx	r7
        break;
 800729c:	e7de      	b.n	800725c <scan_slots+0x28>
        endcallback(hdrp);
 800729e:	4620      	mov	r0, r4
 80072a0:	47b0      	blx	r6
        status = NVMS_STATUS_PARTIAL;
 80072a2:	2002      	movs	r0, #2
        break;
 80072a4:	e7e4      	b.n	8007270 <scan_slots+0x3c>
    return NVMS_STATUS_BROKEN;
 80072a6:	2003      	movs	r0, #3
 80072a8:	e7e2      	b.n	8007270 <scan_slots+0x3c>
        warning = true;
 80072aa:	f04f 0801 	mov.w	r8, #1
 80072ae:	e7d5      	b.n	800725c <scan_slots+0x28>
 80072b0:	08101000 	.word	0x08101000
 80072b4:	08105000 	.word	0x08105000

080072b8 <use>:
  * @return                    The operation status.
  * @retval NVMS_NOERROR       if the operation has been successfully completed.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
static nvms_error_t use(nvms_block_t block)
{
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	4d1c      	ldr	r5, [pc, #112]	; (800732c <use+0x74>)
  if (block == NVMS_BLOCK0)
 80072bc:	4606      	mov	r6, r0
 80072be:	b118      	cbz	r0, 80072c8 <use+0x10>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 80072c0:	4b1b      	ldr	r3, [pc, #108]	; (8007330 <use+0x78>)
 80072c2:	1b5b      	subs	r3, r3, r5
 80072c4:	eb05 0553 	add.w	r5, r5, r3, lsr #1

  /* Resetting state.*/
  reset();

  /* Global info.*/
  nvm.header    = hdrp;
 80072c8:	4c1a      	ldr	r4, [pc, #104]	; (8007334 <use+0x7c>)
  reset();
 80072ca:	f7ff ff41 	bl	8007150 <reset>
  nvm.block     = block;
  nvm.used_size = sizeof(nvms_data_header_t);
 80072ce:	2320      	movs	r3, #32
  nvm.header    = hdrp;
 80072d0:	6025      	str	r5, [r4, #0]
  nvm.free_next = &hdrp[1];

  /* The block should have been checked before calling use() so any
     kind of anomaly in the block is considered an internal error.*/
  status = scan_slots(block, use_slot_callback, use_end_callback);
 80072d2:	4a19      	ldr	r2, [pc, #100]	; (8007338 <use+0x80>)
 80072d4:	4919      	ldr	r1, [pc, #100]	; (800733c <use+0x84>)
  nvm.block     = block;
 80072d6:	7126      	strb	r6, [r4, #4]
  nvm.free_next = &hdrp[1];
 80072d8:	441d      	add	r5, r3
  status = scan_slots(block, use_slot_callback, use_end_callback);
 80072da:	4630      	mov	r0, r6
  nvm.used_size = sizeof(nvms_data_header_t);
 80072dc:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  nvm.free_next = &hdrp[1];
 80072e0:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
  status = scan_slots(block, use_slot_callback, use_end_callback);
 80072e4:	f7ff ffa6 	bl	8007234 <scan_slots>
  if (status != NVMS_STATUS_NORMAL)
 80072e8:	2801      	cmp	r0, #1
 80072ea:	d003      	beq.n	80072f4 <use+0x3c>
  {
    reset();
 80072ec:	f7ff ff30 	bl	8007150 <reset>
    return NVMS_INTERNAL;
 80072f0:	2008      	movs	r0, #8
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
    }
  }

  return NVMS_NOERROR;
}
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
  if (status != NVMS_STATUS_NORMAL)
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
 80072fa:	4618      	mov	r0, r3
    hdrp = nvm.slots[i];
 80072fc:	18e2      	adds	r2, r4, r3
 80072fe:	6892      	ldr	r2, [r2, #8]
    if (hdrp != NULL)
 8007300:	b12a      	cbz	r2, 800730e <use+0x56>
      if (hdrp->fields.data_size == 0UL)
 8007302:	6995      	ldr	r5, [r2, #24]
 8007304:	b965      	cbnz	r5, 8007320 <use+0x68>
        nvm.slots[hdrp->fields.slot] = NULL;
 8007306:	6892      	ldr	r2, [r2, #8]
 8007308:	3202      	adds	r2, #2
 800730a:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 800730e:	3304      	adds	r3, #4
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8007310:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007314:	d1f2      	bne.n	80072fc <use+0x44>
 8007316:	b108      	cbz	r0, 800731c <use+0x64>
 8007318:	f8c4 119c 	str.w	r1, [r4, #412]	; 0x19c
    return NVMS_INTERNAL;
 800731c:	2000      	movs	r0, #0
 800731e:	e7e8      	b.n	80072f2 <use+0x3a>
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
 8007320:	6910      	ldr	r0, [r2, #16]
 8007322:	1a82      	subs	r2, r0, r2
 8007324:	4411      	add	r1, r2
 8007326:	2001      	movs	r0, #1
 8007328:	e7f1      	b.n	800730e <use+0x56>
 800732a:	bf00      	nop
 800732c:	08101000 	.word	0x08101000
 8007330:	08105000 	.word	0x08105000
 8007334:	200049c0 	.word	0x200049c0
 8007338:	08007189 	.word	0x08007189
 800733c:	08007179 	.word	0x08007179

08007340 <copy_slots>:
{
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	4b3d      	ldr	r3, [pc, #244]	; (800743c <copy_slots+0xfc>)
 8007346:	4e3e      	ldr	r6, [pc, #248]	; (8007440 <copy_slots+0x100>)
 8007348:	1b9b      	subs	r3, r3, r6
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	18f2      	adds	r2, r6, r3
  if (block == NVMS_BLOCK0)
 800734e:	2900      	cmp	r1, #0
 8007350:	bf14      	ite	ne
 8007352:	4611      	movne	r1, r2
 8007354:	4631      	moveq	r1, r6
  startp = (uint8_t *)NVMS_LL_GetBlockAddress(block);
 8007356:	2800      	cmp	r0, #0
 8007358:	bf18      	it	ne
 800735a:	4616      	movne	r6, r2
{
 800735c:	b08b      	sub	sp, #44	; 0x2c
  whdrp = (nvms_data_header_t *)NVMS_LL_GetBlockAddress(dest_block) + 1;
 800735e:	f101 0520 	add.w	r5, r1, #32
  startp = (uint8_t *)NVMS_LL_GetBlockAddress(block);
 8007362:	4680      	mov	r8, r0
  endp = &startp[NVMS_LL_GetBlockSize()];
 8007364:	eb06 0a03 	add.w	sl, r6, r3
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 8007368:	2700      	movs	r7, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 800736a:	f04f 39ff 	mov.w	r9, #4294967295
  crcerr = false;
 800736e:	2200      	movs	r2, #0
  hdrp = (nvms_data_header_t *)startp;
 8007370:	46b3      	mov	fp, r6
  slotp = NULL;
 8007372:	4614      	mov	r4, r2
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 8007374:	f8db b010 	ldr.w	fp, [fp, #16]
    if (hdrp->hdr8 == endp)
 8007378:	45da      	cmp	sl, fp
 800737a:	d13a      	bne.n	80073f2 <copy_slots+0xb2>
        if (slotp == NULL)
 800737c:	2c00      	cmp	r4, #0
 800737e:	d033      	beq.n	80073e8 <copy_slots+0xa8>
          if (crcerr)
 8007380:	2a00      	cmp	r2, #0
 8007382:	d131      	bne.n	80073e8 <copy_slots+0xa8>
    if ((err == NVMS_NOERROR) && (rhdrp->fields.data_size > 0UL))
 8007384:	69a3      	ldr	r3, [r4, #24]
 8007386:	b37b      	cbz	r3, 80073e8 <copy_slots+0xa8>
  hdr.fields.slot                = rhdrp->fields.slot;
 8007388:	68a2      	ldr	r2, [r4, #8]
 800738a:	9204      	str	r2, [sp, #16]
  hdr.fields.instance           = 1;    /* Resetting instance number.*/
 800738c:	2201      	movs	r2, #1
 800738e:	9205      	str	r2, [sp, #20]
  uint8_t *free = &next[(((sizeof(nvms_data_header_t) + size - 1UL) |
 8007390:	f103 021f 	add.w	r2, r3, #31
 8007394:	f042 0207 	orr.w	r2, r2, #7
 8007398:	3201      	adds	r2, #1
 800739a:	442a      	add	r2, r5
  hdr.fields.next               = (nvms_data_header_t *)free;
 800739c:	9206      	str	r2, [sp, #24]
  hdr.fields.data_type       = rhdrp->fields.data_type;
 800739e:	6962      	ldr	r2, [r4, #20]
  hdr.fields.data_size       = size;
 80073a0:	9301      	str	r3, [sp, #4]
 80073a2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  hdr.fields.data_checksum   = rhdrp->fields.data_checksum;
 80073a6:	69e2      	ldr	r2, [r4, #28]
 80073a8:	9209      	str	r2, [sp, #36]	; 0x24
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &next[8], sizeof(nvms_data_header_t) - 8UL);
 80073aa:	f105 0108 	add.w	r1, r5, #8
 80073ae:	2218      	movs	r2, #24
 80073b0:	a804      	add	r0, sp, #16
  hdr.fields.magic2             = NVMS_LL_ERASED;
 80073b2:	e9cd 9902 	strd	r9, r9, [sp, #8]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &next[8], sizeof(nvms_data_header_t) - 8UL);
 80073b6:	f7fb fa87 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d13a      	bne.n	8007434 <copy_slots+0xf4>
  result = NVMS_LL_Write(rhdrp->hdr8 + sizeof(nvms_data_header_t),
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	f105 0120 	add.w	r1, r5, #32
 80073c4:	461a      	mov	r2, r3
 80073c6:	f104 0020 	add.w	r0, r4, #32
 80073ca:	f7fb fa7d 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 80073ce:	bb88      	cbnz	r0, 8007434 <copy_slots+0xf4>
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <copy_slots+0x104>)
 80073d2:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <copy_slots+0x108>)
 80073d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  result = NVMS_LL_Write((const uint8_t *)&hdr, next, sizeof(uint32_t) * 2UL);
 80073d8:	2208      	movs	r2, #8
 80073da:	4629      	mov	r1, r5
 80073dc:	eb0d 0002 	add.w	r0, sp, r2
 80073e0:	f7fb fa72 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 80073e4:	bb30      	cbnz	r0, 8007434 <copy_slots+0xf4>
      whdrp = (nvms_data_header_t *)whdrp->fields.next;
 80073e6:	692d      	ldr	r5, [r5, #16]
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 80073e8:	3701      	adds	r7, #1
 80073ea:	2f64      	cmp	r7, #100	; 0x64
 80073ec:	d1bf      	bne.n	800736e <copy_slots+0x2e>
  return NVMS_NOERROR;
 80073ee:	2000      	movs	r0, #0
 80073f0:	e021      	b.n	8007436 <copy_slots+0xf6>
    slotsts = check_slot_instance(block, hdrp);
 80073f2:	4659      	mov	r1, fp
 80073f4:	4640      	mov	r0, r8
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	f7ff fed4 	bl	80071a4 <check_slot_instance>
    switch (slotsts)
 80073fc:	9a01      	ldr	r2, [sp, #4]
 80073fe:	2803      	cmp	r0, #3
 8007400:	d8b8      	bhi.n	8007374 <copy_slots+0x34>
 8007402:	a301      	add	r3, pc, #4	; (adr r3, 8007408 <copy_slots+0xc8>)
 8007404:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8007408:	0800737d 	.word	0x0800737d
 800740c:	08007419 	.word	0x08007419
 8007410:	08007427 	.word	0x08007427
 8007414:	0800737d 	.word	0x0800737d
        if (hdrp->fields.slot == slot)
 8007418:	f8db 1008 	ldr.w	r1, [fp, #8]
 800741c:	42b9      	cmp	r1, r7
 800741e:	bf04      	itt	eq
 8007420:	465c      	moveq	r4, fp
 8007422:	2200      	moveq	r2, #0
 8007424:	e7a6      	b.n	8007374 <copy_slots+0x34>
        if (hdrp->fields.slot == slot)
 8007426:	f8db 1008 	ldr.w	r1, [fp, #8]
 800742a:	42b9      	cmp	r1, r7
 800742c:	bf04      	itt	eq
 800742e:	465c      	moveq	r4, fp
 8007430:	2201      	moveq	r2, #1
 8007432:	e79f      	b.n	8007374 <copy_slots+0x34>
    return NVMS_FLASH_FAILURE;
 8007434:	2003      	movs	r0, #3
}
 8007436:	b00b      	add	sp, #44	; 0x2c
 8007438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743c:	08105000 	.word	0x08105000
 8007440:	08101000 	.word	0x08101000
 8007444:	5aa5f731 	.word	0x5aa5f731
 8007448:	137fa55a 	.word	0x137fa55a

0800744c <validate>:
{
 800744c:	b510      	push	{r4, lr}
 800744e:	4c15      	ldr	r4, [pc, #84]	; (80074a4 <validate+0x58>)
 8007450:	b088      	sub	sp, #32
 8007452:	b118      	cbz	r0, 800745c <validate+0x10>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8007454:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <validate+0x5c>)
 8007456:	1b1b      	subs	r3, r3, r4
 8007458:	eb04 0453 	add.w	r4, r4, r3, lsr #1
  hdr.fields.slot               = NVMS_SLOT_MAIN_HEADER;
 800745c:	2300      	movs	r3, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 800745e:	f04f 32ff 	mov.w	r2, #4294967295
  hdr.fields.instance           = instance;
 8007462:	e9cd 3102 	strd	r3, r1, [sp, #8]
  hdr.fields.next               = &((nvms_data_header_t *)dp)[1];
 8007466:	f104 0120 	add.w	r1, r4, #32
  hdr.fields.data_type       = NVMS_LL_ERASED;
 800746a:	e9cd 1204 	strd	r1, r2, [sp, #16]
  hdr.fields.magic2             = NVMS_LL_ERASED;
 800746e:	e9cd 2200 	strd	r2, r2, [sp]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 8007472:	f104 0108 	add.w	r1, r4, #8
 8007476:	2218      	movs	r2, #24
 8007478:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum   = 0;
 800747a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 800747e:	f7fb fa23 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 8007482:	b110      	cbz	r0, 800748a <validate+0x3e>
    return NVMS_FLASH_FAILURE;
 8007484:	2003      	movs	r0, #3
}
 8007486:	b008      	add	sp, #32
 8007488:	bd10      	pop	{r4, pc}
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 800748a:	4a08      	ldr	r2, [pc, #32]	; (80074ac <validate+0x60>)
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <validate+0x64>)
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 800748e:	4621      	mov	r1, r4
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8007490:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 8007494:	4668      	mov	r0, sp
 8007496:	2208      	movs	r2, #8
 8007498:	f7fb fa16 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 800749c:	2800      	cmp	r0, #0
 800749e:	d0f2      	beq.n	8007486 <validate+0x3a>
 80074a0:	e7f0      	b.n	8007484 <validate+0x38>
 80074a2:	bf00      	nop
 80074a4:	08101000 	.word	0x08101000
 80074a8:	08105000 	.word	0x08105000
 80074ac:	5aa5f731 	.word	0x5aa5f731
 80074b0:	137fa55a 	.word	0x137fa55a

080074b4 <garbage_collect>:
  * @details Storage data is compacted into a single bank.
  *
  * @notapi
  */
static nvms_error_t garbage_collect(void)
{
 80074b4:	b510      	push	{r4, lr}

  if (nvm.block == NVMS_BLOCK0)
 80074b6:	4c17      	ldr	r4, [pc, #92]	; (8007514 <garbage_collect+0x60>)
 80074b8:	7920      	ldrb	r0, [r4, #4]
 80074ba:	b9a8      	cbnz	r0, 80074e8 <garbage_collect+0x34>
  {
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 80074bc:	2101      	movs	r1, #1
 80074be:	f7ff ff3f 	bl	8007340 <copy_slots>
 80074c2:	4603      	mov	r3, r0
 80074c4:	bb18      	cbnz	r0, 800750e <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK1, nvm.header->fields.instance + 1UL));
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	68d9      	ldr	r1, [r3, #12]
 80074ca:	2001      	movs	r0, #1
 80074cc:	3101      	adds	r1, #1
 80074ce:	f7ff ffbd 	bl	800744c <validate>
 80074d2:	4603      	mov	r3, r0
 80074d4:	b9d8      	cbnz	r0, 800750e <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80074d6:	f7ff fe5d 	bl	8007194 <block_erase>
 80074da:	4603      	mov	r3, r0
 80074dc:	b9b8      	cbnz	r0, 800750e <garbage_collect+0x5a>
    CHECK_ERROR(use(NVMS_BLOCK1));
 80074de:	2001      	movs	r0, #1
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
    CHECK_ERROR(use(NVMS_BLOCK0));
  }

  return NVMS_NOERROR;
}
 80074e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CHECK_ERROR(use(NVMS_BLOCK0));
 80074e4:	f7ff bee8 	b.w	80072b8 <use>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80074e8:	2100      	movs	r1, #0
 80074ea:	2001      	movs	r0, #1
 80074ec:	f7ff ff28 	bl	8007340 <copy_slots>
 80074f0:	4603      	mov	r3, r0
 80074f2:	b960      	cbnz	r0, 800750e <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK0, nvm.header->fields.instance + 1UL));
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	68d9      	ldr	r1, [r3, #12]
 80074f8:	3101      	adds	r1, #1
 80074fa:	f7ff ffa7 	bl	800744c <validate>
 80074fe:	4603      	mov	r3, r0
 8007500:	b928      	cbnz	r0, 800750e <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8007502:	2001      	movs	r0, #1
 8007504:	f7ff fe46 	bl	8007194 <block_erase>
 8007508:	4603      	mov	r3, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	d0e8      	beq.n	80074e0 <garbage_collect+0x2c>
}
 800750e:	4618      	mov	r0, r3
 8007510:	bd10      	pop	{r4, pc}
 8007512:	bf00      	nop
 8007514:	200049c0 	.word	0x200049c0

08007518 <append_slot>:
{
 8007518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t *next = nvm.free_next->hdr8;
 800751c:	4d21      	ldr	r5, [pc, #132]	; (80075a4 <append_slot+0x8c>)
{
 800751e:	b088      	sub	sp, #32
  uint8_t *free = &next[(((sizeof(nvms_data_header_t) + size - 1UL) |
 8007520:	f101 041f 	add.w	r4, r1, #31
{
 8007524:	461f      	mov	r7, r3
  uint8_t *next = nvm.free_next->hdr8;
 8007526:	f8d5 8198 	ldr.w	r8, [r5, #408]	; 0x198
  hdr.fields.slot               = slot;
 800752a:	9002      	str	r0, [sp, #8]
  hdr.fields.magic1             = NVMS_LL_ERASED;
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
  uint8_t *free = &next[(((sizeof(nvms_data_header_t) + size - 1UL) |
 8007530:	f044 0407 	orr.w	r4, r4, #7
 8007534:	3401      	adds	r4, #1
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8007536:	e9cd 3300 	strd	r3, r3, [sp]
  hdr.fields.instance           = instance;
 800753a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  uint8_t *free = &next[(((sizeof(nvms_data_header_t) + size - 1UL) |
 800753c:	4444      	add	r4, r8
  hdr.fields.data_size          = size;
 800753e:	e9cd 2105 	strd	r2, r1, [sp, #20]
{
 8007542:	460e      	mov	r6, r1
  hdr.fields.next               = (nvms_data_header_t *)free;
 8007544:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8007548:	1879      	adds	r1, r7, r1
  const uint8_t *p = data_p;
 800754a:	463a      	mov	r2, r7
  checksum = 0;
 800754c:	2300      	movs	r3, #0
  while (n != 0UL)
 800754e:	428a      	cmp	r2, r1
 8007550:	d10b      	bne.n	800756a <append_slot+0x52>
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &next[8], sizeof(nvms_data_header_t) - 8UL);
 8007552:	2218      	movs	r2, #24
 8007554:	f108 0108 	add.w	r1, r8, #8
 8007558:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum      = do_checksum(slotp, size);
 800755a:	9307      	str	r3, [sp, #28]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &next[8], sizeof(nvms_data_header_t) - 8UL);
 800755c:	f7fb f9b4 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 8007560:	b138      	cbz	r0, 8007572 <append_slot+0x5a>
    return NVMS_FLASH_FAILURE;
 8007562:	2003      	movs	r0, #3
}
 8007564:	b008      	add	sp, #32
 8007566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    checksum += *p;
 800756a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800756e:	4403      	add	r3, r0
 8007570:	e7ed      	b.n	800754e <append_slot+0x36>
  if (size > 0UL)
 8007572:	b976      	cbnz	r6, 8007592 <append_slot+0x7a>
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8007574:	4a0c      	ldr	r2, [pc, #48]	; (80075a8 <append_slot+0x90>)
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <append_slot+0x94>)
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8007578:	f8d5 1198 	ldr.w	r1, [r5, #408]	; 0x198
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 800757c:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8007580:	4668      	mov	r0, sp
 8007582:	2208      	movs	r2, #8
 8007584:	f7fb f9a0 	bl	80028c8 <NVMS_LL_Write>
  if (result)
 8007588:	2800      	cmp	r0, #0
 800758a:	d1ea      	bne.n	8007562 <append_slot+0x4a>
  nvm.free_next = (nvms_data_header_t *)free;
 800758c:	f8c5 4198 	str.w	r4, [r5, #408]	; 0x198
  return NVMS_NOERROR;
 8007590:	e7e8      	b.n	8007564 <append_slot+0x4c>
    result = NVMS_LL_Write(slotp, &next[sizeof(nvms_data_header_t)], size);
 8007592:	4632      	mov	r2, r6
 8007594:	f108 0120 	add.w	r1, r8, #32
 8007598:	4638      	mov	r0, r7
 800759a:	f7fb f995 	bl	80028c8 <NVMS_LL_Write>
    if (result)
 800759e:	2800      	cmp	r0, #0
 80075a0:	d0e8      	beq.n	8007574 <append_slot+0x5c>
 80075a2:	e7de      	b.n	8007562 <append_slot+0x4a>
 80075a4:	200049c0 	.word	0x200049c0
 80075a8:	5aa5f731 	.word	0x5aa5f731
 80075ac:	137fa55a 	.word	0x137fa55a

080075b0 <NVMS_Init>:
  * @retval NVMS_INTERNAL      if an internal error occurred.
  *
  * @api
  */
nvms_error_t NVMS_Init(void)
{
 80075b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;

  NVMS_LL_Init();
 80075b4:	f7fb f90c 	bl	80027d0 <NVMS_LL_Init>
 80075b8:	4f7e      	ldr	r7, [pc, #504]	; (80077b4 <NVMS_Init+0x204>)
  return scan_slots(block, null_callback, null_callback);
 80075ba:	f8df a200 	ldr.w	sl, [pc, #512]	; 80077bc <NVMS_Init+0x20c>
  reset();
 80075be:	f7ff fdc7 	bl	8007150 <reset>
 80075c2:	4b7d      	ldr	r3, [pc, #500]	; (80077b8 <NVMS_Init+0x208>)
 80075c4:	1aff      	subs	r7, r7, r3
 80075c6:	eb03 0757 	add.w	r7, r3, r7, lsr #1
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 80075ca:	f04f 0903 	mov.w	r9, #3
 80075ce:	4698      	mov	r8, r3
  if (NVMS_LL_IsBlockErased(block))
 80075d0:	2000      	movs	r0, #0
 80075d2:	f7fb f8ff 	bl	80027d4 <NVMS_LL_IsBlockErased>
 80075d6:	bb28      	cbnz	r0, 8007624 <NVMS_Init+0x74>
  return scan_slots(block, null_callback, null_callback);
 80075d8:	4652      	mov	r2, sl
 80075da:	4978      	ldr	r1, [pc, #480]	; (80077bc <NVMS_Init+0x20c>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 80075dc:	f8d8 500c 	ldr.w	r5, [r8, #12]
  return scan_slots(block, null_callback, null_callback);
 80075e0:	f7ff fe28 	bl	8007234 <scan_slots>
 80075e4:	4604      	mov	r4, r0
  if (NVMS_LL_IsBlockErased(block))
 80075e6:	2001      	movs	r0, #1
 80075e8:	f7fb f8f4 	bl	80027d4 <NVMS_LL_IsBlockErased>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 80b3 	bne.w	8007758 <NVMS_Init+0x1a8>
 80075f2:	9001      	str	r0, [sp, #4]
  return scan_slots(block, null_callback, null_callback);
 80075f4:	4652      	mov	r2, sl
 80075f6:	4971      	ldr	r1, [pc, #452]	; (80077bc <NVMS_Init+0x20c>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 80075f8:	68fe      	ldr	r6, [r7, #12]
  return scan_slots(block, null_callback, null_callback);
 80075fa:	2001      	movs	r0, #1
 80075fc:	f7ff fe1a 	bl	8007234 <scan_slots>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8007600:	9b01      	ldr	r3, [sp, #4]
  return scan_slots(block, null_callback, null_callback);
 8007602:	4683      	mov	fp, r0
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8007604:	bb24      	cbnz	r4, 8007650 <NVMS_Init+0xa0>
 8007606:	b980      	cbnz	r0, 800762a <NVMS_Init+0x7a>
    CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 8007608:	2101      	movs	r1, #1
 800760a:	2000      	movs	r0, #0
 800760c:	f7ff ff1e 	bl	800744c <validate>
 8007610:	4601      	mov	r1, r0
 8007612:	2800      	cmp	r0, #0
 8007614:	d173      	bne.n	80076fe <NVMS_Init+0x14e>
      CHECK_ERROR(use(NVMS_BLOCK0));
 8007616:	f7ff fe4f 	bl	80072b8 <use>
 800761a:	4601      	mov	r1, r0
 800761c:	2800      	cmp	r0, #0
 800761e:	d16e      	bne.n	80076fe <NVMS_Init+0x14e>
    return NVMS_NOERROR;
 8007620:	2000      	movs	r0, #0
 8007622:	e03f      	b.n	80076a4 <NVMS_Init+0xf4>
  uint32_t seq0 = 0;
 8007624:	2500      	movs	r5, #0
    return NVMS_STATUS_ERASED;
 8007626:	462c      	mov	r4, r5
 8007628:	e7dd      	b.n	80075e6 <NVMS_Init+0x36>
    if (sts1 == NVMS_STATUS_NORMAL)
 800762a:	2801      	cmp	r0, #1
 800762c:	d0f3      	beq.n	8007616 <NVMS_Init+0x66>
    if (sts1 == NVMS_STATUS_PARTIAL)
 800762e:	2802      	cmp	r0, #2
 8007630:	f040 8083 	bne.w	800773a <NVMS_Init+0x18a>
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8007634:	4621      	mov	r1, r4
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8007636:	2001      	movs	r0, #1
        CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8007638:	f7ff fe82 	bl	8007340 <copy_slots>
 800763c:	4601      	mov	r1, r0
 800763e:	2800      	cmp	r0, #0
 8007640:	d15d      	bne.n	80076fe <NVMS_Init+0x14e>
        CHECK_ERROR(validate(NVMS_BLOCK0, seq1 + 1UL));
 8007642:	1c71      	adds	r1, r6, #1
    CHECK_ERROR(validate(NVMS_BLOCK0, seq0 + 1UL));
 8007644:	f7ff ff02 	bl	800744c <validate>
 8007648:	4601      	mov	r1, r0
 800764a:	2800      	cmp	r0, #0
 800764c:	d157      	bne.n	80076fe <NVMS_Init+0x14e>
 800764e:	e062      	b.n	8007716 <NVMS_Init+0x166>
  if (sts1 == NVMS_STATUS_ERASED)
 8007650:	bb58      	cbnz	r0, 80076aa <NVMS_Init+0xfa>
    if (sts0 == NVMS_STATUS_NORMAL)
 8007652:	2c01      	cmp	r4, #1
 8007654:	d101      	bne.n	800765a <NVMS_Init+0xaa>
      CHECK_ERROR(use(NVMS_BLOCK0));
 8007656:	2000      	movs	r0, #0
 8007658:	e7dd      	b.n	8007616 <NVMS_Init+0x66>
    if (sts0 == NVMS_STATUS_PARTIAL)
 800765a:	2c02      	cmp	r4, #2
 800765c:	d10e      	bne.n	800767c <NVMS_Init+0xcc>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 800765e:	2101      	movs	r1, #1
 8007660:	2000      	movs	r0, #0
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8007662:	f7ff fe6d 	bl	8007340 <copy_slots>
 8007666:	4601      	mov	r1, r0
 8007668:	2800      	cmp	r0, #0
 800766a:	d148      	bne.n	80076fe <NVMS_Init+0x14e>
    CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 800766c:	1c69      	adds	r1, r5, #1
 800766e:	2001      	movs	r0, #1
 8007670:	f7ff feec 	bl	800744c <validate>
 8007674:	4601      	mov	r1, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	d141      	bne.n	80076fe <NVMS_Init+0x14e>
 800767a:	e037      	b.n	80076ec <NVMS_Init+0x13c>
    if (sts0 == NVMS_STATUS_BROKEN)
 800767c:	2c03      	cmp	r4, #3
 800767e:	f040 8082 	bne.w	8007786 <NVMS_Init+0x1d6>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8007682:	2000      	movs	r0, #0
 8007684:	f7ff fd86 	bl	8007194 <block_erase>
 8007688:	4601      	mov	r1, r0
 800768a:	bbc0      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
      CHECK_ERROR(validate(NVMS_BLOCK1, 1));
 800768c:	2101      	movs	r1, #1
 800768e:	4608      	mov	r0, r1
 8007690:	f7ff fedc 	bl	800744c <validate>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8007694:	4601      	mov	r1, r0
 8007696:	bb90      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
    CHECK_ERROR(use(NVMS_BLOCK1));
 8007698:	2001      	movs	r0, #1
      CHECK_ERROR(use(NVMS_BLOCK0));
 800769a:	f7ff fe0d 	bl	80072b8 <use>
 800769e:	4601      	mov	r1, r0
 80076a0:	bb68      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
    if ((err == NVMS_NOERROR) || (err == NVMS_WARNING))
    {
      return err;
    }
  }
  return NVMS_FLASH_FAILURE;
 80076a2:	2002      	movs	r0, #2
}
 80076a4:	b003      	add	sp, #12
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((sts0 == NVMS_STATUS_NORMAL) && (sts1 == NVMS_STATUS_NORMAL))
 80076aa:	2c01      	cmp	r4, #1
 80076ac:	d158      	bne.n	8007760 <NVMS_Init+0x1b0>
 80076ae:	2801      	cmp	r0, #1
 80076b0:	d12d      	bne.n	800770e <NVMS_Init+0x15e>
    if (seq0 > seq1)
 80076b2:	42ae      	cmp	r6, r5
 80076b4:	d219      	bcs.n	80076ea <NVMS_Init+0x13a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 80076b6:	f7ff fd6d 	bl	8007194 <block_erase>
  CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 80076ba:	4601      	mov	r1, r0
 80076bc:	b9f8      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
 80076be:	e7ec      	b.n	800769a <NVMS_Init+0xea>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_PARTIAL))
 80076c0:	f1bb 0f02 	cmp.w	fp, #2
 80076c4:	d153      	bne.n	800776e <NVMS_Init+0x1be>
    if (seq0 > seq1)
 80076c6:	42ae      	cmp	r6, r5
 80076c8:	d213      	bcs.n	80076f2 <NVMS_Init+0x142>
      CHECK_ERROR(block_erase(NVMS_BLOCK1));
 80076ca:	2001      	movs	r0, #1
 80076cc:	f7ff fd62 	bl	8007194 <block_erase>
 80076d0:	4601      	mov	r1, r0
 80076d2:	b9a0      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 80076d4:	2101      	movs	r1, #1
 80076d6:	f7ff fe33 	bl	8007340 <copy_slots>
 80076da:	4601      	mov	r1, r0
 80076dc:	b978      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
      CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 80076de:	1c69      	adds	r1, r5, #1
 80076e0:	2001      	movs	r0, #1
 80076e2:	f7ff feb3 	bl	800744c <validate>
 80076e6:	4601      	mov	r1, r0
 80076e8:	b948      	cbnz	r0, 80076fe <NVMS_Init+0x14e>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80076ea:	2000      	movs	r0, #0
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80076ec:	f7ff fd52 	bl	8007194 <block_erase>
 80076f0:	e7d0      	b.n	8007694 <NVMS_Init+0xe4>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fd4e 	bl	8007194 <block_erase>
 80076f8:	4601      	mov	r1, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d09b      	beq.n	8007636 <NVMS_Init+0x86>
    if ((err == NVMS_NOERROR) || (err == NVMS_WARNING))
 80076fe:	2902      	cmp	r1, #2
 8007700:	d0cf      	beq.n	80076a2 <NVMS_Init+0xf2>
  for (i = NVMS_CFG_MAX_REPAIR_ATTEMPTS; i > 0UL; i--)
 8007702:	f1b9 0901 	subs.w	r9, r9, #1
 8007706:	f47f af63 	bne.w	80075d0 <NVMS_Init+0x20>
  return NVMS_FLASH_FAILURE;
 800770a:	2003      	movs	r0, #3
 800770c:	e7ca      	b.n	80076a4 <NVMS_Init+0xf4>
    if (sts1 == NVMS_STATUS_PARTIAL)
 800770e:	2802      	cmp	r0, #2
 8007710:	d10b      	bne.n	800772a <NVMS_Init+0x17a>
      if (seq0 > seq1)
 8007712:	42ae      	cmp	r6, r5
 8007714:	d201      	bcs.n	800771a <NVMS_Init+0x16a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8007716:	2001      	movs	r0, #1
 8007718:	e7cd      	b.n	80076b6 <NVMS_Init+0x106>
        CHECK_ERROR(block_erase(NVMS_BLOCK0));
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fd3a 	bl	8007194 <block_erase>
 8007720:	4601      	mov	r1, r0
 8007722:	2800      	cmp	r0, #0
 8007724:	d1eb      	bne.n	80076fe <NVMS_Init+0x14e>
        CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8007726:	4620      	mov	r0, r4
 8007728:	e786      	b.n	8007638 <NVMS_Init+0x88>
    if (sts1 == NVMS_STATUS_BROKEN)
 800772a:	2803      	cmp	r0, #3
 800772c:	d0f3      	beq.n	8007716 <NVMS_Init+0x166>
  CHECK_ERROR(block_erase(NVMS_BLOCK0));
 800772e:	2000      	movs	r0, #0
 8007730:	f7ff fd30 	bl	8007194 <block_erase>
 8007734:	4601      	mov	r1, r0
 8007736:	2800      	cmp	r0, #0
 8007738:	d1e1      	bne.n	80076fe <NVMS_Init+0x14e>
  CHECK_ERROR(block_erase(NVMS_BLOCK1));
 800773a:	2001      	movs	r0, #1
 800773c:	f7ff fd2a 	bl	8007194 <block_erase>
 8007740:	4601      	mov	r1, r0
 8007742:	2800      	cmp	r0, #0
 8007744:	d1db      	bne.n	80076fe <NVMS_Init+0x14e>
  CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 8007746:	2101      	movs	r1, #1
 8007748:	f7ff fe80 	bl	800744c <validate>
 800774c:	e7b5      	b.n	80076ba <NVMS_Init+0x10a>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_BROKEN))
 800774e:	f1bb 0f03 	cmp.w	fp, #3
 8007752:	d1ec      	bne.n	800772e <NVMS_Init+0x17e>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8007754:	2001      	movs	r0, #1
 8007756:	e00f      	b.n	8007778 <NVMS_Init+0x1c8>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8007758:	2c00      	cmp	r4, #0
 800775a:	f47f af7a 	bne.w	8007652 <NVMS_Init+0xa2>
 800775e:	e753      	b.n	8007608 <NVMS_Init+0x58>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_PARTIAL))
 8007760:	2c02      	cmp	r4, #2
 8007762:	d0ad      	beq.n	80076c0 <NVMS_Init+0x110>
  if (sts1 == NVMS_STATUS_NORMAL)
 8007764:	2801      	cmp	r0, #1
 8007766:	d112      	bne.n	800778e <NVMS_Init+0x1de>
    if (sts0 == NVMS_STATUS_BROKEN)
 8007768:	2c03      	cmp	r4, #3
 800776a:	d1e0      	bne.n	800772e <NVMS_Init+0x17e>
 800776c:	e7bd      	b.n	80076ea <NVMS_Init+0x13a>
  if (sts1 == NVMS_STATUS_NORMAL)
 800776e:	f1bb 0f01 	cmp.w	fp, #1
 8007772:	d1ec      	bne.n	800774e <NVMS_Init+0x19e>
      if (seq1 > seq0)
 8007774:	42ae      	cmp	r6, r5
 8007776:	d8b8      	bhi.n	80076ea <NVMS_Init+0x13a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8007778:	f7ff fd0c 	bl	8007194 <block_erase>
 800777c:	4601      	mov	r1, r0
 800777e:	2800      	cmp	r0, #0
 8007780:	d1bd      	bne.n	80076fe <NVMS_Init+0x14e>
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8007782:	2101      	movs	r1, #1
 8007784:	e76d      	b.n	8007662 <NVMS_Init+0xb2>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_BROKEN))
 8007786:	2c02      	cmp	r4, #2
    if (sts0 == NVMS_STATUS_BROKEN)
 8007788:	f04f 0b00 	mov.w	fp, #0
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_BROKEN))
 800778c:	d0cf      	beq.n	800772e <NVMS_Init+0x17e>
  if ((sts0 == NVMS_STATUS_BROKEN) && (sts1 == NVMS_STATUS_PARTIAL))
 800778e:	2c03      	cmp	r4, #3
 8007790:	d1cd      	bne.n	800772e <NVMS_Init+0x17e>
 8007792:	f1bb 0f02 	cmp.w	fp, #2
 8007796:	d1ca      	bne.n	800772e <NVMS_Init+0x17e>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8007798:	2000      	movs	r0, #0
 800779a:	f7ff fcfb 	bl	8007194 <block_erase>
 800779e:	4601      	mov	r1, r0
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d1ac      	bne.n	80076fe <NVMS_Init+0x14e>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80077a4:	2001      	movs	r0, #1
 80077a6:	f7ff fdcb 	bl	8007340 <copy_slots>
 80077aa:	4601      	mov	r1, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1a6      	bne.n	80076fe <NVMS_Init+0x14e>
    CHECK_ERROR(validate(NVMS_BLOCK0, seq0 + 1UL));
 80077b0:	1c69      	adds	r1, r5, #1
 80077b2:	e747      	b.n	8007644 <NVMS_Init+0x94>
 80077b4:	08105000 	.word	0x08105000
 80077b8:	08101000 	.word	0x08101000
 80077bc:	08007175 	.word	0x08007175

080077c0 <NVMS_WriteDataWithType>:
  *
  * @api
  */
nvms_error_t NVMS_WriteDataWithType(nvms_slot_t slot, size_t size, nvms_data_type_t type,
                                    const uint8_t *slotp)
{
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return nvm.header != NULL;
 80077c4:	4c27      	ldr	r4, [pc, #156]	; (8007864 <NVMS_WriteDataWithType+0xa4>)
 80077c6:	6825      	ldr	r5, [r4, #0]
{
 80077c8:	b085      	sub	sp, #20
 80077ca:	4607      	mov	r7, r0
 80077cc:	468a      	mov	sl, r1
 80077ce:	4693      	mov	fp, r2
  size_t free, oldused;
  nvms_error_t err;
  nvms_data_header_t *hdrp;

  /* Check on initialization.*/
  if (!is_initialized())
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	d041      	beq.n	8007858 <NVMS_WriteDataWithType+0x98>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier.*/
  if (slot >= NVMS_CFG_NUM_SLOTS)
 80077d4:	2863      	cmp	r0, #99	; 0x63
 80077d6:	d841      	bhi.n	800785c <NVMS_WriteDataWithType+0x9c>
  * @retval  Block size
  */
static inline size_t NVMS_LL_GetBlockSize(void)
{

  return NVMS_LL_BLOCK_SIZE;
 80077d8:	4a23      	ldr	r2, [pc, #140]	; (8007868 <NVMS_WriteDataWithType+0xa8>)
 80077da:	4824      	ldr	r0, [pc, #144]	; (800786c <NVMS_WriteDataWithType+0xac>)
 80077dc:	1a80      	subs	r0, r0, r2
  /* If the requested space is out of the compacted block size then an
     error is returned.
     NOTE: The space for one header is reserved in order to allow for a
     data erase operation after the space has been fully allocated.*/
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
                                             nvm.used_size -
 80077de:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 80077e2:	0840      	lsrs	r0, r0, #1
 80077e4:	1a82      	subs	r2, r0, r2
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 80077e6:	3120      	adds	r1, #32
                                             nvm.used_size -
 80077e8:	3a20      	subs	r2, #32
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 80077ea:	4291      	cmp	r1, r2
 80077ec:	d838      	bhi.n	8007860 <NVMS_WriteDataWithType+0xa0>
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 80077ee:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 80077f2:	1b52      	subs	r2, r2, r5
 80077f4:	1a80      	subs	r0, r0, r2
    return NVMS_OUT_OF_MEM;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new data instance.*/
  if ((sizeof(nvms_data_header_t) + size) > free)
 80077f6:	4281      	cmp	r1, r0
 80077f8:	d929      	bls.n	800784e <NVMS_WriteDataWithType+0x8e>
 80077fa:	9303      	str	r3, [sp, #12]
  {
    warning = true;
    err = garbage_collect();
 80077fc:	f7ff fe5a 	bl	80074b4 <garbage_collect>
    if (err != NVMS_NOERROR)
 8007800:	bb10      	cbnz	r0, 8007848 <NVMS_WriteDataWithType+0x88>
 8007802:	9b03      	ldr	r3, [sp, #12]
    warning = true;
 8007804:	f04f 0801 	mov.w	r8, #1
      return err;
    }
  }

  /* Index for the new data.*/
  if (nvm.slots[slot] == NULL)
 8007808:	f107 0902 	add.w	r9, r7, #2
 800780c:	f854 5029 	ldr.w	r5, [r4, r9, lsl #2]
 8007810:	b305      	cbz	r5, 8007854 <NVMS_WriteDataWithType+0x94>
    instance = 1;
    oldused = 0;
  }
  else
  {
    instance = nvm.slots[slot]->fields.instance + 1UL;
 8007812:	68ea      	ldr	r2, [r5, #12]
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 8007814:	6929      	ldr	r1, [r5, #16]
    instance = nvm.slots[slot]->fields.instance + 1UL;
 8007816:	3201      	adds	r2, #1
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 8007818:	1b4d      	subs	r5, r1, r5

  /* Position of the new data instance.*/
  hdrp = nvm.free_next;

  /* Writing the new instance.*/
  err = append_slot(slot, size, type, slotp, instance);
 800781a:	9200      	str	r2, [sp, #0]
 800781c:	4651      	mov	r1, sl
 800781e:	465a      	mov	r2, fp
 8007820:	4638      	mov	r0, r7
  hdrp = nvm.free_next;
 8007822:	f8d4 6198 	ldr.w	r6, [r4, #408]	; 0x198
  err = append_slot(slot, size, type, slotp, instance);
 8007826:	f7ff fe77 	bl	8007518 <append_slot>
  if (err != NVMS_NOERROR)
 800782a:	b968      	cbnz	r0, 8007848 <NVMS_WriteDataWithType+0x88>
  }

  /* Adjusting the counter of the effective used size.*/
  nvm.slots[slot]  = hdrp;
  nvm.used_size -= oldused;
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 800782c:	6933      	ldr	r3, [r6, #16]
  nvm.slots[slot]  = hdrp;
 800782e:	f844 6029 	str.w	r6, [r4, r9, lsl #2]
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 8007832:	1b9e      	subs	r6, r3, r6
 8007834:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 8007838:	441e      	add	r6, r3
 800783a:	1b75      	subs	r5, r6, r5

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 800783c:	f1b8 0f00 	cmp.w	r8, #0
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 8007840:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
  return warning ? NVMS_WARNING : NVMS_NOERROR;
 8007844:	bf18      	it	ne
 8007846:	2002      	movne	r0, #2
}
 8007848:	b005      	add	sp, #20
 800784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool warning = false;
 800784e:	f04f 0800 	mov.w	r8, #0
 8007852:	e7d9      	b.n	8007808 <NVMS_WriteDataWithType+0x48>
    instance = 1;
 8007854:	2201      	movs	r2, #1
 8007856:	e7e0      	b.n	800781a <NVMS_WriteDataWithType+0x5a>
    return NVMS_NOTINIT;
 8007858:	2001      	movs	r0, #1
 800785a:	e7f5      	b.n	8007848 <NVMS_WriteDataWithType+0x88>
    return NVMS_SLOT_INVALID;
 800785c:	2004      	movs	r0, #4
 800785e:	e7f3      	b.n	8007848 <NVMS_WriteDataWithType+0x88>
    return NVMS_OUT_OF_MEM;
 8007860:	2007      	movs	r0, #7
 8007862:	e7f1      	b.n	8007848 <NVMS_WriteDataWithType+0x88>
 8007864:	200049c0 	.word	0x200049c0
 8007868:	08101000 	.word	0x08101000
 800786c:	08105000 	.word	0x08105000

08007870 <NVMS_EraseData>:
  * @retval NVMS_INTERNAL       if an internal error occurred.
  *
  * @api
  */
nvms_error_t NVMS_EraseData(nvms_slot_t slot)
{
 8007870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  return nvm.header != NULL;
 8007874:	4c23      	ldr	r4, [pc, #140]	; (8007904 <NVMS_EraseData+0x94>)
{
 8007876:	4606      	mov	r6, r0
  return nvm.header != NULL;
 8007878:	6820      	ldr	r0, [r4, #0]
  uint32_t instance;
  size_t free, oldused;
  nvms_error_t err;

  /* Check on initialization.*/
  if (!is_initialized())
 800787a:	b3d0      	cbz	r0, 80078f2 <NVMS_EraseData+0x82>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier.*/
  if (slot >= NVMS_CFG_NUM_SLOTS)
 800787c:	2e63      	cmp	r6, #99	; 0x63
 800787e:	d83a      	bhi.n	80078f6 <NVMS_EraseData+0x86>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence.*/
  if (nvm.slots[slot] == NULL)
 8007880:	1cb5      	adds	r5, r6, #2
 8007882:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8007886:	b3c3      	cbz	r3, 80078fa <NVMS_EraseData+0x8a>
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <NVMS_EraseData+0x98>)
 800788a:	4a20      	ldr	r2, [pc, #128]	; (800790c <NVMS_EraseData+0x9c>)

  /* If the requested space is out of the compacted block size then an
     error is returned.
     NOTE: This condition SHOULD NEVER HAPPEN because the slot write operation
     makes sure to leave to leave enough space for an erase operation.*/
  if (sizeof(nvms_data_header_t) > (NVMS_LL_GetBlockSize() - nvm.used_size))
 800788c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	1a59      	subs	r1, r3, r1
 8007896:	291f      	cmp	r1, #31
 8007898:	d931      	bls.n	80078fe <NVMS_EraseData+0x8e>
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 800789a:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800789e:	1a12      	subs	r2, r2, r0
 80078a0:	1a9b      	subs	r3, r3, r2
    return NVMS_INTERNAL;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new slot instance.*/
  if (sizeof(nvms_data_header_t) > free)
 80078a2:	2b1f      	cmp	r3, #31
 80078a4:	d822      	bhi.n	80078ec <NVMS_EraseData+0x7c>
  {
    warning = true;
    err = garbage_collect();
 80078a6:	f7ff fe05 	bl	80074b4 <garbage_collect>
    if (err != NVMS_NOERROR)
 80078aa:	b9e0      	cbnz	r0, 80078e6 <NVMS_EraseData+0x76>
    warning = true;
 80078ac:	f04f 0801 	mov.w	r8, #1
      return err;
    }
  }

  /* Index for the new slot.*/
  instance = nvm.slots[slot]->fields.instance + 1UL;
 80078b0:	f854 9025 	ldr.w	r9, [r4, r5, lsl #2]
 80078b4:	e9d9 3703 	ldrd	r3, r7, [r9, #12]
 80078b8:	3301      	adds	r3, #1
  oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);

  /* Writing the new instance.*/
  err = append_slot(slot, 0, NVMS_DATA_TYPE_DEFAULT, NULL, instance);
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2300      	movs	r3, #0
 80078be:	f04f 32ff 	mov.w	r2, #4294967295
 80078c2:	4619      	mov	r1, r3
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff fe27 	bl	8007518 <append_slot>
  if (err != NVMS_NOERROR)
 80078ca:	b960      	cbnz	r0, 80078e6 <NVMS_EraseData+0x76>
    return err;
  }

  /* Adjusting the counter of the effective used size.*/
  nvm.slots[slot]  = NULL;
  nvm.used_size -= oldused;
 80078cc:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
  nvm.slots[slot]  = NULL;
 80078d0:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 80078d4:	eba7 0709 	sub.w	r7, r7, r9
  nvm.used_size -= oldused;
 80078d8:	1bdb      	subs	r3, r3, r7

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 80078da:	f1b8 0f00 	cmp.w	r8, #0
  nvm.used_size -= oldused;
 80078de:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  return warning ? NVMS_WARNING : NVMS_NOERROR;
 80078e2:	bf18      	it	ne
 80078e4:	2002      	movne	r0, #2
}
 80078e6:	b003      	add	sp, #12
 80078e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool warning = false;
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	e7de      	b.n	80078b0 <NVMS_EraseData+0x40>
    return NVMS_NOTINIT;
 80078f2:	2001      	movs	r0, #1
 80078f4:	e7f7      	b.n	80078e6 <NVMS_EraseData+0x76>
    return NVMS_SLOT_INVALID;
 80078f6:	2004      	movs	r0, #4
 80078f8:	e7f5      	b.n	80078e6 <NVMS_EraseData+0x76>
    return NVMS_DATA_NOT_FOUND;
 80078fa:	2005      	movs	r0, #5
 80078fc:	e7f3      	b.n	80078e6 <NVMS_EraseData+0x76>
    return NVMS_INTERNAL;
 80078fe:	2008      	movs	r0, #8
 8007900:	e7f1      	b.n	80078e6 <NVMS_EraseData+0x76>
 8007902:	bf00      	nop
 8007904:	200049c0 	.word	0x200049c0
 8007908:	08105000 	.word	0x08105000
 800790c:	08101000 	.word	0x08101000

08007910 <NVMS_GetDataWithType>:
  *
  * @api
  */
nvms_error_t NVMS_GetDataWithType(nvms_slot_t slot, size_t *size_p, nvms_data_type_t *type_p,
                                  uint8_t **data_pp)
{
 8007910:	b530      	push	{r4, r5, lr}
  return nvm.header != NULL;
 8007912:	4c0e      	ldr	r4, [pc, #56]	; (800794c <NVMS_GetDataWithType+0x3c>)

  /* Check on initialization.*/
  if (!is_initialized())
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	b185      	cbz	r5, 800793a <NVMS_GetDataWithType+0x2a>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier.*/
  if (slot >= NVMS_CFG_NUM_SLOTS)
 8007918:	2863      	cmp	r0, #99	; 0x63
 800791a:	d810      	bhi.n	800793e <NVMS_GetDataWithType+0x2e>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence.*/
  if (nvm.slots[slot] == NULL)
 800791c:	3002      	adds	r0, #2
 800791e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007922:	b170      	cbz	r0, 8007942 <NVMS_GetDataWithType+0x32>
  {
    return NVMS_DATA_NOT_FOUND;
  }

  if (size_p != NULL)
 8007924:	b109      	cbz	r1, 800792a <NVMS_GetDataWithType+0x1a>
  {
    *size_p = nvm.slots[slot]->fields.data_size;
 8007926:	6984      	ldr	r4, [r0, #24]
 8007928:	600c      	str	r4, [r1, #0]
  }

  if (type_p != NULL)
 800792a:	b10a      	cbz	r2, 8007930 <NVMS_GetDataWithType+0x20>
  {
    *type_p = nvm.slots[slot]->fields.data_type;
 800792c:	6941      	ldr	r1, [r0, #20]
 800792e:	6011      	str	r1, [r2, #0]
  }

  if (data_pp != NULL)
 8007930:	b14b      	cbz	r3, 8007946 <NVMS_GetDataWithType+0x36>
  {
    *data_pp = nvm.slots[slot]->hdr8 + sizeof(nvms_data_header_t);
 8007932:	3020      	adds	r0, #32
 8007934:	6018      	str	r0, [r3, #0]
  }

  return NVMS_NOERROR;
 8007936:	2000      	movs	r0, #0
}
 8007938:	bd30      	pop	{r4, r5, pc}
    return NVMS_NOTINIT;
 800793a:	2001      	movs	r0, #1
 800793c:	e7fc      	b.n	8007938 <NVMS_GetDataWithType+0x28>
    return NVMS_SLOT_INVALID;
 800793e:	2004      	movs	r0, #4
 8007940:	e7fa      	b.n	8007938 <NVMS_GetDataWithType+0x28>
    return NVMS_DATA_NOT_FOUND;
 8007942:	2005      	movs	r0, #5
 8007944:	e7f8      	b.n	8007938 <NVMS_GetDataWithType+0x28>
  return NVMS_NOERROR;
 8007946:	4618      	mov	r0, r3
 8007948:	e7f6      	b.n	8007938 <NVMS_GetDataWithType+0x28>
 800794a:	bf00      	nop
 800794c:	200049c0 	.word	0x200049c0

08007950 <read_next_chunk>:
  * @param  p_decrypted_size the decrypted chunk size
  * @retval Operation status
  */
CK_RV  read_next_chunk(uint32_t session, uint8_t *p_source_address, uint32_t size, uint8_t *p_decrypted_chunk,
                       uint32_t *p_decrypted_size)
{
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007956:	4604      	mov	r4, r0
  uint8_t fw_encrypted_chunk[KMS_BLOB_CHUNK_SIZE] __attribute__((aligned(8)));
  CK_RV        e_ret_status;

  /* Read */
  e_ret_status = KMS_LL_FLASH_Read(fw_encrypted_chunk, p_source_address, size);
 8007958:	a802      	add	r0, sp, #8
{
 800795a:	4615      	mov	r5, r2
 800795c:	461e      	mov	r6, r3
  e_ret_status = KMS_LL_FLASH_Read(fw_encrypted_chunk, p_source_address, size);
 800795e:	f7fa fe83 	bl	8002668 <KMS_LL_FLASH_Read>

  if (e_ret_status == CKR_OK)
 8007962:	b938      	cbnz	r0, 8007974 <read_next_chunk+0x24>
  {
    e_ret_status = KMS_DecryptUpdate(session,
 8007964:	ab86      	add	r3, sp, #536	; 0x218
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	462a      	mov	r2, r5
 800796a:	4633      	mov	r3, r6
 800796c:	a902      	add	r1, sp, #8
 800796e:	4620      	mov	r0, r4
 8007970:	f7fe f9a0 	bl	8005cb4 <KMS_DecryptUpdate>
                                     (CK_BYTE *)p_decrypted_chunk,
                                     (CK_ULONG_PTR)(uint32_t)&p_decrypted_size);
  }

  return (e_ret_status);
}
 8007974:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8007978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800797c <authenticate_blob>:
{
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
  uint32_t fw_tag_len = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	9305      	str	r3, [sp, #20]
  if ((pBlobHeader == NULL))
 8007988:	4607      	mov	r7, r0
 800798a:	b928      	cbnz	r0, 8007998 <authenticate_blob+0x1c>
    return KMS_IMPORT_BLOB_CRYPTO_BLOB_AUTH_ERROR;
 800798c:	4d54      	ldr	r5, [pc, #336]	; (8007ae0 <authenticate_blob+0x164>)
}
 800798e:	4628      	mov	r0, r5
 8007990:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &aessession) != CKR_OK)
 8007998:	ac06      	add	r4, sp, #24
 800799a:	461a      	mov	r2, r3
 800799c:	4618      	mov	r0, r3
 800799e:	9400      	str	r4, [sp, #0]
 80079a0:	2104      	movs	r1, #4
 80079a2:	f7ff f94d 	bl	8006c40 <KMS_OpenSession>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d1ef      	bne.n	800798c <authenticate_blob+0x10>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &digsession) != CKR_OK)
 80079ac:	ae07      	add	r6, sp, #28
 80079ae:	9600      	str	r6, [sp, #0]
 80079b0:	4602      	mov	r2, r0
 80079b2:	2104      	movs	r1, #4
 80079b4:	f7ff f944 	bl	8006c40 <KMS_OpenSession>
 80079b8:	b118      	cbz	r0, 80079c2 <authenticate_blob+0x46>
    (void)KMS_CloseSession(aessession);
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	f7ff f9ac 	bl	8006d18 <KMS_CloseSession>
 80079c0:	e7e4      	b.n	800798c <authenticate_blob+0x10>
  ObjectIdIndex = KMS_PlatfObjects_GetBlobDecryptKey();
 80079c2:	f000 fb85 	bl	80080d0 <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 80079c6:	f241 0382 	movw	r3, #4226	; 0x1082
 80079ca:	9308      	str	r3, [sp, #32]
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 80079cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, ObjectIdIndex);
 80079d2:	4602      	mov	r2, r0
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 80079d4:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, ObjectIdIndex);
 80079d6:	a908      	add	r1, sp, #32
 80079d8:	6820      	ldr	r0, [r4, #0]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 80079da:	930a      	str	r3, [sp, #40]	; 0x28
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, ObjectIdIndex);
 80079dc:	f7fe f966 	bl	8005cac <KMS_DecryptInit>
  if (e_ret_status == CKR_OK)
 80079e0:	b138      	cbz	r0, 80079f2 <authenticate_blob+0x76>
  kms_import_blob_state_t e_se_err_status = KMS_IMPORT_BLOB_CRYPTO_BLOB_AUTH_ERROR;
 80079e2:	4d3f      	ldr	r5, [pc, #252]	; (8007ae0 <authenticate_blob+0x164>)
  (void)KMS_CloseSession(aessession);
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	f7ff f997 	bl	8006d18 <KMS_CloseSession>
  (void)KMS_CloseSession(digsession);
 80079ea:	6830      	ldr	r0, [r6, #0]
 80079ec:	f7ff f994 	bl	8006d18 <KMS_CloseSession>
  return e_se_err_status;
 80079f0:	e7cd      	b.n	800798e <authenticate_blob+0x12>
    digmech.mechanism = CKM_SHA256;
 80079f2:	f44f 7314 	mov.w	r3, #592	; 0x250
    digmech.pParameter = NULL;
 80079f6:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
    digmech.ulParameterLen = 0;
 80079fa:	900d      	str	r0, [sp, #52]	; 0x34
    e_ret_status = KMS_DigestInit(digsession, &digmech);
 80079fc:	a90b      	add	r1, sp, #44	; 0x2c
 80079fe:	6830      	ldr	r0, [r6, #0]
 8007a00:	f7fe fa76 	bl	8005ef0 <KMS_DigestInit>
  if (e_ret_status == CKR_OK)
 8007a04:	4603      	mov	r3, r0
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d1eb      	bne.n	80079e2 <authenticate_blob+0x66>
  pass_index = 0;
 8007a0a:	4680      	mov	r8, r0
  uint32_t fw_decrypted_total_size = 0;
 8007a0c:	4681      	mov	r9, r0
  uint8_t *pfw_source_address = (uint8_t *)0xFFFFFFFFU;
 8007a0e:	f04f 3aff 	mov.w	sl, #4294967295
      fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 8007a12:	ad04      	add	r5, sp, #16
 8007a14:	e01e      	b.n	8007a54 <authenticate_blob+0xd8>
      if (pass_index == 0UL)
 8007a16:	f1b8 0f00 	cmp.w	r8, #0
 8007a1a:	d103      	bne.n	8007a24 <authenticate_blob+0xa8>
        pfw_source_address = (uint8_t *)(KMS_LL_FLASH_GetBlobDownloadAddress() + KMS_BLOB_IMG_OFFSET);
 8007a1c:	f7fa fe30 	bl	8002680 <KMS_LL_FLASH_GetBlobDownloadAddress>
 8007a20:	f100 0ac0 	add.w	sl, r0, #192	; 0xc0
      fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 8007a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a28:	602b      	str	r3, [r5, #0]
      if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	eba3 0309 	sub.w	r3, r3, r9
 8007a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8007a34:	bf38      	it	cc
 8007a36:	602b      	strcc	r3, [r5, #0]
      size = fw_decrypted_chunk_size;
 8007a38:	f8d5 b000 	ldr.w	fp, [r5]
      e_ret_status = KMS_LL_FLASH_Read(fw_encrypted_chunk, pfw_source_address, size);
 8007a3c:	4651      	mov	r1, sl
 8007a3e:	465a      	mov	r2, fp
 8007a40:	a896      	add	r0, sp, #600	; 0x258
 8007a42:	f7fa fe11 	bl	8002668 <KMS_LL_FLASH_Read>
      if (e_ret_status == CKR_OK)
 8007a46:	4603      	mov	r3, r0
 8007a48:	b920      	cbnz	r0, 8007a54 <authenticate_blob+0xd8>
        if (size == 0UL)
 8007a4a:	f1bb 0f00 	cmp.w	fp, #0
 8007a4e:	d107      	bne.n	8007a60 <authenticate_blob+0xe4>
          pass_index += 1UL;
 8007a50:	f108 0801 	add.w	r8, r8, #1
    while ((fw_decrypted_total_size < (pBlobHeader->BlobSize)) && (e_ret_status == CKR_OK))
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	454a      	cmp	r2, r9
 8007a58:	d922      	bls.n	8007aa0 <authenticate_blob+0x124>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0db      	beq.n	8007a16 <authenticate_blob+0x9a>
 8007a5e:	e7c0      	b.n	80079e2 <authenticate_blob+0x66>
          e_ret_status = KMS_DecryptUpdate(aessession,
 8007a60:	9500      	str	r5, [sp, #0]
 8007a62:	ab16      	add	r3, sp, #88	; 0x58
 8007a64:	465a      	mov	r2, fp
 8007a66:	a996      	add	r1, sp, #600	; 0x258
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	f7fe f923 	bl	8005cb4 <KMS_DecryptUpdate>
          if ((e_ret_status == CKR_OK) && (fw_decrypted_chunk_size == size))
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d1ef      	bne.n	8007a54 <authenticate_blob+0xd8>
 8007a74:	682a      	ldr	r2, [r5, #0]
 8007a76:	455a      	cmp	r2, fp
 8007a78:	d1ec      	bne.n	8007a54 <authenticate_blob+0xd8>
            e_ret_status = KMS_DigestUpdate(digsession, fw_decrypted_chunk, fw_decrypted_chunk_size);
 8007a7a:	a916      	add	r1, sp, #88	; 0x58
 8007a7c:	6830      	ldr	r0, [r6, #0]
 8007a7e:	f7fe fabf 	bl	8006000 <KMS_DigestUpdate>
            if (e_ret_status == CKR_OK)
 8007a82:	4603      	mov	r3, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d1e5      	bne.n	8007a54 <authenticate_blob+0xd8>
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007a88:	682a      	ldr	r2, [r5, #0]
 8007a8a:	9003      	str	r0, [sp, #12]
              (void)memset(fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 8007a8c:	21ff      	movs	r1, #255	; 0xff
 8007a8e:	a816      	add	r0, sp, #88	; 0x58
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007a90:	4492      	add	sl, r2
              fw_decrypted_total_size += fw_decrypted_chunk_size;
 8007a92:	4491      	add	r9, r2
              pass_index += 1UL;
 8007a94:	f108 0801 	add.w	r8, r8, #1
              (void)memset(fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 8007a98:	f00f f833 	bl	8016b02 <memset>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	e7d9      	b.n	8007a54 <authenticate_blob+0xd8>
 8007aa0:	6820      	ldr	r0, [r4, #0]
  if ((e_ret_status == CKR_OK))
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d19d      	bne.n	80079e2 <authenticate_blob+0x66>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* Section 5.2: Buffer handling compliance */
 8007aa6:	2520      	movs	r5, #32
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)&fw_tag_len);
 8007aa8:	aa05      	add	r2, sp, #20
 8007aaa:	a90e      	add	r1, sp, #56	; 0x38
    fw_tag_len = KMS_BLOB_TAG_LEN; /* Section 5.2: Buffer handling compliance */
 8007aac:	9505      	str	r5, [sp, #20]
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)&fw_tag_len);
 8007aae:	f7fe f9a1 	bl	8005df4 <KMS_DecryptFinal>
    if (e_ret_status == CKR_OK)
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d195      	bne.n	80079e2 <authenticate_blob+0x66>
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)&fw_tag_len);
 8007ab6:	aa05      	add	r2, sp, #20
 8007ab8:	a90e      	add	r1, sp, #56	; 0x38
 8007aba:	6830      	ldr	r0, [r6, #0]
      fw_tag_len = KMS_BLOB_TAG_LEN; /* Section 5.2: Buffer handling compliance */
 8007abc:	9505      	str	r5, [sp, #20]
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)&fw_tag_len);
 8007abe:	f7fe fac5 	bl	800604c <KMS_DigestFinal>
      if (e_ret_status == CKR_OK)
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d18d      	bne.n	80079e2 <authenticate_blob+0x66>
        if ((fw_tag_len == KMS_BLOB_TAG_LEN) && (memcmp(fw_tag_output, pBlobHeader->BlobTag, KMS_BLOB_TAG_LEN) == 0))
 8007ac6:	9a05      	ldr	r2, [sp, #20]
 8007ac8:	42aa      	cmp	r2, r5
 8007aca:	d18a      	bne.n	80079e2 <authenticate_blob+0x66>
 8007acc:	f107 0114 	add.w	r1, r7, #20
 8007ad0:	a80e      	add	r0, sp, #56	; 0x38
 8007ad2:	f00e ffe3 	bl	8016a9c <memcmp>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d183      	bne.n	80079e2 <authenticate_blob+0x66>
          e_se_err_status = KMS_IMPORT_BLOB_NO_ERROR;
 8007ada:	4d02      	ldr	r5, [pc, #8]	; (8007ae4 <authenticate_blob+0x168>)
 8007adc:	e782      	b.n	80079e4 <authenticate_blob+0x68>
 8007ade:	bf00      	nop
 8007ae0:	80000001 	.word	0x80000001
 8007ae4:	80000008 	.word	0x80000008

08007ae8 <install_blob>:
  * @brief  Install KMS blob
  * @param  pBlobHeader the blob header
  * @retval Operation status
  */
static kms_import_blob_state_t install_blob(KMS_BlobRawHeaderTypeDef *pBlobHeader)
{
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
  uint8_t fw_decrypted_chunk[KMS_BLOB_CHUNK_SIZE] __attribute__((aligned(8)));
  uint8_t *pfw_source_address;
  uint32_t fw_decrypted_total_size = 0;
  uint32_t size;
  uint32_t fw_decrypted_chunk_size;
  uint32_t fw_tag_len = 0;
 8007af0:	2400      	movs	r4, #0
 8007af2:	9408      	str	r4, [sp, #32]
  uint32_t bytes_copied_from_decrypted_chunk = 0;
  uint32_t nvm_warning_occurred = 0;

  static biggest_kms_obj_keyhead_t  import_blob_object;

  if ((pBlobHeader == NULL))
 8007af4:	4681      	mov	r9, r0
 8007af6:	b928      	cbnz	r0, 8007b04 <install_blob+0x1c>
  {
    return KMS_IMPORT_BLOB_CRYPTO_BLOB_FORM_ERROR;
 8007af8:	4c80      	ldr	r4, [pc, #512]	; (8007cfc <install_blob+0x214>)
    e_se_err_status = KMS_IMPORT_BLOB_NVM_ERROR;
  }

  (void)KMS_CloseSession(session);
  return e_se_err_status;
}
 8007afa:	4620      	mov	r0, r4
 8007afc:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  KMS_PlatfObjects_Init();
 8007b04:	f000 fab0 	bl	8008068 <KMS_PlatfObjects_Init>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session) != CKR_OK)
 8007b08:	ab06      	add	r3, sp, #24
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4623      	mov	r3, r4
 8007b10:	2104      	movs	r1, #4
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff f894 	bl	8006c40 <KMS_OpenSession>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d1ed      	bne.n	8007af8 <install_blob+0x10>
  ObjectIdIndex = KMS_PlatfObjects_GetBlobDecryptKey();
 8007b1c:	f000 fad8 	bl	80080d0 <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 8007b20:	f241 0382 	movw	r3, #4226	; 0x1082
 8007b24:	9309      	str	r3, [sp, #36]	; 0x24
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 8007b26:	f109 0354 	add.w	r3, r9, #84	; 0x54
 8007b2a:	930a      	str	r3, [sp, #40]	; 0x28
  e_ret_status = KMS_DecryptInit(session, &aesmech, ObjectIdIndex);
 8007b2c:	4602      	mov	r2, r0
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8007b2e:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(session, &aesmech, ObjectIdIndex);
 8007b30:	a909      	add	r1, sp, #36	; 0x24
 8007b32:	9806      	ldr	r0, [sp, #24]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8007b34:	930b      	str	r3, [sp, #44]	; 0x2c
  e_ret_status = KMS_DecryptInit(session, &aesmech, ObjectIdIndex);
 8007b36:	f7fe f8b9 	bl	8005cac <KMS_DecryptInit>
  if (e_ret_status == CKR_OK)
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	b120      	cbz	r0, 8007b48 <install_blob+0x60>
        e_se_err_status = KMS_IMPORT_BLOB_NVM_WARNING;
 8007b3e:	4c6f      	ldr	r4, [pc, #444]	; (8007cfc <install_blob+0x214>)
  (void)KMS_CloseSession(session);
 8007b40:	9806      	ldr	r0, [sp, #24]
 8007b42:	f7ff f8e9 	bl	8006d18 <KMS_CloseSession>
  return e_se_err_status;
 8007b46:	e7d8      	b.n	8007afa <install_blob+0x12>
    KMS_PlatfObjects_NvmInitialize();
 8007b48:	f000 fa80 	bl	800804c <KMS_PlatfObjects_NvmInitialize>
    pfw_source_address = (uint8_t *)(KMS_LL_FLASH_GetBlobDownloadAddress() + KMS_BLOB_IMG_OFFSET);
 8007b4c:	f7fa fd98 	bl	8002680 <KMS_LL_FLASH_GetBlobDownloadAddress>
    fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 8007b50:	ac07      	add	r4, sp, #28
    pfw_source_address = (uint8_t *)(KMS_LL_FLASH_GetBlobDownloadAddress() + KMS_BLOB_IMG_OFFSET);
 8007b52:	f100 06c0 	add.w	r6, r0, #192	; 0xc0
    fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 8007b56:	f44f 7200 	mov.w	r2, #512	; 0x200
    e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007b5a:	9400      	str	r4, [sp, #0]
 8007b5c:	ab14      	add	r3, sp, #80	; 0x50
 8007b5e:	4631      	mov	r1, r6
 8007b60:	9806      	ldr	r0, [sp, #24]
    fw_decrypted_chunk_size = sizeof(fw_decrypted_chunk);
 8007b62:	9207      	str	r2, [sp, #28]
    e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007b64:	f7ff fef4 	bl	8007950 <read_next_chunk>
    pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007b68:	6827      	ldr	r7, [r4, #0]
        (void)memcpy(&import_blob_object, fw_decrypted_chunk + bytes_copied_from_decrypted_chunk,
 8007b6a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8007d04 <install_blob+0x21c>
    e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007b6e:	9005      	str	r0, [sp, #20]
    pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007b70:	19f3      	adds	r3, r6, r7
  uint32_t nvm_warning_occurred = 0;
 8007b72:	e9cd 3503 	strd	r3, r5, [sp, #12]
  uint32_t bytes_copied_in_kms = 0;
 8007b76:	46a8      	mov	r8, r5
    pNextMagic = (uint32_t *)fw_decrypted_chunk;
 8007b78:	ae14      	add	r6, sp, #80	; 0x50
  nvms_error_t nvm_status = NVMS_NOERROR;
 8007b7a:	462c      	mov	r4, r5
    while (((fw_decrypted_total_size < (pBlobHeader->BlobSize))
 8007b7c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007b80:	42ba      	cmp	r2, r7
 8007b82:	d804      	bhi.n	8007b8e <install_blob+0xa6>
            || (pNextMagic < (uint32_t *)(fw_decrypted_chunk + fw_decrypted_chunk_size)))
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	a914      	add	r1, sp, #80	; 0x50
 8007b88:	440b      	add	r3, r1
 8007b8a:	429e      	cmp	r6, r3
 8007b8c:	d202      	bcs.n	8007b94 <install_blob+0xac>
           && (e_ret_status == CKR_OK) && (nvm_status == NVMS_NOERROR))
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	b903      	cbnz	r3, 8007b94 <install_blob+0xac>
 8007b92:	b1cc      	cbz	r4, 8007bc8 <install_blob+0xe0>
    KMS_PlatfObjects_Init();
 8007b94:	f000 fa68 	bl	8008068 <KMS_PlatfObjects_Init>
  if ((e_ret_status == CKR_OK) && (nvm_status == NVMS_NOERROR))
 8007b98:	9b05      	ldr	r3, [sp, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 80a9 	bne.w	8007cf2 <install_blob+0x20a>
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	f040 80a9 	bne.w	8007cf8 <install_blob+0x210>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* Section 5.2: Buffer handling compliance */
 8007ba6:	2320      	movs	r3, #32
 8007ba8:	9806      	ldr	r0, [sp, #24]
 8007baa:	9308      	str	r3, [sp, #32]
    e_ret_status =  KMS_DecryptFinal(session, fw_tag_output, (CK_ULONG_PTR)&fw_tag_len);
 8007bac:	eb0d 0203 	add.w	r2, sp, r3
 8007bb0:	a90c      	add	r1, sp, #48	; 0x30
 8007bb2:	f7fe f91f 	bl	8005df4 <KMS_DecryptFinal>
    if (e_ret_status == CKR_OK)
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1c1      	bne.n	8007b3e <install_blob+0x56>
        e_se_err_status = KMS_IMPORT_BLOB_NVM_WARNING;
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	4c50      	ldr	r4, [pc, #320]	; (8007d00 <install_blob+0x218>)
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf08      	it	eq
 8007bc2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007bc6:	e7bb      	b.n	8007b40 <install_blob+0x58>
      if ((fw_decrypted_chunk_size - bytes_copied_from_decrypted_chunk) > sizeof(kms_obj_keyhead_no_blob_t))
 8007bc8:	ac07      	add	r4, sp, #28
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	eba3 0b05 	sub.w	fp, r3, r5
 8007bd0:	a914      	add	r1, sp, #80	; 0x50
 8007bd2:	f1bb 0f1c 	cmp.w	fp, #28
 8007bd6:	4429      	add	r1, r5
 8007bd8:	d932      	bls.n	8007c40 <install_blob+0x158>
        (void)memcpy(&import_blob_object, fw_decrypted_chunk + bytes_copied_from_decrypted_chunk,
 8007bda:	4a4a      	ldr	r2, [pc, #296]	; (8007d04 <install_blob+0x21c>)
 8007bdc:	460b      	mov	r3, r1
 8007bde:	f101 0c18 	add.w	ip, r1, #24
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	6859      	ldr	r1, [r3, #4]
 8007be6:	4614      	mov	r4, r2
 8007be8:	c403      	stmia	r4!, {r0, r1}
 8007bea:	3308      	adds	r3, #8
 8007bec:	4563      	cmp	r3, ip
 8007bee:	4622      	mov	r2, r4
 8007bf0:	d1f7      	bne.n	8007be2 <install_blob+0xfa>
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	6020      	str	r0, [r4, #0]
        bytes_copied_from_decrypted_chunk = bytes_copied_from_decrypted_chunk + sizeof(kms_obj_keyhead_no_blob_t);
 8007bf6:	351c      	adds	r5, #28
        pNextMagic = &pNextMagic[sizeof(kms_obj_keyhead_no_blob_t) / 4UL];
 8007bf8:	361c      	adds	r6, #28
        bytes_copied_from_decrypted_chunk = bytes_copied_from_decrypted_chunk + sizeof(kms_obj_keyhead_no_blob_t);
 8007bfa:	462c      	mov	r4, r5
        bytes_copied_in_kms = sizeof(kms_obj_keyhead_no_blob_t);
 8007bfc:	f04f 081c 	mov.w	r8, #28
 8007c00:	e000      	b.n	8007c04 <install_blob+0x11c>
 8007c02:	462c      	mov	r4, r5
 8007c04:	ab14      	add	r3, sp, #80	; 0x50
 8007c06:	1919      	adds	r1, r3, r4
      while (*pNextMagic != KMS_ABI_VERSION_CK_2_40)
 8007c08:	4a3f      	ldr	r2, [pc, #252]	; (8007d08 <install_blob+0x220>)
 8007c0a:	6833      	ldr	r3, [r6, #0]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	eb0a 0008 	add.w	r0, sl, r8
 8007c12:	d13d      	bne.n	8007c90 <install_blob+0x1a8>
                   bytes_to_next_magic - bytes_copied_from_decrypted_chunk);
 8007c14:	1b2c      	subs	r4, r5, r4
      (void)memcpy((uint8_t *)&import_blob_object + bytes_copied_in_kms,
 8007c16:	4622      	mov	r2, r4
 8007c18:	f00e ff4f 	bl	8016aba <memcpy>
      nvm_status = KMS_PlatfObjects_NvmStoreObject(import_blob_object.object_id,
 8007c1c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007c20:	f8da 0018 	ldr.w	r0, [sl, #24]
 8007c24:	321c      	adds	r2, #28
 8007c26:	4651      	mov	r1, sl
 8007c28:	f000 fa3c 	bl	80080a4 <KMS_PlatfObjects_NvmStoreObject>
      if (nvm_status == NVMS_WARNING)
 8007c2c:	2802      	cmp	r0, #2
        nvm_warning_occurred++;
 8007c2e:	bf02      	ittt	eq
 8007c30:	9b04      	ldreq	r3, [sp, #16]
        nvm_status = NVMS_NOERROR;
 8007c32:	2000      	moveq	r0, #0
        nvm_warning_occurred++;
 8007c34:	3301      	addeq	r3, #1
      bytes_copied_in_kms = bytes_copied_in_kms + (bytes_to_next_magic - bytes_copied_from_decrypted_chunk);
 8007c36:	44a0      	add	r8, r4
        nvm_warning_occurred++;
 8007c38:	bf08      	it	eq
 8007c3a:	9304      	streq	r3, [sp, #16]
        nvm_status = NVMS_NOERROR;
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e79d      	b.n	8007b7c <install_blob+0x94>
      else if (fw_decrypted_total_size < (pBlobHeader->BlobSize))
 8007c40:	42ba      	cmp	r2, r7
 8007c42:	d9de      	bls.n	8007c02 <install_blob+0x11a>
        (void)memcpy(&import_blob_object, fw_decrypted_chunk + bytes_copied_from_decrypted_chunk,
 8007c44:	465a      	mov	r2, fp
 8007c46:	4650      	mov	r0, sl
 8007c48:	9305      	str	r3, [sp, #20]
 8007c4a:	f00e ff36 	bl	8016aba <memcpy>
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8007c4e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007c52:	9b05      	ldr	r3, [sp, #20]
        e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007c54:	9903      	ldr	r1, [sp, #12]
 8007c56:	9806      	ldr	r0, [sp, #24]
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8007c58:	1bd2      	subs	r2, r2, r7
 8007c5a:	4293      	cmp	r3, r2
          fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8007c5c:	bf88      	it	hi
 8007c5e:	6022      	strhi	r2, [r4, #0]
        e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007c60:	9400      	str	r4, [sp, #0]
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	ab14      	add	r3, sp, #80	; 0x50
 8007c66:	f7ff fe73 	bl	8007950 <read_next_chunk>
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	9a03      	ldr	r2, [sp, #12]
        e_ret_status = read_next_chunk(session, pfw_source_address, size, fw_decrypted_chunk, &fw_decrypted_chunk_size);
 8007c6e:	9005      	str	r0, [sp, #20]
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007c70:	441a      	add	r2, r3
                     sizeof(kms_obj_keyhead_no_blob_t) - bytes_copied_in_kms);
 8007c72:	f1cb 041c 	rsb	r4, fp, #28
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007c76:	9203      	str	r2, [sp, #12]
        (void)memcpy((uint8_t *)&import_blob_object + bytes_copied_in_kms, fw_decrypted_chunk,
 8007c78:	a914      	add	r1, sp, #80	; 0x50
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	eb0a 000b 	add.w	r0, sl, fp
        fw_decrypted_total_size += fw_decrypted_chunk_size;
 8007c80:	441f      	add	r7, r3
        (void)memcpy((uint8_t *)&import_blob_object + bytes_copied_in_kms, fw_decrypted_chunk,
 8007c82:	f00e ff1a 	bl	8016aba <memcpy>
        pNextMagic = (uint32_t *)fw_decrypted_chunk + bytes_copied_from_decrypted_chunk;
 8007c86:	ab14      	add	r3, sp, #80	; 0x50
 8007c88:	eb03 0684 	add.w	r6, r3, r4, lsl #2
        bytes_to_next_magic = bytes_to_next_magic + bytes_copied_from_decrypted_chunk;
 8007c8c:	4425      	add	r5, r4
 8007c8e:	e7b5      	b.n	8007bfc <install_blob+0x114>
        if (pNextMagic == (uint32_t *)(fw_decrypted_chunk + fw_decrypted_chunk_size))
 8007c90:	f10d 0b1c 	add.w	fp, sp, #28
 8007c94:	f8db 3000 	ldr.w	r3, [fp]
 8007c98:	aa14      	add	r2, sp, #80	; 0x50
 8007c9a:	441a      	add	r2, r3
 8007c9c:	4296      	cmp	r6, r2
 8007c9e:	d125      	bne.n	8007cec <install_blob+0x204>
          if (fw_decrypted_total_size == (pBlobHeader->BlobSize))
 8007ca0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007ca4:	42ba      	cmp	r2, r7
 8007ca6:	d0b5      	beq.n	8007c14 <install_blob+0x12c>
                       fw_decrypted_chunk_size - bytes_copied_from_decrypted_chunk);
 8007ca8:	1b1c      	subs	r4, r3, r4
          (void)memcpy((uint8_t *)&import_blob_object + bytes_copied_in_kms,
 8007caa:	4622      	mov	r2, r4
                       fw_decrypted_chunk_size - bytes_copied_from_decrypted_chunk);
 8007cac:	9305      	str	r3, [sp, #20]
          (void)memcpy((uint8_t *)&import_blob_object + bytes_copied_in_kms,
 8007cae:	f00e ff04 	bl	8016aba <memcpy>
          if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8007cb2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8007cb6:	9b05      	ldr	r3, [sp, #20]
          e_ret_status = read_next_chunk(session,
 8007cb8:	9903      	ldr	r1, [sp, #12]
 8007cba:	9806      	ldr	r0, [sp, #24]
          if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8007cbc:	1bd2      	subs	r2, r2, r7
 8007cbe:	4293      	cmp	r3, r2
            fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8007cc0:	bf88      	it	hi
 8007cc2:	f8cb 2000 	strhi.w	r2, [fp]
          e_ret_status = read_next_chunk(session,
 8007cc6:	f8cd b000 	str.w	fp, [sp]
 8007cca:	ab14      	add	r3, sp, #80	; 0x50
 8007ccc:	f8db 2000 	ldr.w	r2, [fp]
 8007cd0:	f7ff fe3e 	bl	8007950 <read_next_chunk>
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007cd4:	f8db 3000 	ldr.w	r3, [fp]
 8007cd8:	9a03      	ldr	r2, [sp, #12]
          e_ret_status = read_next_chunk(session,
 8007cda:	9005      	str	r0, [sp, #20]
          bytes_copied_in_kms = bytes_copied_in_kms + (fw_decrypted_chunk_size - bytes_copied_from_decrypted_chunk);
 8007cdc:	44a0      	add	r8, r4
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007cde:	441a      	add	r2, r3
          bytes_copied_from_decrypted_chunk = 0;
 8007ce0:	2400      	movs	r4, #0
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8007ce2:	9203      	str	r2, [sp, #12]
          fw_decrypted_total_size += fw_decrypted_chunk_size;
 8007ce4:	441f      	add	r7, r3
          bytes_to_next_magic = 0;
 8007ce6:	4625      	mov	r5, r4
          pNextMagic = (uint32_t *)fw_decrypted_chunk;
 8007ce8:	ae14      	add	r6, sp, #80	; 0x50
 8007cea:	e78b      	b.n	8007c04 <install_blob+0x11c>
          pNextMagic++;
 8007cec:	3604      	adds	r6, #4
          bytes_to_next_magic += 4UL;
 8007cee:	3504      	adds	r5, #4
 8007cf0:	e788      	b.n	8007c04 <install_blob+0x11c>
  if (nvm_status != NVMS_NOERROR)
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	f43f af23 	beq.w	8007b3e <install_blob+0x56>
    e_se_err_status = KMS_IMPORT_BLOB_NVM_ERROR;
 8007cf8:	4c04      	ldr	r4, [pc, #16]	; (8007d0c <install_blob+0x224>)
 8007cfa:	e721      	b.n	8007b40 <install_blob+0x58>
 8007cfc:	80000003 	.word	0x80000003
 8007d00:	80000006 	.word	0x80000006
 8007d04:	20004b60 	.word	0x20004b60
 8007d08:	b10b0240 	.word	0xb10b0240
 8007d0c:	80000005 	.word	0x80000005

08007d10 <KMS_Objects_GetRange>:
{
 8007d10:	b513      	push	{r0, r1, r4, lr}
 8007d12:	4604      	mov	r4, r0
  KMS_PlatfObjects_EmbeddedRange(&MinSlot, &MaxSlot);
 8007d14:	a901      	add	r1, sp, #4
 8007d16:	4668      	mov	r0, sp
 8007d18:	f000 f93c 	bl	8007f94 <KMS_PlatfObjects_EmbeddedRange>
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007d1c:	9b01      	ldr	r3, [sp, #4]
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	d302      	bcc.n	8007d28 <KMS_Objects_GetRange+0x18>
 8007d22:	9b00      	ldr	r3, [sp, #0]
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	d92b      	bls.n	8007d80 <KMS_Objects_GetRange+0x70>
  KMS_PlatfObjects_NvmStaticRange(&MinSlot, &MaxSlot);
 8007d28:	a901      	add	r1, sp, #4
 8007d2a:	4668      	mov	r0, sp
 8007d2c:	f000 f93e 	bl	8007fac <KMS_PlatfObjects_NvmStaticRange>
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007d30:	9b01      	ldr	r3, [sp, #4]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d302      	bcc.n	8007d3c <KMS_Objects_GetRange+0x2c>
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d923      	bls.n	8007d84 <KMS_Objects_GetRange+0x74>
  KMS_PlatfObjects_NvmDynamicRange(&MinSlot, &MaxSlot);
 8007d3c:	a901      	add	r1, sp, #4
 8007d3e:	4668      	mov	r0, sp
 8007d40:	f000 f940 	bl	8007fc4 <KMS_PlatfObjects_NvmDynamicRange>
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	d302      	bcc.n	8007d50 <KMS_Objects_GetRange+0x40>
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d91b      	bls.n	8007d88 <KMS_Objects_GetRange+0x78>
  KMS_PlatfObjects_ExtTokenStaticRange(&MinSlot, &MaxSlot);
 8007d50:	a901      	add	r1, sp, #4
 8007d52:	4668      	mov	r0, sp
 8007d54:	f000 f96e 	bl	8008034 <KMS_PlatfObjects_ExtTokenStaticRange>
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007d58:	9b01      	ldr	r3, [sp, #4]
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	d302      	bcc.n	8007d64 <KMS_Objects_GetRange+0x54>
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d913      	bls.n	8007d8c <KMS_Objects_GetRange+0x7c>
  KMS_PlatfObjects_ExtTokenDynamicRange(&MinSlot, &MaxSlot);
 8007d64:	a901      	add	r1, sp, #4
 8007d66:	4668      	mov	r0, sp
 8007d68:	f000 f969 	bl	800803e <KMS_PlatfObjects_ExtTokenDynamicRange>
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	42a3      	cmp	r3, r4
 8007d70:	d30e      	bcc.n	8007d90 <KMS_Objects_GetRange+0x80>
    return (KMS_OBJECT_RANGE_EXT_TOKEN_DYNAMIC_ID);
 8007d72:	9800      	ldr	r0, [sp, #0]
 8007d74:	42a0      	cmp	r0, r4
 8007d76:	bf8c      	ite	hi
 8007d78:	2005      	movhi	r0, #5
 8007d7a:	2004      	movls	r0, #4
}
 8007d7c:	b002      	add	sp, #8
 8007d7e:	bd10      	pop	{r4, pc}
    return (KMS_OBJECT_RANGE_EMBEDDED);
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7fb      	b.n	8007d7c <KMS_Objects_GetRange+0x6c>
    return (KMS_OBJECT_RANGE_NVM_STATIC_ID);
 8007d84:	2001      	movs	r0, #1
 8007d86:	e7f9      	b.n	8007d7c <KMS_Objects_GetRange+0x6c>
    return (KMS_OBJECT_RANGE_NVM_DYNAMIC_ID);
 8007d88:	2002      	movs	r0, #2
 8007d8a:	e7f7      	b.n	8007d7c <KMS_Objects_GetRange+0x6c>
    return (KMS_OBJECT_RANGE_EXT_TOKEN_STATIC_ID);
 8007d8c:	2003      	movs	r0, #3
 8007d8e:	e7f5      	b.n	8007d7c <KMS_Objects_GetRange+0x6c>
  return KMS_OBJECT_RANGE_UNKNOWN;
 8007d90:	2005      	movs	r0, #5
 8007d92:	e7f3      	b.n	8007d7c <KMS_Objects_GetRange+0x6c>

08007d94 <KMS_CheckKeyIsNotLocked>:
}
 8007d94:	2000      	movs	r0, #0
 8007d96:	4770      	bx	lr

08007d98 <KMS_Objects_GetPointer>:
{
 8007d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9a:	4605      	mov	r5, r0
  if (KMS_CheckKeyIsNotLocked(hKey) == CKR_OK)
 8007d9c:	f7ff fffa 	bl	8007d94 <KMS_CheckKeyIsNotLocked>
 8007da0:	4604      	mov	r4, r0
 8007da2:	bb60      	cbnz	r0, 8007dfe <KMS_Objects_GetPointer+0x66>
    KMS_PlatfObjects_EmbeddedRange(&MinSlot, &MaxSlot);
 8007da4:	a901      	add	r1, sp, #4
 8007da6:	4668      	mov	r0, sp
 8007da8:	f000 f8f4 	bl	8007f94 <KMS_PlatfObjects_EmbeddedRange>
    if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007dac:	9b01      	ldr	r3, [sp, #4]
 8007dae:	42ab      	cmp	r3, r5
 8007db0:	d306      	bcc.n	8007dc0 <KMS_Objects_GetPointer+0x28>
 8007db2:	9800      	ldr	r0, [sp, #0]
 8007db4:	42a8      	cmp	r0, r5
 8007db6:	d803      	bhi.n	8007dc0 <KMS_Objects_GetPointer+0x28>
      pObject = KMS_PlatfObjects_EmbeddedObject(hKey - MinSlot);
 8007db8:	1a28      	subs	r0, r5, r0
 8007dba:	f000 f8f1 	bl	8007fa0 <KMS_PlatfObjects_EmbeddedObject>
 8007dbe:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmStaticRange(&MinSlot, &MaxSlot);
 8007dc0:	a901      	add	r1, sp, #4
 8007dc2:	4668      	mov	r0, sp
 8007dc4:	f000 f8f2 	bl	8007fac <KMS_PlatfObjects_NvmStaticRange>
    if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	42ab      	cmp	r3, r5
 8007dcc:	d306      	bcc.n	8007ddc <KMS_Objects_GetPointer+0x44>
 8007dce:	9800      	ldr	r0, [sp, #0]
 8007dd0:	42a8      	cmp	r0, r5
 8007dd2:	d803      	bhi.n	8007ddc <KMS_Objects_GetPointer+0x44>
      pObject = KMS_PlatfObjects_NvmStaticObject(hKey - MinSlot);
 8007dd4:	1a28      	subs	r0, r5, r0
 8007dd6:	f000 f8ef 	bl	8007fb8 <KMS_PlatfObjects_NvmStaticObject>
 8007dda:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmDynamicRange(&MinSlot, &MaxSlot);
 8007ddc:	a901      	add	r1, sp, #4
 8007dde:	4668      	mov	r0, sp
 8007de0:	f000 f8f0 	bl	8007fc4 <KMS_PlatfObjects_NvmDynamicRange>
    if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	42ab      	cmp	r3, r5
 8007de8:	d306      	bcc.n	8007df8 <KMS_Objects_GetPointer+0x60>
 8007dea:	9800      	ldr	r0, [sp, #0]
 8007dec:	42a8      	cmp	r0, r5
 8007dee:	d803      	bhi.n	8007df8 <KMS_Objects_GetPointer+0x60>
      pObject = KMS_PlatfObjects_NvmDynamicObject(hKey - MinSlot);
 8007df0:	1a28      	subs	r0, r5, r0
 8007df2:	f000 f8ed 	bl	8007fd0 <KMS_PlatfObjects_NvmDynamicObject>
 8007df6:	4604      	mov	r4, r0
}
 8007df8:	4620      	mov	r0, r4
 8007dfa:	b003      	add	sp, #12
 8007dfc:	bd30      	pop	{r4, r5, pc}
    return NULL;
 8007dfe:	2400      	movs	r4, #0
 8007e00:	e7fa      	b.n	8007df8 <KMS_Objects_GetPointer+0x60>

08007e02 <KMS_Objects_SearchAttributes>:
{
 8007e02:	b530      	push	{r4, r5, lr}
  kms_ref_t *pkms_blob_current = (kms_ref_t *)pkms_key_head->blobs;
 8007e04:	f101 041c 	add.w	r4, r1, #28
  for (blob_index = 0; blob_index < pkms_key_head->blobs_count; blob_index++)
 8007e08:	68cd      	ldr	r5, [r1, #12]
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	428d      	cmp	r5, r1
 8007e0e:	d101      	bne.n	8007e14 <KMS_Objects_SearchAttributes+0x12>
  return (CKR_ATTRIBUTE_TYPE_INVALID);
 8007e10:	2012      	movs	r0, #18
 8007e12:	e004      	b.n	8007e1e <KMS_Objects_SearchAttributes+0x1c>
    if (pkms_blob_current->id == searched_id)
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	4283      	cmp	r3, r0
 8007e18:	d102      	bne.n	8007e20 <KMS_Objects_SearchAttributes+0x1e>
      *pAttribute = pkms_blob_current;
 8007e1a:	6014      	str	r4, [r2, #0]
      return CKR_OK;
 8007e1c:	2000      	movs	r0, #0
}
 8007e1e:	bd30      	pop	{r4, r5, pc}
    CurrentAttributeSize = pkms_blob_current->size ;
 8007e20:	6863      	ldr	r3, [r4, #4]
    if ((CurrentAttributeSize % 4UL) != 0UL)
 8007e22:	f013 0f03 	tst.w	r3, #3
      CurrentAttributeSize += 4UL - (CurrentAttributeSize % 4UL);
 8007e26:	bf1c      	itt	ne
 8007e28:	f023 0303 	bicne.w	r3, r3, #3
 8007e2c:	3304      	addne	r3, #4
    pkms_blob = &((uint8_t *)pkms_blob_current)[4UL + 4UL + CurrentAttributeSize];
 8007e2e:	3308      	adds	r3, #8
 8007e30:	441c      	add	r4, r3
  for (blob_index = 0; blob_index < pkms_key_head->blobs_count; blob_index++)
 8007e32:	3101      	adds	r1, #1
 8007e34:	e7ea      	b.n	8007e0c <KMS_Objects_SearchAttributes+0xa>

08007e36 <KMS_Objects_TranslateKey>:
  if ((pAttribute->size % 4UL) == 0UL)   /* check that we have a multiple of 4 bytes */
 8007e36:	6843      	ldr	r3, [r0, #4]
 8007e38:	f013 0303 	ands.w	r3, r3, #3
{
 8007e3c:	b510      	push	{r4, lr}
  if ((pAttribute->size % 4UL) == 0UL)   /* check that we have a multiple of 4 bytes */
 8007e3e:	d11a      	bne.n	8007e76 <KMS_Objects_TranslateKey+0x40>
 8007e40:	f100 0208 	add.w	r2, r0, #8
    for (index_key = 0; index_key < (pAttribute->size / sizeof(uint32_t)); index_key++)
 8007e44:	6844      	ldr	r4, [r0, #4]
 8007e46:	ebb3 0f94 	cmp.w	r3, r4, lsr #2
 8007e4a:	f101 0104 	add.w	r1, r1, #4
 8007e4e:	d301      	bcc.n	8007e54 <KMS_Objects_TranslateKey+0x1e>
    return CKR_OK;
 8007e50:	2000      	movs	r0, #0
}
 8007e52:	bd10      	pop	{r4, pc}
      vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key] >> 24);
 8007e54:	78d4      	ldrb	r4, [r2, #3]
 8007e56:	f801 4c04 	strb.w	r4, [r1, #-4]
      vKeyValue[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pAttribute->data[index_key] >> 16);
 8007e5a:	8854      	ldrh	r4, [r2, #2]
 8007e5c:	f801 4c03 	strb.w	r4, [r1, #-3]
      vKeyValue[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pAttribute->data[index_key] >> 8);
 8007e60:	f852 4b04 	ldr.w	r4, [r2], #4
 8007e64:	0a24      	lsrs	r4, r4, #8
 8007e66:	f801 4c02 	strb.w	r4, [r1, #-2]
      vKeyValue[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pAttribute->data[index_key]);
 8007e6a:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007e6e:	f801 4c01 	strb.w	r4, [r1, #-1]
    for (index_key = 0; index_key < (pAttribute->size / sizeof(uint32_t)); index_key++)
 8007e72:	3301      	adds	r3, #1
 8007e74:	e7e6      	b.n	8007e44 <KMS_Objects_TranslateKey+0xe>
  return (CKR_DATA_LEN_RANGE);
 8007e76:	2021      	movs	r0, #33	; 0x21
 8007e78:	e7eb      	b.n	8007e52 <KMS_Objects_TranslateKey+0x1c>

08007e7a <KMS_Objects_TranslateRsaAttributes>:
{
 8007e7a:	b570      	push	{r4, r5, r6, lr}
 8007e7c:	f100 0508 	add.w	r5, r0, #8
 8007e80:	460c      	mov	r4, r1
  for (index_key = 0; index_key < (pAttribute->size / sizeof(uint32_t)); index_key++)
 8007e82:	2600      	movs	r6, #0
 8007e84:	6842      	ldr	r2, [r0, #4]
 8007e86:	ebb6 0f92 	cmp.w	r6, r2, lsr #2
 8007e8a:	f104 0404 	add.w	r4, r4, #4
 8007e8e:	d30a      	bcc.n	8007ea6 <KMS_Objects_TranslateRsaAttributes+0x2c>
  if (reste != 0UL)     /* check that we have a multiple of 4 bytes */
 8007e90:	f012 0203 	ands.w	r2, r2, #3
 8007e94:	d006      	beq.n	8007ea4 <KMS_Objects_TranslateRsaAttributes+0x2a>
    if (reste == 1UL)
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	d116      	bne.n	8007ec8 <KMS_Objects_TranslateRsaAttributes+0x4e>
      vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key]);
 8007e9a:	1cb3      	adds	r3, r6, #2
 8007e9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ea0:	f801 3026 	strb.w	r3, [r1, r6, lsl #2]
}
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
    vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key] >> 24);
 8007ea6:	78eb      	ldrb	r3, [r5, #3]
 8007ea8:	f804 3c04 	strb.w	r3, [r4, #-4]
    vKeyValue[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pAttribute->data[index_key] >> 16);
 8007eac:	886b      	ldrh	r3, [r5, #2]
 8007eae:	f804 3c03 	strb.w	r3, [r4, #-3]
    vKeyValue[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pAttribute->data[index_key] >> 8);
 8007eb2:	f855 2b04 	ldr.w	r2, [r5], #4
 8007eb6:	0a12      	lsrs	r2, r2, #8
 8007eb8:	f804 2c02 	strb.w	r2, [r4, #-2]
    vKeyValue[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pAttribute->data[index_key]);
 8007ebc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007ec0:	f804 3c01 	strb.w	r3, [r4, #-1]
  for (index_key = 0; index_key < (pAttribute->size / sizeof(uint32_t)); index_key++)
 8007ec4:	3601      	adds	r6, #1
 8007ec6:	e7dd      	b.n	8007e84 <KMS_Objects_TranslateRsaAttributes+0xa>
 8007ec8:	00b3      	lsls	r3, r6, #2
 8007eca:	4418      	add	r0, r3
    if (reste == 2UL)
 8007ecc:	2a02      	cmp	r2, #2
      vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key] >> 8);
 8007ece:	6882      	ldr	r2, [r0, #8]
    if (reste == 2UL)
 8007ed0:	d106      	bne.n	8007ee0 <KMS_Objects_TranslateRsaAttributes+0x66>
      vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key] >> 8);
 8007ed2:	0a12      	lsrs	r2, r2, #8
 8007ed4:	f801 2026 	strb.w	r2, [r1, r6, lsl #2]
      vKeyValue[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pAttribute->data[index_key]);
 8007ed8:	4419      	add	r1, r3
 8007eda:	6883      	ldr	r3, [r0, #8]
 8007edc:	704b      	strb	r3, [r1, #1]
 8007ede:	e7e1      	b.n	8007ea4 <KMS_Objects_TranslateRsaAttributes+0x2a>
      vKeyValue[(index_key * sizeof(uint32_t))]   = (uint8_t)(pAttribute->data[index_key]);
 8007ee0:	f801 2026 	strb.w	r2, [r1, r6, lsl #2]
      vKeyValue[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pAttribute->data[index_key] >> 8);
 8007ee4:	4419      	add	r1, r3
 8007ee6:	6883      	ldr	r3, [r0, #8]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	704b      	strb	r3, [r1, #1]
      vKeyValue[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pAttribute->data[index_key] >> 16);
 8007eec:	8943      	ldrh	r3, [r0, #10]
 8007eee:	708b      	strb	r3, [r1, #2]
}
 8007ef0:	e7d8      	b.n	8007ea4 <KMS_Objects_TranslateRsaAttributes+0x2a>
	...

08007ef4 <KMS_Objects_ImportBlob>:
{
 8007ef4:	b570      	push	{r4, r5, r6, lr}
    if (KMS_GETSESSSION(session_index).state != KMS_SESSION_NOT_USED)
 8007ef6:	4a23      	ldr	r2, [pc, #140]	; (8007f84 <KMS_Objects_ImportBlob+0x90>)
{
 8007ef8:	b086      	sub	sp, #24
 8007efa:	4604      	mov	r4, r0
 8007efc:	460e      	mov	r6, r1
 8007efe:	2300      	movs	r3, #0
    if (KMS_GETSESSSION(session_index).state != KMS_SESSION_NOT_USED)
 8007f00:	1899      	adds	r1, r3, r2
 8007f02:	6849      	ldr	r1, [r1, #4]
 8007f04:	3101      	adds	r1, #1
 8007f06:	d13b      	bne.n	8007f80 <KMS_Objects_ImportBlob+0x8c>
 8007f08:	3328      	adds	r3, #40	; 0x28
  } while (session_index <= KMS_NB_SESSIONS_MAX); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 8007f0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007f0e:	d1f7      	bne.n	8007f00 <KMS_Objects_ImportBlob+0xc>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session) != CKR_OK)
 8007f10:	ab02      	add	r3, sp, #8
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	461a      	mov	r2, r3
 8007f18:	2104      	movs	r1, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fe90 	bl	8006c40 <KMS_OpenSession>
 8007f20:	4605      	mov	r5, r0
 8007f22:	b980      	cbnz	r0, 8007f46 <KMS_Objects_ImportBlob+0x52>
  ObjectIdIndex = KMS_PlatfObjects_GetBlobVerifyKey();
 8007f24:	f000 f8d2 	bl	80080cc <KMS_PlatfObjects_GetBlobVerifyKey>
  smech.mechanism = CKM_ECDSA_SHA256;
 8007f28:	a906      	add	r1, sp, #24
 8007f2a:	f241 0344 	movw	r3, #4164	; 0x1044
  if (KMS_VerifyInit(session, &smech, ObjectIdIndex) != CKR_OK)
 8007f2e:	4602      	mov	r2, r0
  smech.mechanism = CKM_ECDSA_SHA256;
 8007f30:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (KMS_VerifyInit(session, &smech, ObjectIdIndex) != CKR_OK)
 8007f34:	9802      	ldr	r0, [sp, #8]
  smech.ulParameterLen = 0;
 8007f36:	e9cd 5504 	strd	r5, r5, [sp, #16]
  if (KMS_VerifyInit(session, &smech, ObjectIdIndex) != CKR_OK)
 8007f3a:	f000 f9bd 	bl	80082b8 <KMS_VerifyInit>
 8007f3e:	b138      	cbz	r0, 8007f50 <KMS_Objects_ImportBlob+0x5c>
    (void)KMS_CloseSession(session);
 8007f40:	9802      	ldr	r0, [sp, #8]
 8007f42:	f7fe fee9 	bl	8006d18 <KMS_CloseSession>
 8007f46:	4810      	ldr	r0, [pc, #64]	; (8007f88 <KMS_Objects_ImportBlob+0x94>)
  *pImportBlobState = e_ret_status;
 8007f48:	6030      	str	r0, [r6, #0]
}
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	b006      	add	sp, #24
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
  if (KMS_Verify(session,
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2280      	movs	r2, #128	; 0x80
 8007f56:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	9802      	ldr	r0, [sp, #8]
 8007f5e:	f000 f9e5 	bl	800832c <KMS_Verify>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1ec      	bne.n	8007f40 <KMS_Objects_ImportBlob+0x4c>
  (void)KMS_CloseSession(session);
 8007f66:	9802      	ldr	r0, [sp, #8]
 8007f68:	f7fe fed6 	bl	8006d18 <KMS_CloseSession>
    e_ret_status = authenticate_blob((KMS_BlobRawHeaderTypeDef *)pData);
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7ff fd05 	bl	800797c <authenticate_blob>
  if (e_ret_status == KMS_IMPORT_BLOB_NO_ERROR)
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <KMS_Objects_ImportBlob+0x98>)
 8007f74:	4298      	cmp	r0, r3
 8007f76:	d1e7      	bne.n	8007f48 <KMS_Objects_ImportBlob+0x54>
    e_ret_status = install_blob((KMS_BlobRawHeaderTypeDef *)pData);
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7ff fdb5 	bl	8007ae8 <install_blob>
 8007f7e:	e7e3      	b.n	8007f48 <KMS_Objects_ImportBlob+0x54>
  kms_import_blob_state_t e_ret_status = KMS_IMPORT_BLOB_SESSION_INUSE;
 8007f80:	4803      	ldr	r0, [pc, #12]	; (8007f90 <KMS_Objects_ImportBlob+0x9c>)
 8007f82:	e7e1      	b.n	8007f48 <KMS_Objects_ImportBlob+0x54>
 8007f84:	20007874 	.word	0x20007874
 8007f88:	80000001 	.word	0x80000001
 8007f8c:	80000008 	.word	0x80000008
 8007f90:	80000007 	.word	0x80000007

08007f94 <KMS_PlatfObjects_EmbeddedRange>:
  * @param  pMax Embedded objects max ID
  */
void             KMS_PlatfObjects_EmbeddedRange(uint32_t *pMin, uint32_t *pMax)
{

  *pMin = KMS_INDEX_MIN_EMBEDDED_OBJECTS;
 8007f94:	2301      	movs	r3, #1
 8007f96:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_EMBEDDED_OBJECTS;
 8007f98:	231d      	movs	r3, #29
 8007f9a:	600b      	str	r3, [r1, #0]

  return ;
}
 8007f9c:	4770      	bx	lr
	...

08007fa0 <KMS_PlatfObjects_EmbeddedObject>:
  * @retval corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_EmbeddedObject(uint32_t hKey)
{
  return (kms_obj_keyhead_t *)(uint32_t)KMS_PlatfObjects_EmbeddedList[hKey];
}
 8007fa0:	4b01      	ldr	r3, [pc, #4]	; (8007fa8 <KMS_PlatfObjects_EmbeddedObject+0x8>)
 8007fa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007fa6:	4770      	bx	lr
 8007fa8:	08017a00 	.word	0x08017a00

08007fac <KMS_PlatfObjects_NvmStaticRange>:
  * @param  pMax NVM static objects max ID
  */
void             KMS_PlatfObjects_NvmStaticRange(uint32_t *pMin, uint32_t *pMax)
{

  *pMin = KMS_INDEX_MIN_NVM_STATIC_OBJECTS;
 8007fac:	231e      	movs	r3, #30
 8007fae:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_STATIC_OBJECTS;
 8007fb0:	2331      	movs	r3, #49	; 0x31
 8007fb2:	600b      	str	r3, [r1, #0]

  return ;
}
 8007fb4:	4770      	bx	lr
	...

08007fb8 <KMS_PlatfObjects_NvmStaticObject>:
  * @retval corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_NvmStaticObject(uint32_t hKey)
{
  return KMS_PlatfObjects_NvmStaticList[hKey];
}
 8007fb8:	4b01      	ldr	r3, [pc, #4]	; (8007fc0 <KMS_PlatfObjects_NvmStaticObject+0x8>)
 8007fba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007fbe:	4770      	bx	lr
 8007fc0:	200051a4 	.word	0x200051a4

08007fc4 <KMS_PlatfObjects_NvmDynamicRange>:
  * @param  pMax NVM dynamic objects max ID
  */
void             KMS_PlatfObjects_NvmDynamicRange(uint32_t *pMin, uint32_t *pMax)
{

  *pMin = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8007fc4:	2332      	movs	r3, #50	; 0x32
 8007fc6:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS;
 8007fc8:	2345      	movs	r3, #69	; 0x45
 8007fca:	600b      	str	r3, [r1, #0]

  return ;
}
 8007fcc:	4770      	bx	lr
	...

08007fd0 <KMS_PlatfObjects_NvmDynamicObject>:
  * @param  hKey key handle
  * @retval corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_NvmDynamicObject(uint32_t hKey)
{
  return KMS_PlatfObjects_NvmDynamicList[hKey];
 8007fd0:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <KMS_PlatfObjects_NvmDynamicObject+0xc>)
 8007fd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8007fd6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	200051a4 	.word	0x200051a4

08007fe0 <KMS_PlatfObjects_AllocateNvmDynamicObjectId>:
  CK_OBJECT_HANDLE Index;

  /* Find a Free place in nvm dynamic table */
  for (Index = 0; Index < (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
  {
    if (KMS_PlatfObjects_NvmDynamicList[Index] == NULL)
 8007fe0:	4906      	ldr	r1, [pc, #24]	; (8007ffc <KMS_PlatfObjects_AllocateNvmDynamicObjectId+0x1c>)
  for (Index = 0; Index < (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
 8007fe2:	2300      	movs	r3, #0
    if (KMS_PlatfObjects_NvmDynamicList[Index] == NULL)
 8007fe4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007fe8:	b91a      	cbnz	r2, 8007ff2 <KMS_PlatfObjects_AllocateNvmDynamicObjectId+0x12>
    {
      *pObjId = Index + KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8007fea:	3332      	adds	r3, #50	; 0x32
 8007fec:	6003      	str	r3, [r0, #0]
      return (CKR_OK);
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4770      	bx	lr
  for (Index = 0; Index < (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	2b13      	cmp	r3, #19
 8007ff6:	d1f5      	bne.n	8007fe4 <KMS_PlatfObjects_AllocateNvmDynamicObjectId+0x4>
    }
  }

  /* No place found in Dynamicl List */
  return CKR_DEVICE_MEMORY;
 8007ff8:	2031      	movs	r0, #49	; 0x31
}
 8007ffa:	4770      	bx	lr
 8007ffc:	200051f0 	.word	0x200051f0

08008000 <KMS_PlatfObjects_NvmDynamicObjectList>:

/**
  * @brief  Update @ref KMS_PlatfObjects_NvmDynamicList with NVM contents
  */
void KMS_PlatfObjects_NvmDynamicObjectList(void)
{
 8008000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008002:	4d0b      	ldr	r5, [pc, #44]	; (8008030 <KMS_PlatfObjects_NvmDynamicObjectList+0x30>)
  size_t nvms_DataSize;
  kms_obj_keyhead_t *nvms_pData;

  /* Load the KMS_PlatfObjects_NvmDynamicList[], used to store buffer to NVM. */
  /* This should save processiong time. */
  for (i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i < KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
 8008004:	2432      	movs	r4, #50	; 0x32
  {
    /* Read values from NVM */
    nvms_rv = NVMS_GetData(i, &nvms_DataSize, (uint8_t **)&nvms_pData);
 8008006:	ab01      	add	r3, sp, #4
 8008008:	2200      	movs	r2, #0
 800800a:	4669      	mov	r1, sp
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff fc7f 	bl	8007910 <NVMS_GetDataWithType>

    if ((nvms_DataSize != 0UL) && (nvms_rv == NVMS_NOERROR))
 8008012:	9a00      	ldr	r2, [sp, #0]
 8008014:	00a3      	lsls	r3, r4, #2
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = nvms_pData;
 8008016:	442b      	add	r3, r5
    if ((nvms_DataSize != 0UL) && (nvms_rv == NVMS_NOERROR))
 8008018:	b142      	cbz	r2, 800802c <KMS_PlatfObjects_NvmDynamicObjectList+0x2c>
 800801a:	b938      	cbnz	r0, 800802c <KMS_PlatfObjects_NvmDynamicObjectList+0x2c>
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = nvms_pData;
 800801c:	9a01      	ldr	r2, [sp, #4]
    }
    else
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = NULL;
 800801e:	f843 2cc8 	str.w	r2, [r3, #-200]
  for (i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i < KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
 8008022:	3401      	adds	r4, #1
 8008024:	2c45      	cmp	r4, #69	; 0x45
 8008026:	d1ee      	bne.n	8008006 <KMS_PlatfObjects_NvmDynamicObjectList+0x6>
    }

  }
}
 8008028:	b003      	add	sp, #12
 800802a:	bd30      	pop	{r4, r5, pc}
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = NULL;
 800802c:	2200      	movs	r2, #0
 800802e:	e7f6      	b.n	800801e <KMS_PlatfObjects_NvmDynamicObjectList+0x1e>
 8008030:	200051f0 	.word	0x200051f0

08008034 <KMS_PlatfObjects_ExtTokenStaticRange>:
  * @param  pMax External token static objects max ID
  */
void             KMS_PlatfObjects_ExtTokenStaticRange(uint32_t *pMin, uint32_t *pMax)
{

  *pMin = KMS_INDEX_MIN_EXT_TOKEN_STATIC_OBJECTS;
 8008034:	2346      	movs	r3, #70	; 0x46
 8008036:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_EXT_TOKEN_STATIC_OBJECTS;
 8008038:	2359      	movs	r3, #89	; 0x59
 800803a:	600b      	str	r3, [r1, #0]

  return ;
}
 800803c:	4770      	bx	lr

0800803e <KMS_PlatfObjects_ExtTokenDynamicRange>:
  * @param  pMax External token dynamic objects max ID
  */
void             KMS_PlatfObjects_ExtTokenDynamicRange(uint32_t *pMin, uint32_t *pMax)
{

  *pMin = KMS_INDEX_MIN_EXT_TOKEN_DYNAMIC_OBJECTS;
 800803e:	235a      	movs	r3, #90	; 0x5a
 8008040:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_EXT_TOKEN_DYNAMIC_OBJECTS;
 8008042:	236e      	movs	r3, #110	; 0x6e
 8008044:	600b      	str	r3, [r1, #0]

  return ;
}
 8008046:	4770      	bx	lr

08008048 <KMS_PlatfObjects_Finalize>:
  * @brief  De-Initialize platform objects
  */
void   KMS_PlatfObjects_Finalize(void)
{

}
 8008048:	4770      	bx	lr
	...

0800804c <KMS_PlatfObjects_NvmInitialize>:

/**
  * @brief  Initialize the NVM storage
  */
void   KMS_PlatfObjects_NvmInitialize(void)
{
 800804c:	b510      	push	{r4, lr}
#ifdef KMS_NVM_ENABLED
  /* The NVMS_Init should be done only once */
  if (kms_platf_nvm_initialisation_done == 0UL)
 800804e:	4c05      	ldr	r4, [pc, #20]	; (8008064 <KMS_PlatfObjects_NvmInitialize+0x18>)
 8008050:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008054:	b923      	cbnz	r3, 8008060 <KMS_PlatfObjects_NvmInitialize+0x14>
  {
    /* Initialize the NVMS */
    (void)NVMS_Init();
 8008056:	f7ff faab 	bl	80075b0 <NVMS_Init>
    kms_platf_nvm_initialisation_done = 1UL;
 800805a:	2301      	movs	r3, #1
 800805c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  }
#endif /* KMS_NVM_ENABLED */
}
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	200051a4 	.word	0x200051a4

08008068 <KMS_PlatfObjects_Init>:
{
 8008068:	b537      	push	{r0, r1, r2, r4, r5, lr}
  KMS_PlatfObjects_NvmInitialize();
 800806a:	f7ff ffef 	bl	800804c <KMS_PlatfObjects_NvmInitialize>
 800806e:	4d0c      	ldr	r5, [pc, #48]	; (80080a0 <KMS_PlatfObjects_Init+0x38>)
 8008070:	2400      	movs	r4, #0
    nvms_rv = NVMS_GetData(i, &nvms_DataSize, (uint8_t **)&nvms_pData);
 8008072:	ab01      	add	r3, sp, #4
 8008074:	2200      	movs	r2, #0
 8008076:	4669      	mov	r1, sp
 8008078:	f104 001e 	add.w	r0, r4, #30
 800807c:	f7ff fc48 	bl	8007910 <NVMS_GetDataWithType>
    if ((nvms_DataSize != 0UL) && (nvms_rv == NVMS_NOERROR))
 8008080:	9a00      	ldr	r2, [sp, #0]
 8008082:	00a3      	lsls	r3, r4, #2
 8008084:	b14a      	cbz	r2, 800809a <KMS_PlatfObjects_Init+0x32>
 8008086:	b940      	cbnz	r0, 800809a <KMS_PlatfObjects_Init+0x32>
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = nvms_pData;
 8008088:	9a01      	ldr	r2, [sp, #4]
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
 800808a:	50ea      	str	r2, [r5, r3]
 800808c:	3401      	adds	r4, #1
  for (i = KMS_INDEX_MIN_NVM_STATIC_OBJECTS; i < KMS_INDEX_MAX_NVM_STATIC_OBJECTS; i++)
 800808e:	2c13      	cmp	r4, #19
 8008090:	d1ef      	bne.n	8008072 <KMS_PlatfObjects_Init+0xa>
  KMS_PlatfObjects_NvmDynamicObjectList();
 8008092:	f7ff ffb5 	bl	8008000 <KMS_PlatfObjects_NvmDynamicObjectList>
}
 8008096:	b003      	add	sp, #12
 8008098:	bd30      	pop	{r4, r5, pc}
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
 800809a:	2200      	movs	r2, #0
 800809c:	e7f5      	b.n	800808a <KMS_PlatfObjects_Init+0x22>
 800809e:	bf00      	nop
 80080a0:	200051a4 	.word	0x200051a4

080080a4 <KMS_PlatfObjects_NvmStoreObject>:
  * @param  pObjectToAdd Object to add
  * @param  ObjectSize Object size
  * @retval See @ref nvms_error_t
  */
nvms_error_t   KMS_PlatfObjects_NvmStoreObject(uint32_t ObjectId, uint8_t *pObjectToAdd,  uint32_t ObjectSize)
{
 80080a4:	460b      	mov	r3, r1
 80080a6:	4611      	mov	r1, r2
  nvms_error_t  rv;

#ifdef KMS_NVM_ENABLED

  /* It's a NVM STATIC object */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_STATIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS))
 80080a8:	f1a0 021e 	sub.w	r2, r0, #30
 80080ac:	2a27      	cmp	r2, #39	; 0x27
 80080ae:	d803      	bhi.n	80080b8 <KMS_PlatfObjects_NvmStoreObject+0x14>
  {
    rv = NVMS_WriteData(ObjectId, ObjectSize, (const uint8_t *)pObjectToAdd);
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	f7ff bb84 	b.w	80077c0 <NVMS_WriteDataWithType>
  }
#else /* KMS_NVM_ENABLED */
  rv = NVMS_NOTINIT;
#endif /* KMS_NVM_ENABLED */
  return (rv);
}
 80080b8:	2004      	movs	r0, #4
 80080ba:	4770      	bx	lr

080080bc <KMS_PlatfObjects_NvmRemoveObject>:
nvms_error_t   KMS_PlatfObjects_NvmRemoveObject(uint32_t ObjectId)
{
  nvms_error_t rv = NVMS_DATA_NOT_FOUND;

  /* Check that the ObjectID is in dynamic range */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 80080bc:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
 80080c0:	2b13      	cmp	r3, #19
 80080c2:	d801      	bhi.n	80080c8 <KMS_PlatfObjects_NvmRemoveObject+0xc>
  {

    rv = NVMS_EraseData(ObjectId);
 80080c4:	f7ff bbd4 	b.w	8007870 <NVMS_EraseData>


  }
  return (rv);

}
 80080c8:	2005      	movs	r0, #5
 80080ca:	4770      	bx	lr

080080cc <KMS_PlatfObjects_GetBlobVerifyKey>:
  * @retval Key handle
  */
CK_ULONG        KMS_PlatfObjects_GetBlobVerifyKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_VERIFY;
}
 80080cc:	2001      	movs	r0, #1
 80080ce:	4770      	bx	lr

080080d0 <KMS_PlatfObjects_GetBlobDecryptKey>:
  * @retval Key handle
  */
CK_ULONG        KMS_PlatfObjects_GetBlobDecryptKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_DECRYPT;
}
 80080d0:	2002      	movs	r0, #2
 80080d2:	4770      	bx	lr

080080d4 <KMS_SignInit>:
                       CK_MECHANISM_PTR  pMechanism,
                       CK_OBJECT_HANDLE  hKey)
{
  /* Check that we support the expected mechanism. */
#ifdef KMS_RSA
  if ((pMechanism->mechanism == CKM_RSA_PKCS) ||
 80080d4:	680b      	ldr	r3, [r1, #0]
 80080d6:	2b01      	cmp	r3, #1
{
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	460e      	mov	r6, r1
 80080de:	4615      	mov	r5, r2
  if ((pMechanism->mechanism == CKM_RSA_PKCS) ||
 80080e0:	d003      	beq.n	80080ea <KMS_SignInit+0x16>
 80080e2:	2b06      	cmp	r3, #6
 80080e4:	d001      	beq.n	80080ea <KMS_SignInit+0x16>
      (pMechanism->mechanism == CKM_SHA1_RSA_PKCS) ||
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d111      	bne.n	800810e <KMS_SignInit+0x3a>
      (pMechanism->mechanism == CKM_SHA256_RSA_PKCS))
  {

    /* Check session handle */
    if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7fe fe32 	bl	8006d54 <KMS_Check_Session_Handle>
 80080f0:	b108      	cbz	r0, 80080f6 <KMS_SignInit+0x22>
    {
      return CKR_SESSION_HANDLE_INVALID;
 80080f2:	20b3      	movs	r0, #179	; 0xb3
    }
  }
#endif /* KMS_ECDSA */

  return CKR_OK;
}
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 80080f6:	4a14      	ldr	r2, [pc, #80]	; (8008148 <KMS_SignInit+0x74>)
 80080f8:	1e63      	subs	r3, r4, #1
 80080fa:	2128      	movs	r1, #40	; 0x28
 80080fc:	fb01 2303 	mla	r3, r1, r3, r2
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	b10a      	cbz	r2, 8008108 <KMS_SignInit+0x34>
      return CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 8008104:	20b4      	movs	r0, #180	; 0xb4
 8008106:	e7f5      	b.n	80080f4 <KMS_SignInit+0x20>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 8008108:	6832      	ldr	r2, [r6, #0]
      KMS_GETSESSSION(hSession).hKey = hKey;
 800810a:	61dd      	str	r5, [r3, #28]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800810c:	619a      	str	r2, [r3, #24]
  if ((pMechanism->mechanism == CKM_ECDSA_SHA1) ||
 800810e:	6833      	ldr	r3, [r6, #0]
 8008110:	f241 0242 	movw	r2, #4162	; 0x1042
 8008114:	4293      	cmp	r3, r2
 8008116:	d003      	beq.n	8008120 <KMS_SignInit+0x4c>
 8008118:	f241 0244 	movw	r2, #4164	; 0x1044
 800811c:	4293      	cmp	r3, r2
 800811e:	d110      	bne.n	8008142 <KMS_SignInit+0x6e>
    if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 8008120:	4620      	mov	r0, r4
 8008122:	f7fe fe17 	bl	8006d54 <KMS_Check_Session_Handle>
 8008126:	2800      	cmp	r0, #0
 8008128:	d1e3      	bne.n	80080f2 <KMS_SignInit+0x1e>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <KMS_SignInit+0x74>)
 800812c:	3c01      	subs	r4, #1
 800812e:	2228      	movs	r2, #40	; 0x28
 8008130:	fb02 3404 	mla	r4, r2, r4, r3
 8008134:	69e3      	ldr	r3, [r4, #28]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e4      	bne.n	8008104 <KMS_SignInit+0x30>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800813a:	6833      	ldr	r3, [r6, #0]
      KMS_GETSESSSION(hSession).hKey = hKey;
 800813c:	61e5      	str	r5, [r4, #28]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800813e:	61a3      	str	r3, [r4, #24]
 8008140:	e7d8      	b.n	80080f4 <KMS_SignInit+0x20>
  return CKR_OK;
 8008142:	2000      	movs	r0, #0
 8008144:	e7d6      	b.n	80080f4 <KMS_SignInit+0x20>
 8008146:	bf00      	nop
 8008148:	20007874 	.word	0x20007874

0800814c <KMS_Sign>:
CK_RV     KMS_Sign(CK_SESSION_HANDLE hSession,         /* the session's handle */
                   CK_BYTE_PTR       pData,           /* the data to sign */
                   CK_ULONG          ulDataLen,       /* count of bytes to sign */
                   CK_BYTE_PTR       pSignature,      /* gets the signature */
                   CK_ULONG_PTR      pulSignatureLen)  /* gets signature length */
{
 800814c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008150:	b0b5      	sub	sp, #212	; 0xd4
 8008152:	4604      	mov	r4, r0
 8008154:	461f      	mov	r7, r3
 8008156:	4688      	mov	r8, r1
 8008158:	4691      	mov	r9, r2
  /* structure that will contain the preallocated buffer */
  membuf_stt mb_st;
  kms_ref_t *P_pKeyPrivExponentAttribute, *P_pKeyModulusAttribute;

  /* Check that we are not pointing to a session not allowed */
  if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 800815a:	f7fe fdfb 	bl	8006d54 <KMS_Check_Session_Handle>
 800815e:	3c01      	subs	r4, #1
 8008160:	4d51      	ldr	r5, [pc, #324]	; (80082a8 <KMS_Sign+0x15c>)
 8008162:	2328      	movs	r3, #40	; 0x28
 8008164:	b138      	cbz	r0, 8008176 <KMS_Sign+0x2a>
  {
    /* A C_Sign operation consider a Single part operation. As the C_SignFinal */
    /*  will not be called, we can consider that the key usage is finished. */
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008166:	fb03 5404 	mla	r4, r3, r4, r5
 800816a:	2300      	movs	r3, #0
 800816c:	61e3      	str	r3, [r4, #28]

    return CKR_SESSION_HANDLE_INVALID;
 800816e:	20b3      	movs	r0, #179	; 0xb3
#else /* KMS_RSA */
  e_ret_status = CKR_FUNCTION_FAILED;
#endif /* KMS_RSA */

  return e_ret_status;
}
 8008170:	b035      	add	sp, #212	; 0xd4
 8008172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (KMS_GETSESSSION(hSession).Mechanism)
 8008176:	fb03 5304 	mla	r3, r3, r4, r5
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	2b40      	cmp	r3, #64	; 0x40
 800817e:	d029      	beq.n	80081d4 <KMS_Sign+0x88>
 8008180:	d820      	bhi.n	80081c4 <KMS_Sign+0x78>
 8008182:	2b01      	cmp	r3, #1
 8008184:	d03c      	beq.n	8008200 <KMS_Sign+0xb4>
 8008186:	2b06      	cmp	r3, #6
 8008188:	d115      	bne.n	80081b6 <KMS_Sign+0x6a>
      HASH_ctxt_st.mFlags = E_HASH_DEFAULT;
 800818a:	2300      	movs	r3, #0
 800818c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      cryptolib_status = SHA1_Init(&HASH_ctxt_st);
 8008190:	a817      	add	r0, sp, #92	; 0x5c
      HASH_ctxt_st.mTagSize = CRL_SHA1_SIZE;
 8008192:	2314      	movs	r3, #20
 8008194:	9319      	str	r3, [sp, #100]	; 0x64
      cryptolib_status = SHA1_Init(&HASH_ctxt_st);
 8008196:	f7fc fbd9 	bl	800494c <SHA1_Init>
      if (cryptolib_status == HASH_SUCCESS)
 800819a:	b950      	cbnz	r0, 80081b2 <KMS_Sign+0x66>
        cryptolib_status = SHA1_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen);
 800819c:	464a      	mov	r2, r9
 800819e:	4641      	mov	r1, r8
 80081a0:	a817      	add	r0, sp, #92	; 0x5c
 80081a2:	f7fc fbf1 	bl	8004988 <SHA1_Append>
        if (cryptolib_status == HASH_SUCCESS)
 80081a6:	b920      	cbnz	r0, 80081b2 <KMS_Sign+0x66>
          cryptolib_status = SHA1_Finish(&HASH_ctxt_st, Digest, &outputSize);
 80081a8:	aa02      	add	r2, sp, #8
 80081aa:	a907      	add	r1, sp, #28
 80081ac:	a817      	add	r0, sp, #92	; 0x5c
 80081ae:	f7fc fbfb 	bl	80049a8 <SHA1_Finish>
      selected_hash = E_SHA1;
 80081b2:	2601      	movs	r6, #1
  if (cryptolib_status != HASH_SUCCESS)
 80081b4:	b328      	cbz	r0, 8008202 <KMS_Sign+0xb6>
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80081b6:	2328      	movs	r3, #40	; 0x28
 80081b8:	fb03 5404 	mla	r4, r3, r4, r5
 80081bc:	2300      	movs	r3, #0
 80081be:	61e3      	str	r3, [r4, #28]
    e_ret_status = CKR_FUNCTION_FAILED;
 80081c0:	2006      	movs	r0, #6
 80081c2:	e7d5      	b.n	8008170 <KMS_Sign+0x24>
  switch (KMS_GETSESSSION(hSession).Mechanism)
 80081c4:	f241 0242 	movw	r2, #4162	; 0x1042
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d0de      	beq.n	800818a <KMS_Sign+0x3e>
 80081cc:	f241 0244 	movw	r2, #4164	; 0x1044
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d1f0      	bne.n	80081b6 <KMS_Sign+0x6a>
      HASH_ctxt_st.mFlags = E_HASH_DEFAULT;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      cryptolib_status = SHA256_Init(&HASH_ctxt_st);
 80081da:	a817      	add	r0, sp, #92	; 0x5c
      HASH_ctxt_st.mTagSize = CRL_SHA256_SIZE;
 80081dc:	2320      	movs	r3, #32
 80081de:	9319      	str	r3, [sp, #100]	; 0x64
      cryptolib_status = SHA256_Init(&HASH_ctxt_st);
 80081e0:	f7fc fc30 	bl	8004a44 <SHA256_Init>
      if (cryptolib_status == HASH_SUCCESS)
 80081e4:	b950      	cbnz	r0, 80081fc <KMS_Sign+0xb0>
        cryptolib_status = SHA256_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen);
 80081e6:	464a      	mov	r2, r9
 80081e8:	4641      	mov	r1, r8
 80081ea:	a817      	add	r0, sp, #92	; 0x5c
 80081ec:	f7fc fc48 	bl	8004a80 <SHA256_Append>
        if (cryptolib_status == HASH_SUCCESS)
 80081f0:	b920      	cbnz	r0, 80081fc <KMS_Sign+0xb0>
          cryptolib_status = SHA256_Finish(&HASH_ctxt_st, Digest, &outputSize);
 80081f2:	aa02      	add	r2, sp, #8
 80081f4:	a907      	add	r1, sp, #28
 80081f6:	a817      	add	r0, sp, #92	; 0x5c
 80081f8:	f7fc fc52 	bl	8004aa0 <SHA256_Finish>
      selected_hash = E_SHA256;
 80081fc:	2603      	movs	r6, #3
 80081fe:	e7d9      	b.n	80081b4 <KMS_Sign+0x68>
  hashType_et selected_hash = E_MD5;          /* Initialization at the first value of enum to avoid warnings */   
 8008200:	4606      	mov	r6, r0
  pkms_object = KMS_Objects_GetPointer(KMS_GETSESSSION(hSession).hKey);
 8008202:	2328      	movs	r3, #40	; 0x28
 8008204:	fb03 5504 	mla	r5, r3, r4, r5
 8008208:	69e8      	ldr	r0, [r5, #28]
 800820a:	f7ff fdc5 	bl	8007d98 <KMS_Objects_GetPointer>
  if (pkms_object != NULL)
 800820e:	4604      	mov	r4, r0
 8008210:	2800      	cmp	r0, #0
 8008212:	d0ad      	beq.n	8008170 <KMS_Sign+0x24>
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008214:	2300      	movs	r3, #0
    e_ret_status = KMS_Objects_SearchAttributes(CKA_PRIVATE_EXPONENT, pkms_object, &P_pKeyPrivExponentAttribute);
 8008216:	4601      	mov	r1, r0
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008218:	61eb      	str	r3, [r5, #28]
    e_ret_status = KMS_Objects_SearchAttributes(CKA_PRIVATE_EXPONENT, pkms_object, &P_pKeyPrivExponentAttribute);
 800821a:	aa03      	add	r2, sp, #12
 800821c:	f240 1023 	movw	r0, #291	; 0x123
 8008220:	f7ff fdef 	bl	8007e02 <KMS_Objects_SearchAttributes>
    if ((e_ret_status == CKR_OK) &&
 8008224:	b108      	cbz	r0, 800822a <KMS_Sign+0xde>
      return CKR_MECHANISM_PARAM_INVALID;
 8008226:	2071      	movs	r0, #113	; 0x71
 8008228:	e7a2      	b.n	8008170 <KMS_Sign+0x24>
    if ((e_ret_status == CKR_OK) &&
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	4b1f      	ldr	r3, [pc, #124]	; (80082ac <KMS_Sign+0x160>)
 800822e:	429a      	cmp	r2, r3
 8008230:	d1f9      	bne.n	8008226 <KMS_Sign+0xda>
        (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	f46f 710f 	mvn.w	r1, #572	; 0x23c
 8008238:	440b      	add	r3, r1
 800823a:	429a      	cmp	r2, r3
 800823c:	d1f3      	bne.n	8008226 <KMS_Sign+0xda>
      PrivKey_st.mExponentSize = (int32_t)P_pKeyPrivExponentAttribute->size;
 800823e:	9803      	ldr	r0, [sp, #12]
 8008240:	6843      	ldr	r3, [r0, #4]
 8008242:	931a      	str	r3, [sp, #104]	; 0x68
      if (P_pKeyPrivExponentAttribute->size > KMS_PRIV_EXP_MAX_SIZE)
 8008244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008248:	d901      	bls.n	800824e <KMS_Sign+0x102>
        return CKR_KEY_SIZE_RANGE;
 800824a:	2062      	movs	r0, #98	; 0x62
 800824c:	e790      	b.n	8008170 <KMS_Sign+0x24>
      KMS_Objects_TranslateRsaAttributes(P_pKeyPrivExponentAttribute, mb_exponent);
 800824e:	4d18      	ldr	r5, [pc, #96]	; (80082b0 <KMS_Sign+0x164>)
 8008250:	4629      	mov	r1, r5
 8008252:	f7ff fe12 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
      e_ret_status = KMS_Objects_SearchAttributes(CKA_MODULUS, pkms_object, &P_pKeyModulusAttribute);
 8008256:	aa04      	add	r2, sp, #16
 8008258:	4621      	mov	r1, r4
 800825a:	f44f 7090 	mov.w	r0, #288	; 0x120
      PrivKey_st.pmExponent = (uint8_t *)mb_exponent;
 800825e:	9519      	str	r5, [sp, #100]	; 0x64
      e_ret_status = KMS_Objects_SearchAttributes(CKA_MODULUS, pkms_object, &P_pKeyModulusAttribute);
 8008260:	f7ff fdcf 	bl	8007e02 <KMS_Objects_SearchAttributes>
      if (e_ret_status == CKR_OK)
 8008264:	2800      	cmp	r0, #0
 8008266:	d1de      	bne.n	8008226 <KMS_Sign+0xda>
        if (P_pKeyModulusAttribute->size > KMS_MODULUS_MAX_SIZE)
 8008268:	9804      	ldr	r0, [sp, #16]
 800826a:	6843      	ldr	r3, [r0, #4]
 800826c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008270:	d8eb      	bhi.n	800824a <KMS_Sign+0xfe>
        KMS_Objects_TranslateRsaAttributes(P_pKeyModulusAttribute, mb_modulus);
 8008272:	f505 7582 	add.w	r5, r5, #260	; 0x104
 8008276:	4629      	mov	r1, r5
        PrivKey_st.mModulusSize = (int32_t)P_pKeyModulusAttribute->size;
 8008278:	9318      	str	r3, [sp, #96]	; 0x60
        KMS_Objects_TranslateRsaAttributes(P_pKeyModulusAttribute, mb_modulus);
 800827a:	f7ff fdfe 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
        mb_st.mSize = (int32_t)sizeof(preallocated_buffer);
 800827e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008282:	9306      	str	r3, [sp, #24]
        mb_st.pmBuf = preallocated_buffer;
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <KMS_Sign+0x168>)
 8008286:	9305      	str	r3, [sp, #20]
        cryptolib_status = RSA_PKCS1v15_Sign(&PrivKey_st, Digest, selected_hash, pSignature, &mb_st);
 8008288:	ab05      	add	r3, sp, #20
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	a907      	add	r1, sp, #28
 8008292:	a817      	add	r0, sp, #92	; 0x5c
        PrivKey_st.pmModulus = (uint8_t *)mb_modulus;
 8008294:	9517      	str	r5, [sp, #92]	; 0x5c
        cryptolib_status = RSA_PKCS1v15_Sign(&PrivKey_st, Digest, selected_hash, pSignature, &mb_st);
 8008296:	f7fc ff0f 	bl	80050b8 <RSA_PKCS1v15_Sign>
        if (cryptolib_status == RSA_SUCCESS)
 800829a:	2800      	cmp	r0, #0
 800829c:	d190      	bne.n	80081c0 <KMS_Sign+0x74>
          *pulSignatureLen = (uint32_t)PrivKey_st.mModulusSize;
 800829e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80082a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e764      	b.n	8008170 <KMS_Sign+0x24>
 80082a6:	bf00      	nop
 80082a8:	20007874 	.word	0x20007874
 80082ac:	b10b0240 	.word	0xb10b0240
 80082b0:	20005240 	.word	0x20005240
 80082b4:	20005448 	.word	0x20005448

080082b8 <KMS_VerifyInit>:
                            CK_OBJECT_HANDLE  hKey)
{

  /* Check that we support the expected mechanism. */
#ifdef KMS_RSA
  if ((pMechanism->mechanism == CKM_SHA1_RSA_PKCS) ||
 80082b8:	680b      	ldr	r3, [r1, #0]
 80082ba:	2b06      	cmp	r3, #6
{
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	460e      	mov	r6, r1
 80082c2:	4615      	mov	r5, r2
  if ((pMechanism->mechanism == CKM_SHA1_RSA_PKCS) ||
 80082c4:	d001      	beq.n	80082ca <KMS_VerifyInit+0x12>
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d111      	bne.n	80082ee <KMS_VerifyInit+0x36>
      (pMechanism->mechanism == CKM_SHA256_RSA_PKCS))
  {

    /* Check session handle */
    if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7fe fd42 	bl	8006d54 <KMS_Check_Session_Handle>
 80082d0:	b108      	cbz	r0, 80082d6 <KMS_VerifyInit+0x1e>
    {
      return CKR_SESSION_HANDLE_INVALID;
 80082d2:	20b3      	movs	r0, #179	; 0xb3
    }
  }
#endif /* KMS_ECDSA */

  return CKR_OK;
}
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 80082d6:	4a14      	ldr	r2, [pc, #80]	; (8008328 <KMS_VerifyInit+0x70>)
 80082d8:	1e63      	subs	r3, r4, #1
 80082da:	2128      	movs	r1, #40	; 0x28
 80082dc:	fb01 2303 	mla	r3, r1, r3, r2
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	b10a      	cbz	r2, 80082e8 <KMS_VerifyInit+0x30>
      return CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 80082e4:	20b4      	movs	r0, #180	; 0xb4
 80082e6:	e7f5      	b.n	80082d4 <KMS_VerifyInit+0x1c>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 80082e8:	6832      	ldr	r2, [r6, #0]
      KMS_GETSESSSION(hSession).hKey = hKey;
 80082ea:	61dd      	str	r5, [r3, #28]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 80082ec:	619a      	str	r2, [r3, #24]
  if ((pMechanism->mechanism == CKM_ECDSA_SHA1) ||
 80082ee:	6833      	ldr	r3, [r6, #0]
 80082f0:	f241 0242 	movw	r2, #4162	; 0x1042
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <KMS_VerifyInit+0x48>
 80082f8:	f241 0244 	movw	r2, #4164	; 0x1044
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d110      	bne.n	8008322 <KMS_VerifyInit+0x6a>
    if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 8008300:	4620      	mov	r0, r4
 8008302:	f7fe fd27 	bl	8006d54 <KMS_Check_Session_Handle>
 8008306:	2800      	cmp	r0, #0
 8008308:	d1e3      	bne.n	80082d2 <KMS_VerifyInit+0x1a>
    if (KMS_GETSESSSION(hSession).hKey != KMS_HANDLE_KEY_NOT_KNOWN)
 800830a:	4b07      	ldr	r3, [pc, #28]	; (8008328 <KMS_VerifyInit+0x70>)
 800830c:	3c01      	subs	r4, #1
 800830e:	2228      	movs	r2, #40	; 0x28
 8008310:	fb02 3404 	mla	r4, r2, r4, r3
 8008314:	69e3      	ldr	r3, [r4, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e4      	bne.n	80082e4 <KMS_VerifyInit+0x2c>
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800831a:	6833      	ldr	r3, [r6, #0]
      KMS_GETSESSSION(hSession).hKey = hKey;
 800831c:	61e5      	str	r5, [r4, #28]
      KMS_GETSESSSION(hSession).Mechanism = pMechanism->mechanism;
 800831e:	61a3      	str	r3, [r4, #24]
 8008320:	e7d8      	b.n	80082d4 <KMS_VerifyInit+0x1c>
  return CKR_OK;
 8008322:	2000      	movs	r0, #0
 8008324:	e7d6      	b.n	80082d4 <KMS_VerifyInit+0x1c>
 8008326:	bf00      	nop
 8008328:	20007874 	.word	0x20007874

0800832c <KMS_Verify>:
                  CK_BYTE_PTR       pData,           /* signed data */
                  CK_ULONG          ulDataLen,       /* length of signed data */
                  CK_BYTE_PTR       pSignature,      /* signature */
                  CK_ULONG          ulSignatureLen)  /* signature length */

{
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	b0ee      	sub	sp, #440	; 0x1b8
 8008332:	4605      	mov	r5, r0
 8008334:	461f      	mov	r7, r3
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
  int32_t DigestSize;
  /* structure that will contain the preallocated buffer */
  membuf_stt mb_st;

  /* Check that we are not pointing to a session not allowed */
  if (KMS_Check_Session_Handle(hSession) != CKR_OK)
 800833a:	f7fe fd0b 	bl	8006d54 <KMS_Check_Session_Handle>
 800833e:	3d01      	subs	r5, #1
 8008340:	f8df 93a0 	ldr.w	r9, [pc, #928]	; 80086e4 <KMS_Verify+0x3b8>
 8008344:	2328      	movs	r3, #40	; 0x28
 8008346:	b138      	cbz	r0, 8008358 <KMS_Verify+0x2c>
  {
    /* A C_Sign operation consider a Single part operation. As the C_SignFinal */
    /*  will not be called, we can consider that the key usage is finished. */
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008348:	fb03 9505 	mla	r5, r3, r5, r9
 800834c:	2300      	movs	r3, #0
 800834e:	61eb      	str	r3, [r5, #28]

    return CKR_SESSION_HANDLE_INVALID;
 8008350:	20b3      	movs	r0, #179	; 0xb3

  return e_ret_status;



}
 8008352:	b06e      	add	sp, #440	; 0x1b8
 8008354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (KMS_GETSESSSION(hSession).Mechanism)
 8008358:	fb03 9305 	mla	r3, r3, r5, r9
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d02a      	beq.n	80083b8 <KMS_Verify+0x8c>
 8008362:	d821      	bhi.n	80083a8 <KMS_Verify+0x7c>
 8008364:	2b01      	cmp	r3, #1
 8008366:	d03e      	beq.n	80083e6 <KMS_Verify+0xba>
 8008368:	2b06      	cmp	r3, #6
 800836a:	d116      	bne.n	800839a <KMS_Verify+0x6e>
      HASH_ctxt_st.mFlags = E_HASH_DEFAULT;
 800836c:	2300      	movs	r3, #0
 800836e:	f88d 313c 	strb.w	r3, [sp, #316]	; 0x13c
      cryptolib_status = SHA1_Init(&HASH_ctxt_st);
 8008372:	a84e      	add	r0, sp, #312	; 0x138
      HASH_ctxt_st.mTagSize = CRL_SHA1_SIZE;
 8008374:	2314      	movs	r3, #20
 8008376:	9350      	str	r3, [sp, #320]	; 0x140
      cryptolib_status = SHA1_Init(&HASH_ctxt_st);
 8008378:	f7fc fae8 	bl	800494c <SHA1_Init>
      if (cryptolib_status == HASH_SUCCESS)
 800837c:	b950      	cbnz	r0, 8008394 <KMS_Verify+0x68>
        cryptolib_status = SHA1_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen);
 800837e:	4632      	mov	r2, r6
 8008380:	4621      	mov	r1, r4
 8008382:	a84e      	add	r0, sp, #312	; 0x138
 8008384:	f7fc fb00 	bl	8004988 <SHA1_Append>
        if (cryptolib_status == HASH_SUCCESS)
 8008388:	b920      	cbnz	r0, 8008394 <KMS_Verify+0x68>
          cryptolib_status = SHA1_Finish(&HASH_ctxt_st, Digest, &DigestSize);
 800838a:	aa02      	add	r2, sp, #8
 800838c:	a91e      	add	r1, sp, #120	; 0x78
 800838e:	a84e      	add	r0, sp, #312	; 0x138
 8008390:	f7fc fb0a 	bl	80049a8 <SHA1_Finish>
      selected_hash = E_SHA1;
 8008394:	f04f 0801 	mov.w	r8, #1
  if (cryptolib_status != HASH_SUCCESS)
 8008398:	b330      	cbz	r0, 80083e8 <KMS_Verify+0xbc>
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800839a:	2328      	movs	r3, #40	; 0x28
 800839c:	fb03 9505 	mla	r5, r3, r5, r9
 80083a0:	2300      	movs	r3, #0
 80083a2:	61eb      	str	r3, [r5, #28]
    e_ret_status = CKR_FUNCTION_FAILED;
 80083a4:	2006      	movs	r0, #6
 80083a6:	e7d4      	b.n	8008352 <KMS_Verify+0x26>
  switch (KMS_GETSESSSION(hSession).Mechanism)
 80083a8:	f241 0242 	movw	r2, #4162	; 0x1042
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d0dd      	beq.n	800836c <KMS_Verify+0x40>
 80083b0:	f241 0244 	movw	r2, #4164	; 0x1044
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d1f0      	bne.n	800839a <KMS_Verify+0x6e>
      HASH_ctxt_st.mFlags = E_HASH_DEFAULT;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f88d 313c 	strb.w	r3, [sp, #316]	; 0x13c
      cryptolib_status = SHA256_Init(&HASH_ctxt_st);
 80083be:	a84e      	add	r0, sp, #312	; 0x138
      HASH_ctxt_st.mTagSize = CRL_SHA256_SIZE;
 80083c0:	2320      	movs	r3, #32
 80083c2:	9350      	str	r3, [sp, #320]	; 0x140
      cryptolib_status = SHA256_Init(&HASH_ctxt_st);
 80083c4:	f7fc fb3e 	bl	8004a44 <SHA256_Init>
      if (cryptolib_status == HASH_SUCCESS)
 80083c8:	b950      	cbnz	r0, 80083e0 <KMS_Verify+0xb4>
        cryptolib_status = SHA256_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen);
 80083ca:	4632      	mov	r2, r6
 80083cc:	4621      	mov	r1, r4
 80083ce:	a84e      	add	r0, sp, #312	; 0x138
 80083d0:	f7fc fb56 	bl	8004a80 <SHA256_Append>
        if (cryptolib_status == HASH_SUCCESS)
 80083d4:	b920      	cbnz	r0, 80083e0 <KMS_Verify+0xb4>
          cryptolib_status = SHA256_Finish(&HASH_ctxt_st, Digest, &DigestSize);
 80083d6:	aa02      	add	r2, sp, #8
 80083d8:	a91e      	add	r1, sp, #120	; 0x78
 80083da:	a84e      	add	r0, sp, #312	; 0x138
 80083dc:	f7fc fb60 	bl	8004aa0 <SHA256_Finish>
      selected_hash = E_SHA256;
 80083e0:	f04f 0803 	mov.w	r8, #3
 80083e4:	e7d8      	b.n	8008398 <KMS_Verify+0x6c>
  hashType_et selected_hash = E_MD5;          /* Initialization at the first value of enum list to avoid warnings */   
 80083e6:	4680      	mov	r8, r0
  pkms_object = KMS_Objects_GetPointer(KMS_GETSESSSION(hSession).hKey);
 80083e8:	f04f 0a28 	mov.w	sl, #40	; 0x28
 80083ec:	fb0a 9a05 	mla	sl, sl, r5, r9
 80083f0:	f8da 001c 	ldr.w	r0, [sl, #28]
 80083f4:	f7ff fcd0 	bl	8007d98 <KMS_Objects_GetPointer>
  if (pkms_object != NULL)
 80083f8:	4606      	mov	r6, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0d2      	beq.n	80083a4 <KMS_Verify+0x78>
    if ((KMS_GETSESSSION(hSession).Mechanism == CKM_SHA1_RSA_PKCS) ||
 80083fe:	f8da 3018 	ldr.w	r3, [sl, #24]
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008402:	2400      	movs	r4, #0
    if ((KMS_GETSESSSION(hSession).Mechanism == CKM_SHA1_RSA_PKCS) ||
 8008404:	2b06      	cmp	r3, #6
    KMS_GETSESSSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8008406:	f8ca 401c 	str.w	r4, [sl, #28]
    if ((KMS_GETSESSSION(hSession).Mechanism == CKM_SHA1_RSA_PKCS) ||
 800840a:	d001      	beq.n	8008410 <KMS_Verify+0xe4>
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d146      	bne.n	800849e <KMS_Verify+0x172>
      e_ret_status = KMS_Objects_SearchAttributes(CKA_PUBLIC_EXPONENT, pkms_object, &P_pKeyPubExponentAttribute);
 8008410:	aa3e      	add	r2, sp, #248	; 0xf8
 8008412:	4631      	mov	r1, r6
 8008414:	f44f 7091 	mov.w	r0, #290	; 0x122
 8008418:	f7ff fcf3 	bl	8007e02 <KMS_Objects_SearchAttributes>
      if ((e_ret_status == CKR_OK) &&
 800841c:	2800      	cmp	r0, #0
 800841e:	f040 8118 	bne.w	8008652 <KMS_Verify+0x326>
 8008422:	6832      	ldr	r2, [r6, #0]
 8008424:	4ba5      	ldr	r3, [pc, #660]	; (80086bc <KMS_Verify+0x390>)
 8008426:	429a      	cmp	r2, r3
 8008428:	f040 8113 	bne.w	8008652 <KMS_Verify+0x326>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 800842c:	6872      	ldr	r2, [r6, #4]
 800842e:	f46f 700f 	mvn.w	r0, #572	; 0x23c
 8008432:	4403      	add	r3, r0
 8008434:	429a      	cmp	r2, r3
 8008436:	f040 810c 	bne.w	8008652 <KMS_Verify+0x326>
        PubKey_st.mExponentSize = (int32_t)P_pKeyPubExponentAttribute->size;
 800843a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 800843c:	6843      	ldr	r3, [r0, #4]
 800843e:	9310      	str	r3, [sp, #64]	; 0x40
        if (P_pKeyPubExponentAttribute->size > KMS_PUB_EXP_MAX_SIZE)
 8008440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008444:	d901      	bls.n	800844a <KMS_Verify+0x11e>
          return CKR_KEY_SIZE_RANGE;
 8008446:	2062      	movs	r0, #98	; 0x62
 8008448:	e783      	b.n	8008352 <KMS_Verify+0x26>
        if (P_pKeyPubExponentAttribute->size > 3U)
 800844a:	2b03      	cmp	r3, #3
 800844c:	f240 80fe 	bls.w	800864c <KMS_Verify+0x320>
          KMS_Objects_TranslateRsaAttributes(P_pKeyPubExponentAttribute, mb_exponent);
 8008450:	4c9b      	ldr	r4, [pc, #620]	; (80086c0 <KMS_Verify+0x394>)
 8008452:	4621      	mov	r1, r4
 8008454:	f7ff fd11 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
          PubKey_st.pmExponent = (uint8_t *)mb_exponent;
 8008458:	940f      	str	r4, [sp, #60]	; 0x3c
        e_ret_status = KMS_Objects_SearchAttributes(CKA_MODULUS, pkms_object, &P_pKeyModulusAttribute);
 800845a:	aa4e      	add	r2, sp, #312	; 0x138
 800845c:	4631      	mov	r1, r6
 800845e:	f44f 7090 	mov.w	r0, #288	; 0x120
 8008462:	f7ff fcce 	bl	8007e02 <KMS_Objects_SearchAttributes>
        if (e_ret_status == CKR_OK)
 8008466:	2800      	cmp	r0, #0
 8008468:	f040 80f3 	bne.w	8008652 <KMS_Verify+0x326>
          if (P_pKeyModulusAttribute->size > KMS_MODULUS_MAX_SIZE)
 800846c:	984e      	ldr	r0, [sp, #312]	; 0x138
 800846e:	6843      	ldr	r3, [r0, #4]
 8008470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008474:	d8e7      	bhi.n	8008446 <KMS_Verify+0x11a>
          KMS_Objects_TranslateRsaAttributes(P_pKeyModulusAttribute, mb_modulus);
 8008476:	4c93      	ldr	r4, [pc, #588]	; (80086c4 <KMS_Verify+0x398>)
          PubKey_st.mModulusSize = (int32_t)P_pKeyModulusAttribute->size;
 8008478:	930e      	str	r3, [sp, #56]	; 0x38
          KMS_Objects_TranslateRsaAttributes(P_pKeyModulusAttribute, mb_modulus);
 800847a:	4621      	mov	r1, r4
 800847c:	f7ff fcfd 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
          mb_st.mSize = (int32_t)sizeof(preallocated_buffer);
 8008480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008484:	ab07      	add	r3, sp, #28
 8008486:	9208      	str	r2, [sp, #32]
          mb_st.pmBuf = preallocated_buffer;
 8008488:	4a8f      	ldr	r2, [pc, #572]	; (80086c8 <KMS_Verify+0x39c>)
 800848a:	9207      	str	r2, [sp, #28]
          cryptolib_status = RSA_PKCS1v15_Verify(&PubKey_st, Digest, selected_hash, pSignature, &mb_st);
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4642      	mov	r2, r8
 8008490:	463b      	mov	r3, r7
 8008492:	a91e      	add	r1, sp, #120	; 0x78
 8008494:	a80d      	add	r0, sp, #52	; 0x34
          PubKey_st.pmModulus = (uint8_t *)mb_modulus;
 8008496:	940d      	str	r4, [sp, #52]	; 0x34
          cryptolib_status = RSA_PKCS1v15_Verify(&PubKey_st, Digest, selected_hash, pSignature, &mb_st);
 8008498:	f7fc ff14 	bl	80052c4 <RSA_PKCS1v15_Verify>
 800849c:	4604      	mov	r4, r0
    if ((KMS_GETSESSSION(hSession).Mechanism == CKM_ECDSA_SHA1) ||
 800849e:	2328      	movs	r3, #40	; 0x28
 80084a0:	fb03 9505 	mla	r5, r3, r5, r9
 80084a4:	f241 0242 	movw	r2, #4162	; 0x1042
 80084a8:	69ab      	ldr	r3, [r5, #24]
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <KMS_Verify+0x18c>
 80084ae:	f241 0244 	movw	r2, #4164	; 0x1044
 80084b2:	4293      	cmp	r3, r2
 80084b4:	f040 80c3 	bne.w	800863e <KMS_Verify+0x312>
      e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &P_pEC_ParamAttribute);
 80084b8:	aa03      	add	r2, sp, #12
 80084ba:	4631      	mov	r1, r6
 80084bc:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80084c0:	f7ff fc9f 	bl	8007e02 <KMS_Objects_SearchAttributes>
      if ((e_ret_status == CKR_OK) &&
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f040 80ba 	bne.w	800863e <KMS_Verify+0x312>
 80084ca:	6832      	ldr	r2, [r6, #0]
 80084cc:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <KMS_Verify+0x390>)
 80084ce:	429a      	cmp	r2, r3
 80084d0:	f040 80b5 	bne.w	800863e <KMS_Verify+0x312>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80084d4:	6872      	ldr	r2, [r6, #4]
 80084d6:	f46f 710f 	mvn.w	r1, #572	; 0x23c
 80084da:	440b      	add	r3, r1
 80084dc:	429a      	cmp	r2, r3
 80084de:	f040 80ae 	bne.w	800863e <KMS_Verify+0x312>
        e_ret_status = load_curve(P_pEC_ParamAttribute, &EC_st);
 80084e2:	9c03      	ldr	r4, [sp, #12]
  if ((ec_Param != NULL) && (ec_Param->size > 0UL) && (EC_st != NULL))
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	f000 80e6 	beq.w	80086b6 <KMS_Verify+0x38a>
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80e2 	beq.w	80086b6 <KMS_Verify+0x38a>
    KMS_Objects_TranslateRsaAttributes(ec_Param, u8ParamAttrib);
 80084f2:	4620      	mov	r0, r4
 80084f4:	a94e      	add	r1, sp, #312	; 0x138
 80084f6:	f7ff fcc0 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
    if (memcmp(u8ParamAttrib, ref_secp192r1, ec_Param->size) == 0)
 80084fa:	6864      	ldr	r4, [r4, #4]
 80084fc:	4973      	ldr	r1, [pc, #460]	; (80086cc <KMS_Verify+0x3a0>)
 80084fe:	4622      	mov	r2, r4
 8008500:	a84e      	add	r0, sp, #312	; 0x138
 8008502:	f00e facb 	bl	8016a9c <memcmp>
 8008506:	2800      	cmp	r0, #0
 8008508:	f040 80a5 	bne.w	8008656 <KMS_Verify+0x32a>
      EC_st->pmA = P_192_a;
 800850c:	4b70      	ldr	r3, [pc, #448]	; (80086d0 <KMS_Verify+0x3a4>)
 800850e:	9311      	str	r3, [sp, #68]	; 0x44
      EC_st->pmB = P_192_b;
 8008510:	f103 0218 	add.w	r2, r3, #24
 8008514:	9213      	str	r2, [sp, #76]	; 0x4c
      EC_st->pmP = P_192_p;
 8008516:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800851a:	9215      	str	r2, [sp, #84]	; 0x54
      EC_st->pmN = P_192_n;
 800851c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008520:	9217      	str	r2, [sp, #92]	; 0x5c
      EC_st->pmGx = P_192_Gx;
 8008522:	f103 0260 	add.w	r2, r3, #96	; 0x60
      EC_st->pmGy = P_192_Gy;
 8008526:	3378      	adds	r3, #120	; 0x78
 8008528:	931b      	str	r3, [sp, #108]	; 0x6c
      EC_st->pmGx = P_192_Gx;
 800852a:	9219      	str	r2, [sp, #100]	; 0x64
      EC_st->mAsize = (int32_t)sizeof(P_192_a);
 800852c:	2318      	movs	r3, #24
          Crypto_Buffer.pmBuf =  preallocated_buffer;
 800852e:	ad09      	add	r5, sp, #36	; 0x24
      EC_st->mAsize = (int32_t)sizeof(P_384_a);
 8008530:	9312      	str	r3, [sp, #72]	; 0x48
      EC_st->mBsize = (int32_t)sizeof(P_384_b);
 8008532:	9314      	str	r3, [sp, #80]	; 0x50
      EC_st->mNsize = (int32_t)sizeof(P_384_n);
 8008534:	9318      	str	r3, [sp, #96]	; 0x60
      EC_st->mPsize = (int32_t)sizeof(P_384_p);
 8008536:	9316      	str	r3, [sp, #88]	; 0x58
      EC_st->mGxsize = (int32_t)sizeof(P_384_Gx);
 8008538:	931a      	str	r3, [sp, #104]	; 0x68
      EC_st->mGysize = (int32_t)sizeof(P_384_Gy);
 800853a:	931c      	str	r3, [sp, #112]	; 0x70
          Crypto_Buffer.pmBuf =  preallocated_buffer;
 800853c:	4b62      	ldr	r3, [pc, #392]	; (80086c8 <KMS_Verify+0x39c>)
 800853e:	602b      	str	r3, [r5, #0]
          cryptolib_status = ECCinitEC(&EC_st, &Crypto_Buffer);
 8008540:	f10d 0844 	add.w	r8, sp, #68	; 0x44
          Crypto_Buffer.mSize = (int16_t)sizeof(preallocated_buffer);
 8008544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008548:	606b      	str	r3, [r5, #4]
          cryptolib_status = ECCinitEC(&EC_st, &Crypto_Buffer);
 800854a:	4629      	mov	r1, r5
 800854c:	4640      	mov	r0, r8
 800854e:	f7fc fbbb 	bl	8004cc8 <ECCinitEC>
          if (cryptolib_status == ECC_SUCCESS)
 8008552:	4604      	mov	r4, r0
 8008554:	2800      	cmp	r0, #0
 8008556:	d172      	bne.n	800863e <KMS_Verify+0x312>
            ECpoint_stt *PubKey = NULL;
 8008558:	9004      	str	r0, [sp, #16]
            cryptolib_status = ECCinitPoint(&PubKey, &EC_st, &Crypto_Buffer);
 800855a:	462a      	mov	r2, r5
 800855c:	4641      	mov	r1, r8
 800855e:	a804      	add	r0, sp, #16
 8008560:	f7fc fbbd 	bl	8004cde <ECCinitPoint>
            if (cryptolib_status == ECC_SUCCESS)
 8008564:	4604      	mov	r4, r0
 8008566:	2800      	cmp	r0, #0
 8008568:	d169      	bne.n	800863e <KMS_Verify+0x312>
              ECDSAsignature_stt *sign = NULL;
 800856a:	9006      	str	r0, [sp, #24]
              e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_POINT, pkms_object, &P_pEC_DER_x962_Point);
 800856c:	aa05      	add	r2, sp, #20
 800856e:	4631      	mov	r1, r6
 8008570:	f240 1081 	movw	r0, #385	; 0x181
 8008574:	f7ff fc45 	bl	8007e02 <KMS_Objects_SearchAttributes>
              if (e_ret_status == CKR_OK)
 8008578:	2800      	cmp	r0, #0
 800857a:	f47f af13 	bne.w	80083a4 <KMS_Verify+0x78>
                KMS_Objects_TranslateRsaAttributes(P_pEC_DER_x962_Point, u8ParamAttrib);
 800857e:	a94e      	add	r1, sp, #312	; 0x138
 8008580:	9805      	ldr	r0, [sp, #20]
                pub_key_size = EC_st.mNsize;
 8008582:	f8d8 601c 	ldr.w	r6, [r8, #28]
                KMS_Objects_TranslateRsaAttributes(P_pEC_DER_x962_Point, u8ParamAttrib);
 8008586:	f7ff fc78 	bl	8007e7a <KMS_Objects_TranslateRsaAttributes>
                if (u8ParamAttrib[0] == 0x04U)
 800858a:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800858e:	2b04      	cmp	r3, #4
 8008590:	f47f af08 	bne.w	80083a4 <KMS_Verify+0x78>
                  if ((u8ParamAttrib[1] & 0x80U) == 0x80U)
 8008594:	f89d 4139 	ldrb.w	r4, [sp, #313]	; 0x139
 8008598:	0623      	lsls	r3, r4, #24
                    offset_for_data = (u8ParamAttrib[1] & 0x7FU) + 1U;
 800859a:	bf46      	itte	mi
 800859c:	f004 047f 	andmi.w	r4, r4, #127	; 0x7f
 80085a0:	3401      	addmi	r4, #1
                  uint8_t offset_for_data = 1;
 80085a2:	2401      	movpl	r4, #1
                  (void)memcpy(&pub_x[0], &u8ParamAttrib[1U + offset_for_data], (size_t)pub_key_size);
 80085a4:	ab4e      	add	r3, sp, #312	; 0x138
 80085a6:	1c61      	adds	r1, r4, #1
 80085a8:	4419      	add	r1, r3
 80085aa:	4632      	mov	r2, r6
 80085ac:	a82e      	add	r0, sp, #184	; 0xb8
 80085ae:	f00e fa84 	bl	8016aba <memcpy>
                               &u8ParamAttrib[1UL + (uint32_t)offset_for_data + (uint32_t)pub_key_size],
 80085b2:	1c71      	adds	r1, r6, #1
                  (void)memcpy(&pub_y[0],
 80085b4:	ab4e      	add	r3, sp, #312	; 0x138
                               &u8ParamAttrib[1UL + (uint32_t)offset_for_data + (uint32_t)pub_key_size],
 80085b6:	4421      	add	r1, r4
                  (void)memcpy(&pub_y[0],
 80085b8:	4419      	add	r1, r3
 80085ba:	4632      	mov	r2, r6
 80085bc:	a83e      	add	r0, sp, #248	; 0xf8
 80085be:	f00e fa7c 	bl	8016aba <memcpy>
                  (void)ECCsetPointCoordinate(PubKey, E_ECC_POINT_COORDINATE_X, pub_x, pub_key_size);
 80085c2:	4633      	mov	r3, r6
 80085c4:	aa2e      	add	r2, sp, #184	; 0xb8
 80085c6:	2100      	movs	r1, #0
 80085c8:	9804      	ldr	r0, [sp, #16]
 80085ca:	f7fc fbd0 	bl	8004d6e <ECCsetPointCoordinate>
                  (void)ECCsetPointCoordinate(PubKey, E_ECC_POINT_COORDINATE_Y, pub_y, pub_key_size);
 80085ce:	4633      	mov	r3, r6
 80085d0:	aa3e      	add	r2, sp, #248	; 0xf8
 80085d2:	2101      	movs	r1, #1
 80085d4:	9804      	ldr	r0, [sp, #16]
 80085d6:	f7fc fbca 	bl	8004d6e <ECCsetPointCoordinate>
                  cryptolib_status = ECCvalidatePubKey(PubKey, &EC_st, &Crypto_Buffer);
 80085da:	462a      	mov	r2, r5
 80085dc:	4641      	mov	r1, r8
 80085de:	9804      	ldr	r0, [sp, #16]
 80085e0:	f7fc fcc0 	bl	8004f64 <ECCvalidatePubKey>
                  if (cryptolib_status == ECC_SUCCESS)
 80085e4:	4604      	mov	r4, r0
 80085e6:	bb50      	cbnz	r0, 800863e <KMS_Verify+0x312>
                    cryptolib_status = ECDSAinitSign(&sign, &EC_st, &Crypto_Buffer);
 80085e8:	462a      	mov	r2, r5
 80085ea:	4641      	mov	r1, r8
 80085ec:	a806      	add	r0, sp, #24
 80085ee:	f7fc fbd3 	bl	8004d98 <ECDSAinitSign>
                    if (cryptolib_status == ECC_SUCCESS)
 80085f2:	4604      	mov	r4, r0
 80085f4:	bb18      	cbnz	r0, 800863e <KMS_Verify+0x312>
                      (void)ECDSAsetSignature(sign, E_ECDSA_SIGNATURE_R_VALUE, pSignature, pub_key_size);
 80085f6:	4601      	mov	r1, r0
 80085f8:	4633      	mov	r3, r6
 80085fa:	463a      	mov	r2, r7
 80085fc:	9806      	ldr	r0, [sp, #24]
 80085fe:	f7fc fbf3 	bl	8004de8 <ECDSAsetSignature>
                      (void)ECDSAsetSignature(sign, E_ECDSA_SIGNATURE_S_VALUE, &pSignature[pub_key_size], pub_key_size);
 8008602:	4633      	mov	r3, r6
 8008604:	19ba      	adds	r2, r7, r6
 8008606:	2101      	movs	r1, #1
 8008608:	9806      	ldr	r0, [sp, #24]
 800860a:	f7fc fbed 	bl	8004de8 <ECDSAsetSignature>
                      verctx.pmPubKey = PubKey;
 800860e:	9b04      	ldr	r3, [sp, #16]
                      cryptolib_status = ECDSAverify(Digest, DigestSize, sign, &verctx, &Crypto_Buffer);
 8008610:	9a06      	ldr	r2, [sp, #24]
                      verctx.pmPubKey = PubKey;
 8008612:	930b      	str	r3, [sp, #44]	; 0x2c
                      cryptolib_status = ECDSAverify(Digest, DigestSize, sign, &verctx, &Crypto_Buffer);
 8008614:	9902      	ldr	r1, [sp, #8]
 8008616:	9500      	str	r5, [sp, #0]
 8008618:	ab0b      	add	r3, sp, #44	; 0x2c
 800861a:	a81e      	add	r0, sp, #120	; 0x78
                      verctx.pmEC = &EC_st;
 800861c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
                      cryptolib_status = ECDSAverify(Digest, DigestSize, sign, &verctx, &Crypto_Buffer);
 8008620:	f7fc fbf8 	bl	8004e14 <ECDSAverify>
                      (void)ECDSAfreeSign(&sign, &Crypto_Buffer);
 8008624:	4629      	mov	r1, r5
                      cryptolib_status = ECDSAverify(Digest, DigestSize, sign, &verctx, &Crypto_Buffer);
 8008626:	4604      	mov	r4, r0
                      (void)ECDSAfreeSign(&sign, &Crypto_Buffer);
 8008628:	a806      	add	r0, sp, #24
 800862a:	f7fc fbc7 	bl	8004dbc <ECDSAfreeSign>
                      (void)ECCfreePoint(&PubKey, &Crypto_Buffer);
 800862e:	4629      	mov	r1, r5
 8008630:	a804      	add	r0, sp, #16
 8008632:	f7fc fb77 	bl	8004d24 <ECCfreePoint>
                      (void)ECCfreeEC(&EC_st, &Crypto_Buffer);
 8008636:	4629      	mov	r1, r5
 8008638:	4640      	mov	r0, r8
 800863a:	f7fc fb4e 	bl	8004cda <ECCfreeEC>
  if (cryptolib_status == SIGNATURE_VALID)
 800863e:	f240 33eb 	movw	r3, #1003	; 0x3eb
 8008642:	429c      	cmp	r4, r3
 8008644:	f47f aeae 	bne.w	80083a4 <KMS_Verify+0x78>
    e_ret_status = CKR_OK;
 8008648:	2000      	movs	r0, #0
 800864a:	e682      	b.n	8008352 <KMS_Verify+0x26>
          PubKey_st.pmExponent = (uint8_t *)P_pKeyPubExponentAttribute->data;
 800864c:	3008      	adds	r0, #8
 800864e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008650:	e703      	b.n	800845a <KMS_Verify+0x12e>
        return CKR_MECHANISM_PARAM_INVALID;
 8008652:	2071      	movs	r0, #113	; 0x71
 8008654:	e67d      	b.n	8008352 <KMS_Verify+0x26>
    if (memcmp(u8ParamAttrib, ref_secp256r1, ec_Param->size) == 0)
 8008656:	4622      	mov	r2, r4
 8008658:	491e      	ldr	r1, [pc, #120]	; (80086d4 <KMS_Verify+0x3a8>)
 800865a:	a84e      	add	r0, sp, #312	; 0x138
 800865c:	f00e fa1e 	bl	8016a9c <memcmp>
 8008660:	b988      	cbnz	r0, 8008686 <KMS_Verify+0x35a>
      EC_st->pmA = P_256_a;
 8008662:	4b1d      	ldr	r3, [pc, #116]	; (80086d8 <KMS_Verify+0x3ac>)
 8008664:	9311      	str	r3, [sp, #68]	; 0x44
      EC_st->pmB = P_256_b;
 8008666:	f103 0220 	add.w	r2, r3, #32
 800866a:	9213      	str	r2, [sp, #76]	; 0x4c
      EC_st->pmP = P_256_p;
 800866c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008670:	9215      	str	r2, [sp, #84]	; 0x54
      EC_st->pmN = P_256_n;
 8008672:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8008676:	9217      	str	r2, [sp, #92]	; 0x5c
      EC_st->pmGx = P_256_Gx;
 8008678:	f103 0280 	add.w	r2, r3, #128	; 0x80
      EC_st->pmGy = P_256_Gy;
 800867c:	33a0      	adds	r3, #160	; 0xa0
 800867e:	931b      	str	r3, [sp, #108]	; 0x6c
      EC_st->pmGx = P_256_Gx;
 8008680:	9219      	str	r2, [sp, #100]	; 0x64
      EC_st->mAsize = (int32_t)sizeof(P_256_a);
 8008682:	2320      	movs	r3, #32
 8008684:	e753      	b.n	800852e <KMS_Verify+0x202>
    if (memcmp(u8ParamAttrib, ref_secp384r1, ec_Param->size) == 0)
 8008686:	4622      	mov	r2, r4
 8008688:	4914      	ldr	r1, [pc, #80]	; (80086dc <KMS_Verify+0x3b0>)
 800868a:	a84e      	add	r0, sp, #312	; 0x138
 800868c:	f00e fa06 	bl	8016a9c <memcmp>
 8008690:	b988      	cbnz	r0, 80086b6 <KMS_Verify+0x38a>
      EC_st->pmA = P_384_a;
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <KMS_Verify+0x3b4>)
 8008694:	9311      	str	r3, [sp, #68]	; 0x44
      EC_st->pmB = P_384_b;
 8008696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800869a:	9213      	str	r2, [sp, #76]	; 0x4c
      EC_st->pmP = P_384_p;
 800869c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80086a0:	9215      	str	r2, [sp, #84]	; 0x54
      EC_st->pmN = P_384_n;
 80086a2:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80086a6:	9217      	str	r2, [sp, #92]	; 0x5c
      EC_st->pmGx = P_384_Gx;
 80086a8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
      EC_st->pmGy = P_384_Gy;
 80086ac:	33f0      	adds	r3, #240	; 0xf0
 80086ae:	931b      	str	r3, [sp, #108]	; 0x6c
      EC_st->pmGx = P_384_Gx;
 80086b0:	9219      	str	r2, [sp, #100]	; 0x64
      EC_st->mAsize = (int32_t)sizeof(P_384_a);
 80086b2:	2330      	movs	r3, #48	; 0x30
 80086b4:	e73b      	b.n	800852e <KMS_Verify+0x202>
          return ECC_ERR_BAD_OPERATION;
 80086b6:	f241 4052 	movw	r0, #5202	; 0x1452
 80086ba:	e64a      	b.n	8008352 <KMS_Verify+0x26>
 80086bc:	b10b0240 	.word	0xb10b0240
 80086c0:	20005240 	.word	0x20005240
 80086c4:	20005344 	.word	0x20005344
 80086c8:	20005448 	.word	0x20005448
 80086cc:	200020d0 	.word	0x200020d0
 80086d0:	08017d80 	.word	0x08017d80
 80086d4:	200020da 	.word	0x200020da
 80086d8:	08017e10 	.word	0x08017e10
 80086dc:	200020e4 	.word	0x200020e4
 80086e0:	08017ed0 	.word	0x08017ed0
 80086e4:	20007874 	.word	0x20007874

080086e8 <SE_LL_CRC_Check>:
  * @brief  Check the CRC of the BootInfo given as a parameter.
  * @param  x: pointer to the BootInfo to be checked.
  * @retval SE_SUCCESS if it succeeds, SE_ERROR otherwise
  */
static SE_ErrorStatus SE_LL_CRC_Check(SE_BootInfoTypeDef *x)
{
 80086e8:	b510      	push	{r4, lr}
  /*
   * The CRC is computed with the structure without its CRC field and the length is provided to SE_LL_CRC_Calculate in
   * 32-bit word.
   * Please note that this works only if the CRC field is kept as the last uint32_t of the SE_BootInfoTypeDef structure.
   */
  uint32_t crc = SE_LL_CRC_Calculate((uint32_t *)(x), (sizeof(SE_BootInfoTypeDef) - sizeof(uint32_t)) \
 80086ea:	2103      	movs	r1, #3
{
 80086ec:	4604      	mov	r4, r0
  uint32_t crc = SE_LL_CRC_Calculate((uint32_t *)(x), (sizeof(SE_BootInfoTypeDef) - sizeof(uint32_t)) \
 80086ee:	f7fa f987 	bl	8002a00 <SE_LL_CRC_Calculate>
                                     / sizeof(uint32_t));

  if ((x)->CRC32 == crc)
 80086f2:	68e1      	ldr	r1, [r4, #12]
  else
  {
    /* CRC ko */
    return (SE_ERROR);
  }
}
 80086f4:	4a03      	ldr	r2, [pc, #12]	; (8008704 <SE_LL_CRC_Check+0x1c>)
 80086f6:	4b04      	ldr	r3, [pc, #16]	; (8008708 <SE_LL_CRC_Check+0x20>)
 80086f8:	4281      	cmp	r1, r0
 80086fa:	bf0c      	ite	eq
 80086fc:	4610      	moveq	r0, r2
 80086fe:	4618      	movne	r0, r3
 8008700:	bd10      	pop	{r4, pc}
 8008702:	bf00      	nop
 8008704:	0012310f 	.word	0x0012310f
 8008708:	00018799 	.word	0x00018799

0800870c <SE_INFO_WriteBootInfoArea.part.0>:
  * @param  peBootInfoStatus: output param to be filled with the BootInfoArea status
  * @note   This function is supposed to be called from inside the protected area (when available in the MCU)
  *         SE_INFO_BootInfoAreaInit must have been called before using this function;
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise
  */
SE_ErrorStatus SE_INFO_WriteBootInfoArea(SE_BootInfoTypeDef *pxBootInfo, SE_INFO_StatusTypedef *peBootInfoStatus)
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	460f      	mov	r7, r1

  /*
   * Check the pxBootInfo CRC. if CRC not correct then reset the structure to factory reset values.
   * A bug or a possible threat could have changed it
   */
  if (SE_ERROR == SE_LL_CRC_Check(pxBootInfo))
 8008712:	f7ff ffe9 	bl	80086e8 <SE_LL_CRC_Check>
 8008716:	4b12      	ldr	r3, [pc, #72]	; (8008760 <SE_INFO_WriteBootInfoArea.part.0+0x54>)
 8008718:	4298      	cmp	r0, r3
 800871a:	d106      	bne.n	800872a <SE_INFO_WriteBootInfoArea.part.0+0x1e>
  {
    eBootInfoStatus = SE_INFO_NOT_VALID;
 800871c:	4b11      	ldr	r3, [pc, #68]	; (8008764 <SE_INFO_WriteBootInfoArea.part.0+0x58>)
 800871e:	2204      	movs	r2, #4
 8008720:	701a      	strb	r2, [r3, #0]
    eBootInfoStatus = SE_INFO_VALID;
    e_ret_status = SE_SUCCESS;
  }

  assert_param(IS_SE_INFO_STATUS(eBootInfoStatus));
  *peBootInfoStatus = eBootInfoStatus;
 8008722:	4b10      	ldr	r3, [pc, #64]	; (8008764 <SE_INFO_WriteBootInfoArea.part.0+0x58>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	703b      	strb	r3, [r7, #0]

  return e_ret_status;
}
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void) memcpy(&xBootInfo, pxBootInfo, sizeof(SE_BootInfoTypeDef));
 800872a:	4d0f      	ldr	r5, [pc, #60]	; (8008768 <SE_INFO_WriteBootInfoArea.part.0+0x5c>)
 800872c:	4623      	mov	r3, r4
 800872e:	f104 0610 	add.w	r6, r4, #16
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	6859      	ldr	r1, [r3, #4]
 8008736:	462a      	mov	r2, r5
 8008738:	c203      	stmia	r2!, {r0, r1}
 800873a:	3308      	adds	r3, #8
 800873c:	42b3      	cmp	r3, r6
 800873e:	4615      	mov	r5, r2
 8008740:	d1f7      	bne.n	8008732 <SE_INFO_WriteBootInfoArea.part.0+0x26>
    (void) memcpy(&xBootInfoBackUp, pxBootInfo, sizeof(SE_BootInfoTypeDef));
 8008742:	4623      	mov	r3, r4
 8008744:	4c09      	ldr	r4, [pc, #36]	; (800876c <SE_INFO_WriteBootInfoArea.part.0+0x60>)
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	6859      	ldr	r1, [r3, #4]
 800874a:	4622      	mov	r2, r4
 800874c:	c203      	stmia	r2!, {r0, r1}
 800874e:	3308      	adds	r3, #8
 8008750:	42b3      	cmp	r3, r6
 8008752:	4614      	mov	r4, r2
 8008754:	d1f7      	bne.n	8008746 <SE_INFO_WriteBootInfoArea.part.0+0x3a>
    eBootInfoStatus = SE_INFO_VALID;
 8008756:	4b03      	ldr	r3, [pc, #12]	; (8008764 <SE_INFO_WriteBootInfoArea.part.0+0x58>)
    e_ret_status = SE_SUCCESS;
 8008758:	4805      	ldr	r0, [pc, #20]	; (8008770 <SE_INFO_WriteBootInfoArea.part.0+0x64>)
    eBootInfoStatus = SE_INFO_VALID;
 800875a:	2201      	movs	r2, #1
 800875c:	701a      	strb	r2, [r3, #0]
 800875e:	e7e0      	b.n	8008722 <SE_INFO_WriteBootInfoArea.part.0+0x16>
 8008760:	00018799 	.word	0x00018799
 8008764:	20006448 	.word	0x20006448
 8008768:	20007a30 	.word	0x20007a30
 800876c:	20007a40 	.word	0x20007a40
 8008770:	0012310f 	.word	0x0012310f

08008774 <SE_INFO_BootInfoAreaInit>:
{
 8008774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  eBootInfoStatus = SE_INFO_NOT_ACCESSED;
 8008778:	4c18      	ldr	r4, [pc, #96]	; (80087dc <SE_INFO_BootInfoAreaInit+0x68>)
 800877a:	4d19      	ldr	r5, [pc, #100]	; (80087e0 <SE_INFO_BootInfoAreaInit+0x6c>)
 800877c:	2300      	movs	r3, #0
 800877e:	7023      	strb	r3, [r4, #0]
{
 8008780:	4680      	mov	r8, r0
  if (SE_LL_CRC_Init() != SE_SUCCESS)
 8008782:	f7fa f92d 	bl	80029e0 <SE_LL_CRC_Init>
 8008786:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <SE_INFO_BootInfoAreaInit+0x70>)
 8008788:	4298      	cmp	r0, r3
 800878a:	4606      	mov	r6, r0
 800878c:	4627      	mov	r7, r4
 800878e:	d006      	beq.n	800879e <SE_INFO_BootInfoAreaInit+0x2a>
    *peBootInfoStatus = eBootInfoStatus;
 8008790:	7823      	ldrb	r3, [r4, #0]
 8008792:	f888 3000 	strb.w	r3, [r8]
    return SE_ERROR;
 8008796:	462e      	mov	r6, r5
}
 8008798:	4630      	mov	r0, r6
 800879a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (SE_ERROR == SE_LL_CRC_Check(&xBootInfo))
 800879e:	4c12      	ldr	r4, [pc, #72]	; (80087e8 <SE_INFO_BootInfoAreaInit+0x74>)
 80087a0:	4620      	mov	r0, r4
 80087a2:	f7ff ffa1 	bl	80086e8 <SE_LL_CRC_Check>
 80087a6:	42a8      	cmp	r0, r5
 80087a8:	4681      	mov	r9, r0
 80087aa:	d114      	bne.n	80087d6 <SE_INFO_BootInfoAreaInit+0x62>
    if (SE_ERROR == SE_LL_CRC_Check(&xBootInfoBackUp))
 80087ac:	f104 0510 	add.w	r5, r4, #16
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7ff ff99 	bl	80086e8 <SE_LL_CRC_Check>
 80087b6:	4548      	cmp	r0, r9
 80087b8:	d106      	bne.n	80087c8 <SE_INFO_BootInfoAreaInit+0x54>
      eBootInfoStatus = SE_INFO_NOT_VALID;
 80087ba:	2304      	movs	r3, #4
 80087bc:	703b      	strb	r3, [r7, #0]
      e_ret_status = SE_ERROR;
 80087be:	4606      	mov	r6, r0
  *peBootInfoStatus = eBootInfoStatus;
 80087c0:	783b      	ldrb	r3, [r7, #0]
 80087c2:	f888 3000 	strb.w	r3, [r8]
  return e_ret_status;
 80087c6:	e7e7      	b.n	8008798 <SE_INFO_BootInfoAreaInit+0x24>
      (void) memcpy(&xBootInfo, &xBootInfoBackUp, sizeof(SE_BootInfoTypeDef));
 80087c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      eBootInfoStatus = SE_INFO_RECOVERED;
 80087d0:	2302      	movs	r3, #2
    eBootInfoStatus = SE_INFO_VALID;
 80087d2:	703b      	strb	r3, [r7, #0]
 80087d4:	e7f4      	b.n	80087c0 <SE_INFO_BootInfoAreaInit+0x4c>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e7fb      	b.n	80087d2 <SE_INFO_BootInfoAreaInit+0x5e>
 80087da:	bf00      	nop
 80087dc:	20006448 	.word	0x20006448
 80087e0:	00018799 	.word	0x00018799
 80087e4:	0012310f 	.word	0x0012310f
 80087e8:	20007a30 	.word	0x20007a30

080087ec <SE_INFO_BootInfoAreaFactoryReset>:
{
 80087ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (eBootInfoStatus != SE_INFO_NOT_ACCESSED)
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <SE_INFO_BootInfoAreaFactoryReset+0x30>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b183      	cbz	r3, 8008816 <SE_INFO_BootInfoAreaFactoryReset+0x2a>
    boot_shared_info_empty.LastExecStatus = SE_INFO_NONE;
 80087f4:	2300      	movs	r3, #0
    crc = SE_LL_CRC_Calculate((uint32_t *)(&boot_shared_info_empty), (sizeof(SE_BootInfoTypeDef) - sizeof(uint32_t)) \
 80087f6:	2103      	movs	r1, #3
 80087f8:	a802      	add	r0, sp, #8
    boot_shared_info_empty.LastExecError = SE_INFO_NONE;
 80087fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
    boot_shared_info_empty.ConsecutiveBootOnErrorCounter = 0U;
 80087fe:	9304      	str	r3, [sp, #16]
    crc = SE_LL_CRC_Calculate((uint32_t *)(&boot_shared_info_empty), (sizeof(SE_BootInfoTypeDef) - sizeof(uint32_t)) \
 8008800:	f7fa f8fe 	bl	8002a00 <SE_LL_CRC_Calculate>
 8008804:	f10d 0107 	add.w	r1, sp, #7
    boot_shared_info_empty.CRC32 = crc;
 8008808:	9005      	str	r0, [sp, #20]
 800880a:	a802      	add	r0, sp, #8
 800880c:	f7ff ff7e 	bl	800870c <SE_INFO_WriteBootInfoArea.part.0>
}
 8008810:	b007      	add	sp, #28
 8008812:	f85d fb04 	ldr.w	pc, [sp], #4
    e_ret_status = SE_ERROR;
 8008816:	4802      	ldr	r0, [pc, #8]	; (8008820 <SE_INFO_BootInfoAreaFactoryReset+0x34>)
  return e_ret_status;
 8008818:	e7fa      	b.n	8008810 <SE_INFO_BootInfoAreaFactoryReset+0x24>
 800881a:	bf00      	nop
 800881c:	20006448 	.word	0x20006448
 8008820:	00018799 	.word	0x00018799

08008824 <SE_INFO_ReadBootInfoArea>:
{
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	460e      	mov	r6, r1
  if ((pxBootInfo == NULL) || (peBootInfoStatus == NULL))
 8008828:	4604      	mov	r4, r0
 800882a:	4d11      	ldr	r5, [pc, #68]	; (8008870 <SE_INFO_ReadBootInfoArea+0x4c>)
 800882c:	b1f0      	cbz	r0, 800886c <SE_INFO_ReadBootInfoArea+0x48>
 800882e:	b1e9      	cbz	r1, 800886c <SE_INFO_ReadBootInfoArea+0x48>
  if (SE_ERROR == SE_LL_CRC_Check(&xBootInfo))
 8008830:	4810      	ldr	r0, [pc, #64]	; (8008874 <SE_INFO_ReadBootInfoArea+0x50>)
 8008832:	f7ff ff59 	bl	80086e8 <SE_LL_CRC_Check>
 8008836:	42a8      	cmp	r0, r5
 8008838:	d106      	bne.n	8008848 <SE_INFO_ReadBootInfoArea+0x24>
    eBootInfoStatus = SE_INFO_NOT_VALID;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <SE_INFO_ReadBootInfoArea+0x54>)
 800883c:	2204      	movs	r2, #4
 800883e:	701a      	strb	r2, [r3, #0]
  *peBootInfoStatus = eBootInfoStatus;
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <SE_INFO_ReadBootInfoArea+0x54>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	7033      	strb	r3, [r6, #0]
}
 8008846:	bd70      	pop	{r4, r5, r6, pc}
    (void) memcpy(pxBootInfo, &xBootInfo, sizeof(SE_BootInfoTypeDef));
 8008848:	4d0a      	ldr	r5, [pc, #40]	; (8008874 <SE_INFO_ReadBootInfoArea+0x50>)
 800884a:	4623      	mov	r3, r4
 800884c:	f105 0410 	add.w	r4, r5, #16
 8008850:	462a      	mov	r2, r5
 8008852:	ca03      	ldmia	r2!, {r0, r1}
 8008854:	42a2      	cmp	r2, r4
 8008856:	6018      	str	r0, [r3, #0]
 8008858:	6059      	str	r1, [r3, #4]
 800885a:	4615      	mov	r5, r2
 800885c:	f103 0308 	add.w	r3, r3, #8
 8008860:	d1f6      	bne.n	8008850 <SE_INFO_ReadBootInfoArea+0x2c>
    eBootInfoStatus = SE_INFO_VALID;
 8008862:	4b05      	ldr	r3, [pc, #20]	; (8008878 <SE_INFO_ReadBootInfoArea+0x54>)
    e_ret_status = SE_SUCCESS;
 8008864:	4805      	ldr	r0, [pc, #20]	; (800887c <SE_INFO_ReadBootInfoArea+0x58>)
    eBootInfoStatus = SE_INFO_VALID;
 8008866:	2201      	movs	r2, #1
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e7e9      	b.n	8008840 <SE_INFO_ReadBootInfoArea+0x1c>
    return SE_ERROR;
 800886c:	4628      	mov	r0, r5
 800886e:	e7ea      	b.n	8008846 <SE_INFO_ReadBootInfoArea+0x22>
 8008870:	00018799 	.word	0x00018799
 8008874:	20007a30 	.word	0x20007a30
 8008878:	20006448 	.word	0x20006448
 800887c:	0012310f 	.word	0x0012310f

08008880 <SE_INFO_WriteBootInfoArea>:
  if ((pxBootInfo == NULL) || (peBootInfoStatus == NULL))
 8008880:	b110      	cbz	r0, 8008888 <SE_INFO_WriteBootInfoArea+0x8>
 8008882:	b109      	cbz	r1, 8008888 <SE_INFO_WriteBootInfoArea+0x8>
 8008884:	f7ff bf42 	b.w	800870c <SE_INFO_WriteBootInfoArea.part.0>
    return SE_ERROR;
 8008888:	4800      	ldr	r0, [pc, #0]	; (800888c <SE_INFO_WriteBootInfoArea+0xc>)
}
 800888a:	4770      	bx	lr
 800888c:	00018799 	.word	0x00018799

08008890 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8008890:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008894:	4905      	ldr	r1, [pc, #20]	; (80088ac <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008898:	68ca      	ldr	r2, [r1, #12]
 800889a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800889e:	4313      	orrs	r3, r2
 80088a0:	60cb      	str	r3, [r1, #12]
 80088a2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <__NVIC_SystemReset+0x16>
 80088aa:	bf00      	nop
 80088ac:	e000ed00 	.word	0xe000ed00
 80088b0:	05fa0004 	.word	0x05fa0004

080088b4 <SE_CallGateService>:
   */
  static SE_LockStatus SE_LockRestrictedServices = SE_UNLOCKED;

  SE_ErrorStatus e_ret_status = SE_ERROR;

  switch (eID)
 80088b4:	2880      	cmp	r0, #128	; 0x80
{
 80088b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088ba:	460c      	mov	r4, r1
  switch (eID)
 80088bc:	f000 80af 	beq.w	8008a1e <SE_CallGateService+0x16a>
 80088c0:	d841      	bhi.n	8008946 <SE_CallGateService+0x92>
 80088c2:	2810      	cmp	r0, #16
 80088c4:	f000 80d1 	beq.w	8008a6a <SE_CallGateService+0x1b6>
 80088c8:	d813      	bhi.n	80088f2 <SE_CallGateService+0x3e>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d07e      	beq.n	80089cc <SE_CallGateService+0x118>
 80088ce:	1f03      	subs	r3, r0, #4
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	f240 80ca 	bls.w	8008a6a <SE_CallGateService+0x1b6>

    default:
    {
#ifdef KMS_ENABLED
      /* Is it a request to the KMS lib */
      if ((eID & SE_MW_ADDON_MSB_MASK) == SE_MW_ADDON_KMS_MSB)
 80088d6:	f000 43e0 	and.w	r3, r0, #1879048192	; 0x70000000
 80088da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088de:	d173      	bne.n	80089c8 <SE_CallGateService+0x114>
      {
        CK_RV    l_rv;

        /* To limit the number of passed parameters, we consider that */
        /* KMS_Entry() returns the CK_RV error. */
        l_rv = KMS_Entry((KMS_FunctionIDTypeDef)eID, arguments);
 80088e0:	4611      	mov	r1, r2
 80088e2:	f7fd fc15 	bl	8006110 <KMS_Entry>

        /*
         * SE_StatusTypeDef is used to forward the CK_RV result to upper layers
         */
        *peSE_Status = l_rv;
 80088e6:	6020      	str	r0, [r4, #0]

        if (l_rv == CKR_OK)
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f040 80be 	bne.w	8008a6a <SE_CallGateService+0x1b6>
        {
          e_ret_status = SE_SUCCESS;
 80088ee:	48b8      	ldr	r0, [pc, #736]	; (8008bd0 <SE_CallGateService+0x31c>)
 80088f0:	e08c      	b.n	8008a0c <SE_CallGateService+0x158>
  switch (eID)
 80088f2:	2821      	cmp	r0, #33	; 0x21
 80088f4:	f000 817e 	beq.w	8008bf4 <SE_CallGateService+0x340>
 80088f8:	2822      	cmp	r0, #34	; 0x22
 80088fa:	f000 81b3 	beq.w	8008c64 <SE_CallGateService+0x3b0>
 80088fe:	2820      	cmp	r0, #32
 8008900:	d1e9      	bne.n	80088d6 <SE_CallGateService+0x22>
      p_FwInfo = va_arg(arguments, SE_APP_ActiveFwInfo_t *);
 8008902:	6816      	ldr	r6, [r2, #0]
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 8008904:	4db2      	ldr	r5, [pc, #712]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008906:	2108      	movs	r1, #8
 8008908:	4630      	mov	r0, r6
 800890a:	f7fa f95b 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 800890e:	42a8      	cmp	r0, r5
 8008910:	f040 80ab 	bne.w	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 8008914:	2108      	movs	r1, #8
 8008916:	4630      	mov	r0, r6
 8008918:	f7fa f97a 	bl	8002c10 <SE_LL_Buffer_part_of_SE_ram>
 800891c:	42a8      	cmp	r0, r5
 800891e:	f000 80a4 	beq.w	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 8008922:	2108      	movs	r1, #8
 8008924:	4630      	mov	r0, r6
 8008926:	f7fa f94d 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 800892a:	42a8      	cmp	r0, r5
 800892c:	f040 809d 	bne.w	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 8008930:	2108      	movs	r1, #8
 8008932:	4630      	mov	r0, r6
 8008934:	f7fa f96c 	bl	8002c10 <SE_LL_Buffer_part_of_SE_ram>
 8008938:	42a8      	cmp	r0, r5
 800893a:	f000 8096 	beq.w	8008a6a <SE_CallGateService+0x1b6>
      e_ret_status = SE_APPLI_GetActiveFwInfo(p_FwInfo);
 800893e:	4630      	mov	r0, r6
 8008940:	f000 fa62 	bl	8008e08 <SE_APPLI_GetActiveFwInfo>
      break;
 8008944:	e067      	b.n	8008a16 <SE_CallGateService+0x162>
  switch (eID)
 8008946:	2894      	cmp	r0, #148	; 0x94
 8008948:	f000 80e0 	beq.w	8008b0c <SE_CallGateService+0x258>
 800894c:	d830      	bhi.n	80089b0 <SE_CallGateService+0xfc>
 800894e:	2892      	cmp	r0, #146	; 0x92
 8008950:	f000 8094 	beq.w	8008a7c <SE_CallGateService+0x1c8>
 8008954:	f200 80b5 	bhi.w	8008ac2 <SE_CallGateService+0x20e>
 8008958:	2881      	cmp	r0, #129	; 0x81
 800895a:	d1bc      	bne.n	80088d6 <SE_CallGateService+0x22>
      __IS_SE_LOCKED_SERVICES();
 800895c:	4f9d      	ldr	r7, [pc, #628]	; (8008bd4 <SE_CallGateService+0x320>)
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	f1b1 3f55 	cmp.w	r1, #1431655765	; 0x55555555
 8008964:	d130      	bne.n	80089c8 <SE_CallGateService+0x114>
      p_boot_info = va_arg(arguments, SE_BootInfoTypeDef *);
 8008966:	6816      	ldr	r6, [r2, #0]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8008968:	f7fa f81e 	bl	80029a8 <SE_LL_CRC_Config>
 800896c:	4b9a      	ldr	r3, [pc, #616]	; (8008bd8 <SE_CallGateService+0x324>)
 800896e:	4298      	cmp	r0, r3
 8008970:	d07b      	beq.n	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_in_SBSFU_ram(p_boot_info, sizeof(*p_boot_info)) != SE_SUCCESS)
 8008972:	2110      	movs	r1, #16
 8008974:	4630      	mov	r0, r6
 8008976:	f7fa f937 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 800897a:	4d95      	ldr	r5, [pc, #596]	; (8008bd0 <SE_CallGateService+0x31c>)
 800897c:	42a8      	cmp	r0, r5
 800897e:	d174      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008986:	d11f      	bne.n	80089c8 <SE_CallGateService+0x114>
      if (SE_LL_Buffer_in_SBSFU_ram(p_boot_info, sizeof(*p_boot_info)) != SE_SUCCESS)
 8008988:	2110      	movs	r1, #16
 800898a:	4630      	mov	r0, r6
 800898c:	f7fa f92c 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008990:	42a8      	cmp	r0, r5
 8008992:	d16a      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      p_boot_info->CRC32 = SE_LL_CRC_Calculate((uint32_t *)(p_boot_info),
 8008994:	2103      	movs	r1, #3
 8008996:	4630      	mov	r0, r6
 8008998:	f7fa f832 	bl	8002a00 <SE_LL_CRC_Calculate>
      if (SE_INFO_WriteBootInfoArea(p_boot_info, &e_boot_info_status) != SE_SUCCESS)
 800899c:	a901      	add	r1, sp, #4
      p_boot_info->CRC32 = SE_LL_CRC_Calculate((uint32_t *)(p_boot_info),
 800899e:	60f0      	str	r0, [r6, #12]
      if (SE_INFO_WriteBootInfoArea(p_boot_info, &e_boot_info_status) != SE_SUCCESS)
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff ff6d 	bl	8008880 <SE_INFO_WriteBootInfoArea>
 80089a6:	42a8      	cmp	r0, r5
 80089a8:	d15d      	bne.n	8008a66 <SE_CallGateService+0x1b2>
        *peSE_Status = SE_OK;
 80089aa:	4b8c      	ldr	r3, [pc, #560]	; (8008bdc <SE_CallGateService+0x328>)
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	e02d      	b.n	8008a0c <SE_CallGateService+0x158>
  switch (eID)
 80089b0:	2896      	cmp	r0, #150	; 0x96
 80089b2:	f000 8102 	beq.w	8008bba <SE_CallGateService+0x306>
 80089b6:	f0c0 80c0 	bcc.w	8008b3a <SE_CallGateService+0x286>
 80089ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80089be:	f000 80b0 	beq.w	8008b22 <SE_CallGateService+0x26e>
 80089c2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80089c6:	d186      	bne.n	80088d6 <SE_CallGateService+0x22>
      __IS_SE_LOCKED_SERVICES();
 80089c8:	f7ff ff62 	bl	8008890 <__NVIC_SystemReset>
 80089cc:	4d81      	ldr	r5, [pc, #516]	; (8008bd4 <SE_CallGateService+0x320>)
 80089ce:	68eb      	ldr	r3, [r5, #12]
 80089d0:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80089d4:	d1f8      	bne.n	80089c8 <SE_CallGateService+0x114>
      *peSE_Status = SE_INIT_ERR;
 80089d6:	4b82      	ldr	r3, [pc, #520]	; (8008be0 <SE_CallGateService+0x32c>)
      se_system_core_clock = va_arg(arguments, uint32_t);
 80089d8:	6816      	ldr	r6, [r2, #0]
      *peSE_Status = SE_INIT_ERR;
 80089da:	600b      	str	r3, [r1, #0]
      if (SE_LL_CRC_Config() == SE_ERROR)
 80089dc:	f7f9 ffe4 	bl	80029a8 <SE_LL_CRC_Config>
 80089e0:	4b7d      	ldr	r3, [pc, #500]	; (8008bd8 <SE_CallGateService+0x324>)
 80089e2:	4298      	cmp	r0, r3
 80089e4:	d041      	beq.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 80089e6:	68eb      	ldr	r3, [r5, #12]
 80089e8:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80089ec:	d1ec      	bne.n	80089c8 <SE_CallGateService+0x114>
      SE_SetSystemCoreClock(se_system_core_clock);
 80089ee:	4630      	mov	r0, r6
 80089f0:	f000 fae6 	bl	8008fc0 <SE_SetSystemCoreClock>
      e_ret_status = SE_INFO_BootInfoAreaInit(&e_boot_info_status);
 80089f4:	a801      	add	r0, sp, #4
 80089f6:	f7ff febd 	bl	8008774 <SE_INFO_BootInfoAreaInit>
      if (e_ret_status != SE_SUCCESS)
 80089fa:	4d75      	ldr	r5, [pc, #468]	; (8008bd0 <SE_CallGateService+0x31c>)
 80089fc:	42a8      	cmp	r0, r5
 80089fe:	d0d4      	beq.n	80089aa <SE_CallGateService+0xf6>
        e_ret_status = SE_INFO_BootInfoAreaFactoryReset();
 8008a00:	f7ff fef4 	bl	80087ec <SE_INFO_BootInfoAreaFactoryReset>
        if (e_ret_status == SE_SUCCESS)
 8008a04:	42a8      	cmp	r0, r5
 8008a06:	d104      	bne.n	8008a12 <SE_CallGateService+0x15e>
          *peSE_Status = SE_BOOT_INFO_ERR_FACTORY_RESET;
 8008a08:	4b76      	ldr	r3, [pc, #472]	; (8008be4 <SE_CallGateService+0x330>)
 8008a0a:	6023      	str	r3, [r4, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
  {
    *peSE_Status = SE_KO;
  }
  return e_ret_status;
}
 8008a0c:	b003      	add	sp, #12
 8008a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          *peSE_Status = SE_BOOT_INFO_ERR;
 8008a12:	4b75      	ldr	r3, [pc, #468]	; (8008be8 <SE_CallGateService+0x334>)
 8008a14:	6023      	str	r3, [r4, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 8008a16:	4b70      	ldr	r3, [pc, #448]	; (8008bd8 <SE_CallGateService+0x324>)
 8008a18:	4298      	cmp	r0, r3
 8008a1a:	d1f7      	bne.n	8008a0c <SE_CallGateService+0x158>
 8008a1c:	e025      	b.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008a1e:	4e6d      	ldr	r6, [pc, #436]	; (8008bd4 <SE_CallGateService+0x320>)
 8008a20:	68f3      	ldr	r3, [r6, #12]
 8008a22:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008a26:	d1cf      	bne.n	80089c8 <SE_CallGateService+0x114>
      p_boot_info = va_arg(arguments, SE_BootInfoTypeDef *);
 8008a28:	6815      	ldr	r5, [r2, #0]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8008a2a:	f7f9 ffbd 	bl	80029a8 <SE_LL_CRC_Config>
 8008a2e:	4b6a      	ldr	r3, [pc, #424]	; (8008bd8 <SE_CallGateService+0x324>)
 8008a30:	4298      	cmp	r0, r3
 8008a32:	d01a      	beq.n	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_in_SBSFU_ram(p_boot_info, sizeof(*p_boot_info)) != SE_SUCCESS)
 8008a34:	2110      	movs	r1, #16
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7fa f8d6 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008a3c:	4b64      	ldr	r3, [pc, #400]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008a3e:	4298      	cmp	r0, r3
 8008a40:	4607      	mov	r7, r0
 8008a42:	d112      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008a44:	68f3      	ldr	r3, [r6, #12]
 8008a46:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008a4a:	d1bd      	bne.n	80089c8 <SE_CallGateService+0x114>
      if (SE_LL_Buffer_in_SBSFU_ram(p_boot_info, sizeof(*p_boot_info)) != SE_SUCCESS)
 8008a4c:	2110      	movs	r1, #16
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f7fa f8ca 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008a54:	42b8      	cmp	r0, r7
 8008a56:	4606      	mov	r6, r0
 8008a58:	d107      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      if (SE_INFO_ReadBootInfoArea(p_boot_info, &e_boot_info_status) != SE_SUCCESS)
 8008a5a:	a901      	add	r1, sp, #4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f7ff fee1 	bl	8008824 <SE_INFO_ReadBootInfoArea>
 8008a62:	42b0      	cmp	r0, r6
 8008a64:	d0a1      	beq.n	80089aa <SE_CallGateService+0xf6>
        *peSE_Status = SE_BOOT_INFO_ERR;
 8008a66:	4b60      	ldr	r3, [pc, #384]	; (8008be8 <SE_CallGateService+0x334>)
 8008a68:	6023      	str	r3, [r4, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 8008a6a:	6822      	ldr	r2, [r4, #0]
 8008a6c:	4b5b      	ldr	r3, [pc, #364]	; (8008bdc <SE_CallGateService+0x328>)
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	f040 810d 	bne.w	8008c8e <SE_CallGateService+0x3da>
    *peSE_Status = SE_KO;
 8008a74:	4b5d      	ldr	r3, [pc, #372]	; (8008bec <SE_CallGateService+0x338>)
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	4857      	ldr	r0, [pc, #348]	; (8008bd8 <SE_CallGateService+0x324>)
 8008a7a:	e7c7      	b.n	8008a0c <SE_CallGateService+0x158>
      __IS_SE_LOCKED_SERVICES();
 8008a7c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8008bd4 <SE_CallGateService+0x320>
 8008a80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a84:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008a88:	d19e      	bne.n	80089c8 <SE_CallGateService+0x114>
      p_source = va_arg(arguments, const void *);
 8008a8a:	e9d2 5900 	ldrd	r5, r9, [r2]
      length = va_arg(arguments, uint32_t);
 8008a8e:	6896      	ldr	r6, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 8008a90:	4628      	mov	r0, r5
 8008a92:	4631      	mov	r1, r6
 8008a94:	f7fa f8a8 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008a98:	4b4d      	ldr	r3, [pc, #308]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	d1e4      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008aa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aa4:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008aa8:	d18e      	bne.n	80089c8 <SE_CallGateService+0x114>
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7fa f89b 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008ab2:	42b8      	cmp	r0, r7
 8008ab4:	d1d9      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      e_ret_status = SE_IMG_Read(p_destination, p_source, length);
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 f91a 	bl	8008cf4 <SE_IMG_Read>
      break;
 8008ac0:	e7a9      	b.n	8008a16 <SE_CallGateService+0x162>
      __IS_SE_LOCKED_SERVICES();
 8008ac2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8008bd4 <SE_CallGateService+0x320>
 8008ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aca:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008ace:	f47f af7b 	bne.w	80089c8 <SE_CallGateService+0x114>
      p_source = va_arg(arguments, const void *);
 8008ad2:	e9d2 9500 	ldrd	r9, r5, [r2]
      length = va_arg(arguments, uint32_t);
 8008ad6:	6896      	ldr	r6, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 8008ad8:	4628      	mov	r0, r5
 8008ada:	4631      	mov	r1, r6
 8008adc:	f7fa f884 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008ae0:	4b3b      	ldr	r3, [pc, #236]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008ae2:	4298      	cmp	r0, r3
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	d1c0      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008ae8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aec:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008af0:	f47f af6a 	bne.w	80089c8 <SE_CallGateService+0x114>
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	f7fa f876 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008afc:	42b8      	cmp	r0, r7
 8008afe:	d1b4      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      e_ret_status = SE_IMG_Write(p_destination, p_source, length);
 8008b00:	4632      	mov	r2, r6
 8008b02:	4629      	mov	r1, r5
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 f8e1 	bl	8008ccc <SE_IMG_Write>
      break;
 8008b0a:	e784      	b.n	8008a16 <SE_CallGateService+0x162>
      __IS_SE_LOCKED_SERVICES();
 8008b0c:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <SE_CallGateService+0x320>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008b14:	f47f af58 	bne.w	80089c8 <SE_CallGateService+0x114>
      e_ret_status = SE_IMG_Erase(p_destination, length);
 8008b18:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008b1c:	f000 f8fe 	bl	8008d1c <SE_IMG_Erase>
      break;
 8008b20:	e779      	b.n	8008a16 <SE_CallGateService+0x162>
      __IS_SE_LOCKED_SERVICES();
 8008b22:	4c2c      	ldr	r4, [pc, #176]	; (8008bd4 <SE_CallGateService+0x320>)
 8008b24:	68e3      	ldr	r3, [r4, #12]
 8008b26:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008b2a:	f47f af4d 	bne.w	80089c8 <SE_CallGateService+0x114>
      SE_LL_CORE_Cleanup();
 8008b2e:	f7fa f887 	bl	8002c40 <SE_LL_CORE_Cleanup>
      SE_LockRestrictedServices = SE_LOCKED;
 8008b32:	4b2f      	ldr	r3, [pc, #188]	; (8008bf0 <SE_CallGateService+0x33c>)
 8008b34:	60e3      	str	r3, [r4, #12]
      e_ret_status = SE_SUCCESS;
 8008b36:	4826      	ldr	r0, [pc, #152]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008b38:	e768      	b.n	8008a0c <SE_CallGateService+0x158>
      __IS_SE_LOCKED_SERVICES();
 8008b3a:	4f26      	ldr	r7, [pc, #152]	; (8008bd4 <SE_CallGateService+0x320>)
      SE_FwStateTypeDef eTempFwState[3] = {FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN};
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008b42:	f88d 3005 	strb.w	r3, [sp, #5]
 8008b46:	f88d 3006 	strb.w	r3, [sp, #6]
      __IS_SE_LOCKED_SERVICES();
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008b50:	f47f af3a 	bne.w	80089c8 <SE_CallGateService+0x114>
      p_FwState = va_arg(arguments, SE_FwStateTypeDef*);
 8008b54:	6816      	ldr	r6, [r2, #0]
      if (SE_LL_Buffer_in_SBSFU_ram(p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008b56:	4d1e      	ldr	r5, [pc, #120]	; (8008bd0 <SE_CallGateService+0x31c>)
 8008b58:	2101      	movs	r1, #1
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7fa f844 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008b60:	42a8      	cmp	r0, r5
 8008b62:	d182      	bne.n	8008a6a <SE_CallGateService+0x1b6>
      __IS_SE_LOCKED_SERVICES();
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008b6a:	f47f af2d 	bne.w	80089c8 <SE_CallGateService+0x114>
      if (SE_LL_Buffer_in_SBSFU_ram(p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7fa f839 	bl	8002be8 <SE_LL_Buffer_in_SBSFU_ram>
 8008b76:	42a8      	cmp	r0, r5
 8008b78:	f47f af77 	bne.w	8008a6a <SE_CallGateService+0x1b6>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008b7c:	a801      	add	r0, sp, #4
 8008b7e:	f000 f95d 	bl	8008e3c <SE_APPLI_GetActiveFwState>
        if(SE_SUCCESS == e_ret_status)
 8008b82:	42a8      	cmp	r0, r5
 8008b84:	d117      	bne.n	8008bb6 <SE_CallGateService+0x302>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008b86:	f10d 0005 	add.w	r0, sp, #5
 8008b8a:	f000 f957 	bl	8008e3c <SE_APPLI_GetActiveFwState>
        if(SE_SUCCESS == e_ret_status)
 8008b8e:	42a8      	cmp	r0, r5
 8008b90:	d111      	bne.n	8008bb6 <SE_CallGateService+0x302>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008b92:	f10d 0006 	add.w	r0, sp, #6
 8008b96:	f000 f951 	bl	8008e3c <SE_APPLI_GetActiveFwState>
      if(SE_SUCCESS == e_ret_status)
 8008b9a:	42a8      	cmp	r0, r5
 8008b9c:	d10b      	bne.n	8008bb6 <SE_CallGateService+0x302>
        if((eTempFwState[0]==eTempFwState[1])&&(eTempFwState[0]==eTempFwState[2]))
 8008b9e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008ba2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d105      	bne.n	8008bb6 <SE_CallGateService+0x302>
 8008baa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d101      	bne.n	8008bb6 <SE_CallGateService+0x302>
        *p_FwState = FWIMG_STATE_UNKNOWN;
 8008bb2:	7033      	strb	r3, [r6, #0]
 8008bb4:	e72f      	b.n	8008a16 <SE_CallGateService+0x162>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	e7fb      	b.n	8008bb2 <SE_CallGateService+0x2fe>
      __IS_SE_LOCKED_SERVICES();
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <SE_CallGateService+0x320>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8008bc2:	f47f af01 	bne.w	80089c8 <SE_CallGateService+0x114>
      e_ret_status = SE_SetActiveFwState(p_FwState);
 8008bc6:	6810      	ldr	r0, [r2, #0]
 8008bc8:	f000 f8be 	bl	8008d48 <SE_SetActiveFwState>
      break;
 8008bcc:	e723      	b.n	8008a16 <SE_CallGateService+0x162>
 8008bce:	bf00      	nop
 8008bd0:	0012310f 	.word	0x0012310f
 8008bd4:	200020ec 	.word	0x200020ec
 8008bd8:	00018799 	.word	0x00018799
 8008bdc:	0012e223 	.word	0x0012e223
 8008be0:	00130ce5 	.word	0x00130ce5
 8008be4:	0013b424 	.word	0x0013b424
 8008be8:	00135705 	.word	0x00135705
 8008bec:	0013023d 	.word	0x0013023d
 8008bf0:	7aaaaaaa 	.word	0x7aaaaaaa
      p_FwState = va_arg(arguments, SE_FwStateTypeDef*);
 8008bf4:	6815      	ldr	r5, [r2, #0]
      SE_FwStateTypeDef eTempFwState[3] = {FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN};
 8008bf6:	2304      	movs	r3, #4
      if (SE_LL_Buffer_in_ram((void *)p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4628      	mov	r0, r5
      SE_FwStateTypeDef eTempFwState[3] = {FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN};
 8008bfc:	f88d 3004 	strb.w	r3, [sp, #4]
 8008c00:	f88d 3005 	strb.w	r3, [sp, #5]
 8008c04:	f88d 3006 	strb.w	r3, [sp, #6]
      if (SE_LL_Buffer_in_ram((void *)p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008c08:	f7f9 ffdc 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 8008c0c:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <SE_CallGateService+0x3e0>)
 8008c0e:	4298      	cmp	r0, r3
 8008c10:	4606      	mov	r6, r0
 8008c12:	f47f af2a 	bne.w	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_in_ram((void *)p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008c16:	2101      	movs	r1, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7f9 ffd3 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 8008c1e:	42b0      	cmp	r0, r6
 8008c20:	4607      	mov	r7, r0
 8008c22:	f47f af22 	bne.w	8008a6a <SE_CallGateService+0x1b6>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008c26:	a801      	add	r0, sp, #4
 8008c28:	f000 f908 	bl	8008e3c <SE_APPLI_GetActiveFwState>
        if(SE_SUCCESS == e_ret_status)
 8008c2c:	42b8      	cmp	r0, r7
 8008c2e:	d117      	bne.n	8008c60 <SE_CallGateService+0x3ac>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008c30:	f10d 0005 	add.w	r0, sp, #5
 8008c34:	f000 f902 	bl	8008e3c <SE_APPLI_GetActiveFwState>
        if(SE_SUCCESS == e_ret_status)
 8008c38:	42b8      	cmp	r0, r7
 8008c3a:	d111      	bne.n	8008c60 <SE_CallGateService+0x3ac>
          e_ret_status = SE_APPLI_GetActiveFwState(&eTempFwState[i]);
 8008c3c:	f10d 0006 	add.w	r0, sp, #6
 8008c40:	f000 f8fc 	bl	8008e3c <SE_APPLI_GetActiveFwState>
      if(SE_SUCCESS == e_ret_status)
 8008c44:	42b0      	cmp	r0, r6
 8008c46:	d10b      	bne.n	8008c60 <SE_CallGateService+0x3ac>
        if((eTempFwState[0]==eTempFwState[1])&&(eTempFwState[0]==eTempFwState[2]))
 8008c48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d105      	bne.n	8008c60 <SE_CallGateService+0x3ac>
 8008c54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d101      	bne.n	8008c60 <SE_CallGateService+0x3ac>
        *p_FwState = FWIMG_STATE_UNKNOWN;
 8008c5c:	702b      	strb	r3, [r5, #0]
 8008c5e:	e6da      	b.n	8008a16 <SE_CallGateService+0x162>
 8008c60:	2304      	movs	r3, #4
 8008c62:	e7fb      	b.n	8008c5c <SE_CallGateService+0x3a8>
      p_FwState = va_arg(arguments, SE_FwStateTypeDef*);
 8008c64:	6815      	ldr	r5, [r2, #0]
      if (SE_LL_Buffer_in_ram((void *)p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008c66:	2101      	movs	r1, #1
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f7f9 ffab 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 8008c6e:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <SE_CallGateService+0x3e0>)
 8008c70:	4298      	cmp	r0, r3
 8008c72:	4606      	mov	r6, r0
 8008c74:	f47f aef9 	bne.w	8008a6a <SE_CallGateService+0x1b6>
      if (SE_LL_Buffer_in_ram((void *)p_FwState, sizeof(*p_FwState)) != SE_SUCCESS)
 8008c78:	2101      	movs	r1, #1
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7f9 ffa2 	bl	8002bc4 <SE_LL_Buffer_in_ram>
 8008c80:	42b0      	cmp	r0, r6
 8008c82:	f47f aef2 	bne.w	8008a6a <SE_CallGateService+0x1b6>
      e_ret_status = SE_APPLI_SetActiveFwState(p_FwState);
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 f94a 	bl	8008f20 <SE_APPLI_SetActiveFwState>
      break;
 8008c8c:	e6c3      	b.n	8008a16 <SE_CallGateService+0x162>
 8008c8e:	4802      	ldr	r0, [pc, #8]	; (8008c98 <SE_CallGateService+0x3e4>)
  return e_ret_status;
 8008c90:	e6bc      	b.n	8008a0c <SE_CallGateService+0x158>
 8008c92:	bf00      	nop
 8008c94:	0012310f 	.word	0x0012310f
 8008c98:	00018799 	.word	0x00018799

08008c9c <__NVIC_SystemReset>:
 8008c9c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008ca0:	4905      	ldr	r1, [pc, #20]	; (8008cb8 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008ca4:	68ca      	ldr	r2, [r1, #12]
 8008ca6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60cb      	str	r3, [r1, #12]
 8008cae:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <__NVIC_SystemReset+0x16>
 8008cb6:	bf00      	nop
 8008cb8:	e000ed00 	.word	0xe000ed00
 8008cbc:	05fa0004 	.word	0x05fa0004

08008cc0 <SE_NMI_ExceptionHandler>:
  * @param None.
  * @retval None.
  */

void SE_NMI_ExceptionHandler(void)
{
 8008cc0:	b508      	push	{r3, lr}
  NVIC_SystemReset();
 8008cc2:	f7ff ffeb 	bl	8008c9c <__NVIC_SystemReset>

08008cc6 <HardFault_Handler>:
 8008cc6:	b508      	push	{r3, lr}
 8008cc8:	f7ff ffe8 	bl	8008c9c <__NVIC_SystemReset>

08008ccc <SE_IMG_Write>:
  * @param  Length number of bytes to be written
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Write(void *pDestination, const void *pSource, uint32_t Length)
{
 8008ccc:	b430      	push	{r4, r5}
  SE_ErrorStatus ret;
  uint32_t areabegin = (uint32_t)pDestination;
  uint32_t areaend = areabegin + Length - 1U;

  /* The header of slot #0 is placed in protected area */
  if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008cce:	4c07      	ldr	r4, [pc, #28]	; (8008cec <SE_IMG_Write+0x20>)
 8008cd0:	4284      	cmp	r4, r0
 8008cd2:	d808      	bhi.n	8008ce6 <SE_IMG_Write+0x1a>
  uint32_t areaend = areabegin + Length - 1U;
 8008cd4:	1e53      	subs	r3, r2, #1
     (areaend < (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)))
 8008cd6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  uint32_t areaend = areabegin + Length - 1U;
 8008cda:	4403      	add	r3, r0
  if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	d902      	bls.n	8008ce6 <SE_IMG_Write+0x1a>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 8008ce0:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
 8008ce2:	f7f9 beed 	b.w	8002ac0 <SE_LL_FLASH_Write>
    ret = SE_ERROR;
 8008ce6:	4802      	ldr	r0, [pc, #8]	; (8008cf0 <SE_IMG_Write+0x24>)
}
 8008ce8:	bc30      	pop	{r4, r5}
 8008cea:	4770      	bx	lr
 8008cec:	08105000 	.word	0x08105000
 8008cf0:	00018799 	.word	0x00018799

08008cf4 <SE_IMG_Read>:
  * @param  Length number of bytes to be read
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Read(void *pDestination, const void *pSource, uint32_t Length)
{
 8008cf4:	b430      	push	{r4, r5}
  SE_ErrorStatus ret;
  uint32_t areabegin = (uint32_t)pSource;
  uint32_t areaend = areabegin + Length - 1U;
  /* The header of slot #0 is placed in protected area */
 if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008cf6:	4c07      	ldr	r4, [pc, #28]	; (8008d14 <SE_IMG_Read+0x20>)
 8008cf8:	428c      	cmp	r4, r1
 8008cfa:	d808      	bhi.n	8008d0e <SE_IMG_Read+0x1a>
  uint32_t areaend = areabegin + Length - 1U;
 8008cfc:	1e53      	subs	r3, r2, #1
     (areaend < (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)))
 8008cfe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  uint32_t areaend = areabegin + Length - 1U;
 8008d02:	440b      	add	r3, r1
 if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008d04:	429c      	cmp	r4, r3
 8008d06:	d902      	bls.n	8008d0e <SE_IMG_Read+0x1a>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 8008d08:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
 8008d0a:	f7f9 bf07 	b.w	8002b1c <SE_LL_FLASH_Read>
    ret = SE_ERROR;
 8008d0e:	4802      	ldr	r0, [pc, #8]	; (8008d18 <SE_IMG_Read+0x24>)
}
 8008d10:	bc30      	pop	{r4, r5}
 8008d12:	4770      	bx	lr
 8008d14:	08105000 	.word	0x08105000
 8008d18:	00018799 	.word	0x00018799

08008d1c <SE_IMG_Erase>:
{
  SE_ErrorStatus ret;
  uint32_t areabegin = (uint32_t)pDestination;
  uint32_t areaend = areabegin + Length - 1U;
  /* The header of slot #0 is placed in protected area */
  if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <SE_IMG_Erase+0x24>)
 8008d1e:	4282      	cmp	r2, r0
{
 8008d20:	b410      	push	{r4}
  if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008d22:	d809      	bhi.n	8008d38 <SE_IMG_Erase+0x1c>
  uint32_t areaend = areabegin + Length - 1U;
 8008d24:	1e4b      	subs	r3, r1, #1
      (areaend < (SFU_IMG_SLOT_0_REGION_BEGIN_VALUE + SFU_IMG_IMAGE_OFFSET)))
 8008d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
  uint32_t areaend = areabegin + Length - 1U;
 8008d2a:	4403      	add	r3, r0
  if ((areabegin >= SFU_IMG_SLOT_0_REGION_BEGIN_VALUE) &&
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d903      	bls.n	8008d38 <SE_IMG_Erase+0x1c>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 8008d30:	f85d 4b04 	ldr.w	r4, [sp], #4
    ret = SE_LL_FLASH_Erase(pDestination, Length);
 8008d34:	f7f9 be6c 	b.w	8002a10 <SE_LL_FLASH_Erase>
    ret = SE_ERROR;
 8008d38:	4802      	ldr	r0, [pc, #8]	; (8008d44 <SE_IMG_Erase+0x28>)
}
 8008d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	08105000 	.word	0x08105000
 8008d44:	00018799 	.word	0x00018799

08008d48 <SE_SetActiveFwState>:
  * FWIMG_STATE_VALID to FWIMG_STATE_INVALID
  * @param p_FwState Active Firmware State structure containing the state that will be set.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SetActiveFwState(SE_FwStateTypeDef *p_FwState)
{
 8008d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4a:	b08b      	sub	sp, #44	; 0x2c
  SE_ErrorStatus e_ret_status = SE_ERROR;
  SE_FwRawHeaderTypeDef *pfw_image_header = (SE_FwRawHeaderTypeDef*) SFU_IMG_SLOT_0_REGION_BEGIN;  /* FW metadata */
  
  const uint8_t ZerosBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
 8008d4c:	2220      	movs	r2, #32
{
 8008d4e:	4606      	mov	r6, r0
  const uint8_t ZerosBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
 8008d50:	2100      	movs	r1, #0
 8008d52:	a802      	add	r0, sp, #8
 8008d54:	f00d fed5 	bl	8016b02 <memset>
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                                   
  
  SE_FwStateTypeDef eCurrentState = FWIMG_STATE_UNKNOWN;
  SE_FwStateTypeDef eTempCurrentState[3] = {FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN};
 8008d58:	4b25      	ldr	r3, [pc, #148]	; (8008df0 <SE_SetActiveFwState+0xa8>)
 8008d5a:	881a      	ldrh	r2, [r3, #0]
 8008d5c:	789b      	ldrb	r3, [r3, #2]
 8008d5e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008d62:	f88d 3006 	strb.w	r3, [sp, #6]
  /* Check the pointer allocation */
  if (NULL == p_FwState)
 8008d66:	b90e      	cbnz	r6, 8008d6c <SE_SetActiveFwState+0x24>
      e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[2] , ZerosBuffer, sizeof(ZerosBuffer));
      break;
    }
    default:
    {
      e_ret_status = SE_ERROR;
 8008d68:	4822      	ldr	r0, [pc, #136]	; (8008df4 <SE_SetActiveFwState+0xac>)
 8008d6a:	e03a      	b.n	8008de2 <SE_SetActiveFwState+0x9a>
  e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[0]);
 8008d6c:	a801      	add	r0, sp, #4
 8008d6e:	f000 f865 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008d72:	4d21      	ldr	r5, [pc, #132]	; (8008df8 <SE_SetActiveFwState+0xb0>)
 8008d74:	42a8      	cmp	r0, r5
  e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[0]);
 8008d76:	4607      	mov	r7, r0
  if(SE_SUCCESS == e_ret_status)
 8008d78:	d1f6      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[1]);
 8008d7a:	f10d 0005 	add.w	r0, sp, #5
 8008d7e:	f000 f85d 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008d82:	42b8      	cmp	r0, r7
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[1]);
 8008d84:	4604      	mov	r4, r0
  if(SE_SUCCESS == e_ret_status)
 8008d86:	d1ef      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[2]);
 8008d88:	f10d 0006 	add.w	r0, sp, #6
 8008d8c:	f000 f856 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008d90:	42a0      	cmp	r0, r4
 8008d92:	d1e9      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
    if((eTempCurrentState[0]==eTempCurrentState[1]) && (eTempCurrentState[0]==eTempCurrentState[2]))
 8008d94:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8008d98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d1e3      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
 8008da0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d1df      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
  if( (e_ret_status != SE_SUCCESS) || (eCurrentState == FWIMG_STATE_UNKNOWN) )
 8008da8:	2a04      	cmp	r2, #4
 8008daa:	d0dd      	beq.n	8008d68 <SE_SetActiveFwState+0x20>
  if((eCurrentState == FWIMG_STATE_NEW) && (*p_FwState != FWIMG_STATE_SELFTEST))
 8008dac:	2a03      	cmp	r2, #3
 8008dae:	7833      	ldrb	r3, [r6, #0]
 8008db0:	d105      	bne.n	8008dbe <SE_SetActiveFwState+0x76>
  switch(*p_FwState)
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d1d8      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
      e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[2] , ZerosBuffer, sizeof(ZerosBuffer));
 8008db6:	2220      	movs	r2, #32
 8008db8:	a902      	add	r1, sp, #8
 8008dba:	4810      	ldr	r0, [pc, #64]	; (8008dfc <SE_SetActiveFwState+0xb4>)
 8008dbc:	e00f      	b.n	8008dde <SE_SetActiveFwState+0x96>
  if((eCurrentState == FWIMG_STATE_SELFTEST) && (*p_FwState != FWIMG_STATE_INVALID))
 8008dbe:	2c02      	cmp	r4, #2
 8008dc0:	d111      	bne.n	8008de6 <SE_SetActiveFwState+0x9e>
  if((eCurrentState == FWIMG_STATE_VALID) && (*p_FwState != FWIMG_STATE_INVALID))
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d0      	bne.n	8008d68 <SE_SetActiveFwState+0x20>
      e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[0] , ZerosBuffer, sizeof(ZerosBuffer));
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	a902      	add	r1, sp, #8
 8008dca:	480d      	ldr	r0, [pc, #52]	; (8008e00 <SE_SetActiveFwState+0xb8>)
 8008dcc:	f7f9 fe78 	bl	8002ac0 <SE_LL_FLASH_Write>
      if(e_ret_status == SE_SUCCESS)
 8008dd0:	42a8      	cmp	r0, r5
 8008dd2:	d106      	bne.n	8008de2 <SE_SetActiveFwState+0x9a>
        if(eCurrentState == FWIMG_STATE_SELFTEST)
 8008dd4:	2c02      	cmp	r4, #2
 8008dd6:	d104      	bne.n	8008de2 <SE_SetActiveFwState+0x9a>
          e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[1] , ZerosBuffer, sizeof(ZerosBuffer));
 8008dd8:	480a      	ldr	r0, [pc, #40]	; (8008e04 <SE_SetActiveFwState+0xbc>)
 8008dda:	2220      	movs	r2, #32
 8008ddc:	a902      	add	r1, sp, #8
      e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[2] , ZerosBuffer, sizeof(ZerosBuffer));
 8008dde:	f7f9 fe6f 	bl	8002ac0 <SE_LL_FLASH_Write>
    }
  }
  return e_ret_status;
}
 8008de2:	b00b      	add	sp, #44	; 0x2c
 8008de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((eCurrentState == FWIMG_STATE_VALID) && (*p_FwState != FWIMG_STATE_INVALID))
 8008de6:	2c01      	cmp	r4, #1
 8008de8:	d0eb      	beq.n	8008dc2 <SE_SetActiveFwState+0x7a>
  switch(*p_FwState)
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e1      	bne.n	8008db2 <SE_SetActiveFwState+0x6a>
 8008dee:	e7ea      	b.n	8008dc6 <SE_SetActiveFwState+0x7e>
 8008df0:	08017ff0 	.word	0x08017ff0
 8008df4:	00018799 	.word	0x00018799
 8008df8:	0012310f 	.word	0x0012310f
 8008dfc:	08105760 	.word	0x08105760
 8008e00:	08105720 	.word	0x08105720
 8008e04:	08105740 	.word	0x08105740

08008e08 <SE_APPLI_GetActiveFwInfo>:
  * @brief Service called by the User Application to retrieve the Active Firmware Info.
  * @param p_FwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_GetActiveFwInfo(SE_APP_ActiveFwInfo_t *p_FwInfo)
{
 8008e08:	b530      	push	{r4, r5, lr}
  SE_ErrorStatus e_ret_status;
  uint8_t buffer[SE_FW_HEADER_METADATA_LEN];  /* to read FW metadata from FLASH */
  SE_FwRawHeaderTypeDef *pfw_image_header;  /* FW metadata */

  /* Check the pointer allocation */
  if (NULL == p_FwInfo)
 8008e0a:	4604      	mov	r4, r0
{
 8008e0c:	b097      	sub	sp, #92	; 0x5c
 8008e0e:	4d09      	ldr	r5, [pc, #36]	; (8008e34 <SE_APPLI_GetActiveFwInfo+0x2c>)
  if (NULL == p_FwInfo)
 8008e10:	b168      	cbz	r0, 8008e2e <SE_APPLI_GetActiveFwInfo+0x26>
  }

  /*
   * The Firmware Information is available in the header of the slot #0.
   */
  e_ret_status = SE_LL_FLASH_Read(buffer, SFU_IMG_SLOT_0_REGION_BEGIN, sizeof(buffer));
 8008e12:	2254      	movs	r2, #84	; 0x54
 8008e14:	4908      	ldr	r1, [pc, #32]	; (8008e38 <SE_APPLI_GetActiveFwInfo+0x30>)
 8008e16:	a801      	add	r0, sp, #4
 8008e18:	f7f9 fe80 	bl	8002b1c <SE_LL_FLASH_Read>
  if (e_ret_status != SE_ERROR)
 8008e1c:	42a8      	cmp	r0, r5
 8008e1e:	d004      	beq.n	8008e2a <SE_APPLI_GetActiveFwInfo+0x22>

    /*
     * We do not check the header validity.
     * We just copy the information.
     */
    p_FwInfo->ActiveFwVersion = pfw_image_header->FwVersion;
 8008e20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008e24:	8023      	strh	r3, [r4, #0]
    p_FwInfo->ActiveFwSize = pfw_image_header->FwSize;
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	6063      	str	r3, [r4, #4]
  }

  return e_ret_status;
}
 8008e2a:	b017      	add	sp, #92	; 0x5c
 8008e2c:	bd30      	pop	{r4, r5, pc}
    return SE_ERROR;
 8008e2e:	4628      	mov	r0, r5
 8008e30:	e7fb      	b.n	8008e2a <SE_APPLI_GetActiveFwInfo+0x22>
 8008e32:	bf00      	nop
 8008e34:	00018799 	.word	0x00018799
 8008e38:	08105000 	.word	0x08105000

08008e3c <SE_APPLI_GetActiveFwState>:
  * @brief Service called by the User Application to retrieve the Active Firmware State.
  * @param p_FwState Active Firmware State structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_GetActiveFwState(SE_FwStateTypeDef *p_FwState)
{
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  SE_ErrorStatus e_ret_status = SE_ERROR;
  uint8_t buffer[3*32];  /* to read FW State from FLASH */
  SE_FwRawHeaderTypeDef *pfw_image_header = (SE_FwRawHeaderTypeDef*) SFU_IMG_SLOT_0_REGION_BEGIN;  /* FW metadata */
  const uint8_t OnesBuffer[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
 8008e3e:	4b34      	ldr	r3, [pc, #208]	; (8008f10 <SE_APPLI_GetActiveFwState+0xd4>)
{
 8008e40:	b0a9      	sub	sp, #164	; 0xa4
  const uint8_t OnesBuffer[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
 8008e42:	466a      	mov	r2, sp
{
 8008e44:	4605      	mov	r5, r0
  const uint8_t OnesBuffer[32] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
 8008e46:	f103 0620 	add.w	r6, r3, #32
 8008e4a:	4617      	mov	r7, r2
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	6859      	ldr	r1, [r3, #4]
 8008e50:	4614      	mov	r4, r2
 8008e52:	c403      	stmia	r4!, {r0, r1}
 8008e54:	3308      	adds	r3, #8
 8008e56:	42b3      	cmp	r3, r6
 8008e58:	4622      	mov	r2, r4
 8008e5a:	d1f7      	bne.n	8008e4c <SE_APPLI_GetActiveFwState+0x10>
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
                                  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,};

  const uint8_t ZerosBuffer[32] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	2100      	movs	r1, #0
 8008e60:	eb0d 0002 	add.w	r0, sp, r2
 8008e64:	f00d fe4d 	bl	8016b02 <memset>
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  uint32_t TempState = 0x00; /* checking the image state in the FLASH (header of slot #0) */
  /* Check the pointer allocation */
  if (NULL == p_FwState)
 8008e68:	b1bd      	cbz	r5, 8008e9a <SE_APPLI_GetActiveFwState+0x5e>
  }

  /*
   * The Firmware State is available in the header of the slot #0.
   */
  e_ret_status = SE_LL_FLASH_Read(buffer, pfw_image_header->FwImageState, sizeof(buffer));
 8008e6a:	2260      	movs	r2, #96	; 0x60
 8008e6c:	4929      	ldr	r1, [pc, #164]	; (8008f14 <SE_APPLI_GetActiveFwState+0xd8>)
 8008e6e:	a810      	add	r0, sp, #64	; 0x40
 8008e70:	f7f9 fe54 	bl	8002b1c <SE_LL_FLASH_Read>
   * FWIMG_STATE_VALID   : 1*32 0xFF, 2*32 0x00
   * FWIMG_STATE_SELFTEST: 2*32 0xFF, 1*32 0x00
   * FWIMG_STATE_NEW     : 3*32 0xFF
   * FWIMG_STATE_UNKNOWN : any other values
   */
  if (e_ret_status == SE_SUCCESS)
 8008e74:	4b28      	ldr	r3, [pc, #160]	; (8008f18 <SE_APPLI_GetActiveFwState+0xdc>)
 8008e76:	4298      	cmp	r0, r3
  e_ret_status = SE_LL_FLASH_Read(buffer, pfw_image_header->FwImageState, sizeof(buffer));
 8008e78:	4606      	mov	r6, r0
  if (e_ret_status == SE_SUCCESS)
 8008e7a:	d13d      	bne.n	8008ef8 <SE_APPLI_GetActiveFwState+0xbc>
  {

    /* Check FwImageState[0] */
    if(memcmp(&buffer[0], ZerosBuffer, sizeof(ZerosBuffer))==0)
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	eb0d 0102 	add.w	r1, sp, r2
 8008e82:	a810      	add	r0, sp, #64	; 0x40
 8008e84:	f00d fe0a 	bl	8016a9c <memcmp>
 8008e88:	b148      	cbz	r0, 8008e9e <SE_APPLI_GetActiveFwState+0x62>
    {
      TempState &= ~0x1;
    }
    else
    {
      if(memcmp(&buffer[0], OnesBuffer, sizeof(OnesBuffer))==0)
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	a810      	add	r0, sp, #64	; 0x40
 8008e90:	f00d fe04 	bl	8016a9c <memcmp>
 8008e94:	b360      	cbz	r0, 8008ef0 <SE_APPLI_GetActiveFwState+0xb4>
      {
        TempState |= 0x1;
      }
      else
      {
        *p_FwState = FWIMG_STATE_UNKNOWN;
 8008e96:	2304      	movs	r3, #4
 8008e98:	702b      	strb	r3, [r5, #0]
    return SE_ERROR;
 8008e9a:	4e20      	ldr	r6, [pc, #128]	; (8008f1c <SE_APPLI_GetActiveFwState+0xe0>)
 8008e9c:	e02c      	b.n	8008ef8 <SE_APPLI_GetActiveFwState+0xbc>
      TempState &= ~0x1;
 8008e9e:	4604      	mov	r4, r0
        return SE_ERROR;
      }
    }

    /* Check FwImageState[1] */
    if(memcmp(&buffer[32], ZerosBuffer, sizeof(ZerosBuffer))==0)
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	eb0d 0102 	add.w	r1, sp, r2
 8008ea6:	a818      	add	r0, sp, #96	; 0x60
 8008ea8:	f00d fdf8 	bl	8016a9c <memcmp>
 8008eac:	b140      	cbz	r0, 8008ec0 <SE_APPLI_GetActiveFwState+0x84>
    {
      TempState &= ~0x2;
    }
    else
    {
      if(memcmp(&buffer[32], OnesBuffer, sizeof(OnesBuffer))==0)
 8008eae:	2220      	movs	r2, #32
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	a818      	add	r0, sp, #96	; 0x60
 8008eb4:	f00d fdf2 	bl	8016a9c <memcmp>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1ec      	bne.n	8008e96 <SE_APPLI_GetActiveFwState+0x5a>
      {
        TempState |= 0x2;
 8008ebc:	f044 0402 	orr.w	r4, r4, #2
        return SE_ERROR;
      }
    }

    /* Check FwImageState[2] */
    if(memcmp(&buffer[64], ZerosBuffer, sizeof(ZerosBuffer))==0)
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	eb0d 0102 	add.w	r1, sp, r2
 8008ec6:	a820      	add	r0, sp, #128	; 0x80
 8008ec8:	f00d fde8 	bl	8016a9c <memcmp>
 8008ecc:	b140      	cbz	r0, 8008ee0 <SE_APPLI_GetActiveFwState+0xa4>
    {
      TempState &= ~0x4;
    }
    else
    {
      if(memcmp(&buffer[64], OnesBuffer, sizeof(OnesBuffer))==0)
 8008ece:	2220      	movs	r2, #32
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	a820      	add	r0, sp, #128	; 0x80
 8008ed4:	f00d fde2 	bl	8016a9c <memcmp>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1dc      	bne.n	8008e96 <SE_APPLI_GetActiveFwState+0x5a>
      {
        TempState |= 0x4;
 8008edc:	f044 0404 	orr.w	r4, r4, #4
        *p_FwState = FWIMG_STATE_UNKNOWN;
        return SE_ERROR;
      }
    }

    switch (TempState)
 8008ee0:	2c07      	cmp	r4, #7
 8008ee2:	d812      	bhi.n	8008f0a <SE_APPLI_GetActiveFwState+0xce>
 8008ee4:	e8df f004 	tbb	[pc, r4]
 8008ee8:	0d110b06 	.word	0x0d110b06
 8008eec:	0f111111 	.word	0x0f111111
        TempState |= 0x1;
 8008ef0:	2401      	movs	r4, #1
 8008ef2:	e7d5      	b.n	8008ea0 <SE_APPLI_GetActiveFwState+0x64>
    {
      case 0: // b000 invalid
      {
        *p_FwState = FWIMG_STATE_INVALID;
 8008ef4:	2300      	movs	r3, #0
        e_ret_status = SE_SUCCESS;
        break;
      }
    default:
      {
        *p_FwState = FWIMG_STATE_UNKNOWN;
 8008ef6:	702b      	strb	r3, [r5, #0]
        break;
      }
    }
  }
  return e_ret_status;
}
 8008ef8:	4630      	mov	r0, r6
 8008efa:	b029      	add	sp, #164	; 0xa4
 8008efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *p_FwState = FWIMG_STATE_VALID;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7f9      	b.n	8008ef6 <SE_APPLI_GetActiveFwState+0xba>
        *p_FwState = FWIMG_STATE_SELFTEST;
 8008f02:	2302      	movs	r3, #2
 8008f04:	e7f7      	b.n	8008ef6 <SE_APPLI_GetActiveFwState+0xba>
        *p_FwState = FWIMG_STATE_NEW;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e7f5      	b.n	8008ef6 <SE_APPLI_GetActiveFwState+0xba>
        *p_FwState = FWIMG_STATE_UNKNOWN;
 8008f0a:	2304      	movs	r3, #4
 8008f0c:	e7f3      	b.n	8008ef6 <SE_APPLI_GetActiveFwState+0xba>
 8008f0e:	bf00      	nop
 8008f10:	08017ff3 	.word	0x08017ff3
 8008f14:	08105720 	.word	0x08105720
 8008f18:	0012310f 	.word	0x0012310f
 8008f1c:	00018799 	.word	0x00018799

08008f20 <SE_APPLI_SetActiveFwState>:
  * depending on the result of the selftest.
  * @param p_FwState Active Firmware State structure containing the state that will be set.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_SetActiveFwState(SE_FwStateTypeDef *p_FwState)
{
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
  SE_ErrorStatus e_ret_status = SE_ERROR;
  SE_FwRawHeaderTypeDef *pfw_image_header = (SE_FwRawHeaderTypeDef*) SFU_IMG_SLOT_0_REGION_BEGIN;  /* FW metadata */

  const uint8_t ZerosBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
 8008f24:	2220      	movs	r2, #32
{
 8008f26:	4605      	mov	r5, r0
  const uint8_t ZerosBuffer[32] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
 8008f28:	2100      	movs	r1, #0
 8008f2a:	a802      	add	r0, sp, #8
 8008f2c:	f00d fde9 	bl	8016b02 <memset>
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


  SE_FwStateTypeDef eCurrentState = FWIMG_STATE_UNKNOWN;
  SE_FwStateTypeDef eTempCurrentState[3] = {FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN, FWIMG_STATE_UNKNOWN};
 8008f30:	4b1e      	ldr	r3, [pc, #120]	; (8008fac <SE_APPLI_SetActiveFwState+0x8c>)
 8008f32:	881a      	ldrh	r2, [r3, #0]
 8008f34:	789b      	ldrb	r3, [r3, #2]
 8008f36:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008f3a:	f88d 3006 	strb.w	r3, [sp, #6]

  /* Check the pointer allocation */
  if (NULL == p_FwState)
 8008f3e:	b90d      	cbnz	r5, 8008f44 <SE_APPLI_SetActiveFwState+0x24>
      }
      break;
    }
    default:
    {
      e_ret_status = SE_ERROR;
 8008f40:	481b      	ldr	r0, [pc, #108]	; (8008fb0 <SE_APPLI_SetActiveFwState+0x90>)
 8008f42:	e031      	b.n	8008fa8 <SE_APPLI_SetActiveFwState+0x88>
  e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[0]);
 8008f44:	a801      	add	r0, sp, #4
 8008f46:	f7ff ff79 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008f4a:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <SE_APPLI_SetActiveFwState+0x94>)
 8008f4c:	4298      	cmp	r0, r3
  e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[0]);
 8008f4e:	4604      	mov	r4, r0
  if(SE_SUCCESS == e_ret_status)
 8008f50:	d1f6      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[1]);
 8008f52:	f10d 0005 	add.w	r0, sp, #5
 8008f56:	f7ff ff71 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008f5a:	42a0      	cmp	r0, r4
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[1]);
 8008f5c:	4606      	mov	r6, r0
  if(SE_SUCCESS == e_ret_status)
 8008f5e:	d1ef      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[2]);
 8008f60:	f10d 0006 	add.w	r0, sp, #6
 8008f64:	f7ff ff6a 	bl	8008e3c <SE_APPLI_GetActiveFwState>
  if(SE_SUCCESS == e_ret_status)
 8008f68:	42b0      	cmp	r0, r6
    e_ret_status = SE_APPLI_GetActiveFwState(&eTempCurrentState[2]);
 8008f6a:	4604      	mov	r4, r0
  if(SE_SUCCESS == e_ret_status)
 8008f6c:	d1e8      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
    if((eTempCurrentState[0]==eTempCurrentState[1]) && (eTempCurrentState[0]==eTempCurrentState[2]))
 8008f6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d1e2      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
 8008f7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d1de      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
  if(eCurrentState != FWIMG_STATE_SELFTEST)
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d1dc      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
  switch(*p_FwState)
 8008f86:	782b      	ldrb	r3, [r5, #0]
 8008f88:	b13b      	cbz	r3, 8008f9a <SE_APPLI_SetActiveFwState+0x7a>
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d1d8      	bne.n	8008f40 <SE_APPLI_SetActiveFwState+0x20>
        e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[1] , ZerosBuffer, sizeof(ZerosBuffer));
 8008f8e:	2220      	movs	r2, #32
 8008f90:	a902      	add	r1, sp, #8
 8008f92:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <SE_APPLI_SetActiveFwState+0x98>)
 8008f94:	f7f9 fd94 	bl	8002ac0 <SE_LL_FLASH_Write>
 8008f98:	e006      	b.n	8008fa8 <SE_APPLI_SetActiveFwState+0x88>
      e_ret_status = SE_LL_FLASH_Write((void*) pfw_image_header->FwImageState[0] , ZerosBuffer, sizeof(ZerosBuffer));
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	a902      	add	r1, sp, #8
 8008f9e:	4807      	ldr	r0, [pc, #28]	; (8008fbc <SE_APPLI_SetActiveFwState+0x9c>)
 8008fa0:	f7f9 fd8e 	bl	8002ac0 <SE_LL_FLASH_Write>
      if(e_ret_status == SE_SUCCESS)
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d0f2      	beq.n	8008f8e <SE_APPLI_SetActiveFwState+0x6e>
      break;
    }
  }
  return e_ret_status;
}
 8008fa8:	b00a      	add	sp, #40	; 0x28
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	08018013 	.word	0x08018013
 8008fb0:	00018799 	.word	0x00018799
 8008fb4:	0012310f 	.word	0x0012310f
 8008fb8:	08105740 	.word	0x08105740
 8008fbc:	08105720 	.word	0x08105720

08008fc0 <SE_SetSystemCoreClock>:
  * @param uSystemCoreClock Secure Engine SystemCoreClock variable.
  * @retval None.
  */
void SE_SetSystemCoreClock(uint32_t uSystemCoreClock)
{
  m_uSE_SystemCoreClock = uSystemCoreClock;
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <SE_SetSystemCoreClock+0x8>)
 8008fc2:	6018      	str	r0, [r3, #0]
}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20006450 	.word	0x20006450

08008fcc <HAL_GetTick>:
  static uint32_t t1 = 0U, tdelta = 0U;
  uint32_t t2;

  t2 =  SysTick->VAL;

  if (t2 <= t1)
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <HAL_GetTick+0x3c>)
  t2 =  SysTick->VAL;
 8008fce:	480f      	ldr	r0, [pc, #60]	; (800900c <HAL_GetTick+0x40>)
{
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
  t2 =  SysTick->VAL;
 8008fd6:	6881      	ldr	r1, [r0, #8]
  if (t2 <= t1)
 8008fd8:	428a      	cmp	r2, r1
  {
    tdelta += t1 - t2;
  }
  else
  {
    tdelta += t1 + SysTick->LOAD - t2;
 8008fda:	bf38      	it	cc
 8008fdc:	6840      	ldrcc	r0, [r0, #4]
 8008fde:	4422      	add	r2, r4
 8008fe0:	bf38      	it	cc
 8008fe2:	1812      	addcc	r2, r2, r0
 8008fe4:	1a52      	subs	r2, r2, r1
 8008fe6:	609a      	str	r2, [r3, #8]
  }

  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 8008fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	fbb2 f2f0 	udiv	r2, r2, r0
 8008ff2:	6898      	ldr	r0, [r3, #8]
 8008ff4:	4282      	cmp	r2, r0
 8008ff6:	d204      	bcs.n	8009002 <HAL_GetTick+0x36>
 8008ff8:	68da      	ldr	r2, [r3, #12]
  {
    tdelta = 0U;
 8008ffa:	2000      	movs	r0, #0
    m_uTick ++;
 8008ffc:	3201      	adds	r2, #1
    tdelta = 0U;
 8008ffe:	6098      	str	r0, [r3, #8]
    m_uTick ++;
 8009000:	60da      	str	r2, [r3, #12]
  }

  t1 = t2;
 8009002:	6059      	str	r1, [r3, #4]
  return m_uTick;
}
 8009004:	68d8      	ldr	r0, [r3, #12]
 8009006:	bd10      	pop	{r4, pc}
 8009008:	20006450 	.word	0x20006450
 800900c:	e000e010 	.word	0xe000e010

08009010 <HAL_Delay>:
  *        on variable incremented.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(uint32_t Delay)
{
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009014:	f7ff ffda 	bl	8008fcc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009018:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800901a:	4605      	mov	r5, r0
  {
    wait++;
 800901c:	bf18      	it	ne
 800901e:	3401      	addne	r4, #1
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009020:	f7ff ffd4 	bl	8008fcc <HAL_GetTick>
 8009024:	1b40      	subs	r0, r0, r5
 8009026:	42a0      	cmp	r0, r4
 8009028:	d3fa      	bcc.n	8009020 <HAL_Delay+0x10>
  {
  }
}
 800902a:	bd38      	pop	{r3, r4, r5, pc}

0800902c <StSafeA_AssignLVResponse>:
static StSafeA_ResponseCode_t StSafeA_AssignLVResponse(StSafeA_LVBuffer_t *pDestLVBuffer,
                                                       StSafeA_LVBuffer_t *pSrcLVBuffer,
                                                       uint16_t ExpectedLen)
{
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
  if ((pDestLVBuffer != NULL)  && (pSrcLVBuffer != NULL))
 800902c:	b138      	cbz	r0, 800903e <StSafeA_AssignLVResponse+0x12>
  {
    /* Check if the length value received by STSAFE is what it was expected */
    if (pSrcLVBuffer->Length > ExpectedLen)
 800902e:	880b      	ldrh	r3, [r1, #0]
 8009030:	4293      	cmp	r3, r2
 8009032:	d806      	bhi.n	8009042 <StSafeA_AssignLVResponse+0x16>
    }

    status_code = STSAFEA_OK;

    /* The length value received by STSAFE is assigned anyway, to allow the application to re-try with the correct parameter */
    pDestLVBuffer->Length = pSrcLVBuffer->Length;
 8009034:	8003      	strh	r3, [r0, #0]

    /* Set the Data of the LVBuffer according to the selected Shared Ram optimization */
    StSafeA_SetLVData(pDestLVBuffer, pSrcLVBuffer->Data, pDestLVBuffer->Length);
 8009036:	684b      	ldr	r3, [r1, #4]
{
#if (STSAFEA_USE_OPTIMIZATION_SHARED_RAM)
  STSAFEA_UNUSED_VAR(Length);
  /* In this case the direct pointer assignment allows the best memory optimization.
     But up to the caller to manage this memory content properly, copying it to a local buffer if needed */
  pDestLVBuffer->Data = pSrcLVData;
 8009038:	6043      	str	r3, [r0, #4]
    status_code = STSAFEA_OK;
 800903a:	2000      	movs	r0, #0
 800903c:	4770      	bx	lr
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 800903e:	2030      	movs	r0, #48	; 0x30
 8009040:	4770      	bx	lr
      return STSAFEA_INVALID_RESP_LENGTH;
 8009042:	2031      	movs	r0, #49	; 0x31
}
 8009044:	4770      	bx	lr

08009046 <StSafeA_AssignLVBuffer>:
{
 8009046:	b510      	push	{r4, lr}
  if ((pDestLVBuffer != NULL)  && (pDataBuffer != NULL))
 8009048:	b160      	cbz	r0, 8009064 <StSafeA_AssignLVBuffer+0x1e>
 800904a:	b159      	cbz	r1, 8009064 <StSafeA_AssignLVBuffer+0x1e>
    pDestLVBuffer->Length = (((uint16_t)pDataBuffer[0U]) << 8) + pDataBuffer[1U];;
 800904c:	780c      	ldrb	r4, [r1, #0]
 800904e:	784b      	ldrb	r3, [r1, #1]
 8009050:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8009054:	b29b      	uxth	r3, r3
    if (pDestLVBuffer->Length > ExpectedLen)
 8009056:	4293      	cmp	r3, r2
    pDestLVBuffer->Length = (((uint16_t)pDataBuffer[0U]) << 8) + pDataBuffer[1U];;
 8009058:	8003      	strh	r3, [r0, #0]
    if (pDestLVBuffer->Length > ExpectedLen)
 800905a:	d805      	bhi.n	8009068 <StSafeA_AssignLVBuffer+0x22>
    StSafeA_SetLVData(pDestLVBuffer, &pDataBuffer[2U], ExpectedLen);
 800905c:	3102      	adds	r1, #2
  pDestLVBuffer->Data = pSrcLVData;
 800905e:	6041      	str	r1, [r0, #4]
      status_code = STSAFEA_OK;
 8009060:	2000      	movs	r0, #0
}
 8009062:	bd10      	pop	{r4, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009064:	2030      	movs	r0, #48	; 0x30
 8009066:	e7fc      	b.n	8009062 <StSafeA_AssignLVBuffer+0x1c>
      return STSAFEA_INVALID_RESP_LENGTH;
 8009068:	2031      	movs	r0, #49	; 0x31
 800906a:	e7fa      	b.n	8009062 <StSafeA_AssignLVBuffer+0x1c>

0800906c <StSafeA_TransmitCommand>:
{
 800906c:	b510      	push	{r4, lr}
  if (pStSafeA != NULL)
 800906e:	4604      	mov	r4, r0
 8009070:	b148      	cbz	r0, 8009086 <StSafeA_TransmitCommand+0x1a>
    status_code = StSafeA_MAC_SHA_PrePostProcess(pStSafeA, STSAFEA_MAC_SHA_PRE_PROCESS);
 8009072:	2100      	movs	r1, #0
 8009074:	f000 fe12 	bl	8009c9c <StSafeA_MAC_SHA_PrePostProcess>
    if (status_code == STSAFEA_OK)
 8009078:	b930      	cbnz	r0, 8009088 <StSafeA_TransmitCommand+0x1c>
      status_code = StSafeA_Transmit(&pStSafeA->InOutBuffer, pStSafeA->CrcSupport);
 800907a:	7b21      	ldrb	r1, [r4, #12]
 800907c:	4620      	mov	r0, r4
}
 800907e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      status_code = StSafeA_Transmit(&pStSafeA->InOutBuffer, pStSafeA->CrcSupport);
 8009082:	f000 bef1 	b.w	8009e68 <StSafeA_Transmit>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009086:	2030      	movs	r0, #48	; 0x30
}
 8009088:	bd10      	pop	{r4, pc}

0800908a <StSafeA_ReceiveResponse>:
{
 800908a:	b510      	push	{r4, lr}
  if (pStSafeA != NULL)
 800908c:	4604      	mov	r4, r0
 800908e:	b148      	cbz	r0, 80090a4 <StSafeA_ReceiveResponse+0x1a>
    status_code = StSafeA_Receive(&pStSafeA->InOutBuffer, pStSafeA->CrcSupport);
 8009090:	7b01      	ldrb	r1, [r0, #12]
 8009092:	f000 ff27 	bl	8009ee4 <StSafeA_Receive>
    if (status_code == STSAFEA_OK)
 8009096:	b930      	cbnz	r0, 80090a6 <StSafeA_ReceiveResponse+0x1c>
      status_code = StSafeA_MAC_SHA_PrePostProcess(pStSafeA, STSAFEA_MAC_SHA_POST_PROCESS);
 8009098:	4620      	mov	r0, r4
 800909a:	2101      	movs	r1, #1
}
 800909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      status_code = StSafeA_MAC_SHA_PrePostProcess(pStSafeA, STSAFEA_MAC_SHA_POST_PROCESS);
 80090a0:	f000 bdfc 	b.w	8009c9c <StSafeA_MAC_SHA_PrePostProcess>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80090a4:	2030      	movs	r0, #48	; 0x30
}
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <StSafeA_Init>:
{
 80090a8:	b508      	push	{r3, lr}
  if ((pStSafeA != NULL) && (pAllocatedRxTxBufferData != NULL))
 80090aa:	b1c8      	cbz	r0, 80090e0 <StSafeA_Init+0x38>
 80090ac:	b1c1      	cbz	r1, 80090e0 <StSafeA_Init+0x38>
    pStSafeA->CrcSupport    = STSAFEA_CRC_SUPPORT;
 80090ae:	2301      	movs	r3, #1
 80090b0:	8183      	strh	r3, [r0, #12]
    pStSafeA->HostCMacSequenceCounter = STSAFEA_HOST_CMAC_INVALID_COUNTER;
 80090b2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    pStSafeA->InOutBuffer.LV.Length = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	8083      	strh	r3, [r0, #4]
    pStSafeA->InOutBuffer.LV.Data   = pAllocatedRxTxBufferData;
 80090ba:	6081      	str	r1, [r0, #8]
    pStSafeA->HostCMacSequenceCounter = STSAFEA_HOST_CMAC_INVALID_COUNTER;
 80090bc:	6102      	str	r2, [r0, #16]
    pStSafeA->HashObj.HashType = STSAFEA_SHA_256;
 80090be:	7503      	strb	r3, [r0, #20]
    pStSafeA->HashObj.HashCtx = NULL;
 80090c0:	61c3      	str	r3, [r0, #28]
    (void)memset(pStSafeA->HashObj.HashRes, 0, sizeof(pStSafeA->HashObj.HashRes));
 80090c2:	2230      	movs	r2, #48	; 0x30
 80090c4:	4619      	mov	r1, r3
 80090c6:	3020      	adds	r0, #32
 80090c8:	f00d fd1b 	bl	8016b02 <memset>
    if (StSafeA_HW_Init() == 0)
 80090cc:	f000 ffa8 	bl	800a020 <StSafeA_HW_Init>
 80090d0:	b108      	cbz	r0, 80090d6 <StSafeA_Init+0x2e>
    status_code = STSAFEA_UNEXPECTED_ERROR;
 80090d2:	2005      	movs	r0, #5
}
 80090d4:	bd08      	pop	{r3, pc}
      if (StSafeA_HostKeys_Init() == 0)
 80090d6:	f7f9 fe79 	bl	8002dcc <StSafeA_HostKeys_Init>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0fa      	beq.n	80090d4 <StSafeA_Init+0x2c>
 80090de:	e7f8      	b.n	80090d2 <StSafeA_Init+0x2a>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80090e0:	2030      	movs	r0, #48	; 0x30
 80090e2:	e7f7      	b.n	80090d4 <StSafeA_Init+0x2c>

080090e4 <StSafeA_HostKeySlotQuery>:
{
 80090e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e6:	460d      	mov	r5, r1
 80090e8:	f88d 2007 	strb.w	r2, [sp, #7]
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) && (pOutHostKeySlot != NULL))
 80090ec:	4604      	mov	r4, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d034      	beq.n	800915c <StSafeA_HostKeySlotQuery+0x78>
 80090f2:	6883      	ldr	r3, [r0, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d031      	beq.n	800915c <StSafeA_HostKeySlotQuery+0x78>
 80090f8:	b381      	cbz	r1, 800915c <StSafeA_HostKeySlotQuery+0x78>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_QUERY, &InMAC);
 80090fa:	f10d 0207 	add.w	r2, sp, #7
 80090fe:	2114      	movs	r1, #20
 8009100:	f000 f82e 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = (uint8_t)STSAFEA_TAG_HOST_KEY_SLOT;
 8009104:	68a3      	ldr	r3, [r4, #8]
 8009106:	2217      	movs	r2, #23
 8009108:	701a      	strb	r2, [r3, #0]
    pStSafeA->InOutBuffer.LV.Length = 1U;
 800910a:	2301      	movs	r3, #1
 800910c:	80a3      	strh	r3, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff ffac 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 8009114:	bb00      	cbnz	r0, 8009158 <StSafeA_HostKeySlotQuery+0x74>
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_HOST_KEY_SLOT_QUERY_RESPONSE_LENGTH + STSAFEA_R_MAC_LENGTH(InMAC);
 8009116:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	3304      	adds	r3, #4
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_QUERY);
 8009122:	2005      	movs	r0, #5
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_HOST_KEY_SLOT_QUERY_RESPONSE_LENGTH + STSAFEA_R_MAC_LENGTH(InMAC);
 8009124:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_QUERY);
 8009126:	f000 ff73 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 800912a:	4620      	mov	r0, r4
 800912c:	f7ff ffad 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 8009130:	b990      	cbnz	r0, 8009158 <StSafeA_HostKeySlotQuery+0x74>
        pOutHostKeySlot->Length = pStSafeA->InOutBuffer.LV.Length;
 8009132:	88a3      	ldrh	r3, [r4, #4]
        pOutHostKeySlot->HostKeyPresenceFlag = pStSafeA->InOutBuffer.LV.Data[0];
 8009134:	68a2      	ldr	r2, [r4, #8]
        pOutHostKeySlot->Length = pStSafeA->InOutBuffer.LV.Length;
 8009136:	802b      	strh	r3, [r5, #0]
        pOutHostKeySlot->HostKeyPresenceFlag = pStSafeA->InOutBuffer.LV.Data[0];
 8009138:	7813      	ldrb	r3, [r2, #0]
 800913a:	70ab      	strb	r3, [r5, #2]
        pOutHostKeySlot->HostCMacSequenceCounter = STSAFEA_HOST_CMAC_INVALID_COUNTER;
 800913c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009140:	6069      	str	r1, [r5, #4]
        if (pOutHostKeySlot->HostKeyPresenceFlag != 0U)
 8009142:	b14b      	cbz	r3, 8009158 <StSafeA_HostKeySlotQuery+0x74>
          pOutHostKeySlot->HostCMacSequenceCounter  = ((uint32_t)pStSafeA->InOutBuffer.LV.Data[1]) << 16;
 8009144:	7853      	ldrb	r3, [r2, #1]
 8009146:	041b      	lsls	r3, r3, #16
 8009148:	606b      	str	r3, [r5, #4]
          pOutHostKeySlot->HostCMacSequenceCounter |= ((uint32_t)pStSafeA->InOutBuffer.LV.Data[2]) << 8;
 800914a:	7891      	ldrb	r1, [r2, #2]
 800914c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009150:	606b      	str	r3, [r5, #4]
          pOutHostKeySlot->HostCMacSequenceCounter |= pStSafeA->InOutBuffer.LV.Data[3];
 8009152:	78d2      	ldrb	r2, [r2, #3]
 8009154:	4313      	orrs	r3, r2
 8009156:	606b      	str	r3, [r5, #4]
}
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 800915c:	2030      	movs	r0, #48	; 0x30
 800915e:	e7fb      	b.n	8009158 <StSafeA_HostKeySlotQuery+0x74>

08009160 <StSafeA_BuildCommandHeaderCMAC>:
  * @param   CommandCode : Command code.
  * @param   pMAC        : Pointer to MAC authenticating command/response.
  * @retval  none
  */
static void StSafeA_BuildCommandHeaderCMAC(StSafeA_Handle_t *pStSafeA, uint8_t CommandCode, uint8_t *pMAC)
{
 8009160:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009162:	460c      	mov	r4, r1
 8009164:	4616      	mov	r6, r2
  if ((pStSafeA != NULL) && (pMAC != NULL))
 8009166:	4605      	mov	r5, r0
 8009168:	b188      	cbz	r0, 800918e <StSafeA_BuildCommandHeaderCMAC+0x2e>
  {
#if (STSAFEA_USE_OPTIMIZATION_NO_HOST_MAC_ENCRYPT)
    *pMAC = STSAFEA_MAC_NONE;
#else
    /* Get CMAC counter value */
    if ((*pMAC & STSAFEA_CMD_HEADER_SCHN_HOSTEN) != 0x00U)
 800916a:	7813      	ldrb	r3, [r2, #0]
 800916c:	069b      	lsls	r3, r3, #26
 800916e:	d509      	bpl.n	8009184 <StSafeA_BuildCommandHeaderCMAC+0x24>
{
  StSafeA_HostKeySlotBuffer_t host_key_slot;

  if (pStSafeA != NULL)
  {
    if ((StSafeA_HostKeySlotQuery(pStSafeA, &host_key_slot, STSAFEA_MAC_NONE) == STSAFEA_OK)
 8009170:	2200      	movs	r2, #0
 8009172:	4669      	mov	r1, sp
 8009174:	f7ff ffb6 	bl	80090e4 <StSafeA_HostKeySlotQuery>
 8009178:	b920      	cbnz	r0, 8009184 <StSafeA_BuildCommandHeaderCMAC+0x24>
        && (host_key_slot.HostKeyPresenceFlag != 0U))
 800917a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800917e:	b10b      	cbz	r3, 8009184 <StSafeA_BuildCommandHeaderCMAC+0x24>
    {
      pStSafeA->HostCMacSequenceCounter = host_key_slot.HostCMacSequenceCounter;
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	612b      	str	r3, [r5, #16]
    pStSafeA->InOutBuffer.Header = (CommandCode | (*pMAC & STSAFEA_CMD_HEADER_MAC_MSK));
 8009184:	7833      	ldrb	r3, [r6, #0]
 8009186:	f023 031f 	bic.w	r3, r3, #31
 800918a:	431c      	orrs	r4, r3
 800918c:	702c      	strb	r4, [r5, #0]
}
 800918e:	b002      	add	sp, #8
 8009190:	bd70      	pop	{r4, r5, r6, pc}

08009192 <StSafeA_Echo>:
{
 8009192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009194:	460f      	mov	r7, r1
 8009196:	4615      	mov	r5, r2
 8009198:	461e      	mov	r6, r3
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) && (pInEchoData != NULL))
 800919a:	4604      	mov	r4, r0
 800919c:	b338      	cbz	r0, 80091ee <StSafeA_Echo+0x5c>
 800919e:	6883      	ldr	r3, [r0, #8]
 80091a0:	b32b      	cbz	r3, 80091ee <StSafeA_Echo+0x5c>
 80091a2:	b321      	cbz	r1, 80091ee <StSafeA_Echo+0x5c>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_ECHO, &InMAC);
 80091a4:	aa06      	add	r2, sp, #24
 80091a6:	2100      	movs	r1, #0
 80091a8:	f7ff ffda 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    STSAFEA_CHECK_SIZE(0U, RespDataLen);
 80091ac:	f5b5 7ffe 	cmp.w	r5, #508	; 0x1fc
 80091b0:	d21f      	bcs.n	80091f2 <StSafeA_Echo+0x60>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[0], pInEchoData, RespDataLen);
 80091b2:	462a      	mov	r2, r5
 80091b4:	4639      	mov	r1, r7
 80091b6:	68a0      	ldr	r0, [r4, #8]
 80091b8:	f00d fc7f 	bl	8016aba <memcpy>
    pStSafeA->InOutBuffer.LV.Length = RespDataLen;
 80091bc:	80a5      	strh	r5, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff ff54 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 80091c4:	b990      	cbnz	r0, 80091ec <StSafeA_Echo+0x5a>
      pStSafeA->InOutBuffer.LV.Length = RespDataLen + STSAFEA_R_MAC_LENGTH(InMAC);
 80091c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80091ca:	091b      	lsrs	r3, r3, #4
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	442b      	add	r3, r5
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_ECHO);
 80091d2:	2005      	movs	r0, #5
      pStSafeA->InOutBuffer.LV.Length = RespDataLen + STSAFEA_R_MAC_LENGTH(InMAC);
 80091d4:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_ECHO);
 80091d6:	f000 ff1b 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 80091da:	4620      	mov	r0, r4
 80091dc:	f7ff ff55 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 80091e0:	b920      	cbnz	r0, 80091ec <StSafeA_Echo+0x5a>
        status_code = StSafeA_AssignLVResponse(pOutLVResponse, &pStSafeA->InOutBuffer.LV, RespDataLen);
 80091e2:	462a      	mov	r2, r5
 80091e4:	1d21      	adds	r1, r4, #4
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ff20 	bl	800902c <StSafeA_AssignLVResponse>
}
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80091ee:	2030      	movs	r0, #48	; 0x30
 80091f0:	e7fc      	b.n	80091ec <StSafeA_Echo+0x5a>
    STSAFEA_CHECK_SIZE(0U, RespDataLen);
 80091f2:	2006      	movs	r0, #6
 80091f4:	e7fa      	b.n	80091ec <StSafeA_Echo+0x5a>

080091f6 <StSafeA_GenerateRandom>:
{
 80091f6:	b570      	push	{r4, r5, r6, lr}
 80091f8:	4615      	mov	r5, r2
 80091fa:	461e      	mov	r6, r3
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 80091fc:	4604      	mov	r4, r0
 80091fe:	b328      	cbz	r0, 800924c <StSafeA_GenerateRandom+0x56>
 8009200:	6883      	ldr	r3, [r0, #8]
 8009202:	b31b      	cbz	r3, 800924c <StSafeA_GenerateRandom+0x56>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_GENERATE_RANDOM, &InMAC);
 8009204:	aa04      	add	r2, sp, #16
 8009206:	2102      	movs	r1, #2
 8009208:	f7ff ffaa 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = 0U;
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
    pStSafeA->InOutBuffer.LV.Data[1] = RespDataLen;
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	705d      	strb	r5, [r3, #1]
    pStSafeA->InOutBuffer.LV.Length = 2U;
 8009216:	2302      	movs	r3, #2
 8009218:	80a3      	strh	r3, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 800921a:	4620      	mov	r0, r4
 800921c:	f7ff ff26 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 8009220:	b998      	cbnz	r0, 800924a <StSafeA_GenerateRandom+0x54>
      tmp_len += STSAFEA_R_MAC_LENGTH(InMAC);
 8009222:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009226:	091b      	lsrs	r3, r3, #4
      tmp_len = RespDataLen;
 8009228:	b2ad      	uxth	r5, r5
      tmp_len += STSAFEA_R_MAC_LENGTH(InMAC);
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	442b      	add	r3, r5
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_GENERATE_RANDOM);
 8009230:	200f      	movs	r0, #15
      pStSafeA->InOutBuffer.LV.Length = tmp_len;
 8009232:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_GENERATE_RANDOM);
 8009234:	f000 feec 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 8009238:	4620      	mov	r0, r4
 800923a:	f7ff ff26 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 800923e:	b920      	cbnz	r0, 800924a <StSafeA_GenerateRandom+0x54>
        status_code = StSafeA_AssignLVResponse(pOutLVResponse, &pStSafeA->InOutBuffer.LV, RespDataLen);
 8009240:	462a      	mov	r2, r5
 8009242:	1d21      	adds	r1, r4, #4
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff fef1 	bl	800902c <StSafeA_AssignLVResponse>
}
 800924a:	bd70      	pop	{r4, r5, r6, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 800924c:	2030      	movs	r0, #48	; 0x30
 800924e:	e7fc      	b.n	800924a <StSafeA_GenerateRandom+0x54>

08009250 <StSafeA_Read>:
{
 8009250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	460d      	mov	r5, r1
 8009256:	4690      	mov	r8, r2
 8009258:	461f      	mov	r7, r3
 800925a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 800925e:	4604      	mov	r4, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d039      	beq.n	80092d8 <StSafeA_Read+0x88>
 8009264:	6883      	ldr	r3, [r0, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d036      	beq.n	80092d8 <StSafeA_Read+0x88>
    STSAFEA_CHECK_SIZE(0U, RespDataLen);
 800926a:	f5b6 7ffe 	cmp.w	r6, #508	; 0x1fc
 800926e:	d235      	bcs.n	80092dc <StSafeA_Read+0x8c>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_READ, &InMAC);
 8009270:	aa0a      	add	r2, sp, #40	; 0x28
 8009272:	2105      	movs	r1, #5
 8009274:	f7ff ff74 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = (InChangeACIndicator == 0U) ? 0x00U :
 8009278:	b12d      	cbz	r5, 8009286 <StSafeA_Read+0x36>
                                       ((uint8_t)((InNewReadACRight == 0U) ? 0x10U : 0x18U) | (uint8_t)InNewReadAC);
 800927a:	f1b8 0f00 	cmp.w	r8, #0
 800927e:	bf0c      	ite	eq
 8009280:	2510      	moveq	r5, #16
 8009282:	2518      	movne	r5, #24
    pStSafeA->InOutBuffer.LV.Data[0] = (InChangeACIndicator == 0U) ? 0x00U :
 8009284:	433d      	orrs	r5, r7
 8009286:	68a3      	ldr	r3, [r4, #8]
    pStSafeA->InOutBuffer.LV.Data[1] = InZoneIndex;
 8009288:	f89d 2018 	ldrb.w	r2, [sp, #24]
    pStSafeA->InOutBuffer.LV.Data[0] = (InChangeACIndicator == 0U) ? 0x00U :
 800928c:	701d      	strb	r5, [r3, #0]
    pStSafeA->InOutBuffer.LV.Data[1] = InZoneIndex;
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	705a      	strb	r2, [r3, #1]
    uint16_t offset = (uint16_t)SWAP2BYTES(InOffset);
 8009292:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &offset, sizeof(offset));
 8009296:	68a2      	ldr	r2, [r4, #8]
    uint16_t offset = (uint16_t)SWAP2BYTES(InOffset);
 8009298:	ba5b      	rev16	r3, r3
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &offset, sizeof(offset));
 800929a:	8053      	strh	r3, [r2, #2]
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[4], &length, sizeof(RespDataLen));
 800929c:	68a3      	ldr	r3, [r4, #8]
    length = (uint16_t)SWAP2BYTES(RespDataLen);
 800929e:	ba72      	rev16	r2, r6
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[4], &length, sizeof(RespDataLen));
 80092a0:	809a      	strh	r2, [r3, #4]
    pStSafeA->InOutBuffer.LV.Length = 6U;
 80092a2:	2306      	movs	r3, #6
 80092a4:	80a3      	strh	r3, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fee0 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 80092ac:	b990      	cbnz	r0, 80092d4 <StSafeA_Read+0x84>
      pStSafeA->InOutBuffer.LV.Length = RespDataLen + STSAFEA_R_MAC_LENGTH(InMAC);
 80092ae:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80092b2:	091b      	lsrs	r3, r3, #4
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	4433      	add	r3, r6
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_READ);
 80092ba:	2005      	movs	r0, #5
      pStSafeA->InOutBuffer.LV.Length = RespDataLen + STSAFEA_R_MAC_LENGTH(InMAC);
 80092bc:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_READ);
 80092be:	f000 fea7 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 80092c2:	4620      	mov	r0, r4
 80092c4:	f7ff fee1 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 80092c8:	b920      	cbnz	r0, 80092d4 <StSafeA_Read+0x84>
        status_code = StSafeA_AssignLVResponse(pOutLVResponse, &pStSafeA->InOutBuffer.LV, RespDataLen);
 80092ca:	4632      	mov	r2, r6
 80092cc:	1d21      	adds	r1, r4, #4
 80092ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d0:	f7ff feac 	bl	800902c <StSafeA_AssignLVResponse>
}
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80092d8:	2030      	movs	r0, #48	; 0x30
 80092da:	e7fb      	b.n	80092d4 <StSafeA_Read+0x84>
    STSAFEA_CHECK_SIZE(0U, RespDataLen);
 80092dc:	2006      	movs	r0, #6
 80092de:	e7f9      	b.n	80092d4 <StSafeA_Read+0x84>

080092e0 <StSafeA_Process_Update>:
{
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80092e6:	4688      	mov	r8, r1
 80092e8:	4617      	mov	r7, r2
 80092ea:	461d      	mov	r5, r3
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) && (pInLVData != NULL))
 80092ec:	4604      	mov	r4, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d043      	beq.n	800937a <StSafeA_Process_Update+0x9a>
 80092f2:	6883      	ldr	r3, [r0, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d040      	beq.n	800937a <StSafeA_Process_Update+0x9a>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	d03e      	beq.n	800937a <StSafeA_Process_Update+0x9a>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_UPDATE, &InMAC);
 80092fc:	aa0a      	add	r2, sp, #40	; 0x28
 80092fe:	2106      	movs	r1, #6
 8009300:	f7ff ff2e 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    tmp |= (InNewUpdateACRight & 0x01U) << STSAFEA_CMD_UPDATE_HEADER_NEWUPDRIGHT_POS;
 8009304:	00ea      	lsls	r2, r5, #3
    tmp |= (InNewUpdateAC & STSAFEA_AC_MSK) << STSAFEA_CMD_UPDATE_HEADER_NEWUPDAC_POS;
 8009306:	f89d 5018 	ldrb.w	r5, [sp, #24]
    pStSafeA->InOutBuffer.LV.Data[0] = tmp;
 800930a:	68a3      	ldr	r3, [r4, #8]
    tmp |= (InNewUpdateACRight & 0x01U) << STSAFEA_CMD_UPDATE_HEADER_NEWUPDRIGHT_POS;
 800930c:	f002 0208 	and.w	r2, r2, #8
    tmp |= (InNewUpdateAC & STSAFEA_AC_MSK) << STSAFEA_CMD_UPDATE_HEADER_NEWUPDAC_POS;
 8009310:	f005 0503 	and.w	r5, r5, #3
 8009314:	432a      	orrs	r2, r5
    tmp |= (InChangeACIndicator & 0x01U) << STSAFEA_CMD_UPDATE_HEADER_CHAC_POS;
 8009316:	013f      	lsls	r7, r7, #4
 8009318:	ea42 12c8 	orr.w	r2, r2, r8, lsl #7
 800931c:	f007 0710 	and.w	r7, r7, #16
    tmp |= (InNewUpdateAC & STSAFEA_AC_MSK) << STSAFEA_CMD_UPDATE_HEADER_NEWUPDAC_POS;
 8009320:	433a      	orrs	r2, r7
    pStSafeA->InOutBuffer.LV.Data[0] = tmp;
 8009322:	701a      	strb	r2, [r3, #0]
    pStSafeA->InOutBuffer.LV.Data[1] = InZoneIndex;
 8009324:	68a3      	ldr	r3, [r4, #8]
 8009326:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800932a:	705a      	strb	r2, [r3, #1]
    uint16_t offset = (uint16_t)SWAP2BYTES(InOffset);
 800932c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &offset, sizeof(offset));
 8009330:	68a2      	ldr	r2, [r4, #8]
    uint16_t offset = (uint16_t)SWAP2BYTES(InOffset);
 8009332:	ba5b      	rev16	r3, r3
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &offset, sizeof(offset));
 8009334:	8053      	strh	r3, [r2, #2]
    pStSafeA->InOutBuffer.LV.Length = 4U;
 8009336:	2304      	movs	r3, #4
 8009338:	80a3      	strh	r3, [r4, #4]
    if ((pInLVData != NULL) && (pInLVData->Length > 0U))
 800933a:	8832      	ldrh	r2, [r6, #0]
 800933c:	b15a      	cbz	r2, 8009356 <StSafeA_Process_Update+0x76>
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length, pInLVData->Length);
 800933e:	f5b2 7ffc 	cmp.w	r2, #504	; 0x1f8
 8009342:	d21c      	bcs.n	800937e <StSafeA_Process_Update+0x9e>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length],
 8009344:	68a0      	ldr	r0, [r4, #8]
 8009346:	6871      	ldr	r1, [r6, #4]
 8009348:	4418      	add	r0, r3
 800934a:	f00d fbb6 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += pInLVData->Length;
 800934e:	88a3      	ldrh	r3, [r4, #4]
 8009350:	8832      	ldrh	r2, [r6, #0]
 8009352:	4413      	add	r3, r2
 8009354:	80a3      	strh	r3, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff fe88 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 800935c:	b958      	cbnz	r0, 8009376 <StSafeA_Process_Update+0x96>
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_R_MAC_LENGTH(InMAC);
 800935e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009362:	091b      	lsrs	r3, r3, #4
 8009364:	f003 0304 	and.w	r3, r3, #4
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_UPDATE);
 8009368:	2005      	movs	r0, #5
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_R_MAC_LENGTH(InMAC);
 800936a:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_UPDATE);
 800936c:	f000 fe50 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 8009370:	4620      	mov	r0, r4
 8009372:	f7ff fe8a 	bl	800908a <StSafeA_ReceiveResponse>
}
 8009376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 800937a:	2030      	movs	r0, #48	; 0x30
 800937c:	e7fb      	b.n	8009376 <StSafeA_Process_Update+0x96>
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length, pInLVData->Length);
 800937e:	2006      	movs	r0, #6
 8009380:	e7f9      	b.n	8009376 <StSafeA_Process_Update+0x96>

08009382 <StSafeA_Update>:
{
 8009382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009386:	b08b      	sub	sp, #44	; 0x2c
 8009388:	4698      	mov	r8, r3
  if ((InAtomicity == STSAFEA_FLAG_TRUE) && (pInLVData->Length > STSAFEA_ATOMICITY_BUFFER_SIZE))
 800938a:	2901      	cmp	r1, #1
{
 800938c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8009390:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8009394:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
 8009398:	9307      	str	r3, [sp, #28]
 800939a:	4606      	mov	r6, r0
 800939c:	4617      	mov	r7, r2
 800939e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80093a0:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
  if ((InAtomicity == STSAFEA_FLAG_TRUE) && (pInLVData->Length > STSAFEA_ATOMICITY_BUFFER_SIZE))
 80093a4:	d13c      	bne.n	8009420 <StSafeA_Update+0x9e>
 80093a6:	8823      	ldrh	r3, [r4, #0]
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d939      	bls.n	8009420 <StSafeA_Update+0x9e>
    pLVData.Length = STSAFEA_ATOMICITY_BUFFER_SIZE;
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	f8ad 3020 	strh.w	r3, [sp, #32]
		pLVData.Data = pInLVData->Data;
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	9309      	str	r3, [sp, #36]	; 0x24
    for (i = 0; i < (pInLVData->Length / STSAFEA_ATOMICITY_BUFFER_SIZE); i++)
 80093b6:	2500      	movs	r5, #0
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80093b8:	2030      	movs	r0, #48	; 0x30
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	eb03 1285 	add.w	r2, r3, r5, lsl #6
    for (i = 0; i < (pInLVData->Length / STSAFEA_ATOMICITY_BUFFER_SIZE); i++)
 80093c0:	8823      	ldrh	r3, [r4, #0]
 80093c2:	b2e9      	uxtb	r1, r5
 80093c4:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 80093c8:	b292      	uxth	r2, r2
 80093ca:	d313      	bcc.n	80093f4 <StSafeA_Update+0x72>
    if (status_code == STSAFEA_OK)
 80093cc:	bb28      	cbnz	r0, 800941a <StSafeA_Update+0x98>
      pLVData.Length = pInLVData->Length % STSAFEA_ATOMICITY_BUFFER_SIZE;
 80093ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093d2:	f8ad 3020 	strh.w	r3, [sp, #32]
      if (pLVData.Length != 0U)
 80093d6:	b303      	cbz	r3, 800941a <StSafeA_Update+0x98>
        status_code = StSafeA_Process_Update(pStSafeA, InAtomicity, InChangeACIndicator, InNewUpdateACRight, InNewUpdateAC, InZoneIndex, InOffset, &pLVData, InMAC);
 80093d8:	e9cd 9a00 	strd	r9, sl, [sp]
 80093dc:	ab08      	add	r3, sp, #32
 80093de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093e2:	f8cd b010 	str.w	fp, [sp, #16]
 80093e6:	4643      	mov	r3, r8
 80093e8:	463a      	mov	r2, r7
 80093ea:	2101      	movs	r1, #1
    status_code = StSafeA_Process_Update(pStSafeA, InAtomicity, InChangeACIndicator, InNewUpdateACRight, InNewUpdateAC, InZoneIndex, InOffset, pInLVData, InMAC);
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ff77 	bl	80092e0 <StSafeA_Process_Update>
 80093f2:	e012      	b.n	800941a <StSafeA_Update+0x98>
      status_code = StSafeA_Process_Update(pStSafeA, InAtomicity, InChangeACIndicator, InNewUpdateACRight, InNewUpdateAC, InZoneIndex, InOffset, &pLVData, InMAC);
 80093f4:	ab08      	add	r3, sp, #32
 80093f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093fa:	f8cd b010 	str.w	fp, [sp, #16]
 80093fe:	4643      	mov	r3, r8
 8009400:	e9cd 9a00 	strd	r9, sl, [sp]
 8009404:	463a      	mov	r2, r7
 8009406:	2101      	movs	r1, #1
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff ff69 	bl	80092e0 <StSafeA_Process_Update>
      pLVData.Data += STSAFEA_ATOMICITY_BUFFER_SIZE;
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	3340      	adds	r3, #64	; 0x40
 8009412:	9309      	str	r3, [sp, #36]	; 0x24
 8009414:	3501      	adds	r5, #1
      if (status_code != STSAFEA_OK)
 8009416:	2800      	cmp	r0, #0
 8009418:	d0cf      	beq.n	80093ba <StSafeA_Update+0x38>
}
 800941a:	b00b      	add	sp, #44	; 0x2c
 800941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status_code = StSafeA_Process_Update(pStSafeA, InAtomicity, InChangeACIndicator, InNewUpdateACRight, InNewUpdateAC, InZoneIndex, InOffset, pInLVData, InMAC);
 8009420:	9b07      	ldr	r3, [sp, #28]
 8009422:	f8cd 9000 	str.w	r9, [sp]
 8009426:	e9cd a301 	strd	sl, r3, [sp, #4]
 800942a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 800942e:	4643      	mov	r3, r8
 8009430:	463a      	mov	r2, r7
 8009432:	e7db      	b.n	80093ec <StSafeA_Update+0x6a>

08009434 <StSafeA_GenerateKeyPair>:
{
 8009434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800943c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8009440:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8009444:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009446:	468a      	mov	sl, r1
 8009448:	4691      	mov	r9, r2
 800944a:	469b      	mov	fp, r3
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA)              &&
 800944c:	4604      	mov	r4, r0
 800944e:	2800      	cmp	r0, #0
 8009450:	f000 80ab 	beq.w	80095aa <StSafeA_GenerateKeyPair+0x176>
      IS_STSAFEA_CONDITIONAL_LVBUFFER_VALID_PTR(pOutPubX) &&
 8009454:	6883      	ldr	r3, [r0, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 80a7 	beq.w	80095aa <StSafeA_GenerateKeyPair+0x176>
      IS_STSAFEA_CONDITIONAL_LVBUFFER_VALID_PTR(pOutPubY) &&
 800945c:	f1b8 0f00 	cmp.w	r8, #0
 8009460:	f000 80a3 	beq.w	80095aa <StSafeA_GenerateKeyPair+0x176>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_GENERATE_KEY, &InMAC);
 8009464:	2111      	movs	r1, #17
 8009466:	aa10      	add	r2, sp, #64	; 0x40
 8009468:	f7ff fe7a 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = (uint8_t)STSAFEA_TAG_PRIVATE_KEY_SLOT;
 800946c:	68a3      	ldr	r3, [r4, #8]
 800946e:	2213      	movs	r2, #19
 8009470:	701a      	strb	r2, [r3, #0]
    pStSafeA->InOutBuffer.LV.Data[1] = (uint8_t)InKeySlotNum;
 8009472:	68a3      	ldr	r3, [r4, #8]
      tmp_use_limit = 1;
 8009474:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    pStSafeA->InOutBuffer.LV.Data[1] = (uint8_t)InKeySlotNum;
 8009478:	f883 a001 	strb.w	sl, [r3, #1]
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &tmp_use_limit, sizeof(uint16_t));
 800947c:	68a3      	ldr	r3, [r4, #8]
      tmp_use_limit = 1;
 800947e:	bf08      	it	eq
 8009480:	f04f 0901 	moveq.w	r9, #1
    tmp_use_limit = (uint16_t)SWAP2BYTES(tmp_use_limit);
 8009484:	fa99 f999 	rev16.w	r9, r9
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[2], &tmp_use_limit, sizeof(uint16_t));
 8009488:	f8a3 9002 	strh.w	r9, [r3, #2]
    tmp_use_limit |= InAuthorizationFlags & STSAFEA_PRIVATE_KEY_MODE_OF_OPERATION_AUTHORIZATION_FLAGS_MASK;
 800948c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[4], &tmp_use_limit, sizeof(tmp_use_limit));
 8009490:	68a2      	ldr	r2, [r4, #8]
    tmp_use_limit = (InChangeAuthFlagsRight == 0x0U) ?  0x0000U : STSAFEA_PRIVATE_KEY_MODE_OF_OPERATION_CHANGE_RIGHT_MASK;
 8009492:	f1bb 0f00 	cmp.w	fp, #0
 8009496:	bf0c      	ite	eq
 8009498:	2100      	moveq	r1, #0
 800949a:	f44f 4100 	movne.w	r1, #32768	; 0x8000
    tmp_use_limit |= InAuthorizationFlags & STSAFEA_PRIVATE_KEY_MODE_OF_OPERATION_AUTHORIZATION_FLAGS_MASK;
 800949e:	f003 030d 	and.w	r3, r3, #13
 80094a2:	430b      	orrs	r3, r1
    tmp_use_limit = (uint16_t)SWAP2BYTES(tmp_use_limit);
 80094a4:	ba5b      	rev16	r3, r3
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[4], &tmp_use_limit, sizeof(tmp_use_limit));
 80094a6:	8093      	strh	r3, [r2, #4]
    uint16_t tmp_curve_len = STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId);
 80094a8:	2d00      	cmp	r5, #0
 80094aa:	d067      	beq.n	800957c <StSafeA_GenerateKeyPair+0x148>
 80094ac:	2d01      	cmp	r5, #1
 80094ae:	d067      	beq.n	8009580 <StSafeA_GenerateKeyPair+0x14c>
 80094b0:	2d02      	cmp	r5, #2
 80094b2:	d067      	beq.n	8009584 <StSafeA_GenerateKeyPair+0x150>
 80094b4:	2d03      	cmp	r5, #3
 80094b6:	bf14      	ite	ne
 80094b8:	2200      	movne	r2, #0
 80094ba:	2209      	moveq	r2, #9
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[8], STSAFEA_GET_ECC_CURVE_OID(InCurveId), tmp_curve_len);
 80094bc:	68a0      	ldr	r0, [r4, #8]
    tmp_use_limit = (uint16_t)SWAP2BYTES(tmp_curve_len);
 80094be:	fa92 fa92 	rev16.w	sl, r2
    tmp_len = 8U + tmp_curve_len;
 80094c2:	f102 0908 	add.w	r9, r2, #8
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[8], STSAFEA_GET_ECC_CURVE_OID(InCurveId), tmp_curve_len);
 80094c6:	3008      	adds	r0, #8
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	d05d      	beq.n	8009588 <StSafeA_GenerateKeyPair+0x154>
 80094cc:	2d01      	cmp	r5, #1
 80094ce:	d05d      	beq.n	800958c <StSafeA_GenerateKeyPair+0x158>
 80094d0:	2d02      	cmp	r5, #2
 80094d2:	d05d      	beq.n	8009590 <StSafeA_GenerateKeyPair+0x15c>
 80094d4:	4937      	ldr	r1, [pc, #220]	; (80095b4 <StSafeA_GenerateKeyPair+0x180>)
 80094d6:	4b38      	ldr	r3, [pc, #224]	; (80095b8 <StSafeA_GenerateKeyPair+0x184>)
 80094d8:	2d03      	cmp	r5, #3
 80094da:	bf18      	it	ne
 80094dc:	4619      	movne	r1, r3
 80094de:	f00d faec 	bl	8016aba <memcpy>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[6], &tmp_use_limit, sizeof(uint16_t));
 80094e2:	68a3      	ldr	r3, [r4, #8]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 80094e4:	4620      	mov	r0, r4
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[6], &tmp_use_limit, sizeof(uint16_t));
 80094e6:	f8a3 a006 	strh.w	sl, [r3, #6]
    pStSafeA->InOutBuffer.LV.Length = tmp_len;
 80094ea:	f8a4 9004 	strh.w	r9, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 80094ee:	f7ff fdbd 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d140      	bne.n	8009578 <StSafeA_GenerateKeyPair+0x144>
                                        + STSAFEA_R_MAC_LENGTH(InMAC);
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	d04e      	beq.n	8009598 <StSafeA_GenerateKeyPair+0x164>
 80094fa:	2d01      	cmp	r5, #1
 80094fc:	d04a      	beq.n	8009594 <StSafeA_GenerateKeyPair+0x160>
 80094fe:	2d02      	cmp	r5, #2
 8009500:	d04a      	beq.n	8009598 <StSafeA_GenerateKeyPair+0x164>
 8009502:	2d03      	cmp	r5, #3
 8009504:	bf14      	ite	ne
 8009506:	2305      	movne	r3, #5
 8009508:	2365      	moveq	r3, #101	; 0x65
 800950a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800950e:	0912      	lsrs	r2, r2, #4
 8009510:	f002 0204 	and.w	r2, r2, #4
 8009514:	4413      	add	r3, r2
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_GENERATE_KEY);
 8009516:	200f      	movs	r0, #15
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_POINT_REPRESENTATION_ID_LEN
 8009518:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_GENERATE_KEY);
 800951a:	f000 fd79 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 800951e:	4620      	mov	r0, r4
 8009520:	f7ff fdb3 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 8009524:	bb40      	cbnz	r0, 8009578 <StSafeA_GenerateKeyPair+0x144>
        if (STSAFEA_GET_XYRS_LEN_FROM_CURVE(InCurveId) == InPubXYLen)
 8009526:	2d00      	cmp	r5, #0
 8009528:	d03a      	beq.n	80095a0 <StSafeA_GenerateKeyPair+0x16c>
 800952a:	2d01      	cmp	r5, #1
 800952c:	d036      	beq.n	800959c <StSafeA_GenerateKeyPair+0x168>
 800952e:	2d02      	cmp	r5, #2
 8009530:	d036      	beq.n	80095a0 <StSafeA_GenerateKeyPair+0x16c>
 8009532:	2d03      	cmp	r5, #3
 8009534:	bf0c      	ite	eq
 8009536:	2330      	moveq	r3, #48	; 0x30
 8009538:	2300      	movne	r3, #0
 800953a:	429e      	cmp	r6, r3
 800953c:	d137      	bne.n	80095ae <StSafeA_GenerateKeyPair+0x17a>
          if (pStSafeA->InOutBuffer.LV.Length >= uIdx)
 800953e:	88a3      	ldrh	r3, [r4, #4]
 8009540:	b11b      	cbz	r3, 800954a <StSafeA_GenerateKeyPair+0x116>
            *pOutPointReprensentationId = pStSafeA->InOutBuffer.LV.Data[0];
 8009542:	68a3      	ldr	r3, [r4, #8]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	f888 3000 	strb.w	r3, [r8]
          if (pStSafeA->InOutBuffer.LV.Length > (uIdx + sizeof(pOutPubX->Length)))
 800954a:	88a3      	ldrh	r3, [r4, #4]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d929      	bls.n	80095a4 <StSafeA_GenerateKeyPair+0x170>
            status_code = StSafeA_AssignLVBuffer(pOutPubX, &pStSafeA->InOutBuffer.LV.Data[uIdx], InPubXYLen);
 8009550:	68a1      	ldr	r1, [r4, #8]
 8009552:	4632      	mov	r2, r6
 8009554:	3101      	adds	r1, #1
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff fd75 	bl	8009046 <StSafeA_AssignLVBuffer>
            uIdx += (uint16_t)sizeof(pOutPubX->Length) + pOutPubX->Length ;
 800955c:	883b      	ldrh	r3, [r7, #0]
 800955e:	3303      	adds	r3, #3
 8009560:	b29b      	uxth	r3, r3
          if ((pStSafeA->InOutBuffer.LV.Length > (uIdx + sizeof(pOutPubY->Length))) && (status_code == STSAFEA_OK))
 8009562:	88a1      	ldrh	r1, [r4, #4]
 8009564:	1c9a      	adds	r2, r3, #2
 8009566:	4291      	cmp	r1, r2
 8009568:	d906      	bls.n	8009578 <StSafeA_GenerateKeyPair+0x144>
 800956a:	b928      	cbnz	r0, 8009578 <StSafeA_GenerateKeyPair+0x144>
            status_code = StSafeA_AssignLVBuffer(pOutPubY, &pStSafeA->InOutBuffer.LV.Data[uIdx], InPubXYLen);
 800956c:	68a1      	ldr	r1, [r4, #8]
 800956e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009570:	4632      	mov	r2, r6
 8009572:	4419      	add	r1, r3
 8009574:	f7ff fd67 	bl	8009046 <StSafeA_AssignLVBuffer>
}
 8009578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint16_t tmp_curve_len = STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId);
 800957c:	2208      	movs	r2, #8
 800957e:	e79d      	b.n	80094bc <StSafeA_GenerateKeyPair+0x88>
 8009580:	2205      	movs	r2, #5
 8009582:	e79b      	b.n	80094bc <StSafeA_GenerateKeyPair+0x88>
 8009584:	2209      	movs	r2, #9
 8009586:	e799      	b.n	80094bc <StSafeA_GenerateKeyPair+0x88>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[8], STSAFEA_GET_ECC_CURVE_OID(InCurveId), tmp_curve_len);
 8009588:	490c      	ldr	r1, [pc, #48]	; (80095bc <StSafeA_GenerateKeyPair+0x188>)
 800958a:	e7a8      	b.n	80094de <StSafeA_GenerateKeyPair+0xaa>
 800958c:	490c      	ldr	r1, [pc, #48]	; (80095c0 <StSafeA_GenerateKeyPair+0x18c>)
 800958e:	e7a6      	b.n	80094de <StSafeA_GenerateKeyPair+0xaa>
 8009590:	490c      	ldr	r1, [pc, #48]	; (80095c4 <StSafeA_GenerateKeyPair+0x190>)
 8009592:	e7a4      	b.n	80094de <StSafeA_GenerateKeyPair+0xaa>
                                        + STSAFEA_R_MAC_LENGTH(InMAC);
 8009594:	2365      	movs	r3, #101	; 0x65
 8009596:	e7b8      	b.n	800950a <StSafeA_GenerateKeyPair+0xd6>
 8009598:	2345      	movs	r3, #69	; 0x45
 800959a:	e7b6      	b.n	800950a <StSafeA_GenerateKeyPair+0xd6>
        if (STSAFEA_GET_XYRS_LEN_FROM_CURVE(InCurveId) == InPubXYLen)
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	e7cc      	b.n	800953a <StSafeA_GenerateKeyPair+0x106>
 80095a0:	2320      	movs	r3, #32
 80095a2:	e7ca      	b.n	800953a <StSafeA_GenerateKeyPair+0x106>
          uint16_t uIdx = 1U;
 80095a4:	2301      	movs	r3, #1
        status_code = STSAFEA_INVALID_RESP_LENGTH;
 80095a6:	2031      	movs	r0, #49	; 0x31
 80095a8:	e7db      	b.n	8009562 <StSafeA_GenerateKeyPair+0x12e>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80095aa:	2030      	movs	r0, #48	; 0x30
 80095ac:	e7e4      	b.n	8009578 <StSafeA_GenerateKeyPair+0x144>
        status_code = STSAFEA_INVALID_RESP_LENGTH;
 80095ae:	2031      	movs	r0, #49	; 0x31
 80095b0:	e7e2      	b.n	8009578 <StSafeA_GenerateKeyPair+0x144>
 80095b2:	bf00      	nop
 80095b4:	08019940 	.word	0x08019940
 80095b8:	0801801c 	.word	0x0801801c
 80095bc:	080197a6 	.word	0x080197a6
 80095c0:	08018016 	.word	0x08018016
 80095c4:	08019936 	.word	0x08019936

080095c8 <StSafeA_GenerateSignature>:
{
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	4688      	mov	r8, r1
 80095ce:	4616      	mov	r6, r2
 80095d0:	461f      	mov	r7, r3
 80095d2:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) && (pInDigest != NULL))
 80095d6:	4604      	mov	r4, r0
 80095d8:	b910      	cbnz	r0, 80095e0 <StSafeA_GenerateSignature+0x18>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 80095da:	2030      	movs	r0, #48	; 0x30
}
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) && (pInDigest != NULL))
 80095e0:	6883      	ldr	r3, [r0, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0f9      	beq.n	80095da <StSafeA_GenerateSignature+0x12>
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	d0f7      	beq.n	80095da <StSafeA_GenerateSignature+0x12>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_GENERATE_SIGNATURE, &InMAC);
 80095ea:	aa08      	add	r2, sp, #32
 80095ec:	2116      	movs	r1, #22
 80095ee:	f7ff fdb7 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = (uint8_t)InKeySlotNum;
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	f883 8000 	strb.w	r8, [r3]
    pStSafeA->InOutBuffer.LV.Data[1] = (uint8_t)((((InDigestType == STSAFEA_SHA_384) ?
 80095f8:	68a2      	ldr	r2, [r4, #8]
 80095fa:	2300      	movs	r3, #0
 80095fc:	7053      	strb	r3, [r2, #1]
    pStSafeA->InOutBuffer.LV.Data[2] = ((InDigestType == STSAFEA_SHA_384) ?
 80095fe:	2f01      	cmp	r7, #1
 8009600:	bf0c      	ite	eq
 8009602:	2230      	moveq	r2, #48	; 0x30
 8009604:	2220      	movne	r2, #32
 8009606:	68a1      	ldr	r1, [r4, #8]
 8009608:	1e50      	subs	r0, r2, #1
 800960a:	708a      	strb	r2, [r1, #2]
 800960c:	fa56 f080 	uxtab	r0, r6, r0
 8009610:	1e71      	subs	r1, r6, #1
      sum |= pInDigest[i];
 8009612:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    for (i = 0; i < DigestLength; i++)
 8009616:	4288      	cmp	r0, r1
      sum |= pInDigest[i];
 8009618:	ea43 030c 	orr.w	r3, r3, ip
    for (i = 0; i < DigestLength; i++)
 800961c:	d1f9      	bne.n	8009612 <StSafeA_GenerateSignature+0x4a>
    if (sum == 0U)
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0db      	beq.n	80095da <StSafeA_GenerateSignature+0x12>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[3],
 8009622:	68a0      	ldr	r0, [r4, #8]
 8009624:	4631      	mov	r1, r6
 8009626:	3003      	adds	r0, #3
 8009628:	f00d fa47 	bl	8016aba <memcpy>
    pStSafeA->InOutBuffer.LV.Length = (uint16_t)((InDigestType == STSAFEA_SHA_384) ?
 800962c:	2f01      	cmp	r7, #1
 800962e:	bf0c      	ite	eq
 8009630:	2333      	moveq	r3, #51	; 0x33
 8009632:	2323      	movne	r3, #35	; 0x23
    if (((uint8_t)InHostEncryption & (uint8_t)STSAFEA_ENCRYPTION_COMMAND) == (uint8_t)STSAFEA_ENCRYPTION_COMMAND)
 8009634:	07aa      	lsls	r2, r5, #30
    pStSafeA->InOutBuffer.LV.Length = (uint16_t)((InDigestType == STSAFEA_SHA_384) ?
 8009636:	80a3      	strh	r3, [r4, #4]
    if (((uint8_t)InHostEncryption & (uint8_t)STSAFEA_ENCRYPTION_COMMAND) == (uint8_t)STSAFEA_ENCRYPTION_COMMAND)
 8009638:	d423      	bmi.n	8009682 <StSafeA_GenerateSignature+0xba>
      status_code = StSafeA_TransmitCommand(pStSafeA);
 800963a:	4620      	mov	r0, r4
 800963c:	f7ff fd16 	bl	800906c <StSafeA_TransmitCommand>
      if (status_code == STSAFEA_OK)
 8009640:	2800      	cmp	r0, #0
 8009642:	d1cb      	bne.n	80095dc <StSafeA_GenerateSignature+0x14>
        pStSafeA->InOutBuffer.LV.Length = tmp_len + STSAFEA_R_MAC_LENGTH(InMAC); ;
 8009644:	f89d 3020 	ldrb.w	r3, [sp, #32]
        uint16_t tmp_len = (InDigestType == STSAFEA_SHA_384) ? STSAFEA_LENGTH_CMD_RESP_GENERATE_SIGNATURE_SHA_384 :
 8009648:	2f01      	cmp	r7, #1
        pStSafeA->InOutBuffer.LV.Length = tmp_len + STSAFEA_R_MAC_LENGTH(InMAC); ;
 800964a:	ea4f 1313 	mov.w	r3, r3, lsr #4
        uint16_t tmp_len = (InDigestType == STSAFEA_SHA_384) ? STSAFEA_LENGTH_CMD_RESP_GENERATE_SIGNATURE_SHA_384 :
 800964e:	bf0c      	ite	eq
 8009650:	2264      	moveq	r2, #100	; 0x64
 8009652:	2244      	movne	r2, #68	; 0x44
        pStSafeA->InOutBuffer.LV.Length = tmp_len + STSAFEA_R_MAC_LENGTH(InMAC); ;
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	4413      	add	r3, r2
        StSafeA_Delay((InDigestType == STSAFEA_SHA_384) ? STSAFEA_MS_WAIT_TIME_CMD_GENERATE_SIGNATURE_384 :
 800965a:	bf0c      	ite	eq
 800965c:	208c      	moveq	r0, #140	; 0x8c
 800965e:	2050      	movne	r0, #80	; 0x50
        pStSafeA->InOutBuffer.LV.Length = tmp_len + STSAFEA_R_MAC_LENGTH(InMAC); ;
 8009660:	80a3      	strh	r3, [r4, #4]
        StSafeA_Delay((InDigestType == STSAFEA_SHA_384) ? STSAFEA_MS_WAIT_TIME_CMD_GENERATE_SIGNATURE_384 :
 8009662:	f000 fcd5 	bl	800a010 <StSafeA_Delay>
        status_code = StSafeA_ReceiveResponse(pStSafeA);
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff fd0f 	bl	800908a <StSafeA_ReceiveResponse>
        if (status_code == STSAFEA_OK)
 800966c:	2800      	cmp	r0, #0
 800966e:	d1b5      	bne.n	80095dc <StSafeA_GenerateSignature+0x14>
          if (((uint8_t)InHostEncryption & (uint8_t)STSAFEA_ENCRYPTION_RESPONSE) == (uint8_t)STSAFEA_ENCRYPTION_RESPONSE)
 8009670:	07eb      	lsls	r3, r5, #31
 8009672:	d40c      	bmi.n	800968e <StSafeA_GenerateSignature+0xc6>
            status_code = StSafeA_AssignLVResponse(pOutLVResponse, &pStSafeA->InOutBuffer.LV, RespDataLen);
 8009674:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8009678:	9807      	ldr	r0, [sp, #28]
 800967a:	1d21      	adds	r1, r4, #4
 800967c:	f7ff fcd6 	bl	800902c <StSafeA_AssignLVResponse>
 8009680:	e7ac      	b.n	80095dc <StSafeA_GenerateSignature+0x14>
      status_code = StSafeA_DataEncryption(pStSafeA);
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fb63 	bl	8009d4e <StSafeA_DataEncryption>
    if (status_code == STSAFEA_OK)
 8009688:	2800      	cmp	r0, #0
 800968a:	d0d6      	beq.n	800963a <StSafeA_GenerateSignature+0x72>
 800968c:	e7a6      	b.n	80095dc <StSafeA_GenerateSignature+0x14>
            status_code = StSafeA_DataDecryption(pStSafeA);
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fb93 	bl	8009dba <StSafeA_DataDecryption>
          if (status_code == STSAFEA_OK)
 8009694:	2800      	cmp	r0, #0
 8009696:	d1a1      	bne.n	80095dc <StSafeA_GenerateSignature+0x14>
 8009698:	e7ec      	b.n	8009674 <StSafeA_GenerateSignature+0xac>
	...

0800969c <StSafeA_VerifyMessageSignature>:
{
 800969c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	460d      	mov	r5, r1
 80096a2:	4692      	mov	sl, r2
 80096a4:	469b      	mov	fp, r3
 80096a6:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 80096aa:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	; 0x30
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA)       &&
 80096ae:	4604      	mov	r4, r0
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f000 813d 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 80096b6:	6883      	ldr	r3, [r0, #8]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8139 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 80096be:	2a00      	cmp	r2, #0
 80096c0:	f000 8136 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInPubX)       &&
 80096c4:	6853      	ldr	r3, [r2, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 8132 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 80096cc:	f1bb 0f00 	cmp.w	fp, #0
 80096d0:	f000 812e 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInPubY)       &&
 80096d4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 8129 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 80096de:	f1b9 0f00 	cmp.w	r9, #0
 80096e2:	f000 8125 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInRSignature) &&
 80096e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8120 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 80096f0:	f1b8 0f00 	cmp.w	r8, #0
 80096f4:	f000 811c 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInSSignature) &&
 80096f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 8117 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 8009702:	2f00      	cmp	r7, #0
 8009704:	f000 8114 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInDigest)     &&
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 8110 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
 8009710:	2e00      	cmp	r6, #0
 8009712:	f000 810d 	beq.w	8009930 <StSafeA_VerifyMessageSignature+0x294>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_VERIFY_SIGNATURE, &InMAC);
 8009716:	aa0e      	add	r2, sp, #56	; 0x38
 8009718:	2117      	movs	r1, #23
 800971a:	f7ff fd21 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = 0x00U;
 800971e:	68a2      	ldr	r2, [r4, #8]
 8009720:	2300      	movs	r3, #0
 8009722:	7013      	strb	r3, [r2, #0]
    pStSafeA->InOutBuffer.LV.Data[1] = (uint8_t)((STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId) & 0xFF00U) >> 8);
 8009724:	68a2      	ldr	r2, [r4, #8]
 8009726:	7053      	strb	r3, [r2, #1]
    pStSafeA->InOutBuffer.LV.Data[2] = (uint8_t)(STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId) & 0x00FFU);
 8009728:	2d00      	cmp	r5, #0
 800972a:	d041      	beq.n	80097b0 <StSafeA_VerifyMessageSignature+0x114>
 800972c:	2d01      	cmp	r5, #1
 800972e:	d041      	beq.n	80097b4 <StSafeA_VerifyMessageSignature+0x118>
 8009730:	2d02      	cmp	r5, #2
 8009732:	d041      	beq.n	80097b8 <StSafeA_VerifyMessageSignature+0x11c>
 8009734:	2d03      	cmp	r5, #3
 8009736:	bf08      	it	eq
 8009738:	2309      	moveq	r3, #9
 800973a:	68a2      	ldr	r2, [r4, #8]
 800973c:	7093      	strb	r3, [r2, #2]
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[3], STSAFEA_GET_ECC_CURVE_OID(InCurveId),
 800973e:	68a0      	ldr	r0, [r4, #8]
 8009740:	3003      	adds	r0, #3
 8009742:	2d00      	cmp	r5, #0
 8009744:	d03a      	beq.n	80097bc <StSafeA_VerifyMessageSignature+0x120>
 8009746:	2d01      	cmp	r5, #1
 8009748:	d03b      	beq.n	80097c2 <StSafeA_VerifyMessageSignature+0x126>
 800974a:	2d02      	cmp	r5, #2
 800974c:	d03c      	beq.n	80097c8 <StSafeA_VerifyMessageSignature+0x12c>
 800974e:	4b79      	ldr	r3, [pc, #484]	; (8009934 <StSafeA_VerifyMessageSignature+0x298>)
 8009750:	4979      	ldr	r1, [pc, #484]	; (8009938 <StSafeA_VerifyMessageSignature+0x29c>)
 8009752:	2d03      	cmp	r5, #3
 8009754:	bf0a      	itet	eq
 8009756:	4619      	moveq	r1, r3
 8009758:	2200      	movne	r2, #0
 800975a:	2209      	moveq	r2, #9
 800975c:	f00d f9ad 	bl	8016aba <memcpy>
    pStSafeA->InOutBuffer.LV.Length = (0x0001U + STSAFEA_ECC_CURVE_OID_LEN + STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId));
 8009760:	2d00      	cmp	r5, #0
 8009762:	d034      	beq.n	80097ce <StSafeA_VerifyMessageSignature+0x132>
 8009764:	2d01      	cmp	r5, #1
 8009766:	d034      	beq.n	80097d2 <StSafeA_VerifyMessageSignature+0x136>
 8009768:	3d02      	subs	r5, #2
 800976a:	2d01      	cmp	r5, #1
 800976c:	bf94      	ite	ls
 800976e:	230c      	movls	r3, #12
 8009770:	2303      	movhi	r3, #3
    pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = STSAFEA_POINT_REPRESENTATION_ID;
 8009772:	68a2      	ldr	r2, [r4, #8]
    pStSafeA->InOutBuffer.LV.Length = (0x0001U + STSAFEA_ECC_CURVE_OID_LEN + STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId));
 8009774:	80a3      	strh	r3, [r4, #4]
    pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = STSAFEA_POINT_REPRESENTATION_ID;
 8009776:	2104      	movs	r1, #4
 8009778:	54d1      	strb	r1, [r2, r3]
    pStSafeA->InOutBuffer.LV.Length++;
 800977a:	88a3      	ldrh	r3, [r4, #4]
 800977c:	3301      	adds	r3, #1
 800977e:	b29b      	uxth	r3, r3
 8009780:	80a3      	strh	r3, [r4, #4]
    if ((pInPubX->Length > 0U))
 8009782:	f8ba 2000 	ldrh.w	r2, [sl]
 8009786:	b39a      	cbz	r2, 80097f0 <StSafeA_VerifyMessageSignature+0x154>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInPubX->Length & 0xFF00U) >> 8);
 8009788:	68a1      	ldr	r1, [r4, #8]
 800978a:	0a12      	lsrs	r2, r2, #8
 800978c:	54ca      	strb	r2, [r1, r3]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInPubX->Length & 0x00FFU);
 800978e:	88a2      	ldrh	r2, [r4, #4]
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	4413      	add	r3, r2
 8009794:	f8ba 2000 	ldrh.w	r2, [sl]
 8009798:	705a      	strb	r2, [r3, #1]
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length + 2U, pInPubX->Length);
 800979a:	f8ba 2000 	ldrh.w	r2, [sl]
 800979e:	88a0      	ldrh	r0, [r4, #4]
 80097a0:	1813      	adds	r3, r2, r0
 80097a2:	3302      	adds	r3, #2
 80097a4:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80097a8:	d315      	bcc.n	80097d6 <StSafeA_VerifyMessageSignature+0x13a>
 80097aa:	2006      	movs	r0, #6
}
 80097ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pStSafeA->InOutBuffer.LV.Data[2] = (uint8_t)(STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId) & 0x00FFU);
 80097b0:	2308      	movs	r3, #8
 80097b2:	e7c2      	b.n	800973a <StSafeA_VerifyMessageSignature+0x9e>
 80097b4:	2305      	movs	r3, #5
 80097b6:	e7c0      	b.n	800973a <StSafeA_VerifyMessageSignature+0x9e>
 80097b8:	2309      	movs	r3, #9
 80097ba:	e7be      	b.n	800973a <StSafeA_VerifyMessageSignature+0x9e>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[3], STSAFEA_GET_ECC_CURVE_OID(InCurveId),
 80097bc:	495f      	ldr	r1, [pc, #380]	; (800993c <StSafeA_VerifyMessageSignature+0x2a0>)
 80097be:	2208      	movs	r2, #8
 80097c0:	e7cc      	b.n	800975c <StSafeA_VerifyMessageSignature+0xc0>
 80097c2:	495f      	ldr	r1, [pc, #380]	; (8009940 <StSafeA_VerifyMessageSignature+0x2a4>)
                 STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId));
 80097c4:	2205      	movs	r2, #5
 80097c6:	e7c9      	b.n	800975c <StSafeA_VerifyMessageSignature+0xc0>
    (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[3], STSAFEA_GET_ECC_CURVE_OID(InCurveId),
 80097c8:	495e      	ldr	r1, [pc, #376]	; (8009944 <StSafeA_VerifyMessageSignature+0x2a8>)
                 STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId));
 80097ca:	2209      	movs	r2, #9
 80097cc:	e7c6      	b.n	800975c <StSafeA_VerifyMessageSignature+0xc0>
    pStSafeA->InOutBuffer.LV.Length = (0x0001U + STSAFEA_ECC_CURVE_OID_LEN + STSAFEA_GET_ECC_CURVE_OID_LEN(InCurveId));
 80097ce:	230b      	movs	r3, #11
 80097d0:	e7cf      	b.n	8009772 <StSafeA_VerifyMessageSignature+0xd6>
 80097d2:	2308      	movs	r3, #8
 80097d4:	e7cd      	b.n	8009772 <StSafeA_VerifyMessageSignature+0xd6>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	f8da 1004 	ldr.w	r1, [sl, #4]
 80097dc:	3002      	adds	r0, #2
 80097de:	4418      	add	r0, r3
 80097e0:	f00d f96b 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += (uint16_t)sizeof(pInPubX->Length) + pInPubX->Length;
 80097e4:	f8ba 3000 	ldrh.w	r3, [sl]
 80097e8:	88a2      	ldrh	r2, [r4, #4]
 80097ea:	3302      	adds	r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	80a3      	strh	r3, [r4, #4]
    if ((pInPubY->Length > 0U))
 80097f0:	f8bb 3000 	ldrh.w	r3, [fp]
 80097f4:	b1f3      	cbz	r3, 8009834 <StSafeA_VerifyMessageSignature+0x198>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInPubY->Length & 0xFF00U) >> 8);
 80097f6:	68a2      	ldr	r2, [r4, #8]
 80097f8:	88a1      	ldrh	r1, [r4, #4]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	5453      	strb	r3, [r2, r1]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInPubY->Length & 0x00FFU);
 80097fe:	88a2      	ldrh	r2, [r4, #4]
 8009800:	68a3      	ldr	r3, [r4, #8]
 8009802:	4413      	add	r3, r2
 8009804:	f8bb 2000 	ldrh.w	r2, [fp]
 8009808:	705a      	strb	r2, [r3, #1]
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length + 2U, pInPubY->Length);
 800980a:	f8bb 2000 	ldrh.w	r2, [fp]
 800980e:	88a0      	ldrh	r0, [r4, #4]
 8009810:	1813      	adds	r3, r2, r0
 8009812:	3302      	adds	r3, #2
 8009814:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8009818:	d2c7      	bcs.n	80097aa <StSafeA_VerifyMessageSignature+0x10e>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009820:	3002      	adds	r0, #2
 8009822:	4418      	add	r0, r3
 8009824:	f00d f949 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += (uint16_t)sizeof(pInPubY->Length) + pInPubY->Length;
 8009828:	f8bb 3000 	ldrh.w	r3, [fp]
 800982c:	88a2      	ldrh	r2, [r4, #4]
 800982e:	3302      	adds	r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	80a3      	strh	r3, [r4, #4]
    if (pInRSignature->Length > 0U)
 8009834:	f8b9 3000 	ldrh.w	r3, [r9]
 8009838:	b1f3      	cbz	r3, 8009878 <StSafeA_VerifyMessageSignature+0x1dc>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInRSignature->Length & 0xFF00U) >> 8);
 800983a:	68a2      	ldr	r2, [r4, #8]
 800983c:	88a1      	ldrh	r1, [r4, #4]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	5453      	strb	r3, [r2, r1]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInRSignature->Length & 0x00FFU);
 8009842:	88a2      	ldrh	r2, [r4, #4]
 8009844:	68a3      	ldr	r3, [r4, #8]
 8009846:	4413      	add	r3, r2
 8009848:	f8b9 2000 	ldrh.w	r2, [r9]
 800984c:	705a      	strb	r2, [r3, #1]
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length + 2U, pInRSignature->Length);
 800984e:	f8b9 2000 	ldrh.w	r2, [r9]
 8009852:	88a0      	ldrh	r0, [r4, #4]
 8009854:	1813      	adds	r3, r2, r0
 8009856:	3302      	adds	r3, #2
 8009858:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 800985c:	d2a5      	bcs.n	80097aa <StSafeA_VerifyMessageSignature+0x10e>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009864:	3002      	adds	r0, #2
 8009866:	4418      	add	r0, r3
 8009868:	f00d f927 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += 2U + pInRSignature->Length;
 800986c:	f8b9 3000 	ldrh.w	r3, [r9]
 8009870:	88a2      	ldrh	r2, [r4, #4]
 8009872:	3302      	adds	r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	80a3      	strh	r3, [r4, #4]
    if (pInSSignature->Length > 0U)
 8009878:	f8b8 3000 	ldrh.w	r3, [r8]
 800987c:	b1f3      	cbz	r3, 80098bc <StSafeA_VerifyMessageSignature+0x220>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInSSignature->Length & 0xFF00U) >> 8);
 800987e:	88a2      	ldrh	r2, [r4, #4]
 8009880:	68a1      	ldr	r1, [r4, #8]
 8009882:	0a1b      	lsrs	r3, r3, #8
 8009884:	548b      	strb	r3, [r1, r2]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInSSignature->Length & 0x00FFU);
 8009886:	88a2      	ldrh	r2, [r4, #4]
 8009888:	68a3      	ldr	r3, [r4, #8]
 800988a:	4413      	add	r3, r2
 800988c:	f8b8 2000 	ldrh.w	r2, [r8]
 8009890:	705a      	strb	r2, [r3, #1]
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length + 2U, pInSSignature->Length);
 8009892:	f8b8 2000 	ldrh.w	r2, [r8]
 8009896:	88a0      	ldrh	r0, [r4, #4]
 8009898:	1813      	adds	r3, r2, r0
 800989a:	3302      	adds	r3, #2
 800989c:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80098a0:	d283      	bcs.n	80097aa <StSafeA_VerifyMessageSignature+0x10e>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a8:	3002      	adds	r0, #2
 80098aa:	4418      	add	r0, r3
 80098ac:	f00d f905 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += 2U + pInSSignature->Length;
 80098b0:	f8b8 3000 	ldrh.w	r3, [r8]
 80098b4:	88a2      	ldrh	r2, [r4, #4]
 80098b6:	3302      	adds	r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	80a3      	strh	r3, [r4, #4]
    if ((pInDigest->Length > 0U))
 80098bc:	883b      	ldrh	r3, [r7, #0]
 80098be:	b1db      	cbz	r3, 80098f8 <StSafeA_VerifyMessageSignature+0x25c>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInDigest->Length & 0xFF00U) >> 8);
 80098c0:	88a2      	ldrh	r2, [r4, #4]
 80098c2:	68a1      	ldr	r1, [r4, #8]
 80098c4:	0a1b      	lsrs	r3, r3, #8
 80098c6:	548b      	strb	r3, [r1, r2]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInDigest->Length & 0x00FFU);
 80098c8:	88a2      	ldrh	r2, [r4, #4]
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	883a      	ldrh	r2, [r7, #0]
 80098d0:	705a      	strb	r2, [r3, #1]
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length + 2U, pInDigest->Length);
 80098d2:	883a      	ldrh	r2, [r7, #0]
 80098d4:	88a0      	ldrh	r0, [r4, #4]
 80098d6:	1813      	adds	r3, r2, r0
 80098d8:	3302      	adds	r3, #2
 80098da:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80098de:	f4bf af64 	bcs.w	80097aa <StSafeA_VerifyMessageSignature+0x10e>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 80098e2:	68a3      	ldr	r3, [r4, #8]
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	3002      	adds	r0, #2
 80098e8:	4418      	add	r0, r3
 80098ea:	f00d f8e6 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += 2U + pInDigest->Length;
 80098ee:	883b      	ldrh	r3, [r7, #0]
 80098f0:	88a2      	ldrh	r2, [r4, #4]
 80098f2:	3302      	adds	r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	80a3      	strh	r3, [r4, #4]
    status_code = StSafeA_TransmitCommand(pStSafeA);
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7ff fbb7 	bl	800906c <StSafeA_TransmitCommand>
    if (status_code == STSAFEA_OK)
 80098fe:	2800      	cmp	r0, #0
 8009900:	f47f af54 	bne.w	80097ac <StSafeA_VerifyMessageSignature+0x110>
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_VERIFY_MSG_SIGNATURE_RESPONSE_LENGTH + STSAFEA_R_MAC_LENGTH(InMAC);
 8009904:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	3301      	adds	r3, #1
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_VERIFY_MSG_SIGNATURE);
 8009910:	2091      	movs	r0, #145	; 0x91
      pStSafeA->InOutBuffer.LV.Length = STSAFEA_VERIFY_MSG_SIGNATURE_RESPONSE_LENGTH + STSAFEA_R_MAC_LENGTH(InMAC);
 8009912:	80a3      	strh	r3, [r4, #4]
      StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_VERIFY_MSG_SIGNATURE);
 8009914:	f000 fb7c 	bl	800a010 <StSafeA_Delay>
      status_code = StSafeA_ReceiveResponse(pStSafeA);
 8009918:	4620      	mov	r0, r4
 800991a:	f7ff fbb6 	bl	800908a <StSafeA_ReceiveResponse>
      if (status_code == STSAFEA_OK)
 800991e:	2800      	cmp	r0, #0
 8009920:	f47f af44 	bne.w	80097ac <StSafeA_VerifyMessageSignature+0x110>
        pOutRespVerifySignature->Length = pStSafeA->InOutBuffer.LV.Length;
 8009924:	88a3      	ldrh	r3, [r4, #4]
 8009926:	8033      	strh	r3, [r6, #0]
        pOutRespVerifySignature->SignatureValidity = pStSafeA->InOutBuffer.LV.Data[0];
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	70b3      	strb	r3, [r6, #2]
 800992e:	e73d      	b.n	80097ac <StSafeA_VerifyMessageSignature+0x110>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009930:	2030      	movs	r0, #48	; 0x30
 8009932:	e73b      	b.n	80097ac <StSafeA_VerifyMessageSignature+0x110>
 8009934:	08019940 	.word	0x08019940
 8009938:	0801801c 	.word	0x0801801c
 800993c:	080197a6 	.word	0x080197a6
 8009940:	08018016 	.word	0x08018016
 8009944:	08019936 	.word	0x08019936

08009948 <StSafeA_EstablishKey>:
{
 8009948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800994c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800994e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009952:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8009956:	468a      	mov	sl, r1
 8009958:	4691      	mov	r9, r2
 800995a:	4698      	mov	r8, r3
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA) &&
 800995c:	4604      	mov	r4, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	f000 8095 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
 8009964:	6883      	ldr	r3, [r0, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 8091 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
 800996c:	2a00      	cmp	r2, #0
 800996e:	f000 808e 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInPubX) &&
 8009972:	6853      	ldr	r3, [r2, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 808a 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
 800997a:	f1b8 0f00 	cmp.w	r8, #0
 800997e:	f000 8086 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
      IS_STSAFEA_LVBUFFER_VALID_PTR(pInPubY) &&
 8009982:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 8081 	beq.w	8009a8e <StSafeA_EstablishKey+0x146>
 800998c:	2d00      	cmp	r5, #0
 800998e:	d07e      	beq.n	8009a8e <StSafeA_EstablishKey+0x146>
    StSafeA_BuildCommandHeaderCMAC(pStSafeA, STSAFEA_CMD_ESTABLISH_KEY, &InMAC);
 8009990:	aa0a      	add	r2, sp, #40	; 0x28
 8009992:	2118      	movs	r1, #24
 8009994:	f7ff fbe4 	bl	8009160 <StSafeA_BuildCommandHeaderCMAC>
    pStSafeA->InOutBuffer.LV.Data[0] = (uint8_t)InKeySlotNum;
 8009998:	68a3      	ldr	r3, [r4, #8]
 800999a:	f883 a000 	strb.w	sl, [r3]
    pStSafeA->InOutBuffer.LV.Data[1] = (uint8_t)STSAFEA_POINT_REPRESENTATION_ID;
 800999e:	68a3      	ldr	r3, [r4, #8]
 80099a0:	2204      	movs	r2, #4
 80099a2:	705a      	strb	r2, [r3, #1]
    pStSafeA->InOutBuffer.LV.Length = 2U;
 80099a4:	2302      	movs	r3, #2
 80099a6:	80a3      	strh	r3, [r4, #4]
    if ((pInPubX->Length > 0U))
 80099a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80099ac:	b1fb      	cbz	r3, 80099ee <StSafeA_EstablishKey+0xa6>
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length, pInPubX->Length + 2U);
 80099ae:	189a      	adds	r2, r3, r2
 80099b0:	f5b2 7ffe 	cmp.w	r2, #508	; 0x1fc
 80099b4:	d302      	bcc.n	80099bc <StSafeA_EstablishKey+0x74>
 80099b6:	2006      	movs	r0, #6
}
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInPubX->Length & 0xFF00U) >> 8);
 80099bc:	68a2      	ldr	r2, [r4, #8]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	7093      	strb	r3, [r2, #2]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInPubX->Length & 0x00FFU);
 80099c2:	88a2      	ldrh	r2, [r4, #4]
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	4413      	add	r3, r2
 80099c8:	f8b9 2000 	ldrh.w	r2, [r9]
 80099cc:	705a      	strb	r2, [r3, #1]
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 80099ce:	88a0      	ldrh	r0, [r4, #4]
 80099d0:	68a3      	ldr	r3, [r4, #8]
 80099d2:	f8b9 2000 	ldrh.w	r2, [r9]
 80099d6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099da:	3002      	adds	r0, #2
 80099dc:	4418      	add	r0, r3
 80099de:	f00d f86c 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += (uint16_t)sizeof(pInPubX->Length) + pInPubX->Length;
 80099e2:	f8b9 3000 	ldrh.w	r3, [r9]
 80099e6:	88a2      	ldrh	r2, [r4, #4]
 80099e8:	3302      	adds	r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	80a3      	strh	r3, [r4, #4]
    if ((pInPubY->Length > 0U))
 80099ee:	f8b8 3000 	ldrh.w	r3, [r8]
 80099f2:	b1f3      	cbz	r3, 8009a32 <StSafeA_EstablishKey+0xea>
      STSAFEA_CHECK_SIZE(pStSafeA->InOutBuffer.LV.Length, pInPubY->Length + 2U);
 80099f4:	88a1      	ldrh	r1, [r4, #4]
 80099f6:	1c9a      	adds	r2, r3, #2
 80099f8:	440a      	add	r2, r1
 80099fa:	f5b2 7ffe 	cmp.w	r2, #508	; 0x1fc
 80099fe:	d2da      	bcs.n	80099b6 <StSafeA_EstablishKey+0x6e>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = (uint8_t)((pInPubY->Length & 0xFF00U) >> 8);
 8009a00:	68a2      	ldr	r2, [r4, #8]
 8009a02:	0a1b      	lsrs	r3, r3, #8
 8009a04:	5453      	strb	r3, [r2, r1]
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 1U] = (uint8_t)(pInPubY->Length & 0x00FFU);
 8009a06:	88a2      	ldrh	r2, [r4, #4]
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f8b8 2000 	ldrh.w	r2, [r8]
 8009a10:	705a      	strb	r2, [r3, #1]
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length + 2U],
 8009a12:	88a0      	ldrh	r0, [r4, #4]
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	f8b8 2000 	ldrh.w	r2, [r8]
 8009a1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a1e:	3002      	adds	r0, #2
 8009a20:	4418      	add	r0, r3
 8009a22:	f00d f84a 	bl	8016aba <memcpy>
      pStSafeA->InOutBuffer.LV.Length += (uint16_t)sizeof(pInPubY->Length) + pInPubY->Length;
 8009a26:	f8b8 3000 	ldrh.w	r3, [r8]
 8009a2a:	88a2      	ldrh	r2, [r4, #4]
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	80a3      	strh	r3, [r4, #4]
    if (((uint8_t)InHostEncryption & (uint8_t)STSAFEA_ENCRYPTION_COMMAND) == (uint8_t)STSAFEA_ENCRYPTION_COMMAND)
 8009a32:	07ba      	lsls	r2, r7, #30
 8009a34:	d41f      	bmi.n	8009a76 <StSafeA_EstablishKey+0x12e>
      status_code = StSafeA_TransmitCommand(pStSafeA);
 8009a36:	4620      	mov	r0, r4
 8009a38:	f7ff fb18 	bl	800906c <StSafeA_TransmitCommand>
      if (status_code == STSAFEA_OK)
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d1bb      	bne.n	80099b8 <StSafeA_EstablishKey+0x70>
        pStSafeA->InOutBuffer.LV.Length = InSharedKeyLength + STSAFEA_BUFFER_LENGTH_SIZE + STSAFEA_R_MAC_LENGTH(InMAC);
 8009a40:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	1cb2      	adds	r2, r6, #2
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	4413      	add	r3, r2
        StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_ESTABLISH_KEY);
 8009a4e:	20c8      	movs	r0, #200	; 0xc8
        pStSafeA->InOutBuffer.LV.Length = InSharedKeyLength + STSAFEA_BUFFER_LENGTH_SIZE + STSAFEA_R_MAC_LENGTH(InMAC);
 8009a50:	80a3      	strh	r3, [r4, #4]
        StSafeA_Delay(STSAFEA_MS_WAIT_TIME_CMD_ESTABLISH_KEY);
 8009a52:	f000 fadd 	bl	800a010 <StSafeA_Delay>
        status_code = StSafeA_ReceiveResponse(pStSafeA);
 8009a56:	4620      	mov	r0, r4
 8009a58:	f7ff fb17 	bl	800908a <StSafeA_ReceiveResponse>
        if (status_code == STSAFEA_OK)
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d1ab      	bne.n	80099b8 <StSafeA_EstablishKey+0x70>
          if (((uint8_t)InHostEncryption & (uint8_t)STSAFEA_ENCRYPTION_RESPONSE) == (uint8_t)STSAFEA_ENCRYPTION_RESPONSE)
 8009a60:	07fb      	lsls	r3, r7, #31
 8009a62:	d40e      	bmi.n	8009a82 <StSafeA_EstablishKey+0x13a>
          pOutSharedSecret->Length = pStSafeA->InOutBuffer.LV.Length;
 8009a64:	4628      	mov	r0, r5
 8009a66:	88a3      	ldrh	r3, [r4, #4]
 8009a68:	f820 3b04 	strh.w	r3, [r0], #4
          status_code = StSafeA_AssignLVBuffer(&pOutSharedSecret->SharedKey, pStSafeA->InOutBuffer.LV.Data, InSharedKeyLength);
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	68a1      	ldr	r1, [r4, #8]
 8009a70:	f7ff fae9 	bl	8009046 <StSafeA_AssignLVBuffer>
 8009a74:	e7a0      	b.n	80099b8 <StSafeA_EstablishKey+0x70>
      status_code = StSafeA_DataEncryption(pStSafeA);
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f969 	bl	8009d4e <StSafeA_DataEncryption>
    if (status_code == STSAFEA_OK)
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d0da      	beq.n	8009a36 <StSafeA_EstablishKey+0xee>
 8009a80:	e79a      	b.n	80099b8 <StSafeA_EstablishKey+0x70>
            status_code = StSafeA_DataDecryption(pStSafeA);
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f999 	bl	8009dba <StSafeA_DataDecryption>
        if (status_code == STSAFEA_OK)
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d0eb      	beq.n	8009a64 <StSafeA_EstablishKey+0x11c>
 8009a8c:	e794      	b.n	80099b8 <StSafeA_EstablishKey+0x70>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009a8e:	2030      	movs	r0, #48	; 0x30
 8009a90:	e792      	b.n	80099b8 <StSafeA_EstablishKey+0x70>

08009a92 <ComputeInitialValue.isra.1>:
  */
static void ComputeInitialValue(StSafeA_Handle_t *pStSafeA, InitialValue InSubject, uint8_t *pOutInitialValue)
{
  uint32_t host_cmac_sequence_counter = pStSafeA->HostCMacSequenceCounter;

  if (InSubject != CMAC_COMPUTATION)
 8009a92:	b101      	cbz	r1, 8009a96 <ComputeInitialValue.isra.1+0x4>
  {
    host_cmac_sequence_counter++;
 8009a94:	3001      	adds	r0, #1
  }

  pOutInitialValue[0] = (uint8_t)(host_cmac_sequence_counter >> 16) & 0xFFU;
 8009a96:	0c03      	lsrs	r3, r0, #16
 8009a98:	7013      	strb	r3, [r2, #0]
  pOutInitialValue[1] = (uint8_t)(host_cmac_sequence_counter >> 8) & 0xFFU;
 8009a9a:	0a03      	lsrs	r3, r0, #8
 8009a9c:	7053      	strb	r3, [r2, #1]
  pOutInitialValue[2] = (uint8_t)(host_cmac_sequence_counter & 0xFFU);
  pOutInitialValue[3] = (uint8_t)(((uint8_t)InSubject << 6) & 0xC0U);
  pOutInitialValue[4] = 0x80U;
 8009a9e:	2380      	movs	r3, #128	; 0x80
  pOutInitialValue[3] = (uint8_t)(((uint8_t)InSubject << 6) & 0xC0U);
 8009aa0:	0189      	lsls	r1, r1, #6
  pOutInitialValue[4] = 0x80U;
 8009aa2:	7113      	strb	r3, [r2, #4]
  (void)memset(&pOutInitialValue[5], 0x00, STSAFEA_INITIAL_VALUE_SIZE - 5U);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c2 3009 	str.w	r3, [r2, #9]
  pOutInitialValue[2] = (uint8_t)(host_cmac_sequence_counter & 0xFFU);
 8009aaa:	7090      	strb	r0, [r2, #2]
  pOutInitialValue[3] = (uint8_t)(((uint8_t)InSubject << 6) & 0xC0U);
 8009aac:	70d1      	strb	r1, [r2, #3]
  (void)memset(&pOutInitialValue[5], 0x00, STSAFEA_INITIAL_VALUE_SIZE - 5U);
 8009aae:	f8c2 3005 	str.w	r3, [r2, #5]
 8009ab2:	60d3      	str	r3, [r2, #12]
}
 8009ab4:	4770      	bx	lr

08009ab6 <StSafeA_SHA_Update>:
}
 8009ab6:	4770      	bx	lr

08009ab8 <StSafeA_ComputeCMAC>:
{
 8009ab8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009abc:	4605      	mov	r5, r0
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f000 8091 	beq.w	8009be6 <StSafeA_ComputeCMAC+0x12e>
 8009ac4:	6883      	ldr	r3, [r0, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 808d 	beq.w	8009be6 <StSafeA_ComputeCMAC+0x12e>
    void *p_aes_cmac_ctx = NULL;
 8009acc:	f10d 0a08 	add.w	sl, sp, #8
 8009ad0:	2400      	movs	r4, #0
    uint8_t host_mac_computation = pStSafeA->InOutBuffer.Header & (uint8_t)STSAFEA_CMD_HEADER_SCHN_HOSTEN;
 8009ad2:	f890 9000 	ldrb.w	r9, [r0]
    void *p_aes_cmac_ctx = NULL;
 8009ad6:	f84a 4d04 	str.w	r4, [sl, #-4]!
    uint8_t host_mac_computation = pStSafeA->InOutBuffer.Header & (uint8_t)STSAFEA_CMD_HEADER_SCHN_HOSTEN;
 8009ada:	f009 0920 	and.w	r9, r9, #32
    StSafeA_AES_MAC_Start(&p_aes_cmac_ctx);
 8009ade:	4650      	mov	r0, sl
 8009ae0:	f7f9 f98c 	bl	8002dfc <StSafeA_AES_MAC_Start>
    if (host_mac_computation != 0U)
 8009ae4:	f1b9 0f00 	cmp.w	r9, #0
 8009ae8:	d009      	beq.n	8009afe <StSafeA_ComputeCMAC+0x46>
      ComputeInitialValue(pStSafeA, CMAC_COMPUTATION, aRMacBuffer);
 8009aea:	4a47      	ldr	r2, [pc, #284]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009aec:	6928      	ldr	r0, [r5, #16]
 8009aee:	4621      	mov	r1, r4
 8009af0:	f7ff ffcf 	bl	8009a92 <ComputeInitialValue.isra.1>
      StSafeA_AES_MAC_Update(aRMacBuffer, STSAFEA_MAC_PACKET_SIZE, p_aes_cmac_ctx);
 8009af4:	9a01      	ldr	r2, [sp, #4]
 8009af6:	4844      	ldr	r0, [pc, #272]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009af8:	2110      	movs	r1, #16
 8009afa:	f7f9 f991 	bl	8002e20 <StSafeA_AES_MAC_Update>
    length = pStSafeA->InOutBuffer.LV.Length;
 8009afe:	88af      	ldrh	r7, [r5, #4]
    aRMacBuffer[0] = (host_mac_computation == 0U) ? ((uint8_t)pStSafeA->MacCounter & 0x7FU) : 0x00U;
 8009b00:	f1b9 0f00 	cmp.w	r9, #0
 8009b04:	d172      	bne.n	8009bec <StSafeA_ComputeCMAC+0x134>
 8009b06:	7b6b      	ldrb	r3, [r5, #13]
 8009b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0c:	4c3e      	ldr	r4, [pc, #248]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009b0e:	7023      	strb	r3, [r4, #0]
  */
static void StSafeA_Copy_TLVBuffer(uint8_t *pDest, StSafeA_TLVBuffer_t *pSrcTLV, uint16_t Size)
{
  if ((pDest != NULL) && (pSrcTLV != NULL)  && (Size > 3U))
  {
    pDest[0] = pSrcTLV->Header;
 8009b10:	782b      	ldrb	r3, [r5, #0]
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
    pDest[2] = (uint8_t)pSrcTLV->LV.Length & 0xFFU;
    (void)memcpy(&pDest[3], pSrcTLV->LV.Data, (uint32_t)(Size) - 3U);
 8009b12:	68aa      	ldr	r2, [r5, #8]
    pDest[0] = pSrcTLV->Header;
 8009b14:	7063      	strb	r3, [r4, #1]
    pDest[2] = (uint8_t)pSrcTLV->LV.Length & 0xFFU;
 8009b16:	b2fe      	uxtb	r6, r7
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
 8009b18:	0a3b      	lsrs	r3, r7, #8
 8009b1a:	70a3      	strb	r3, [r4, #2]
    pDest[2] = (uint8_t)pSrcTLV->LV.Length & 0xFFU;
 8009b1c:	70e6      	strb	r6, [r4, #3]
    (void)memcpy(&pDest[3], pSrcTLV->LV.Data, (uint32_t)(Size) - 3U);
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	f104 0804 	add.w	r8, r4, #4
 8009b26:	6853      	ldr	r3, [r2, #4]
 8009b28:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b2c:	6893      	ldr	r3, [r2, #8]
 8009b2e:	f8c8 3008 	str.w	r3, [r8, #8]
    if (length > (STSAFEA_MAC_PACKET_SIZE - (uint16_t)STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE))
 8009b32:	2f0c      	cmp	r7, #12
 8009b34:	9a01      	ldr	r2, [sp, #4]
 8009b36:	d95b      	bls.n	8009bf0 <StSafeA_ComputeCMAC+0x138>
      StSafeA_AES_MAC_Update(aRMacBuffer, STSAFEA_MAC_PACKET_SIZE, p_aes_cmac_ctx);
 8009b38:	2110      	movs	r1, #16
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7f9 f970 	bl	8002e20 <StSafeA_AES_MAC_Update>
      StSafeA_AES_MAC_LastUpdate(&pStSafeA->InOutBuffer.LV.Data[STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE],
 8009b40:	68a8      	ldr	r0, [r5, #8]
 8009b42:	9a01      	ldr	r2, [sp, #4]
 8009b44:	f1a7 010c 	sub.w	r1, r7, #12
 8009b48:	b289      	uxth	r1, r1
 8009b4a:	300c      	adds	r0, #12
      StSafeA_AES_MAC_LastUpdate(aRMacBuffer, length + (uint16_t)STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE,
 8009b4c:	f7f9 f970 	bl	8002e30 <StSafeA_AES_MAC_LastUpdate>
    StSafeA_AES_MAC_Final(&pStSafeA->InOutBuffer.LV.Data[length], &p_aes_cmac_ctx);
 8009b50:	68a8      	ldr	r0, [r5, #8]
 8009b52:	4651      	mov	r1, sl
 8009b54:	4438      	add	r0, r7
 8009b56:	f7f9 f977 	bl	8002e48 <StSafeA_AES_MAC_Final>
    if ((pStSafeA->InOutBuffer.Header & (uint8_t)STSAFEA_CMD_HEADER_RMACEN) == (uint8_t)STSAFEA_CMD_HEADER_RMACEN)
 8009b5a:	782b      	ldrb	r3, [r5, #0]
 8009b5c:	065b      	lsls	r3, r3, #25
 8009b5e:	d53f      	bpl.n	8009be0 <StSafeA_ComputeCMAC+0x128>
      pAesRMacCtx = NULL;
 8009b60:	2300      	movs	r3, #0
      StSafeA_AES_MAC_Start(&pAesRMacCtx);
 8009b62:	482a      	ldr	r0, [pc, #168]	; (8009c0c <StSafeA_ComputeCMAC+0x154>)
      pAesRMacCtx = NULL;
 8009b64:	6123      	str	r3, [r4, #16]
      RMacBufferSize = 0;
 8009b66:	7523      	strb	r3, [r4, #20]
      StSafeA_AES_MAC_Start(&pAesRMacCtx);
 8009b68:	f7f9 f948 	bl	8002dfc <StSafeA_AES_MAC_Start>
      if (host_mac_computation != 0U)
 8009b6c:	f1b9 0f00 	cmp.w	r9, #0
 8009b70:	d045      	beq.n	8009bfe <StSafeA_ComputeCMAC+0x146>
        ComputeInitialValue(pStSafeA, RMAC_COMPUTATION, aRMacBuffer);
 8009b72:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009b74:	6928      	ldr	r0, [r5, #16]
 8009b76:	2101      	movs	r1, #1
 8009b78:	f7ff ff8b 	bl	8009a92 <ComputeInitialValue.isra.1>
        StSafeA_AES_MAC_Update(aRMacBuffer, STSAFEA_MAC_PACKET_SIZE, pAesRMacCtx);
 8009b7c:	6922      	ldr	r2, [r4, #16]
 8009b7e:	4822      	ldr	r0, [pc, #136]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009b80:	2110      	movs	r1, #16
 8009b82:	f7f9 f94d 	bl	8002e20 <StSafeA_AES_MAC_Update>
      aRMacBuffer[0] = (host_mac_computation == 0U) ? (pStSafeA->MacCounter | 0x80U) : 0x80U;
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	7023      	strb	r3, [r4, #0]
    pDest[0] = pSrcTLV->Header;
 8009b8a:	782b      	ldrb	r3, [r5, #0]
 8009b8c:	7063      	strb	r3, [r4, #1]
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
 8009b8e:	88ab      	ldrh	r3, [r5, #4]
    pDest[2] = (uint8_t)pSrcTLV->LV.Length & 0xFFU;
 8009b90:	70e3      	strb	r3, [r4, #3]
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
 8009b92:	0a1a      	lsrs	r2, r3, #8
 8009b94:	70a2      	strb	r2, [r4, #2]
    (void)memcpy(&pDest[3], pSrcTLV->LV.Data, (uint32_t)(Size) - 3U);
 8009b96:	68aa      	ldr	r2, [r5, #8]
 8009b98:	6813      	ldr	r3, [r2, #0]
 8009b9a:	6063      	str	r3, [r4, #4]
 8009b9c:	6853      	ldr	r3, [r2, #4]
 8009b9e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ba2:	6893      	ldr	r3, [r2, #8]
 8009ba4:	f8c8 3008 	str.w	r3, [r8, #8]
      if (length > (STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE))
 8009ba8:	2f0c      	cmp	r7, #12
 8009baa:	d925      	bls.n	8009bf8 <StSafeA_ComputeCMAC+0x140>
        StSafeA_AES_MAC_Update(aRMacBuffer, STSAFEA_MAC_PACKET_SIZE, pAesRMacCtx);
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	4816      	ldr	r0, [pc, #88]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
 8009bb0:	2110      	movs	r1, #16
 8009bb2:	f7f9 f935 	bl	8002e20 <StSafeA_AES_MAC_Update>
        StSafeA_AES_MAC_Update(&pStSafeA->InOutBuffer.LV.Data[STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE],
 8009bb6:	68a8      	ldr	r0, [r5, #8]
 8009bb8:	6922      	ldr	r2, [r4, #16]
                               ((uint16_t)((length - (STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE)) / STSAFEA_MAC_PACKET_SIZE)) * STSAFEA_MAC_PACKET_SIZE,
 8009bba:	f1a7 030c 	sub.w	r3, r7, #12
        StSafeA_AES_MAC_Update(&pStSafeA->InOutBuffer.LV.Data[STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE],
 8009bbe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8009bc2:	4019      	ands	r1, r3
 8009bc4:	300c      	adds	r0, #12
 8009bc6:	f7f9 f92b 	bl	8002e20 <StSafeA_AES_MAC_Update>
        RMacBufferSize = (uint8_t)(length - (STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE)) % STSAFEA_MAC_PACKET_SIZE;
 8009bca:	f1a6 020c 	sub.w	r2, r6, #12
 8009bce:	f002 020f 	and.w	r2, r2, #15
        (void)memcpy(aRMacBuffer, &pStSafeA->InOutBuffer.LV.Data[length - RMacBufferSize], RMacBufferSize);
 8009bd2:	68a9      	ldr	r1, [r5, #8]
 8009bd4:	480c      	ldr	r0, [pc, #48]	; (8009c08 <StSafeA_ComputeCMAC+0x150>)
        RMacBufferSize = (uint8_t)(length - (STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE)) % STSAFEA_MAC_PACKET_SIZE;
 8009bd6:	7522      	strb	r2, [r4, #20]
        (void)memcpy(aRMacBuffer, &pStSafeA->InOutBuffer.LV.Data[length - RMacBufferSize], RMacBufferSize);
 8009bd8:	1abf      	subs	r7, r7, r2
 8009bda:	4439      	add	r1, r7
 8009bdc:	f00c ff6d 	bl	8016aba <memcpy>
    pStSafeA->InOutBuffer.LV.Length += STSAFEA_MAC_LENGTH;
 8009be0:	88ab      	ldrh	r3, [r5, #4]
 8009be2:	3304      	adds	r3, #4
 8009be4:	80ab      	strh	r3, [r5, #4]
}
 8009be6:	b002      	add	sp, #8
 8009be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aRMacBuffer[0] = (host_mac_computation == 0U) ? ((uint8_t)pStSafeA->MacCounter & 0x7FU) : 0x00U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e78d      	b.n	8009b0c <StSafeA_ComputeCMAC+0x54>
      StSafeA_AES_MAC_LastUpdate(aRMacBuffer, length + (uint16_t)STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE,
 8009bf0:	1d39      	adds	r1, r7, #4
 8009bf2:	b289      	uxth	r1, r1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	e7a9      	b.n	8009b4c <StSafeA_ComputeCMAC+0x94>
        RMacBufferSize = (uint8_t)(length + STSAFEA_KNOWN_INPUT_TO_CMAC_COMPUTATION_SIZE);
 8009bf8:	3604      	adds	r6, #4
 8009bfa:	7526      	strb	r6, [r4, #20]
 8009bfc:	e7f0      	b.n	8009be0 <StSafeA_ComputeCMAC+0x128>
      aRMacBuffer[0] = (host_mac_computation == 0U) ? (pStSafeA->MacCounter | 0x80U) : 0x80U;
 8009bfe:	7b6b      	ldrb	r3, [r5, #13]
 8009c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c04:	e7c0      	b.n	8009b88 <StSafeA_ComputeCMAC+0xd0>
 8009c06:	bf00      	nop
 8009c08:	20006460 	.word	0x20006460
 8009c0c:	20006470 	.word	0x20006470

08009c10 <StSafeA_ComputeRMAC>:
{
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009c14:	4604      	mov	r4, r0
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d035      	beq.n	8009c86 <StSafeA_ComputeRMAC+0x76>
 8009c1a:	6883      	ldr	r3, [r0, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d032      	beq.n	8009c86 <StSafeA_ComputeRMAC+0x76>
    StSafeA_Copy_TLVBuffer(&aRMacBuffer[RMacBufferSize], &pStSafeA->InOutBuffer,
 8009c20:	4d1c      	ldr	r5, [pc, #112]	; (8009c94 <StSafeA_ComputeRMAC+0x84>)
    uint16_t length = pStSafeA->InOutBuffer.LV.Length;
 8009c22:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    StSafeA_Copy_TLVBuffer(&aRMacBuffer[RMacBufferSize], &pStSafeA->InOutBuffer,
 8009c26:	7d2f      	ldrb	r7, [r5, #20]
 8009c28:	b2be      	uxth	r6, r7
 8009c2a:	f1c6 0210 	rsb	r2, r6, #16
 8009c2e:	b292      	uxth	r2, r2
  if ((pDest != NULL) && (pSrcTLV != NULL)  && (Size > 3U))
 8009c30:	2a03      	cmp	r2, #3
 8009c32:	d90c      	bls.n	8009c4e <StSafeA_ComputeRMAC+0x3e>
    pDest[0] = pSrcTLV->Header;
 8009c34:	7823      	ldrb	r3, [r4, #0]
 8009c36:	55eb      	strb	r3, [r5, r7]
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
 8009c38:	88a3      	ldrh	r3, [r4, #4]
    StSafeA_Copy_TLVBuffer(&aRMacBuffer[RMacBufferSize], &pStSafeA->InOutBuffer,
 8009c3a:	19e8      	adds	r0, r5, r7
    pDest[1] = (uint8_t)((pSrcTLV->LV.Length >> 8) & 0xFFU);
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	7043      	strb	r3, [r0, #1]
    pDest[2] = (uint8_t)pSrcTLV->LV.Length & 0xFFU;
 8009c40:	88a3      	ldrh	r3, [r4, #4]
 8009c42:	7083      	strb	r3, [r0, #2]
    (void)memcpy(&pDest[3], pSrcTLV->LV.Data, (uint32_t)(Size) - 3U);
 8009c44:	3a03      	subs	r2, #3
 8009c46:	68a1      	ldr	r1, [r4, #8]
 8009c48:	3003      	adds	r0, #3
 8009c4a:	f00c ff36 	bl	8016aba <memcpy>
    if ((length + RMacBufferSize) > (uint16_t)(STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_RMAC_COMPUTATION_SIZE))
 8009c4e:	4447      	add	r7, r8
 8009c50:	2f0d      	cmp	r7, #13
 8009c52:	692a      	ldr	r2, [r5, #16]
 8009c54:	dd19      	ble.n	8009c8a <StSafeA_ComputeRMAC+0x7a>
      StSafeA_AES_MAC_Update(aRMacBuffer, STSAFEA_MAC_PACKET_SIZE, pAesRMacCtx);
 8009c56:	2110      	movs	r1, #16
 8009c58:	480e      	ldr	r0, [pc, #56]	; (8009c94 <StSafeA_ComputeRMAC+0x84>)
 8009c5a:	f7f9 f8e1 	bl	8002e20 <StSafeA_AES_MAC_Update>
      StSafeA_AES_MAC_LastUpdate(&pStSafeA->InOutBuffer.LV.Data[STSAFEA_MAC_PACKET_SIZE - STSAFEA_KNOWN_INPUT_TO_RMAC_COMPUTATION_SIZE - RMacBufferSize],
 8009c5e:	7d28      	ldrb	r0, [r5, #20]
 8009c60:	68a3      	ldr	r3, [r4, #8]
 8009c62:	692a      	ldr	r2, [r5, #16]
 8009c64:	f1a0 010d 	sub.w	r1, r0, #13
 8009c68:	4441      	add	r1, r8
 8009c6a:	f1c0 000d 	rsb	r0, r0, #13
 8009c6e:	b289      	uxth	r1, r1
 8009c70:	4418      	add	r0, r3
      StSafeA_AES_MAC_LastUpdate(aRMacBuffer,
 8009c72:	f7f9 f8dd 	bl	8002e30 <StSafeA_AES_MAC_LastUpdate>
    StSafeA_AES_MAC_Final(&pStSafeA->InOutBuffer.LV.Data[length], &pAesRMacCtx);
 8009c76:	68a0      	ldr	r0, [r4, #8]
 8009c78:	4907      	ldr	r1, [pc, #28]	; (8009c98 <StSafeA_ComputeRMAC+0x88>)
 8009c7a:	4440      	add	r0, r8
 8009c7c:	f7f9 f8e4 	bl	8002e48 <StSafeA_AES_MAC_Final>
    pStSafeA->InOutBuffer.LV.Length += STSAFEA_MAC_LENGTH;
 8009c80:	88a3      	ldrh	r3, [r4, #4]
 8009c82:	3304      	adds	r3, #4
 8009c84:	80a3      	strh	r3, [r4, #4]
}
 8009c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      StSafeA_AES_MAC_LastUpdate(aRMacBuffer,
 8009c8a:	1cf1      	adds	r1, r6, #3
 8009c8c:	4441      	add	r1, r8
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	4800      	ldr	r0, [pc, #0]	; (8009c94 <StSafeA_ComputeRMAC+0x84>)
 8009c92:	e7ee      	b.n	8009c72 <StSafeA_ComputeRMAC+0x62>
 8009c94:	20006460 	.word	0x20006460
 8009c98:	20006470 	.word	0x20006470

08009c9c <StSafeA_MAC_SHA_PrePostProcess>:
{
 8009c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	460e      	mov	r6, r1
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	b120      	cbz	r0, 8009cb0 <StSafeA_MAC_SHA_PrePostProcess+0x14>
 8009ca6:	6882      	ldr	r2, [r0, #8]
 8009ca8:	b112      	cbz	r2, 8009cb0 <StSafeA_MAC_SHA_PrePostProcess+0x14>
    switch (MacShaProcessType)
 8009caa:	b119      	cbz	r1, 8009cb4 <StSafeA_MAC_SHA_PrePostProcess+0x18>
 8009cac:	2901      	cmp	r1, #1
 8009cae:	d029      	beq.n	8009d04 <StSafeA_MAC_SHA_PrePostProcess+0x68>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009cb0:	2030      	movs	r0, #48	; 0x30
 8009cb2:	e043      	b.n	8009d3c <StSafeA_MAC_SHA_PrePostProcess+0xa0>
  if ((pStSafeA->InOutBuffer.Header & (uint8_t)STSAFEA_MAC_HOST_CMAC) == (uint8_t)STSAFEA_MAC_HOST_CMAC)
 8009cb4:	7803      	ldrb	r3, [r0, #0]
 8009cb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009cba:	2ba0      	cmp	r3, #160	; 0xa0
 8009cbc:	d101      	bne.n	8009cc2 <StSafeA_MAC_SHA_PrePostProcess+0x26>
    StSafeA_ComputeCMAC(pStSafeA);
 8009cbe:	f7ff fefb 	bl	8009ab8 <StSafeA_ComputeCMAC>
    if ((status_code == STSAFEA_OK) && (pStSafeA->HashObj.HashCtx != NULL))
 8009cc2:	69e1      	ldr	r1, [r4, #28]
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d040      	beq.n	8009d4a <StSafeA_MAC_SHA_PrePostProcess+0xae>
      if (MacShaProcessType == STSAFEA_MAC_SHA_PRE_PROCESS)
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	d13c      	bne.n	8009d46 <StSafeA_MAC_SHA_PrePostProcess+0xaa>
        hash_buffer[0] = STSAFEA_CMD_TAG;
 8009ccc:	2301      	movs	r3, #1
        hash_buffer[0] = STSAFEA_RSP_TAG;
 8009cce:	f88d 3004 	strb.w	r3, [sp, #4]
      length = (uint16_t)SWAP2BYTES((uint32_t)pStSafeA->InOutBuffer.LV.Length + 1U);
 8009cd2:	88a3      	ldrh	r3, [r4, #4]
      StSafeA_SHA_Update(pStSafeA->HashObj.HashType,
 8009cd4:	7d20      	ldrb	r0, [r4, #20]
      length = (uint16_t)SWAP2BYTES((uint32_t)pStSafeA->InOutBuffer.LV.Length + 1U);
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009cdc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
      (void)memcpy(&hash_buffer[1], &length, sizeof(length));
 8009ce0:	f8ad 3005 	strh.w	r3, [sp, #5]
      hash_buffer[3] = pStSafeA->InOutBuffer.Header;
 8009ce4:	7823      	ldrb	r3, [r4, #0]
 8009ce6:	f88d 3007 	strb.w	r3, [sp, #7]
      StSafeA_SHA_Update(pStSafeA->HashObj.HashType,
 8009cea:	2304      	movs	r3, #4
 8009cec:	eb0d 0203 	add.w	r2, sp, r3
 8009cf0:	f7ff fee1 	bl	8009ab6 <StSafeA_SHA_Update>
      StSafeA_SHA_Update(pStSafeA->HashObj.HashType,
 8009cf4:	7d20      	ldrb	r0, [r4, #20]
 8009cf6:	88a3      	ldrh	r3, [r4, #4]
 8009cf8:	68a2      	ldr	r2, [r4, #8]
 8009cfa:	69e1      	ldr	r1, [r4, #28]
 8009cfc:	f7ff fedb 	bl	8009ab6 <StSafeA_SHA_Update>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e01b      	b.n	8009d3c <StSafeA_MAC_SHA_PrePostProcess+0xa0>
  if (((uint8_t)pStSafeA->InOutBuffer.Header & (uint8_t)STSAFEA_CMD_HEADER_RMACEN) == (uint8_t)STSAFEA_CMD_HEADER_RMACEN)
 8009d04:	7803      	ldrb	r3, [r0, #0]
 8009d06:	065b      	lsls	r3, r3, #25
 8009d08:	d5db      	bpl.n	8009cc2 <StSafeA_MAC_SHA_PrePostProcess+0x26>
    pStSafeA->InOutBuffer.LV.Length -= STSAFEA_MAC_LENGTH;
 8009d0a:	8883      	ldrh	r3, [r0, #4]
 8009d0c:	3b04      	subs	r3, #4
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	8083      	strh	r3, [r0, #4]
    (void)memcpy(a_rmac, &pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length], sizeof(a_rmac));
 8009d12:	af02      	add	r7, sp, #8
 8009d14:	f852 9003 	ldr.w	r9, [r2, r3]
 8009d18:	f847 9d04 	str.w	r9, [r7, #-4]!
    StSafeA_ComputeRMAC(pStSafeA);
 8009d1c:	f7ff ff78 	bl	8009c10 <StSafeA_ComputeRMAC>
    if (memcmp(a_rmac, &pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length - STSAFEA_MAC_LENGTH], sizeof(a_rmac)) != 0)
 8009d20:	88a5      	ldrh	r5, [r4, #4]
 8009d22:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009d26:	3d04      	subs	r5, #4
 8009d28:	2204      	movs	r2, #4
 8009d2a:	eb08 0105 	add.w	r1, r8, r5
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f00c feb4 	bl	8016a9c <memcmp>
 8009d34:	b128      	cbz	r0, 8009d42 <StSafeA_MAC_SHA_PrePostProcess+0xa6>
      (void)memcpy(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length - STSAFEA_MAC_LENGTH], a_rmac, sizeof(a_rmac));
 8009d36:	f848 9005 	str.w	r9, [r8, r5]
      status_code = STSAFEA_INVALID_RMAC;
 8009d3a:	2021      	movs	r0, #33	; 0x21
}
 8009d3c:	b003      	add	sp, #12
 8009d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pStSafeA->InOutBuffer.LV.Length -= STSAFEA_MAC_LENGTH;
 8009d42:	80a5      	strh	r5, [r4, #4]
 8009d44:	e7bd      	b.n	8009cc2 <StSafeA_MAC_SHA_PrePostProcess+0x26>
        hash_buffer[0] = STSAFEA_RSP_TAG;
 8009d46:	2302      	movs	r3, #2
 8009d48:	e7c1      	b.n	8009cce <StSafeA_MAC_SHA_PrePostProcess+0x32>
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	e7f6      	b.n	8009d3c <StSafeA_MAC_SHA_PrePostProcess+0xa0>

08009d4e <StSafeA_DataEncryption>:
{
 8009d4e:	b570      	push	{r4, r5, r6, lr}
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009d50:	4605      	mov	r5, r0
{
 8009d52:	b086      	sub	sp, #24
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d02e      	beq.n	8009db6 <StSafeA_DataEncryption+0x68>
 8009d58:	6883      	ldr	r3, [r0, #8]
 8009d5a:	b363      	cbz	r3, 8009db6 <StSafeA_DataEncryption+0x68>
    ComputeInitialValue(pStSafeA, C_ENCRYPTION, initial_value);
 8009d5c:	aa02      	add	r2, sp, #8
 8009d5e:	2102      	movs	r1, #2
 8009d60:	6900      	ldr	r0, [r0, #16]
 8009d62:	f7ff fe96 	bl	8009a92 <ComputeInitialValue.isra.1>
    status_code = ((StSafeA_AES_ECB_Encrypt(initial_value, initial_value,
 8009d66:	a902      	add	r1, sp, #8
 8009d68:	2200      	movs	r2, #0
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	f7f9 f87a 	bl	8002e64 <StSafeA_AES_ECB_Encrypt>
                                            STSAFEA_KEY_TYPE_AES_128) == 0) ? STSAFEA_OK : STSAFEA_CRYPTO_LIB_ISSUE);
 8009d70:	4606      	mov	r6, r0
 8009d72:	b9e8      	cbnz	r0, 8009db0 <StSafeA_DataEncryption+0x62>
      pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length] = 0x80;
 8009d74:	88ab      	ldrh	r3, [r5, #4]
 8009d76:	68aa      	ldr	r2, [r5, #8]
 8009d78:	2180      	movs	r1, #128	; 0x80
 8009d7a:	54d1      	strb	r1, [r2, r3]
      pStSafeA->InOutBuffer.LV.Length++;
 8009d7c:	88ab      	ldrh	r3, [r5, #4]
      (void)memset(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length], 0x00, padding_length * sizeof(padding_length));
 8009d7e:	68a8      	ldr	r0, [r5, #8]
      pStSafeA->InOutBuffer.LV.Length++;
 8009d80:	3301      	adds	r3, #1
 8009d82:	b29b      	uxth	r3, r3
      padding_length = STSAFEA_HOST_SECURE_CHANNEL_MODULUS - (uint8_t)(pStSafeA->InOutBuffer.LV.Length % STSAFEA_HOST_SECURE_CHANNEL_MODULUS);
 8009d84:	f003 040f 	and.w	r4, r3, #15
 8009d88:	f1c4 0410 	rsb	r4, r4, #16
 8009d8c:	b2e4      	uxtb	r4, r4
      pStSafeA->InOutBuffer.LV.Length++;
 8009d8e:	80ab      	strh	r3, [r5, #4]
      (void)memset(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length], 0x00, padding_length * sizeof(padding_length));
 8009d90:	4622      	mov	r2, r4
 8009d92:	4631      	mov	r1, r6
 8009d94:	4418      	add	r0, r3
 8009d96:	f00c feb4 	bl	8016b02 <memset>
      pStSafeA->InOutBuffer.LV.Length += padding_length;
 8009d9a:	88a9      	ldrh	r1, [r5, #4]
      status_code = (StSafeA_AES_CBC_Encrypt(&pStSafeA->InOutBuffer.LV.Data[0],
 8009d9c:	68aa      	ldr	r2, [r5, #8]
      pStSafeA->InOutBuffer.LV.Length += padding_length;
 8009d9e:	4421      	add	r1, r4
 8009da0:	b289      	uxth	r1, r1
 8009da2:	80a9      	strh	r1, [r5, #4]
      status_code = (StSafeA_AES_CBC_Encrypt(&pStSafeA->InOutBuffer.LV.Data[0],
 8009da4:	ab02      	add	r3, sp, #8
 8009da6:	9600      	str	r6, [sp, #0]
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7f9 f885 	bl	8002eb8 <StSafeA_AES_CBC_Encrypt>
                                             STSAFEA_KEY_TYPE_AES_128) == 0) ? STSAFEA_OK : STSAFEA_CRYPTO_LIB_ISSUE;
 8009dae:	b100      	cbz	r0, 8009db2 <StSafeA_DataEncryption+0x64>
 8009db0:	2020      	movs	r0, #32
}
 8009db2:	b006      	add	sp, #24
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009db6:	2030      	movs	r0, #48	; 0x30
 8009db8:	e7fb      	b.n	8009db2 <StSafeA_DataEncryption+0x64>

08009dba <StSafeA_DataDecryption>:
{
 8009dba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009dbc:	4604      	mov	r4, r0
{
 8009dbe:	b087      	sub	sp, #28
  if (IS_STSAFEA_HANDLER_VALID_PTR(pStSafeA))
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d03c      	beq.n	8009e3e <StSafeA_DataDecryption+0x84>
 8009dc4:	6883      	ldr	r3, [r0, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d039      	beq.n	8009e3e <StSafeA_DataDecryption+0x84>
    ComputeInitialValue(pStSafeA, R_ENCRYPTION, initial_value);
 8009dca:	aa02      	add	r2, sp, #8
 8009dcc:	2103      	movs	r1, #3
 8009dce:	6900      	ldr	r0, [r0, #16]
 8009dd0:	f7ff fe5f 	bl	8009a92 <ComputeInitialValue.isra.1>
    status_code = ((StSafeA_AES_ECB_Encrypt(initial_value, initial_value,
 8009dd4:	a902      	add	r1, sp, #8
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	f7f9 f843 	bl	8002e64 <StSafeA_AES_ECB_Encrypt>
                                            STSAFEA_KEY_TYPE_AES_128) == 0) ? STSAFEA_OK : STSAFEA_CRYPTO_LIB_ISSUE);
 8009dde:	b110      	cbz	r0, 8009de6 <StSafeA_DataDecryption+0x2c>
 8009de0:	2020      	movs	r0, #32
}
 8009de2:	b007      	add	sp, #28
 8009de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      status_code = (StSafeA_AES_CBC_Decrypt(&pStSafeA->InOutBuffer.LV.Data[0],
 8009de6:	68a2      	ldr	r2, [r4, #8]
 8009de8:	88a1      	ldrh	r1, [r4, #4]
 8009dea:	9000      	str	r0, [sp, #0]
 8009dec:	ab02      	add	r3, sp, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7f9 f890 	bl	8002f14 <StSafeA_AES_CBC_Decrypt>
                                             STSAFEA_KEY_TYPE_AES_128) == 0) ? STSAFEA_OK : STSAFEA_CRYPTO_LIB_ISSUE;
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d1f3      	bne.n	8009de0 <StSafeA_DataDecryption+0x26>
        p_padding = StSafeA_Memrchr(&pStSafeA->InOutBuffer.LV.Data[0], 0x80,
 8009df8:	68a1      	ldr	r1, [r4, #8]
                                                     pStSafeA->InOutBuffer.LV.Length);
 8009dfa:	88a2      	ldrh	r2, [r4, #4]
static const uint8_t *StSafeA_Memrchr(void *pSource, uint8_t CharToFind, size_t Size)
{
  const uint8_t * pRet = NULL;
  uint8_t CharFound = 0U;
  /* Check input parameter */
  if (pSource != NULL)
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d0ef      	beq.n	8009de0 <StSafeA_DataDecryption+0x26>
  {
    uint8_t *p = (uint8_t *)pSource;
    uint32_t i = Size - 1U;
 8009e00:	1e55      	subs	r5, r2, #1
 8009e02:	440d      	add	r5, r1
 8009e04:	462e      	mov	r6, r5
  const uint8_t * pRet = NULL;
 8009e06:	4603      	mov	r3, r0

    while ((&p[i] != pSource) && (CharFound == 0U))
 8009e08:	428e      	cmp	r6, r1
 8009e0a:	d10b      	bne.n	8009e24 <StSafeA_DataDecryption+0x6a>
        if ((p_padding == NULL) ||
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e7      	beq.n	8009de0 <StSafeA_DataDecryption+0x26>
 8009e10:	42ab      	cmp	r3, r5
 8009e12:	d8e5      	bhi.n	8009de0 <StSafeA_DataDecryption+0x26>
        uint16_t new_length  = (uint16_t)(padding_pos - buffer_pos);
 8009e14:	1a5b      	subs	r3, r3, r1
 8009e16:	b29b      	uxth	r3, r3
            (new_length < (pStSafeA->InOutBuffer.LV.Length - (uint16_t)STSAFEA_HOST_SECURE_CHANNEL_MODULUS)))
 8009e18:	3a10      	subs	r2, #16
            (padding_pos > (uint32_t)(&pStSafeA->InOutBuffer.LV.Data[pStSafeA->InOutBuffer.LV.Length - 1U])) ||
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	dbe0      	blt.n	8009de0 <StSafeA_DataDecryption+0x26>
          pStSafeA->InOutBuffer.LV.Length = new_length;
 8009e1e:	80a3      	strh	r3, [r4, #4]
                                             STSAFEA_KEY_TYPE_AES_128) == 0) ? STSAFEA_OK : STSAFEA_CRYPTO_LIB_ISSUE;
 8009e20:	2000      	movs	r0, #0
 8009e22:	e7de      	b.n	8009de2 <StSafeA_DataDecryption+0x28>
    while ((&p[i] != pSource) && (CharFound == 0U))
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1f1      	bne.n	8009e0c <StSafeA_DataDecryption+0x52>
    {
      if (p[i] == CharToFind)
 8009e28:	f896 c000 	ldrb.w	ip, [r6]
 8009e2c:	4637      	mov	r7, r6
 8009e2e:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8009e32:	f106 36ff 	add.w	r6, r6, #4294967295
 8009e36:	bf04      	itt	eq
 8009e38:	463b      	moveq	r3, r7
 8009e3a:	2001      	moveq	r0, #1
 8009e3c:	e7e4      	b.n	8009e08 <StSafeA_DataDecryption+0x4e>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009e3e:	2030      	movs	r0, #48	; 0x30
 8009e40:	e7cf      	b.n	8009de2 <StSafeA_DataDecryption+0x28>
	...

08009e44 <StSafeA_Crc16>:
  *
  * @param   pTLV_Buffer : TLV Structure pointer containing the data to calculate the CRC on.
  * @retval  None
  */
void StSafeA_Crc16(StSafeA_TLVBuffer_t *pTLV_Buffer)
{
 8009e44:	b538      	push	{r3, r4, r5, lr}
  if ((pTLV_Buffer != NULL))
 8009e46:	4604      	mov	r4, r0
 8009e48:	b158      	cbz	r0, 8009e62 <StSafeA_Crc16+0x1e>
  {
    uint16_t crc16;

    crc16 = (uint16_t)HwCtx.CrcCompute(&(pTLV_Buffer->Header),
 8009e4a:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <StSafeA_Crc16+0x20>)
 8009e4c:	6882      	ldr	r2, [r0, #8]
 8009e4e:	69dd      	ldr	r5, [r3, #28]
 8009e50:	8883      	ldrh	r3, [r0, #4]
 8009e52:	2101      	movs	r1, #1
 8009e54:	47a8      	blx	r5
                                       1U,
                                       pTLV_Buffer->LV.Data,
                                       pTLV_Buffer->LV.Length);

    (void)memcpy(&pTLV_Buffer->LV.Data[pTLV_Buffer->LV.Length], &crc16, sizeof(crc16));
 8009e56:	88a3      	ldrh	r3, [r4, #4]
 8009e58:	68a2      	ldr	r2, [r4, #8]
 8009e5a:	52d0      	strh	r0, [r2, r3]
    pTLV_Buffer->LV.Length += STSAFEA_CRC_LENGTH;
 8009e5c:	88a3      	ldrh	r3, [r4, #4]
 8009e5e:	3302      	adds	r3, #2
 8009e60:	80a3      	strh	r3, [r4, #4]
  }
}
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20006478 	.word	0x20006478

08009e68 <StSafeA_Transmit>:
{
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pTLV_Buffer != NULL)
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d034      	beq.n	8009edc <StSafeA_Transmit+0x74>
    if (CrcSupport != 0U)
 8009e72:	b109      	cbz	r1, 8009e78 <StSafeA_Transmit+0x10>
      StSafeA_Crc16(pTLV_Buffer);
 8009e74:	f7ff ffe6 	bl	8009e44 <StSafeA_Crc16>
  uint16_t i2c_length = pInBuffer->LV.Length + STSAFEA_HEADER_LENGTH;
 8009e78:	88aa      	ldrh	r2, [r5, #4]
  if ((pInBuffer->LV.Data != NULL) && (i2c_length <=  STSAFEA_BUFFER_DATA_PACKET_SIZE))
 8009e7a:	68a9      	ldr	r1, [r5, #8]
  uint16_t i2c_length = pInBuffer->LV.Length + STSAFEA_HEADER_LENGTH;
 8009e7c:	f102 0801 	add.w	r8, r2, #1
 8009e80:	fa1f f888 	uxth.w	r8, r8
  if ((pInBuffer->LV.Data != NULL) && (i2c_length <=  STSAFEA_BUFFER_DATA_PACKET_SIZE))
 8009e84:	b339      	cbz	r1, 8009ed6 <StSafeA_Transmit+0x6e>
 8009e86:	f5b8 7ffe 	cmp.w	r8, #508	; 0x1fc
 8009e8a:	d224      	bcs.n	8009ed6 <StSafeA_Transmit+0x6e>
    (void)memmove((uint8_t *)&pInBuffer->LV.Data[1], (uint8_t *)&pInBuffer->LV.Data[0], pInBuffer->LV.Length);
 8009e8c:	1c48      	adds	r0, r1, #1
 8009e8e:	f00c fe1f 	bl	8016ad0 <memmove>
    pInBuffer->LV.Data[0] = pInBuffer->Header;
 8009e92:	68ab      	ldr	r3, [r5, #8]
 8009e94:	782a      	ldrb	r2, [r5, #0]
      status_code = HwCtx.BusSend(((uint16_t)HwCtx.DevAddr) << 1,
 8009e96:	4e12      	ldr	r6, [pc, #72]	; (8009ee0 <StSafeA_Transmit+0x78>)
    pInBuffer->LV.Data[0] = pInBuffer->Header;
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	2702      	movs	r7, #2
      status_code = HwCtx.BusSend(((uint16_t)HwCtx.DevAddr) << 1,
 8009e9c:	8c30      	ldrh	r0, [r6, #32]
 8009e9e:	6933      	ldr	r3, [r6, #16]
 8009ea0:	68a9      	ldr	r1, [r5, #8]
 8009ea2:	0040      	lsls	r0, r0, #1
 8009ea4:	b280      	uxth	r0, r0
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	4798      	blx	r3
 8009eaa:	b244      	sxtb	r4, r0
      if (status_code != STSAFEA_HW_OK)
 8009eac:	b14c      	cbz	r4, 8009ec2 <StSafeA_Transmit+0x5a>
        (void)HwCtx.BusDeInit();
 8009eae:	68b3      	ldr	r3, [r6, #8]
 8009eb0:	4798      	blx	r3
        (void)HwCtx.BusInit();
 8009eb2:	6873      	ldr	r3, [r6, #4]
 8009eb4:	4798      	blx	r3
        HwCtx.TimeDelay(2U * (uint32_t)loop);
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	6973      	ldr	r3, [r6, #20]
 8009eba:	3702      	adds	r7, #2
 8009ebc:	4798      	blx	r3
    while ((status_code != 0) && (loop <= STSAFEA_I2C_POLLING_SEND))
 8009ebe:	2f08      	cmp	r7, #8
 8009ec0:	d1ec      	bne.n	8009e9c <StSafeA_Transmit+0x34>
    (void)memmove((uint8_t *)&pInBuffer->LV.Data[0], (uint8_t *)&pInBuffer->LV.Data[1], pInBuffer->LV.Length);
 8009ec2:	68a8      	ldr	r0, [r5, #8]
 8009ec4:	88aa      	ldrh	r2, [r5, #4]
 8009ec6:	1c41      	adds	r1, r0, #1
 8009ec8:	f00c fe02 	bl	8016ad0 <memmove>
    status_code = (StSafeA_SendBytes(pTLV_Buffer) == STSAFEA_HW_OK) ?
 8009ecc:	1c20      	adds	r0, r4, #0
 8009ece:	bf18      	it	ne
 8009ed0:	2001      	movne	r0, #1
}
 8009ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int8_t status_code = STSAFEA_HW_ERR;
 8009ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8009eda:	e7f7      	b.n	8009ecc <StSafeA_Transmit+0x64>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009edc:	2030      	movs	r0, #48	; 0x30
 8009ede:	e7f8      	b.n	8009ed2 <StSafeA_Transmit+0x6a>
 8009ee0:	20006478 	.word	0x20006478

08009ee4 <StSafeA_Receive>:
{
 8009ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	460f      	mov	r7, r1
  if (pTLV_Buffer != NULL)
 8009eea:	4604      	mov	r4, r0
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f000 808a 	beq.w	800a006 <StSafeA_Receive+0x122>
    if (CrcSupport != 0U)
 8009ef2:	b111      	cbz	r1, 8009efa <StSafeA_Receive+0x16>
      pTLV_Buffer->LV.Length += STSAFEA_CRC_LENGTH;
 8009ef4:	8883      	ldrh	r3, [r0, #4]
 8009ef6:	3302      	adds	r3, #2
 8009ef8:	8083      	strh	r3, [r0, #4]
  if ((pOutBuffer->LV.Data != NULL) &&
 8009efa:	68a3      	ldr	r3, [r4, #8]
  uint16_t response_length = pOutBuffer->LV.Length;
 8009efc:	f8b4 a004 	ldrh.w	sl, [r4, #4]
  if ((pOutBuffer->LV.Data != NULL) &&
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d058      	beq.n	8009fb6 <StSafeA_Receive+0xd2>
      ((response_length + STSAFEA_HEADER_LENGTH + STSAFEA_BUFFER_LENGTH_SIZE) <=  STSAFEA_BUFFER_DATA_PACKET_SIZE))
 8009f04:	f10a 0903 	add.w	r9, sl, #3
  if ((pOutBuffer->LV.Data != NULL) &&
 8009f08:	f5b9 7ffe 	cmp.w	r9, #508	; 0x1fc
 8009f0c:	d253      	bcs.n	8009fb6 <StSafeA_Receive+0xd2>
      status_code = HwCtx.BusRecv(((uint16_t)HwCtx.DevAddr) << 1,
 8009f0e:	4d3f      	ldr	r5, [pc, #252]	; (800a00c <StSafeA_Receive+0x128>)
  if ((pOutBuffer->LV.Data != NULL) &&
 8009f10:	f04f 0802 	mov.w	r8, #2
      status_code = HwCtx.BusRecv(((uint16_t)HwCtx.DevAddr) << 1,
 8009f14:	fa1f f989 	uxth.w	r9, r9
 8009f18:	462e      	mov	r6, r5
 8009f1a:	8c28      	ldrh	r0, [r5, #32]
 8009f1c:	68eb      	ldr	r3, [r5, #12]
 8009f1e:	68a1      	ldr	r1, [r4, #8]
 8009f20:	0040      	lsls	r0, r0, #1
 8009f22:	464a      	mov	r2, r9
 8009f24:	b280      	uxth	r0, r0
 8009f26:	4798      	blx	r3
 8009f28:	fa4f fb80 	sxtb.w	fp, r0
      pOutBuffer->Header = pOutBuffer->LV.Data[0];
 8009f2c:	68a0      	ldr	r0, [r4, #8]
 8009f2e:	7803      	ldrb	r3, [r0, #0]
 8009f30:	7023      	strb	r3, [r4, #0]
      pOutBuffer->LV.Length = ((uint16_t)pOutBuffer->LV.Data[1] << 8) + pOutBuffer->LV.Data[2];
 8009f32:	7842      	ldrb	r2, [r0, #1]
 8009f34:	7883      	ldrb	r3, [r0, #2]
 8009f36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009f3a:	80a3      	strh	r3, [r4, #4]
      (void)memcpy(pOutBuffer->LV.Data, &pOutBuffer->LV.Data[3], response_length);
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	1cc1      	adds	r1, r0, #3
 8009f40:	f00c fdbb 	bl	8016aba <memcpy>
      if (status_code != STSAFEA_HW_OK)
 8009f44:	f1bb 0f00 	cmp.w	fp, #0
 8009f48:	d00b      	beq.n	8009f62 <StSafeA_Receive+0x7e>
        (void)HwCtx.BusDeInit();
 8009f4a:	68ab      	ldr	r3, [r5, #8]
 8009f4c:	4798      	blx	r3
        (void)HwCtx.BusInit();
 8009f4e:	686b      	ldr	r3, [r5, #4]
 8009f50:	4798      	blx	r3
        HwCtx.TimeDelay(2U * (uint32_t)loop);
 8009f52:	4640      	mov	r0, r8
 8009f54:	696b      	ldr	r3, [r5, #20]
 8009f56:	f108 0802 	add.w	r8, r8, #2
 8009f5a:	4798      	blx	r3
    while ((status_code != 0) && (loop <= STSAFEA_I2C_POLLING_RECEIVE))
 8009f5c:	f1b8 0f18 	cmp.w	r8, #24
 8009f60:	d1db      	bne.n	8009f1a <StSafeA_Receive+0x36>
    if ((pOutBuffer->LV.Length > response_length) && (status_code == 0))
 8009f62:	88a3      	ldrh	r3, [r4, #4]
 8009f64:	4553      	cmp	r3, sl
 8009f66:	d928      	bls.n	8009fba <StSafeA_Receive+0xd6>
 8009f68:	f1bb 0f00 	cmp.w	fp, #0
 8009f6c:	d123      	bne.n	8009fb6 <StSafeA_Receive+0xd2>
 8009f6e:	2502      	movs	r5, #2
        status_code = HwCtx.BusRecv(((uint16_t)HwCtx.DevAddr) << 1,
 8009f70:	88a2      	ldrh	r2, [r4, #4]
 8009f72:	8c30      	ldrh	r0, [r6, #32]
 8009f74:	68f3      	ldr	r3, [r6, #12]
 8009f76:	68a1      	ldr	r1, [r4, #8]
 8009f78:	3203      	adds	r2, #3
 8009f7a:	0040      	lsls	r0, r0, #1
 8009f7c:	b292      	uxth	r2, r2
 8009f7e:	b280      	uxth	r0, r0
 8009f80:	4798      	blx	r3
 8009f82:	4680      	mov	r8, r0
        pOutBuffer->Header = pOutBuffer->LV.Data[0];
 8009f84:	68a0      	ldr	r0, [r4, #8]
 8009f86:	7803      	ldrb	r3, [r0, #0]
 8009f88:	7023      	strb	r3, [r4, #0]
        pOutBuffer->LV.Length = ((uint16_t)pOutBuffer->LV.Data[1] << 8) + pOutBuffer->LV.Data[2];
 8009f8a:	7843      	ldrb	r3, [r0, #1]
 8009f8c:	7882      	ldrb	r2, [r0, #2]
 8009f8e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8009f92:	b292      	uxth	r2, r2
 8009f94:	80a2      	strh	r2, [r4, #4]
        (void)memcpy(pOutBuffer->LV.Data, &pOutBuffer->LV.Data[3], pOutBuffer->LV.Length);
 8009f96:	1cc1      	adds	r1, r0, #3
 8009f98:	f00c fd8f 	bl	8016aba <memcpy>
        if (status_code != STSAFEA_HW_OK)
 8009f9c:	f018 0fff 	tst.w	r8, #255	; 0xff
 8009fa0:	d00e      	beq.n	8009fc0 <StSafeA_Receive+0xdc>
          (void)HwCtx.BusDeInit();
 8009fa2:	68b3      	ldr	r3, [r6, #8]
 8009fa4:	4798      	blx	r3
          (void)HwCtx.BusInit();
 8009fa6:	6873      	ldr	r3, [r6, #4]
 8009fa8:	4798      	blx	r3
          HwCtx.TimeDelay(2U * (uint32_t)loop);
 8009faa:	4628      	mov	r0, r5
 8009fac:	6973      	ldr	r3, [r6, #20]
 8009fae:	3502      	adds	r5, #2
 8009fb0:	4798      	blx	r3
      while ((status_code != STSAFEA_HW_OK) && (loop <= STSAFEA_I2C_POLLING_RECEIVE))
 8009fb2:	2d18      	cmp	r5, #24
 8009fb4:	d1dc      	bne.n	8009f70 <StSafeA_Receive+0x8c>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 8009fb6:	2501      	movs	r5, #1
  return status_code;
 8009fb8:	e006      	b.n	8009fc8 <StSafeA_Receive+0xe4>
                  (StSafeA_ResponseCode_t)(uint8_t)((uint8_t)pTLV_Buffer->Header & ~(uint8_t)STSAFEA_CMD_HEADER_RMACEN) :
 8009fba:	f1bb 0f00 	cmp.w	fp, #0
 8009fbe:	d1fa      	bne.n	8009fb6 <StSafeA_Receive+0xd2>
 8009fc0:	7825      	ldrb	r5, [r4, #0]
 8009fc2:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
    if ((CrcSupport != 0U) && (status_code == STSAFEA_OK))
 8009fc6:	b91f      	cbnz	r7, 8009fd0 <StSafeA_Receive+0xec>
}
 8009fc8:	4628      	mov	r0, r5
 8009fca:	b003      	add	sp, #12
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((CrcSupport != 0U) && (status_code == STSAFEA_OK))
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	d1f9      	bne.n	8009fc8 <StSafeA_Receive+0xe4>
      pTLV_Buffer->LV.Length -= STSAFEA_CRC_LENGTH;
 8009fd4:	88a3      	ldrh	r3, [r4, #4]
      (void)memcpy(&crc, &pTLV_Buffer->LV.Data[pTLV_Buffer->LV.Length], sizeof(crc));
 8009fd6:	68a2      	ldr	r2, [r4, #8]
      pTLV_Buffer->LV.Length -= STSAFEA_CRC_LENGTH;
 8009fd8:	3b02      	subs	r3, #2
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	80a3      	strh	r3, [r4, #4]
      (void)memcpy(&crc, &pTLV_Buffer->LV.Data[pTLV_Buffer->LV.Length], sizeof(crc));
 8009fde:	af02      	add	r7, sp, #8
 8009fe0:	5ad3      	ldrh	r3, [r2, r3]
 8009fe2:	f827 3d02 	strh.w	r3, [r7, #-2]!
      StSafeA_Crc16(pTLV_Buffer);
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7ff ff2c 	bl	8009e44 <StSafeA_Crc16>
      if (memcmp(&crc, &pTLV_Buffer->LV.Data[pTLV_Buffer->LV.Length - (uint16_t)2],
 8009fec:	88a6      	ldrh	r6, [r4, #4]
 8009fee:	68a1      	ldr	r1, [r4, #8]
 8009ff0:	3e02      	subs	r6, #2
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	4431      	add	r1, r6
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f00c fd50 	bl	8016a9c <memcmp>
 8009ffc:	b908      	cbnz	r0, 800a002 <StSafeA_Receive+0x11e>
        pTLV_Buffer->LV.Length -= STSAFEA_CRC_LENGTH;
 8009ffe:	80a6      	strh	r6, [r4, #4]
 800a000:	e7e2      	b.n	8009fc8 <StSafeA_Receive+0xe4>
        status_code = STSAFEA_INVALID_CRC;
 800a002:	2522      	movs	r5, #34	; 0x22
 800a004:	e7e0      	b.n	8009fc8 <StSafeA_Receive+0xe4>
  StSafeA_ResponseCode_t status_code = STSAFEA_INVALID_PARAMETER;
 800a006:	2530      	movs	r5, #48	; 0x30
 800a008:	e7de      	b.n	8009fc8 <StSafeA_Receive+0xe4>
 800a00a:	bf00      	nop
 800a00c:	20006478 	.word	0x20006478

0800a010 <StSafeA_Delay>:
  if (HwCtx.TimeDelay != NULL)
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <StSafeA_Delay+0xc>)
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	b103      	cbz	r3, 800a018 <StSafeA_Delay+0x8>
    HwCtx.TimeDelay(msDelay);
 800a016:	4718      	bx	r3
}
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20006478 	.word	0x20006478

0800a020 <StSafeA_HW_Init>:
{
 800a020:	b510      	push	{r4, lr}
  int8_t ret = StSafeA_HW_Probe(&HwCtx);
 800a022:	4c08      	ldr	r4, [pc, #32]	; (800a044 <StSafeA_HW_Init+0x24>)
 800a024:	4620      	mov	r0, r4
 800a026:	f7f9 f813 	bl	8003050 <StSafeA_HW_Probe>
  if (STSAFEA_HW_OK == ret)
 800a02a:	b950      	cbnz	r0, 800a042 <StSafeA_HW_Init+0x22>
    ret = HwCtx.IOInit();
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	4798      	blx	r3
 800a030:	b240      	sxtb	r0, r0
  if (STSAFEA_HW_OK == ret)
 800a032:	b930      	cbnz	r0, 800a042 <StSafeA_HW_Init+0x22>
    ret = HwCtx.BusInit();
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	4798      	blx	r3
 800a038:	b240      	sxtb	r0, r0
  if (STSAFEA_HW_OK == ret)
 800a03a:	b910      	cbnz	r0, 800a042 <StSafeA_HW_Init+0x22>
    ret = HwCtx.CrcInit();
 800a03c:	69a3      	ldr	r3, [r4, #24]
 800a03e:	4798      	blx	r3
 800a040:	b240      	sxtb	r0, r0
}
 800a042:	bd10      	pop	{r4, pc}
 800a044:	20006478 	.word	0x20006478

0800a048 <CRC16X25_Init>:
}
 800a048:	2000      	movs	r0, #0
 800a04a:	4770      	bx	lr

0800a04c <CRC_Compute>:
{
 800a04c:	b530      	push	{r4, r5, lr}
  if ((pData1 != NULL) && (pData2 != NULL))
 800a04e:	b180      	cbz	r0, 800a072 <CRC_Compute+0x26>
 800a050:	b1ca      	cbz	r2, 800a086 <CRC_Compute+0x3a>
        crc16_reflected_lookup_table[dividend] = remainder;
      }
    }
#endif /* STSAFEA_USE_OPTIMIZATION_CRC_TABLE */

    ndx = (uint8_t)(0xFFU & (crc ^ Header));
 800a052:	7801      	ldrb	r1, [r0, #0]
    crc = (crc16_reflected_lookup_table[ndx] ^ 0xFFU);
 800a054:	4c0d      	ldr	r4, [pc, #52]	; (800a08c <CRC_Compute+0x40>)
    ndx = (uint8_t)(0xFFU & (crc ^ Header));
 800a056:	43c9      	mvns	r1, r1
    crc = (crc16_reflected_lookup_table[ndx] ^ 0xFFU);
 800a058:	b2c9      	uxtb	r1, r1
 800a05a:	4615      	mov	r5, r2
 800a05c:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800a060:	f081 01ff 	eor.w	r1, r1, #255	; 0xff

    for (i = 0; i < Length; i++)
 800a064:	1aa8      	subs	r0, r5, r2
 800a066:	b280      	uxth	r0, r0
 800a068:	4283      	cmp	r3, r0
 800a06a:	d803      	bhi.n	800a074 <CRC_Compute+0x28>
    crc16 = (uint16_t)SWAP2BYTES(crc16);
 800a06c:	ba48      	rev16	r0, r1
    crc16 ^= 0xFFFFU;
 800a06e:	43c0      	mvns	r0, r0
 800a070:	b280      	uxth	r0, r0
}
 800a072:	bd30      	pop	{r4, r5, pc}
    {
      ndx = (uint8_t)(0xFFU & (crc ^ pData[i]));
 800a074:	f815 0b01 	ldrb.w	r0, [r5], #1
 800a078:	4048      	eors	r0, r1
      crc = (crc16_reflected_lookup_table[ndx] ^ (crc >> 8));
 800a07a:	b2c0      	uxtb	r0, r0
 800a07c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800a080:	ea80 2111 	eor.w	r1, r0, r1, lsr #8
 800a084:	e7ee      	b.n	800a064 <CRC_Compute+0x18>
  uint16_t crc16 = 0;
 800a086:	4610      	mov	r0, r2
 800a088:	e7f3      	b.n	800a072 <CRC_Compute+0x26>
 800a08a:	bf00      	nop
 800a08c:	0801801e 	.word	0x0801801e

0800a090 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 800a098:	2301      	movs	r3, #1
 800a09a:	2100      	movs	r1, #0
    {
        pow[i] = x;
        log[x] = i;
 800a09c:	f50d 6282 	add.w	r2, sp, #1040	; 0x410
        pow[i] = x;
 800a0a0:	a804      	add	r0, sp, #16
        log[x] = i;
 800a0a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        pow[i] = x;
 800a0a6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800a0aa:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a0ae:	bf18      	it	ne
 800a0b0:	201b      	movne	r0, #27
 800a0b2:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    for( i = 0, x = 1; i < 256; i++ )
 800a0b6:	3101      	adds	r1, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800a0b8:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
 800a0ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
 800a0be:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
 800a0c0:	d1ee      	bne.n	800a0a0 <aes_gen_tables+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 800a0c2:	4d59      	ldr	r5, [pc, #356]	; (800a228 <aes_gen_tables+0x198>)
    for( i = 0, x = 1; i < 10; i++ )
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	462c      	mov	r4, r5
        x = XTIME( x ) & 0xFF;
 800a0ca:	f013 0080 	ands.w	r0, r3, #128	; 0x80
        RCON[i] = (uint32_t) x;
 800a0ce:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
        x = XTIME( x ) & 0xFF;
 800a0d2:	bf18      	it	ne
 800a0d4:	201b      	movne	r0, #27
    for( i = 0, x = 1; i < 10; i++ )
 800a0d6:	3101      	adds	r1, #1
        x = XTIME( x ) & 0xFF;
 800a0d8:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
    for( i = 0, x = 1; i < 10; i++ )
 800a0dc:	290a      	cmp	r1, #10
        x = XTIME( x ) & 0xFF;
 800a0de:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
 800a0e0:	d1f3      	bne.n	800a0ca <aes_gen_tables+0x3a>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800a0e2:	2363      	movs	r3, #99	; 0x63
 800a0e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;

        FSb[i] = (unsigned char) x;
 800a0e8:	4d50      	ldr	r5, [pc, #320]	; (800a22c <aes_gen_tables+0x19c>)
    RSb[0x63] = 0x00;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
    for( i = 1; i < 256; i++ )
 800a0f0:	2001      	movs	r0, #1
        x = pow[255 - log[i]];
 800a0f2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800a0f6:	a904      	add	r1, sp, #16
 800a0f8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a0fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800a100:	ea4f 1ce3 	mov.w	ip, r3, asr #7
 800a104:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
 800a108:	fa5f fc8c 	uxtb.w	ip, ip
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800a10c:	ea4f 17ec 	mov.w	r7, ip, asr #7
 800a110:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
 800a114:	b2ff      	uxtb	r7, r7
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800a116:	11fe      	asrs	r6, r7, #7
 800a118:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 800a11c:	b2f6      	uxtb	r6, r6
 800a11e:	f083 0363 	eor.w	r3, r3, #99	; 0x63
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800a122:	11f1      	asrs	r1, r6, #7
 800a124:	ea83 030c 	eor.w	r3, r3, ip
 800a128:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
 800a12c:	407b      	eors	r3, r7
 800a12e:	4073      	eors	r3, r6
 800a130:	b2c9      	uxtb	r1, r1
        x ^= y ^ 0x63;
 800a132:	404b      	eors	r3, r1
        FSb[i] = (unsigned char) x;
 800a134:	5543      	strb	r3, [r0, r5]
        RSb[x] = (unsigned char) i;
 800a136:	4423      	add	r3, r4
 800a138:	f883 0128 	strb.w	r0, [r3, #296]	; 0x128
    for( i = 1; i < 256; i++ )
 800a13c:	3001      	adds	r0, #1
 800a13e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a142:	d1d6      	bne.n	800a0f2 <aes_gen_tables+0x62>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800a144:	6a53      	ldr	r3, [r2, #36]	; 0x24
        x = FSb[i];
 800a146:	4c39      	ldr	r4, [pc, #228]	; (800a22c <aes_gen_tables+0x19c>)
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800a148:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800a14a:	6b53      	ldr	r3, [r2, #52]	; 0x34
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a14c:	6b97      	ldr	r7, [r2, #56]	; 0x38
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800a14e:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800a152:	9303      	str	r3, [sp, #12]
    for( i = 0; i < 256; i++ )
 800a154:	2200      	movs	r2, #0
        FT0[i] = ( (uint32_t) y       ) ^
 800a156:	f504 7900 	add.w	r9, r4, #512	; 0x200
        x = RSb[i];
 800a15a:	f504 7a80 	add.w	sl, r4, #256	; 0x100
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a15e:	f50d 6682 	add.w	r6, sp, #1040	; 0x410
 800a162:	25ff      	movs	r5, #255	; 0xff
 800a164:	f504 6cc0 	add.w	ip, r4, #1536	; 0x600
        x = FSb[i];
 800a168:	5d11      	ldrb	r1, [r2, r4]
        y = XTIME( x ) & 0xFF;
 800a16a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a16e:	bf14      	ite	ne
 800a170:	201b      	movne	r0, #27
 800a172:	2000      	moveq	r0, #0
 800a174:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
                 ( (uint32_t) x << 16 ) ^
 800a178:	040b      	lsls	r3, r1, #16
        y = XTIME( x ) & 0xFF;
 800a17a:	b2c0      	uxtb	r0, r0
                 ( (uint32_t) x <<  8 ) ^
 800a17c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a180:	4043      	eors	r3, r0
        z =  ( y ^ x ) & 0xFF;
 800a182:	4041      	eors	r1, r0
                 ( (uint32_t) x << 16 ) ^
 800a184:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
        x = RSb[i];
 800a188:	f81a 3002 	ldrb.w	r3, [sl, r2]
        FT0[i] = ( (uint32_t) y       ) ^
 800a18c:	f849 1022 	str.w	r1, [r9, r2, lsl #2]
 800a190:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a194:	2b00      	cmp	r3, #0
 800a196:	d042      	beq.n	800a21e <aes_gen_tables+0x18e>
 800a198:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800a19c:	1878      	adds	r0, r7, r1
 800a19e:	fb90 fbf5 	sdiv	fp, r0, r5
 800a1a2:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 800a1a6:	eba0 0b0b 	sub.w	fp, r0, fp
 800a1aa:	a804      	add	r0, sp, #16
 800a1ac:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	fb91 f0f5 	sdiv	r0, r1, r5
 800a1b8:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 800a1bc:	1a08      	subs	r0, r1, r0
 800a1be:	a904      	add	r1, sp, #16
 800a1c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a1c4:	0209      	lsls	r1, r1, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a1c6:	ea81 010b 	eor.w	r1, r1, fp
 800a1ca:	9102      	str	r1, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800a1cc:	b353      	cbz	r3, 800a224 <aes_gen_tables+0x194>
 800a1ce:	9803      	ldr	r0, [sp, #12]
 800a1d0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800a1d4:	4401      	add	r1, r0
 800a1d6:	fb91 fbf5 	sdiv	fp, r1, r5
 800a1da:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 800a1de:	eba1 000b 	sub.w	r0, r1, fp
 800a1e2:	a904      	add	r1, sp, #16
 800a1e4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a1e8:	0400      	lsls	r0, r0, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800a1ea:	9902      	ldr	r1, [sp, #8]
 800a1ec:	4041      	eors	r1, r0
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800a1ee:	b15b      	cbz	r3, 800a208 <aes_gen_tables+0x178>
 800a1f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a1f4:	4443      	add	r3, r8
 800a1f6:	fb93 f0f5 	sdiv	r0, r3, r5
 800a1fa:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 800a1fe:	1a18      	subs	r0, r3, r0
 800a200:	ab04      	add	r3, sp, #16
 800a202:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a206:	061b      	lsls	r3, r3, #24
    for( i = 0; i < 256; i++ )
 800a208:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800a20a:	4059      	eors	r1, r3
    for( i = 0; i < 256; i++ )
 800a20c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a210:	f84e 100c 	str.w	r1, [lr, ip]
    for( i = 0; i < 256; i++ )
 800a214:	d1a8      	bne.n	800a168 <aes_gen_tables+0xd8>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 800a216:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800a21e:	469b      	mov	fp, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800a220:	4619      	mov	r1, r3
 800a222:	e7d0      	b.n	800a1c6 <aes_gen_tables+0x136>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800a224:	4618      	mov	r0, r3
 800a226:	e7e0      	b.n	800a1ea <aes_gen_tables+0x15a>
 800a228:	2000649c 	.word	0x2000649c
 800a22c:	200064c4 	.word	0x200064c4

0800a230 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800a230:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a234:	2100      	movs	r1, #0
 800a236:	f00c bc64 	b.w	8016b02 <memset>

0800a23a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800a23a:	b118      	cbz	r0, 800a244 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 800a23c:	f44f 718c 	mov.w	r1, #280	; 0x118
 800a240:	f008 b82e 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 800a244:	4770      	bx	lr
	...

0800a248 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800a248:	2ac0      	cmp	r2, #192	; 0xc0
{
 800a24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24c:	4606      	mov	r6, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	4617      	mov	r7, r2
    switch( keybits )
 800a252:	d056      	beq.n	800a302 <mbedtls_aes_setkey_enc+0xba>
 800a254:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a258:	d055      	beq.n	800a306 <mbedtls_aes_setkey_enc+0xbe>
 800a25a:	2a80      	cmp	r2, #128	; 0x80
 800a25c:	f040 8102 	bne.w	800a464 <mbedtls_aes_setkey_enc+0x21c>
    {
        case 128: ctx->nr = 10; break;
 800a260:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800a262:	4c82      	ldr	r4, [pc, #520]	; (800a46c <mbedtls_aes_setkey_enc+0x224>)
        case 256: ctx->nr = 14; break;
 800a264:	6033      	str	r3, [r6, #0]
    if( aes_init_done == 0 )
 800a266:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
 800a26a:	b923      	cbnz	r3, 800a276 <mbedtls_aes_setkey_enc+0x2e>
    {
        aes_gen_tables();
 800a26c:	f7ff ff10 	bl	800a090 <aes_gen_tables>
        aes_init_done = 1;
 800a270:	2301      	movs	r3, #1
 800a272:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800a276:	f106 0308 	add.w	r3, r6, #8
 800a27a:	6073      	str	r3, [r6, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800a27c:	097f      	lsrs	r7, r7, #5
 800a27e:	4629      	mov	r1, r5
 800a280:	2000      	movs	r0, #0
 800a282:	4287      	cmp	r7, r0
 800a284:	f101 0104 	add.w	r1, r1, #4
 800a288:	d13f      	bne.n	800a30a <mbedtls_aes_setkey_enc+0xc2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800a28a:	6832      	ldr	r2, [r6, #0]
 800a28c:	2a0c      	cmp	r2, #12
 800a28e:	d04e      	beq.n	800a32e <mbedtls_aes_setkey_enc+0xe6>
 800a290:	2a0e      	cmp	r2, #14
 800a292:	f000 8089 	beq.w	800a3a8 <mbedtls_aes_setkey_enc+0x160>
 800a296:	2a0a      	cmp	r2, #10
 800a298:	d131      	bne.n	800a2fe <mbedtls_aes_setkey_enc+0xb6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 800a29a:	2500      	movs	r5, #0
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a29c:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800a2a0:	68d8      	ldr	r0, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800a2a6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a2aa:	4421      	add	r1, r4
            for( i = 0; i < 10; i++, RK += 4 )
 800a2ac:	3501      	adds	r5, #1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800a2ae:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a2b2:	404a      	eors	r2, r1
 800a2b4:	eb04 6110 	add.w	r1, r4, r0, lsr #24
            for( i = 0; i < 10; i++, RK += 4 )
 800a2b8:	2d0a      	cmp	r5, #10
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a2ba:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800a2be:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800a2c2:	fa54 f180 	uxtab	r1, r4, r0
            for( i = 0; i < 10; i++, RK += 4 )
 800a2c6:	f103 0310 	add.w	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800a2ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a2ce:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800a2d2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a2d6:	4421      	add	r1, r4
 800a2d8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800a2dc:	ea82 2201 	eor.w	r2, r2, r1, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 800a2e0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[4]  = RK[0] ^ RCON[i] ^
 800a2e4:	601a      	str	r2, [r3, #0]
                RK[5]  = RK[1] ^ RK[4];
 800a2e6:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 800a2ea:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[5]  = RK[1] ^ RK[4];
 800a2ee:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 800a2f0:	ea82 0201 	eor.w	r2, r2, r1
 800a2f4:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 800a2f6:	ea82 0200 	eor.w	r2, r2, r0
 800a2fa:	60da      	str	r2, [r3, #12]
            for( i = 0; i < 10; i++, RK += 4 )
 800a2fc:	d1ce      	bne.n	800a29c <mbedtls_aes_setkey_enc+0x54>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 800a2fe:	2000      	movs	r0, #0
 800a300:	e0b2      	b.n	800a468 <mbedtls_aes_setkey_enc+0x220>
        case 192: ctx->nr = 12; break;
 800a302:	230c      	movs	r3, #12
 800a304:	e7ad      	b.n	800a262 <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
 800a306:	230e      	movs	r3, #14
 800a308:	e7ab      	b.n	800a262 <mbedtls_aes_setkey_enc+0x1a>
        GET_UINT32_LE( RK[i], key, i << 2 );
 800a30a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800a30e:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 800a312:	042d      	lsls	r5, r5, #16
 800a314:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800a318:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800a31c:	4315      	orrs	r5, r2
 800a31e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 800a322:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800a326:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800a32a:	3001      	adds	r0, #1
 800a32c:	e7a9      	b.n	800a282 <mbedtls_aes_setkey_enc+0x3a>
            for( i = 0; i < 8; i++, RK += 6 )
 800a32e:	2500      	movs	r5, #0
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a330:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800a334:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800a33a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a33e:	4421      	add	r1, r4
            for( i = 0; i < 8; i++, RK += 6 )
 800a340:	3501      	adds	r5, #1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800a342:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a346:	404a      	eors	r2, r1
 800a348:	eb04 6110 	add.w	r1, r4, r0, lsr #24
            for( i = 0; i < 8; i++, RK += 6 )
 800a34c:	2d08      	cmp	r5, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a34e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800a352:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800a356:	fa54 f180 	uxtab	r1, r4, r0
            for( i = 0; i < 8; i++, RK += 6 )
 800a35a:	f103 0318 	add.w	r3, r3, #24
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800a35e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a362:	ea82 6201 	eor.w	r2, r2, r1, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800a366:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800a36a:	4421      	add	r1, r4
 800a36c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800a370:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 800a374:	f853 1c14 	ldr.w	r1, [r3, #-20]
                RK[6]  = RK[0] ^ RCON[i] ^
 800a378:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[1] ^ RK[6];
 800a37a:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 800a37e:	f853 1c10 	ldr.w	r1, [r3, #-16]
                RK[7]  = RK[1] ^ RK[6];
 800a382:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 800a384:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 800a388:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                RK[8]  = RK[2] ^ RK[7];
 800a38c:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 800a38e:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 800a392:	f853 1c08 	ldr.w	r1, [r3, #-8]
                RK[9]  = RK[3] ^ RK[8];
 800a396:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 800a398:	ea82 0201 	eor.w	r2, r2, r1
 800a39c:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 800a39e:	ea82 0200 	eor.w	r2, r2, r0
 800a3a2:	615a      	str	r2, [r3, #20]
            for( i = 0; i < 8; i++, RK += 6 )
 800a3a4:	d1c4      	bne.n	800a330 <mbedtls_aes_setkey_enc+0xe8>
 800a3a6:	e7aa      	b.n	800a2fe <mbedtls_aes_setkey_enc+0xb6>
            for( i = 0; i < 7; i++, RK += 8 )
 800a3a8:	2000      	movs	r0, #0
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3aa:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800a3ae:	69d9      	ldr	r1, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3b0:	681d      	ldr	r5, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a3b2:	691e      	ldr	r6, [r3, #16]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3b4:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800a3b6:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800a3ba:	4425      	add	r5, r4
            for( i = 0; i < 7; i++, RK += 8 )
 800a3bc:	3001      	adds	r0, #1
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800a3be:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3c2:	406a      	eors	r2, r5
 800a3c4:	eb04 6511 	add.w	r5, r4, r1, lsr #24
            for( i = 0; i < 7; i++, RK += 8 )
 800a3c8:	2807      	cmp	r0, #7
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3ca:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
 800a3ce:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800a3d2:	fa54 f581 	uxtab	r5, r4, r1
            for( i = 0; i < 7; i++, RK += 8 )
 800a3d6:	f103 0320 	add.w	r3, r3, #32
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800a3da:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3de:	ea82 6205 	eor.w	r2, r2, r5, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800a3e2:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800a3e6:	4425      	add	r5, r4
 800a3e8:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800a3ec:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 800a3f0:	f853 5c1c 	ldr.w	r5, [r3, #-28]
                RK[8]  = RK[0] ^ RCON[i] ^
 800a3f4:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[1] ^ RK[8];
 800a3f6:	ea82 0205 	eor.w	r2, r2, r5
                RK[10] = RK[2] ^ RK[9];
 800a3fa:	f853 5c18 	ldr.w	r5, [r3, #-24]
                RK[9]  = RK[1] ^ RK[8];
 800a3fe:	605a      	str	r2, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 800a400:	ea82 0205 	eor.w	r2, r2, r5
                RK[11] = RK[3] ^ RK[10];
 800a404:	f853 5c14 	ldr.w	r5, [r3, #-20]
                RK[10] = RK[2] ^ RK[9];
 800a408:	609a      	str	r2, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 800a40a:	ea82 0205 	eor.w	r2, r2, r5
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800a40e:	fa54 f582 	uxtab	r5, r4, r2
                RK[11] = RK[3] ^ RK[10];
 800a412:	60da      	str	r2, [r3, #12]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800a414:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a418:	ea85 0506 	eor.w	r5, r5, r6
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800a41c:	eb04 6612 	add.w	r6, r4, r2, lsr #24
 800a420:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a424:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800a428:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800a42c:	4426      	add	r6, r4
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a42e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800a432:	4422      	add	r2, r4
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800a434:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800a438:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800a43c:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
 800a440:	ea85 4202 	eor.w	r2, r5, r2, lsl #16
                RK[13] = RK[5] ^ RK[12];
 800a444:	f853 5c0c 	ldr.w	r5, [r3, #-12]
                RK[12] = RK[4] ^
 800a448:	611a      	str	r2, [r3, #16]
                RK[13] = RK[5] ^ RK[12];
 800a44a:	ea82 0205 	eor.w	r2, r2, r5
                RK[14] = RK[6] ^ RK[13];
 800a44e:	f853 5c08 	ldr.w	r5, [r3, #-8]
                RK[13] = RK[5] ^ RK[12];
 800a452:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 800a454:	ea82 0205 	eor.w	r2, r2, r5
 800a458:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 800a45a:	ea82 0201 	eor.w	r2, r2, r1
 800a45e:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 7; i++, RK += 8 )
 800a460:	d1a3      	bne.n	800a3aa <mbedtls_aes_setkey_enc+0x162>
 800a462:	e74c      	b.n	800a2fe <mbedtls_aes_setkey_enc+0xb6>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 800a464:	f06f 001f 	mvn.w	r0, #31
}
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46a:	bf00      	nop
 800a46c:	2000649c 	.word	0x2000649c

0800a470 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800a470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a474:	b0c6      	sub	sp, #280	; 0x118
 800a476:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 800a478:	4668      	mov	r0, sp
{
 800a47a:	460d      	mov	r5, r1
 800a47c:	4616      	mov	r6, r2
    mbedtls_aes_init( &cty );
 800a47e:	f7ff fed7 	bl	800a230 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800a482:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800a486:	4629      	mov	r1, r5
    ctx->rk = RK = ctx->buf;
 800a488:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800a48a:	4632      	mov	r2, r6
 800a48c:	4668      	mov	r0, sp
 800a48e:	f7ff fedb 	bl	800a248 <mbedtls_aes_setkey_enc>
 800a492:	4605      	mov	r5, r0
 800a494:	b9d8      	cbnz	r0, 800a4ce <mbedtls_aes_setkey_dec+0x5e>
        goto exit;

    ctx->nr = cty.nr;
 800a496:	9a00      	ldr	r2, [sp, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800a498:	9801      	ldr	r0, [sp, #4]
    ctx->nr = cty.nr;
 800a49a:	6022      	str	r2, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 800a49c:	0113      	lsls	r3, r2, #4
 800a49e:	18c1      	adds	r1, r0, r3

    *RK++ = *SK++;
 800a4a0:	58c3      	ldr	r3, [r0, r3]
 800a4a2:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 800a4a4:	684b      	ldr	r3, [r1, #4]
 800a4a6:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 800a4a8:	688b      	ldr	r3, [r1, #8]
 800a4aa:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 800a4ac:	68c8      	ldr	r0, [r1, #12]
 800a4ae:	6160      	str	r0, [r4, #20]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800a4b0:	4825      	ldr	r0, [pc, #148]	; (800a548 <mbedtls_aes_setkey_dec+0xd8>)
    *RK++ = *SK++;
 800a4b2:	f104 0318 	add.w	r3, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800a4b6:	3910      	subs	r1, #16
 800a4b8:	1e54      	subs	r4, r2, #1
 800a4ba:	2c00      	cmp	r4, #0
 800a4bc:	dc0e      	bgt.n	800a4dc <mbedtls_aes_setkey_dec+0x6c>
        }
    }

    *RK++ = *SK++;
 800a4be:	680a      	ldr	r2, [r1, #0]
 800a4c0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800a4c2:	684a      	ldr	r2, [r1, #4]
 800a4c4:	605a      	str	r2, [r3, #4]
    *RK++ = *SK++;
 800a4c6:	688a      	ldr	r2, [r1, #8]
 800a4c8:	609a      	str	r2, [r3, #8]
    *RK++ = *SK++;
 800a4ca:	68ca      	ldr	r2, [r1, #12]
 800a4cc:	60da      	str	r2, [r3, #12]

exit:
    mbedtls_aes_free( &cty );
 800a4ce:	4668      	mov	r0, sp
 800a4d0:	f7ff feb3 	bl	800a23a <mbedtls_aes_free>

    return( ret );
}
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	b046      	add	sp, #280	; 0x118
 800a4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4dc:	1f0f      	subs	r7, r1, #4
 800a4de:	f103 0c10 	add.w	ip, r3, #16
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800a4e2:	461a      	mov	r2, r3
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800a4e4:	f857 3f04 	ldr.w	r3, [r7, #4]!
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800a4e8:	eb00 6613 	add.w	r6, r0, r3, lsr #24
 800a4ec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800a4f0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a4f4:	f8d6 8628 	ldr.w	r8, [r6, #1576]	; 0x628
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800a4f8:	fa50 f683 	uxtab	r6, r0, r3
 800a4fc:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
 800a500:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800a504:	f8de 6628 	ldr.w	r6, [lr, #1576]	; 0x628
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800a508:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 800a50c:	4486      	add	lr, r0
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800a50e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a512:	4403      	add	r3, r0
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800a514:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800a518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800a51c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800a520:	eb00 0383 	add.w	r3, r0, r3, lsl #2
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800a524:	f8de e628 	ldr.w	lr, [lr, #1576]	; 0x628
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800a528:	f8d3 3628 	ldr.w	r3, [r3, #1576]	; 0x628
 800a52c:	ea86 2638 	eor.w	r6, r6, r8, ror #8
 800a530:	ea86 663e 	eor.w	r6, r6, lr, ror #24
 800a534:	ea86 4333 	eor.w	r3, r6, r3, ror #16
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800a538:	f842 3b04 	str.w	r3, [r2], #4
        for( j = 0; j < 4; j++, SK++ )
 800a53c:	4562      	cmp	r2, ip
 800a53e:	d1d1      	bne.n	800a4e4 <mbedtls_aes_setkey_dec+0x74>
 800a540:	4613      	mov	r3, r2
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800a542:	3c01      	subs	r4, #1
 800a544:	3910      	subs	r1, #16
 800a546:	e7b8      	b.n	800a4ba <mbedtls_aes_setkey_dec+0x4a>
 800a548:	2000649c 	.word	0x2000649c

0800a54c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800a550:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a552:	680e      	ldr	r6, [r1, #0]
 800a554:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a556:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a558:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a55a:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a55c:	4066      	eors	r6, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a55e:	685c      	ldr	r4, [r3, #4]
 800a560:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a564:	689c      	ldr	r4, [r3, #8]
{
 800a566:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a568:	1040      	asrs	r0, r0, #1
 800a56a:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a56c:	407c      	eors	r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a56e:	68cf      	ldr	r7, [r1, #12]
 800a570:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a572:	9000      	str	r0, [sp, #0]
 800a574:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a578:	4bcb      	ldr	r3, [pc, #812]	; (800a8a8 <mbedtls_internal_aes_encrypt+0x35c>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a57a:	4079      	eors	r1, r7
 800a57c:	b2f7      	uxtb	r7, r6
 800a57e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a582:	f850 5c10 	ldr.w	r5, [r0, #-16]
 800a586:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a58a:	9501      	str	r5, [sp, #4]
 800a58c:	f850 5c20 	ldr.w	r5, [r0, #-32]
 800a590:	ea87 0e05 	eor.w	lr, r7, r5
 800a594:	0e0f      	lsrs	r7, r1, #24
 800a596:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a59a:	f850 5c1c 	ldr.w	r5, [r0, #-28]
 800a59e:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a5a2:	ea8e 2e37 	eor.w	lr, lr, r7, ror #8
 800a5a6:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800a5aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ae:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
 800a5b2:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a5b6:	ea8e 6e37 	eor.w	lr, lr, r7, ror #24
 800a5ba:	f3c4 4707 	ubfx	r7, r4, #16, #8
 800a5be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5c2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a5c6:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a5ca:	f8da a228 	ldr.w	sl, [sl, #552]	; 0x228
 800a5ce:	ea8e 4e37 	eor.w	lr, lr, r7, ror #16
 800a5d2:	fa5f f78b 	uxtb.w	r7, fp
 800a5d6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5da:	fa5f f88e 	uxtb.w	r8, lr
 800a5de:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a5e2:	ea87 0c05 	eor.w	ip, r7, r5
 800a5e6:	0e37      	lsrs	r7, r6, #24
 800a5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ec:	f850 5c18 	ldr.w	r5, [r0, #-24]
 800a5f0:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a5f4:	ea8c 2c37 	eor.w	ip, ip, r7, ror #8
 800a5f8:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800a5fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a600:	3020      	adds	r0, #32
 800a602:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a606:	ea8c 6c37 	eor.w	ip, ip, r7, ror #24
 800a60a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800a60e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a612:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a616:	ea8c 4c37 	eor.w	ip, ip, r7, ror #16
 800a61a:	b2e7      	uxtb	r7, r4
 800a61c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a620:	0e24      	lsrs	r4, r4, #24
 800a622:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a626:	406f      	eors	r7, r5
 800a628:	ea87 273a 	eor.w	r7, r7, sl, ror #8
 800a62c:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800a630:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a634:	b2c9      	uxtb	r1, r1
 800a636:	f8da a228 	ldr.w	sl, [sl, #552]	; 0x228
 800a63a:	f850 5c34 	ldr.w	r5, [r0, #-52]
 800a63e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a646:	ea87 673a 	eor.w	r7, r7, sl, ror #24
 800a64a:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a64e:	f8d4 4228 	ldr.w	r4, [r4, #552]	; 0x228
 800a652:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800a656:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800a65a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a65e:	4069      	eors	r1, r5
 800a660:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800a664:	ea81 2134 	eor.w	r1, r1, r4, ror #8
 800a668:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a66c:	f8d6 4228 	ldr.w	r4, [r6, #552]	; 0x228
 800a670:	ea81 6134 	eor.w	r1, r1, r4, ror #24
 800a674:	f8d5 4228 	ldr.w	r4, [r5, #552]	; 0x228
 800a678:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a67c:	ea81 4134 	eor.w	r1, r1, r4, ror #16
 800a680:	f8da a228 	ldr.w	sl, [sl, #552]	; 0x228
 800a684:	f850 4c2c 	ldr.w	r4, [r0, #-44]
 800a688:	9402      	str	r4, [sp, #8]
 800a68a:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800a68e:	9603      	str	r6, [sp, #12]
 800a690:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800a694:	ea87 473a 	eor.w	r7, r7, sl, ror #16
 800a698:	9604      	str	r6, [sp, #16]
 800a69a:	f850 6c28 	ldr.w	r6, [r0, #-40]
 800a69e:	9605      	str	r6, [sp, #20]
 800a6a0:	b2fe      	uxtb	r6, r7
 800a6a2:	9606      	str	r6, [sp, #24]
 800a6a4:	f3c1 2607 	ubfx	r6, r1, #8, #8
 800a6a8:	9607      	str	r6, [sp, #28]
 800a6aa:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800a6ae:	9608      	str	r6, [sp, #32]
 800a6b0:	0e0d      	lsrs	r5, r1, #24
 800a6b2:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800a6b6:	b2c9      	uxtb	r1, r1
 800a6b8:	9609      	str	r6, [sp, #36]	; 0x24
 800a6ba:	f850 6c24 	ldr.w	r6, [r0, #-36]
 800a6be:	910b      	str	r1, [sp, #44]	; 0x2c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a6c0:	9900      	ldr	r1, [sp, #0]
 800a6c2:	960a      	str	r6, [sp, #40]	; 0x28
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	f3cc 2907 	ubfx	r9, ip, #8, #8
 800a6ca:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800a6ce:	fa5f f48c 	uxtb.w	r4, ip
 800a6d2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800a6d6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800a6da:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800a6de:	ea4f 6717 	mov.w	r7, r7, lsr #24
 800a6e2:	dc76      	bgt.n	800a7d2 <mbedtls_internal_aes_encrypt+0x286>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800a6e4:	4498      	add	r8, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a6e6:	4499      	add	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800a6e8:	f898 0028 	ldrb.w	r0, [r8, #40]	; 0x28
    X0 = *RK++ ^ \
 800a6ec:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800a6ee:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a6f2:	449a      	add	sl, r3
    X0 = *RK++ ^ \
 800a6f4:	4070      	eors	r0, r6
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a6f6:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800a6f8:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800a6fc:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800a700:	441c      	add	r4, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a702:	449b      	add	fp, r3
    X0 = *RK++ ^ \
 800a704:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800a708:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800a70c:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
    X1 = *RK++ ^ \
 800a710:	9d02      	ldr	r5, [sp, #8]
    X0 = *RK++ ^ \
 800a712:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a716:	f89b 1028 	ldrb.w	r1, [fp, #40]	; 0x28
    X1 = *RK++ ^ \
 800a71a:	406c      	eors	r4, r5
 800a71c:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a720:	9903      	ldr	r1, [sp, #12]
 800a722:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a724:	449e      	add	lr, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800a726:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800a72a:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a72e:	9904      	ldr	r1, [sp, #16]
 800a730:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a732:	449c      	add	ip, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a734:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800a738:	ea84 6401 	eor.w	r4, r4, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a73c:	9907      	ldr	r1, [sp, #28]
 800a73e:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a740:	441f      	add	r7, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800a742:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800a746:	9906      	ldr	r1, [sp, #24]
 800a748:	4419      	add	r1, r3
 800a74a:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800a74e:	9905      	ldr	r1, [sp, #20]
 800a750:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a752:	9908      	ldr	r1, [sp, #32]
 800a754:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800a756:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800a75a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800a75e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 800a760:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800a764:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a766:	4419      	add	r1, r3
 800a768:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800a76c:	ea85 6501 	eor.w	r5, r5, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800a770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a772:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800a774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800a778:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800a77c:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800a77e:	f89e 6028 	ldrb.w	r6, [lr, #40]	; 0x28
    X3 = *RK++ ^ \
 800a782:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a786:	f89c 6028 	ldrb.w	r6, [ip, #40]	; 0x28

    PUT_UINT32_LE( X0, output,  0 );
 800a78a:	7010      	strb	r0, [r2, #0]
    X3 = *RK++ ^ \
 800a78c:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
 800a790:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800a794:	0a01      	lsrs	r1, r0, #8
 800a796:	7051      	strb	r1, [r2, #1]
 800a798:	0c01      	lsrs	r1, r0, #16
 800a79a:	7091      	strb	r1, [r2, #2]
 800a79c:	0e00      	lsrs	r0, r0, #24
    PUT_UINT32_LE( X1, output,  4 );
 800a79e:	0a21      	lsrs	r1, r4, #8
    PUT_UINT32_LE( X0, output,  0 );
 800a7a0:	70d0      	strb	r0, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800a7a2:	7114      	strb	r4, [r2, #4]
 800a7a4:	7151      	strb	r1, [r2, #5]
 800a7a6:	0c21      	lsrs	r1, r4, #16
 800a7a8:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800a7aa:	0a29      	lsrs	r1, r5, #8
 800a7ac:	7251      	strb	r1, [r2, #9]
 800a7ae:	0c29      	lsrs	r1, r5, #16
 800a7b0:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800a7b2:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800a7b4:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 800a7b6:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800a7b8:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800a7ba:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 800a7bc:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800a7be:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800a7c0:	0c19      	lsrs	r1, r3, #16
 800a7c2:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800a7c4:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800a7c6:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800a7c8:	7391      	strb	r1, [r2, #14]
 800a7ca:	73d3      	strb	r3, [r2, #15]
}
 800a7cc:	b00d      	add	sp, #52	; 0x34
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a7d2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a7d6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800a7da:	f8d5 1228 	ldr.w	r1, [r5, #552]	; 0x228
 800a7de:	f8d8 6228 	ldr.w	r6, [r8, #552]	; 0x228
 800a7e2:	9d01      	ldr	r5, [sp, #4]
 800a7e4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800a7e8:	4075      	eors	r5, r6
 800a7ea:	ea85 2631 	eor.w	r6, r5, r1, ror #8
 800a7ee:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a7f2:	f8d9 1228 	ldr.w	r1, [r9, #552]	; 0x228
 800a7f6:	ea86 6631 	eor.w	r6, r6, r1, ror #24
 800a7fa:	f8da 1228 	ldr.w	r1, [sl, #552]	; 0x228
 800a7fe:	ea86 4631 	eor.w	r6, r6, r1, ror #16
 800a802:	9904      	ldr	r1, [sp, #16]
 800a804:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a808:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a80c:	f8d4 5228 	ldr.w	r5, [r4, #552]	; 0x228
 800a810:	9c02      	ldr	r4, [sp, #8]
 800a812:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a816:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800a81a:	406c      	eors	r4, r5
 800a81c:	ea84 2531 	eor.w	r5, r4, r1, ror #8
 800a820:	f8db 1228 	ldr.w	r1, [fp, #552]	; 0x228
 800a824:	9c06      	ldr	r4, [sp, #24]
 800a826:	ea85 6531 	eor.w	r5, r5, r1, ror #24
 800a82a:	9903      	ldr	r1, [sp, #12]
 800a82c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a834:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a838:	f8d4 4228 	ldr.w	r4, [r4, #552]	; 0x228
 800a83c:	ea85 4b31 	eor.w	fp, r5, r1, ror #16
 800a840:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a842:	9d05      	ldr	r5, [sp, #20]
 800a844:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a848:	4065      	eors	r5, r4
 800a84a:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a84e:	ea85 2431 	eor.w	r4, r5, r1, ror #8
 800a852:	9907      	ldr	r1, [sp, #28]
 800a854:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a856:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a85a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a85e:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a862:	f8d7 7228 	ldr.w	r7, [r7, #552]	; 0x228
 800a866:	ea84 6431 	eor.w	r4, r4, r1, ror #24
 800a86a:	9908      	ldr	r1, [sp, #32]
 800a86c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a870:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a874:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a878:	ea84 4431 	eor.w	r4, r4, r1, ror #16
 800a87c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a87e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a882:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a886:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 800a88a:	404d      	eors	r5, r1
 800a88c:	ea85 2137 	eor.w	r1, r5, r7, ror #8
 800a890:	f8de 7228 	ldr.w	r7, [lr, #552]	; 0x228
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a894:	9d00      	ldr	r5, [sp, #0]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a896:	ea81 6137 	eor.w	r1, r1, r7, ror #24
 800a89a:	f8dc 7228 	ldr.w	r7, [ip, #552]	; 0x228
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a89e:	3d01      	subs	r5, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800a8a0:	ea81 4137 	eor.w	r1, r1, r7, ror #16
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a8a4:	9500      	str	r5, [sp, #0]
 800a8a6:	e669      	b.n	800a57c <mbedtls_internal_aes_encrypt+0x30>
 800a8a8:	2000649c 	.word	0x2000649c

0800a8ac <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800a8b0:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a8b2:	680d      	ldr	r5, [r1, #0]
 800a8b4:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a8b6:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a8b8:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a8ba:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800a8bc:	4065      	eors	r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800a8be:	685c      	ldr	r4, [r3, #4]
 800a8c0:	4066      	eors	r6, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a8c2:	689c      	ldr	r4, [r3, #8]
{
 800a8c4:	b08d      	sub	sp, #52	; 0x34
 800a8c6:	3330      	adds	r3, #48	; 0x30
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800a8c8:	407c      	eors	r4, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a8ca:	1040      	asrs	r0, r0, #1
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a8cc:	68cf      	ldr	r7, [r1, #12]
 800a8ce:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800a8d2:	9300      	str	r3, [sp, #0]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800a8d4:	3801      	subs	r0, #1
 800a8d6:	4bd3      	ldr	r3, [pc, #844]	; (800ac24 <mbedtls_internal_aes_decrypt+0x378>)
 800a8d8:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800a8da:	4079      	eors	r1, r7
 800a8dc:	9800      	ldr	r0, [sp, #0]
 800a8de:	b2ef      	uxtb	r7, r5
 800a8e0:	f850 0c10 	ldr.w	r0, [r0, #-16]
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8ea:	9800      	ldr	r0, [sp, #0]
 800a8ec:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a8f0:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800a8f4:	ea87 0c00 	eor.w	ip, r7, r0
 800a8f8:	0e37      	lsrs	r7, r6, #24
 800a8fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8fe:	9800      	ldr	r0, [sp, #0]
 800a900:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a904:	f850 0c14 	ldr.w	r0, [r0, #-20]
 800a908:	ea8c 2c37 	eor.w	ip, ip, r7, ror #8
 800a90c:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800a910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a914:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800a918:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a91c:	ea8c 6c37 	eor.w	ip, ip, r7, ror #24
 800a920:	f3c4 4707 	ubfx	r7, r4, #16, #8
 800a924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a928:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a92c:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a930:	f8da a628 	ldr.w	sl, [sl, #1576]	; 0x628
 800a934:	ea8c 4c37 	eor.w	ip, ip, r7, ror #16
 800a938:	b2cf      	uxtb	r7, r1
 800a93a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a93e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800a942:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a946:	ea87 0e00 	eor.w	lr, r7, r0
 800a94a:	0e2f      	lsrs	r7, r5, #24
 800a94c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a950:	9800      	ldr	r0, [sp, #0]
 800a952:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a956:	f850 0c18 	ldr.w	r0, [r0, #-24]
 800a95a:	ea8e 2e37 	eor.w	lr, lr, r7, ror #8
 800a95e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800a962:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a966:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a96a:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a96e:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800a972:	ea8e 6e37 	eor.w	lr, lr, r7, ror #24
 800a976:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800a97a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a97e:	fa5f f88c 	uxtb.w	r8, ip
 800a982:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a986:	ea8e 4e37 	eor.w	lr, lr, r7, ror #16
 800a98a:	b2e7      	uxtb	r7, r4
 800a98c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a990:	0e24      	lsrs	r4, r4, #24
 800a992:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800a996:	4047      	eors	r7, r0
 800a998:	ea87 273a 	eor.w	r7, r7, sl, ror #8
 800a99c:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800a9a0:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a9a4:	b2f6      	uxtb	r6, r6
 800a9a6:	f8da a628 	ldr.w	sl, [sl, #1576]	; 0x628
 800a9aa:	9800      	ldr	r0, [sp, #0]
 800a9ac:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800a9b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9b4:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 800a9b8:	f8d6 6628 	ldr.w	r6, [r6, #1576]	; 0x628
 800a9bc:	f8d4 4628 	ldr.w	r4, [r4, #1576]	; 0x628
 800a9c0:	ea87 673a 	eor.w	r7, r7, sl, ror #24
 800a9c4:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 800a9c8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800a9cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a9d0:	4046      	eors	r6, r0
 800a9d2:	ea86 2634 	eor.w	r6, r6, r4, ror #8
 800a9d6:	f8d5 4628 	ldr.w	r4, [r5, #1576]	; 0x628
 800a9da:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800a9de:	ea86 6634 	eor.w	r6, r6, r4, ror #24
 800a9e2:	ea86 4631 	eor.w	r6, r6, r1, ror #16
 800a9e6:	f3ce 4007 	ubfx	r0, lr, #16, #8
 800a9ea:	9900      	ldr	r1, [sp, #0]
 800a9ec:	f8da a628 	ldr.w	sl, [sl, #1576]	; 0x628
 800a9f0:	9004      	str	r0, [sp, #16]
 800a9f2:	9800      	ldr	r0, [sp, #0]
 800a9f4:	f851 1c0c 	ldr.w	r1, [r1, #-12]
 800a9f8:	9103      	str	r1, [sp, #12]
 800a9fa:	ea87 473a 	eor.w	r7, r7, sl, ror #16
 800a9fe:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800aa02:	9005      	str	r0, [sp, #20]
 800aa04:	b2f8      	uxtb	r0, r7
 800aa06:	9006      	str	r0, [sp, #24]
 800aa08:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800aa0c:	9007      	str	r0, [sp, #28]
 800aa0e:	f3cc 4007 	ubfx	r0, ip, #16, #8
 800aa12:	9008      	str	r0, [sp, #32]
 800aa14:	ea4f 601e 	mov.w	r0, lr, lsr #24
 800aa18:	9009      	str	r0, [sp, #36]	; 0x24
 800aa1a:	9800      	ldr	r0, [sp, #0]
 800aa1c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800aa20:	900a      	str	r0, [sp, #40]	; 0x28
 800aa22:	fa5f f08e 	uxtb.w	r0, lr
 800aa26:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa28:	9800      	ldr	r0, [sp, #0]
 800aa2a:	3020      	adds	r0, #32
 800aa2c:	9000      	str	r0, [sp, #0]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800aa2e:	9801      	ldr	r0, [sp, #4]
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800aa36:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800aa3a:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800aa3e:	ea4f 6b17 	mov.w	fp, r7, lsr #24
 800aa42:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800aa46:	ea4f 6516 	mov.w	r5, r6, lsr #24
 800aa4a:	b2f1      	uxtb	r1, r6
 800aa4c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800aa50:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800aa54:	dc7b      	bgt.n	800ab4e <mbedtls_internal_aes_decrypt+0x2a2>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800aa56:	4498      	add	r8, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800aa58:	4499      	add	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800aa5a:	f898 6128 	ldrb.w	r6, [r8, #296]	; 0x128
    X0 = *RK++ ^ \
 800aa5e:	9802      	ldr	r0, [sp, #8]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800aa60:	f899 9128 	ldrb.w	r9, [r9, #296]	; 0x128
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800aa64:	449a      	add	sl, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800aa66:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800aa68:	4046      	eors	r6, r0

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800aa6a:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800aa6c:	f89a 0128 	ldrb.w	r0, [sl, #296]	; 0x128
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800aa70:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    X0 = *RK++ ^ \
 800aa74:	ea86 2609 	eor.w	r6, r6, r9, lsl #8
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800aa78:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800aa7a:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800aa7e:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    X1 = *RK++ ^ \
 800aa82:	9d03      	ldr	r5, [sp, #12]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800aa84:	f894 4128 	ldrb.w	r4, [r4, #296]	; 0x128
    X1 = *RK++ ^ \
 800aa88:	4069      	eors	r1, r5
 800aa8a:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800aa8e:	9c04      	ldr	r4, [sp, #16]
 800aa90:	441c      	add	r4, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800aa92:	449b      	add	fp, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800aa94:	f894 4128 	ldrb.w	r4, [r4, #296]	; 0x128
    X1 = *RK++ ^ \
 800aa98:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800aa9c:	f89b 4128 	ldrb.w	r4, [fp, #296]	; 0x128
    X1 = *RK++ ^ \
 800aaa0:	ea81 6104 	eor.w	r1, r1, r4, lsl #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800aaa4:	9c07      	ldr	r4, [sp, #28]
 800aaa6:	441c      	add	r4, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800aaa8:	449e      	add	lr, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800aaaa:	f894 5128 	ldrb.w	r5, [r4, #296]	; 0x128
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800aaae:	9c06      	ldr	r4, [sp, #24]
 800aab0:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800aab2:	ea86 6000 	eor.w	r0, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800aab6:	f894 8128 	ldrb.w	r8, [r4, #296]	; 0x128
    X2 = *RK++ ^ \
 800aaba:	9c05      	ldr	r4, [sp, #20]
 800aabc:	ea88 0804 	eor.w	r8, r8, r4
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800aac0:	9c08      	ldr	r4, [sp, #32]
 800aac2:	441c      	add	r4, r3
    X2 = *RK++ ^ \
 800aac4:	ea88 2805 	eor.w	r8, r8, r5, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800aac8:	f894 4128 	ldrb.w	r4, [r4, #296]	; 0x128
    X2 = *RK++ ^ \
 800aacc:	ea88 4804 	eor.w	r8, r8, r4, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800aad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aad2:	441c      	add	r4, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800aad4:	19de      	adds	r6, r3, r7
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800aad6:	f894 4128 	ldrb.w	r4, [r4, #296]	; 0x128
    X2 = *RK++ ^ \
 800aada:	ea88 6804 	eor.w	r8, r8, r4, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800aade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aae0:	441c      	add	r4, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800aae2:	449c      	add	ip, r3
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800aae4:	f894 5128 	ldrb.w	r5, [r4, #296]	; 0x128
    X3 = *RK++ ^ \
 800aae8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800aaea:	f89c 3128 	ldrb.w	r3, [ip, #296]	; 0x128
    X3 = *RK++ ^ \
 800aaee:	4065      	eors	r5, r4
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800aaf0:	f89e 4128 	ldrb.w	r4, [lr, #296]	; 0x128
    X3 = *RK++ ^ \
 800aaf4:	ea85 2504 	eor.w	r5, r5, r4, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800aaf8:	f896 4128 	ldrb.w	r4, [r6, #296]	; 0x128

    PUT_UINT32_LE( X0, output,  0 );
 800aafc:	7010      	strb	r0, [r2, #0]
    X3 = *RK++ ^ \
 800aafe:	ea85 4504 	eor.w	r5, r5, r4, lsl #16
    PUT_UINT32_LE( X0, output,  0 );
 800ab02:	0a04      	lsrs	r4, r0, #8
 800ab04:	7054      	strb	r4, [r2, #1]
 800ab06:	0c04      	lsrs	r4, r0, #16
 800ab08:	0e00      	lsrs	r0, r0, #24
 800ab0a:	70d0      	strb	r0, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800ab0c:	0a08      	lsrs	r0, r1, #8
 800ab0e:	7111      	strb	r1, [r2, #4]
 800ab10:	7150      	strb	r0, [r2, #5]
 800ab12:	0c08      	lsrs	r0, r1, #16
 800ab14:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( X0, output,  0 );
 800ab16:	7094      	strb	r4, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 800ab18:	7190      	strb	r0, [r2, #6]
 800ab1a:	71d1      	strb	r1, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800ab1c:	ea4f 2118 	mov.w	r1, r8, lsr #8
    X3 = *RK++ ^ \
 800ab20:	ea85 6303 	eor.w	r3, r5, r3, lsl #24
    PUT_UINT32_LE( X2, output,  8 );
 800ab24:	7251      	strb	r1, [r2, #9]
 800ab26:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800ab2a:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800ab2c:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X2, output,  8 );
 800ab2e:	f882 8008 	strb.w	r8, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800ab32:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800ab34:	ea4f 6818 	mov.w	r8, r8, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
 800ab38:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800ab3a:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800ab3c:	0c19      	lsrs	r1, r3, #16
 800ab3e:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X2, output,  8 );
 800ab40:	f882 800b 	strb.w	r8, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800ab44:	7391      	strb	r1, [r2, #14]
 800ab46:	73d3      	strb	r3, [r2, #15]
}
 800ab48:	b00d      	add	sp, #52	; 0x34
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800ab4e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ab52:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800ab56:	f8d5 6628 	ldr.w	r6, [r5, #1576]	; 0x628
 800ab5a:	9802      	ldr	r0, [sp, #8]
 800ab5c:	f8d8 5628 	ldr.w	r5, [r8, #1576]	; 0x628
 800ab60:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800ab64:	4068      	eors	r0, r5
 800ab66:	ea80 2536 	eor.w	r5, r0, r6, ror #8
 800ab6a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800ab6e:	f8d9 6628 	ldr.w	r6, [r9, #1576]	; 0x628
 800ab72:	9803      	ldr	r0, [sp, #12]
 800ab74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ab78:	ea85 6536 	eor.w	r5, r5, r6, ror #24
 800ab7c:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800ab80:	f8da 6628 	ldr.w	r6, [sl, #1576]	; 0x628
 800ab84:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800ab88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab8c:	ea85 4536 	eor.w	r5, r5, r6, ror #16
 800ab90:	f8db 6628 	ldr.w	r6, [fp, #1576]	; 0x628
 800ab94:	4048      	eors	r0, r1
 800ab96:	ea80 2136 	eor.w	r1, r0, r6, ror #8
 800ab9a:	f8d4 6628 	ldr.w	r6, [r4, #1576]	; 0x628
 800ab9e:	9806      	ldr	r0, [sp, #24]
 800aba0:	ea81 6636 	eor.w	r6, r1, r6, ror #24
 800aba4:	9904      	ldr	r1, [sp, #16]
 800aba6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800abaa:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800abae:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800abb2:	f8d4 4628 	ldr.w	r4, [r4, #1576]	; 0x628
 800abb6:	9805      	ldr	r0, [sp, #20]
 800abb8:	ea86 4631 	eor.w	r6, r6, r1, ror #16
 800abbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800abc2:	4060      	eors	r0, r4
 800abc4:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800abc8:	ea80 2431 	eor.w	r4, r0, r1, ror #8
 800abcc:	9907      	ldr	r1, [sp, #28]
 800abce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abd0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800abd4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800abd8:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800abdc:	f8dc c628 	ldr.w	ip, [ip, #1576]	; 0x628
 800abe0:	ea84 6431 	eor.w	r4, r4, r1, ror #24
 800abe4:	9908      	ldr	r1, [sp, #32]
 800abe6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800abea:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800abee:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800abf2:	ea84 4431 	eor.w	r4, r4, r1, ror #16
 800abf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abf8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800abfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac00:	f8d1 1628 	ldr.w	r1, [r1, #1576]	; 0x628
 800ac04:	f8d7 7628 	ldr.w	r7, [r7, #1576]	; 0x628
 800ac08:	4048      	eors	r0, r1
 800ac0a:	ea80 213c 	eor.w	r1, r0, ip, ror #8
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800ac0e:	9801      	ldr	r0, [sp, #4]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800ac10:	f8de c628 	ldr.w	ip, [lr, #1576]	; 0x628
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800ac14:	3801      	subs	r0, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800ac16:	ea81 613c 	eor.w	r1, r1, ip, ror #24
 800ac1a:	ea81 4137 	eor.w	r1, r1, r7, ror #16
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800ac1e:	9001      	str	r0, [sp, #4]
 800ac20:	e65c      	b.n	800a8dc <mbedtls_internal_aes_decrypt+0x30>
 800ac22:	bf00      	nop
 800ac24:	2000649c 	.word	0x2000649c

0800ac28 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800ac28:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800ac2a:	2901      	cmp	r1, #1
{
 800ac2c:	4614      	mov	r4, r2
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800ac2e:	4621      	mov	r1, r4
{
 800ac30:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800ac32:	d103      	bne.n	800ac3c <mbedtls_aes_crypt_ecb+0x14>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 800ac34:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800ac38:	f7ff bc88 	b.w	800a54c <mbedtls_internal_aes_encrypt>
}
 800ac3c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800ac40:	f7ff be34 	b.w	800a8ac <mbedtls_internal_aes_decrypt>

0800ac44 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800ac44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	461f      	mov	r7, r3
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800ac4a:	0713      	lsls	r3, r2, #28
{
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    if( length % 16 )
 800ac54:	d15b      	bne.n	800ad0e <mbedtls_aes_crypt_cbc+0xca>
 800ac56:	18a6      	adds	r6, r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 800ac58:	2900      	cmp	r1, #0
 800ac5a:	d055      	beq.n	800ad08 <mbedtls_aes_crypt_cbc+0xc4>
 800ac5c:	3d01      	subs	r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 800ac5e:	42a6      	cmp	r6, r4
 800ac60:	d04e      	beq.n	800ad00 <mbedtls_aes_crypt_cbc+0xbc>
 800ac62:	1e79      	subs	r1, r7, #1
 800ac64:	1e62      	subs	r2, r4, #1
 800ac66:	f105 0010 	add.w	r0, r5, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800ac6a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ac6e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800ac72:	4285      	cmp	r5, r0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800ac74:	ea83 030c 	eor.w	r3, r3, ip
 800ac78:	f802 3f01 	strb.w	r3, [r2, #1]!
            for( i = 0; i < 16; i++ )
 800ac7c:	d1f5      	bne.n	800ac6a <mbedtls_aes_crypt_cbc+0x26>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800ac7e:	4623      	mov	r3, r4
 800ac80:	4622      	mov	r2, r4
 800ac82:	4649      	mov	r1, r9
 800ac84:	4640      	mov	r0, r8
 800ac86:	f7ff ffcf 	bl	800ac28 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	f104 0210 	add.w	r2, r4, #16
 800ac90:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac94:	f843 1b04 	str.w	r1, [r3], #4
 800ac98:	4294      	cmp	r4, r2
 800ac9a:	d1f9      	bne.n	800ac90 <mbedtls_aes_crypt_cbc+0x4c>
 800ac9c:	e7df      	b.n	800ac5e <mbedtls_aes_crypt_cbc+0x1a>
            memcpy( temp, input, 16 );
 800ac9e:	466a      	mov	r2, sp
 800aca0:	462b      	mov	r3, r5
 800aca2:	f105 0e10 	add.w	lr, r5, #16
 800aca6:	4691      	mov	r9, r2
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	6859      	ldr	r1, [r3, #4]
 800acac:	4694      	mov	ip, r2
 800acae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800acb2:	3308      	adds	r3, #8
 800acb4:	4573      	cmp	r3, lr
 800acb6:	4662      	mov	r2, ip
 800acb8:	d1f6      	bne.n	800aca8 <mbedtls_aes_crypt_cbc+0x64>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800acba:	4629      	mov	r1, r5
 800acbc:	4622      	mov	r2, r4
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7ff fdf4 	bl	800a8ac <mbedtls_internal_aes_decrypt>
 800acc4:	1e63      	subs	r3, r4, #1
 800acc6:	1e79      	subs	r1, r7, #1
 800acc8:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800accc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800acd0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800acd4:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800acd6:	ea82 020c 	eor.w	r2, r2, ip
 800acda:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800acdc:	d1f6      	bne.n	800accc <mbedtls_aes_crypt_cbc+0x88>
            memcpy( iv, temp, 16 );
 800acde:	464a      	mov	r2, r9
 800ace0:	46bc      	mov	ip, r7
 800ace2:	4613      	mov	r3, r2
 800ace4:	cb03      	ldmia	r3!, {r0, r1}
 800ace6:	4553      	cmp	r3, sl
 800ace8:	f8cc 0000 	str.w	r0, [ip]
 800acec:	f8cc 1004 	str.w	r1, [ip, #4]
 800acf0:	461a      	mov	r2, r3
 800acf2:	f10c 0c08 	add.w	ip, ip, #8
 800acf6:	d1f4      	bne.n	800ace2 <mbedtls_aes_crypt_cbc+0x9e>
            input  += 16;
 800acf8:	3510      	adds	r5, #16
            output += 16;
 800acfa:	3410      	adds	r4, #16
        while( length > 0 )
 800acfc:	42a6      	cmp	r6, r4
 800acfe:	d1ce      	bne.n	800ac9e <mbedtls_aes_crypt_cbc+0x5a>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 800ad00:	2000      	movs	r0, #0
}
 800ad02:	b004      	add	sp, #16
 800ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy( iv, temp, 16 );
 800ad08:	f10d 0a10 	add.w	sl, sp, #16
 800ad0c:	e7f6      	b.n	800acfc <mbedtls_aes_crypt_cbc+0xb8>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800ad0e:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800ad12:	e7f6      	b.n	800ad02 <mbedtls_aes_crypt_cbc+0xbe>

0800ad14 <mbedtls_aes_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 800ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 800ad18:	681c      	ldr	r4, [r3, #0]
{
 800ad1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( n > 15 )
 800ad1c:	2c0f      	cmp	r4, #15
{
 800ad1e:	4682      	mov	sl, r0
 800ad20:	4699      	mov	r9, r3
 800ad22:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    if( n > 15 )
 800ad26:	d82b      	bhi.n	800ad80 <mbedtls_aes_crypt_cfb128+0x6c>
 800ad28:	18b7      	adds	r7, r6, r2
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );

    if( mode == MBEDTLS_AES_DECRYPT )
 800ad2a:	b311      	cbz	r1, 800ad72 <mbedtls_aes_crypt_cfb128+0x5e>
            n = ( n + 1 ) & 0x0F;
        }
    }
    else
    {
        while( length-- )
 800ad2c:	42be      	cmp	r6, r7
 800ad2e:	d022      	beq.n	800ad76 <mbedtls_aes_crypt_cfb128+0x62>
        {
            if( n == 0 )
 800ad30:	b924      	cbnz	r4, 800ad3c <mbedtls_aes_crypt_cfb128+0x28>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800ad32:	462a      	mov	r2, r5
 800ad34:	4629      	mov	r1, r5
 800ad36:	4650      	mov	r0, sl
 800ad38:	f7ff fc08 	bl	800a54c <mbedtls_internal_aes_encrypt>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 800ad3c:	5d2b      	ldrb	r3, [r5, r4]
 800ad3e:	f818 2b01 	ldrb.w	r2, [r8], #1
 800ad42:	4053      	eors	r3, r2
 800ad44:	f806 3b01 	strb.w	r3, [r6], #1
 800ad48:	552b      	strb	r3, [r5, r4]

            n = ( n + 1 ) & 0x0F;
 800ad4a:	3401      	adds	r4, #1
 800ad4c:	f004 040f 	and.w	r4, r4, #15
 800ad50:	e7ec      	b.n	800ad2c <mbedtls_aes_crypt_cfb128+0x18>
            if( n == 0 )
 800ad52:	b924      	cbnz	r4, 800ad5e <mbedtls_aes_crypt_cfb128+0x4a>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800ad54:	462a      	mov	r2, r5
 800ad56:	4629      	mov	r1, r5
 800ad58:	4650      	mov	r0, sl
 800ad5a:	f7ff fbf7 	bl	800a54c <mbedtls_internal_aes_encrypt>
            *output++ = (unsigned char)( c ^ iv[n] );
 800ad5e:	5d2b      	ldrb	r3, [r5, r4]
            c = *input++;
 800ad60:	f818 2b01 	ldrb.w	r2, [r8], #1
            *output++ = (unsigned char)( c ^ iv[n] );
 800ad64:	4053      	eors	r3, r2
 800ad66:	f806 3b01 	strb.w	r3, [r6], #1
            iv[n] = (unsigned char) c;
 800ad6a:	552a      	strb	r2, [r5, r4]
            n = ( n + 1 ) & 0x0F;
 800ad6c:	3401      	adds	r4, #1
 800ad6e:	f004 040f 	and.w	r4, r4, #15
        while( length-- )
 800ad72:	42be      	cmp	r6, r7
 800ad74:	d1ed      	bne.n	800ad52 <mbedtls_aes_crypt_cfb128+0x3e>
        }
    }

    *iv_off = n;
 800ad76:	f8c9 4000 	str.w	r4, [r9]

    return( 0 );
 800ad7a:	2000      	movs	r0, #0
}
 800ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 800ad80:	f06f 0020 	mvn.w	r0, #32
 800ad84:	e7fa      	b.n	800ad7c <mbedtls_aes_crypt_cfb128+0x68>

0800ad86 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 800ad86:	6803      	ldr	r3, [r0, #0]
{
 800ad88:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 800ad8a:	1acd      	subs	r5, r1, r3
 800ad8c:	2d00      	cmp	r5, #0
 800ad8e:	dc02      	bgt.n	800ad96 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800ad90:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 800ad94:	bd30      	pop	{r4, r5, pc}
    if( ( **p & 0x80 ) == 0 )
 800ad96:	781c      	ldrb	r4, [r3, #0]
 800ad98:	f014 0f80 	tst.w	r4, #128	; 0x80
 800ad9c:	d10a      	bne.n	800adb4 <mbedtls_asn1_get_len+0x2e>
        *len = *(*p)++;
 800ad9e:	1c5c      	adds	r4, r3, #1
 800ada0:	6004      	str	r4, [r0, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
 800ada6:	6803      	ldr	r3, [r0, #0]
 800ada8:	1ac9      	subs	r1, r1, r3
 800adaa:	6813      	ldr	r3, [r2, #0]
 800adac:	428b      	cmp	r3, r1
 800adae:	d8ef      	bhi.n	800ad90 <mbedtls_asn1_get_len+0xa>
    return( 0 );
 800adb0:	2000      	movs	r0, #0
 800adb2:	e7ef      	b.n	800ad94 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
 800adb4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800adb8:	3c01      	subs	r4, #1
 800adba:	2c03      	cmp	r4, #3
 800adbc:	d827      	bhi.n	800ae0e <mbedtls_asn1_get_len+0x88>
 800adbe:	e8df f004 	tbb	[pc, r4]
 800adc2:	0902      	.short	0x0902
 800adc4:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 800adc6:	2d01      	cmp	r5, #1
 800adc8:	d0e2      	beq.n	800ad90 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
 800adca:	785c      	ldrb	r4, [r3, #1]
 800adcc:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 800adce:	3302      	adds	r3, #2
            (*p) += 5;
 800add0:	6003      	str	r3, [r0, #0]
            break;
 800add2:	e7e8      	b.n	800ada6 <mbedtls_asn1_get_len+0x20>
            if( ( end - *p ) < 3 )
 800add4:	2d02      	cmp	r5, #2
 800add6:	dddb      	ble.n	800ad90 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800add8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 800addc:	ba64      	rev16	r4, r4
 800adde:	b2a4      	uxth	r4, r4
 800ade0:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800ade2:	3303      	adds	r3, #3
 800ade4:	e7f4      	b.n	800add0 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
 800ade6:	2d03      	cmp	r5, #3
 800ade8:	ddd2      	ble.n	800ad90 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800adea:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 800adec:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800adee:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800adf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800adf4:	78dd      	ldrb	r5, [r3, #3]
 800adf6:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 800adf8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 800adfa:	3304      	adds	r3, #4
 800adfc:	e7e8      	b.n	800add0 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
 800adfe:	2d04      	cmp	r5, #4
 800ae00:	ddc6      	ble.n	800ad90 <mbedtls_asn1_get_len+0xa>
 800ae02:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800ae06:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800ae08:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 800ae0a:	3305      	adds	r3, #5
 800ae0c:	e7e0      	b.n	800add0 <mbedtls_asn1_get_len+0x4a>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800ae0e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800ae12:	e7bf      	b.n	800ad94 <mbedtls_asn1_get_len+0xe>

0800ae14 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800ae14:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 800ae16:	6804      	ldr	r4, [r0, #0]
 800ae18:	1b0e      	subs	r6, r1, r4
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	dd07      	ble.n	800ae2e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 800ae1e:	7826      	ldrb	r6, [r4, #0]
 800ae20:	429e      	cmp	r6, r3
 800ae22:	d108      	bne.n	800ae36 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800ae24:	3401      	adds	r4, #1
 800ae26:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 800ae28:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 800ae2a:	f7ff bfac 	b.w	800ad86 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800ae2e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800ae32:	bc70      	pop	{r4, r5, r6}
 800ae34:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800ae36:	f06f 0061 	mvn.w	r0, #97	; 0x61
 800ae3a:	e7fa      	b.n	800ae32 <mbedtls_asn1_get_tag+0x1e>

0800ae3c <mbedtls_asn1_get_int>:
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 800ae3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae3e:	2302      	movs	r3, #2
{
 800ae40:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae42:	aa01      	add	r2, sp, #4
{
 800ae44:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae46:	f7ff ffe5 	bl	800ae14 <mbedtls_asn1_get_tag>
 800ae4a:	b968      	cbnz	r0, 800ae68 <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d814      	bhi.n	800ae7e <mbedtls_asn1_get_int+0x42>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	f993 3000 	ldrsb.w	r3, [r3]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	db0f      	blt.n	800ae7e <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 800ae5e:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800ae60:	9b01      	ldr	r3, [sp, #4]
 800ae62:	1e5a      	subs	r2, r3, #1
 800ae64:	9201      	str	r2, [sp, #4]
 800ae66:	b90b      	cbnz	r3, 800ae6c <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 800ae68:	b003      	add	sp, #12
 800ae6a:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	6829      	ldr	r1, [r5, #0]
 800ae70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ae78:	602a      	str	r2, [r5, #0]
        (*p)++;
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	e7f0      	b.n	800ae60 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800ae7e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800ae82:	e7f1      	b.n	800ae68 <mbedtls_asn1_get_int+0x2c>

0800ae84 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800ae84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae86:	2302      	movs	r3, #2
{
 800ae88:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae8a:	aa01      	add	r2, sp, #4
{
 800ae8c:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800ae8e:	f7ff ffc1 	bl	800ae14 <mbedtls_asn1_get_tag>
 800ae92:	b940      	cbnz	r0, 800aea6 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 800ae94:	9a01      	ldr	r2, [sp, #4]
 800ae96:	6821      	ldr	r1, [r4, #0]
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 fc02 	bl	800b6a2 <mbedtls_mpi_read_binary>

    *p += len;
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	4413      	add	r3, r2
 800aea4:	6023      	str	r3, [r4, #0]

    return( ret );
}
 800aea6:	b003      	add	sp, #12
 800aea8:	bd30      	pop	{r4, r5, pc}

0800aeaa <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800aeaa:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800aeac:	2303      	movs	r3, #3
{
 800aeae:	4604      	mov	r4, r0
 800aeb0:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800aeb2:	f7ff ffaf 	bl	800ae14 <mbedtls_asn1_get_tag>
 800aeb6:	b958      	cbnz	r0, 800aed0 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800aeb8:	6813      	ldr	r3, [r2, #0]
 800aeba:	1e5a      	subs	r2, r3, #1
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	602a      	str	r2, [r5, #0]
 800aec0:	d904      	bls.n	800aecc <mbedtls_asn1_get_bitstring_null+0x22>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	6022      	str	r2, [r4, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b10b      	cbz	r3, 800aed0 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800aecc:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800aed0:	bd38      	pop	{r3, r4, r5, pc}

0800aed2 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800aed2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed6:	4690      	mov	r8, r2
 800aed8:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800aeda:	aa01      	add	r2, sp, #4
 800aedc:	2330      	movs	r3, #48	; 0x30
{
 800aede:	4604      	mov	r4, r0
 800aee0:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800aee2:	f7ff ff97 	bl	800ae14 <mbedtls_asn1_get_tag>
 800aee6:	4605      	mov	r5, r0
 800aee8:	bb00      	cbnz	r0, 800af2c <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800aeea:	6826      	ldr	r6, [r4, #0]
 800aeec:	eba9 0906 	sub.w	r9, r9, r6
 800aef0:	f1b9 0f00 	cmp.w	r9, #0
 800aef4:	dd37      	ble.n	800af66 <mbedtls_asn1_get_alg+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 800aef6:	4642      	mov	r2, r8
 800aef8:	7833      	ldrb	r3, [r6, #0]
 800aefa:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800af02:	4631      	mov	r1, r6
 800af04:	2306      	movs	r3, #6
 800af06:	4620      	mov	r0, r4
 800af08:	f7ff ff84 	bl	800ae14 <mbedtls_asn1_get_tag>
 800af0c:	4605      	mov	r5, r0
 800af0e:	b968      	cbnz	r0, 800af2c <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 800af16:	6821      	ldr	r1, [r4, #0]
 800af18:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800af1c:	188b      	adds	r3, r1, r2

    if( *p == end )
 800af1e:	42b3      	cmp	r3, r6
    *p += alg->len;
 800af20:	6023      	str	r3, [r4, #0]
    if( *p == end )
 800af22:	d107      	bne.n	800af34 <mbedtls_asn1_get_alg+0x62>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 800af24:	210c      	movs	r1, #12
 800af26:	4638      	mov	r0, r7
 800af28:	f007 f9ba 	bl	80122a0 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800af2c:	4628      	mov	r0, r5
 800af2e:	b003      	add	sp, #12
 800af30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
 800af34:	5c89      	ldrb	r1, [r1, r2]
 800af36:	463a      	mov	r2, r7
    (*p)++;
 800af38:	3301      	adds	r3, #1
    params->tag = **p;
 800af3a:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800af3e:	4620      	mov	r0, r4
    (*p)++;
 800af40:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800af42:	4631      	mov	r1, r6
 800af44:	f7ff ff1f 	bl	800ad86 <mbedtls_asn1_get_len>
 800af48:	4605      	mov	r5, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d1ee      	bne.n	800af2c <mbedtls_asn1_get_alg+0x5a>
    params->p = *p;
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	4413      	add	r3, r2
    if( *p != end )
 800af58:	42b3      	cmp	r3, r6
    *p += params->len;
 800af5a:	6023      	str	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800af5c:	bf0c      	ite	eq
 800af5e:	4605      	moveq	r5, r0
 800af60:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 800af64:	e7e2      	b.n	800af2c <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800af66:	f06f 055f 	mvn.w	r5, #95	; 0x5f
 800af6a:	e7df      	b.n	800af2c <mbedtls_asn1_get_alg+0x5a>

0800af6c <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 800af6c:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 800af6e:	2a7f      	cmp	r2, #127	; 0x7f
 800af70:	eba3 0101 	sub.w	r1, r3, r1
 800af74:	d807      	bhi.n	800af86 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 800af76:	2900      	cmp	r1, #0
 800af78:	dd69      	ble.n	800b04e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800af7a:	1e59      	subs	r1, r3, #1
 800af7c:	6001      	str	r1, [r0, #0]
 800af7e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 800af82:	2001      	movs	r0, #1
 800af84:	4770      	bx	lr
    }

    if( len <= 0xFF )
 800af86:	2aff      	cmp	r2, #255	; 0xff
 800af88:	d80d      	bhi.n	800afa6 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 800af8a:	2901      	cmp	r1, #1
 800af8c:	dd5f      	ble.n	800b04e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800af8e:	1e59      	subs	r1, r3, #1
 800af90:	6001      	str	r1, [r0, #0]
 800af92:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 800af96:	6803      	ldr	r3, [r0, #0]
 800af98:	1e5a      	subs	r2, r3, #1
 800af9a:	6002      	str	r2, [r0, #0]
 800af9c:	2281      	movs	r2, #129	; 0x81
 800af9e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 800afa2:	2002      	movs	r0, #2
 800afa4:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 800afa6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800afaa:	d213      	bcs.n	800afd4 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 800afac:	2902      	cmp	r1, #2
 800afae:	dd4e      	ble.n	800b04e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800afb0:	1e59      	subs	r1, r3, #1
 800afb2:	6001      	str	r1, [r0, #0]
 800afb4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800afb8:	6803      	ldr	r3, [r0, #0]
 800afba:	0a12      	lsrs	r2, r2, #8
 800afbc:	1e59      	subs	r1, r3, #1
 800afbe:	6001      	str	r1, [r0, #0]
 800afc0:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 800afc4:	6803      	ldr	r3, [r0, #0]
 800afc6:	1e5a      	subs	r2, r3, #1
 800afc8:	6002      	str	r2, [r0, #0]
 800afca:	2282      	movs	r2, #130	; 0x82
 800afcc:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 800afd0:	2003      	movs	r0, #3
 800afd2:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 800afd4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800afd8:	d219      	bcs.n	800b00e <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 800afda:	2903      	cmp	r1, #3
 800afdc:	dd37      	ble.n	800b04e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800afde:	1e59      	subs	r1, r3, #1
 800afe0:	6001      	str	r1, [r0, #0]
 800afe2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800afe6:	6803      	ldr	r3, [r0, #0]
 800afe8:	1e59      	subs	r1, r3, #1
 800afea:	6001      	str	r1, [r0, #0]
 800afec:	0a11      	lsrs	r1, r2, #8
 800afee:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800aff2:	6803      	ldr	r3, [r0, #0]
 800aff4:	0c12      	lsrs	r2, r2, #16
 800aff6:	1e59      	subs	r1, r3, #1
 800aff8:	6001      	str	r1, [r0, #0]
 800affa:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 800affe:	6803      	ldr	r3, [r0, #0]
 800b000:	1e5a      	subs	r2, r3, #1
 800b002:	6002      	str	r2, [r0, #0]
 800b004:	2283      	movs	r2, #131	; 0x83
 800b006:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 800b00a:	2004      	movs	r0, #4
 800b00c:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800b00e:	2904      	cmp	r1, #4
 800b010:	dd1d      	ble.n	800b04e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800b012:	1e59      	subs	r1, r3, #1
 800b014:	6001      	str	r1, [r0, #0]
 800b016:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800b01a:	6803      	ldr	r3, [r0, #0]
 800b01c:	1e59      	subs	r1, r3, #1
 800b01e:	6001      	str	r1, [r0, #0]
 800b020:	0a11      	lsrs	r1, r2, #8
 800b022:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800b026:	6803      	ldr	r3, [r0, #0]
 800b028:	1e59      	subs	r1, r3, #1
 800b02a:	6001      	str	r1, [r0, #0]
 800b02c:	0c11      	lsrs	r1, r2, #16
 800b02e:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	0e12      	lsrs	r2, r2, #24
 800b036:	1e59      	subs	r1, r3, #1
 800b038:	6001      	str	r1, [r0, #0]
 800b03a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 800b03e:	6803      	ldr	r3, [r0, #0]
 800b040:	1e5a      	subs	r2, r3, #1
 800b042:	6002      	str	r2, [r0, #0]
 800b044:	2284      	movs	r2, #132	; 0x84
 800b046:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 800b04a:	2005      	movs	r0, #5
 800b04c:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800b04e:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800b052:	4770      	bx	lr

0800b054 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 800b054:	6803      	ldr	r3, [r0, #0]
 800b056:	1a59      	subs	r1, r3, r1
 800b058:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 800b05a:	bfc1      	itttt	gt
 800b05c:	f103 31ff 	addgt.w	r1, r3, #4294967295
 800b060:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 800b062:	2001      	movgt	r0, #1
    *--(*p) = tag;
 800b064:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800b068:	bfd8      	it	le
 800b06a:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 800b06e:	4770      	bx	lr

0800b070 <mbedtls_asn1_write_raw_buffer>:

int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
                           const unsigned char *buf, size_t size )
{
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	461c      	mov	r4, r3
    size_t len = 0;

    if( *p < start || (size_t)( *p - start ) < size )
 800b074:	6803      	ldr	r3, [r0, #0]
 800b076:	428b      	cmp	r3, r1
{
 800b078:	4615      	mov	r5, r2
    if( *p < start || (size_t)( *p - start ) < size )
 800b07a:	d30b      	bcc.n	800b094 <mbedtls_asn1_write_raw_buffer+0x24>
 800b07c:	1a5a      	subs	r2, r3, r1
 800b07e:	42a2      	cmp	r2, r4
 800b080:	d308      	bcc.n	800b094 <mbedtls_asn1_write_raw_buffer+0x24>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    len = size;
    (*p) -= len;
 800b082:	1b1b      	subs	r3, r3, r4
 800b084:	6003      	str	r3, [r0, #0]
    memcpy( *p, buf, len );
 800b086:	4622      	mov	r2, r4
 800b088:	4629      	mov	r1, r5
 800b08a:	4618      	mov	r0, r3
 800b08c:	f00b fd15 	bl	8016aba <memcpy>

    return( (int) len );
 800b090:	4620      	mov	r0, r4
}
 800b092:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800b094:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 800b098:	e7fb      	b.n	800b092 <mbedtls_asn1_write_raw_buffer+0x22>

0800b09a <mbedtls_asn1_write_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	4606      	mov	r6, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800b0a0:	4610      	mov	r0, r2
{
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	4690      	mov	r8, r2
    len = mbedtls_mpi_size( X );
 800b0a6:	f000 faf6 	bl	800b696 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	42b9      	cmp	r1, r7
    len = mbedtls_mpi_size( X );
 800b0ae:	4604      	mov	r4, r0
    if( *p < start || (size_t)( *p - start ) < len )
 800b0b0:	d204      	bcs.n	800b0bc <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800b0b2:	f06f 056b 	mvn.w	r5, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 800b0bc:	1bcb      	subs	r3, r1, r7
 800b0be:	4283      	cmp	r3, r0
 800b0c0:	d3f7      	bcc.n	800b0b2 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 800b0c2:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800b0c4:	4602      	mov	r2, r0
    (*p) -= len;
 800b0c6:	6031      	str	r1, [r6, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800b0c8:	4640      	mov	r0, r8
 800b0ca:	f000 fb22 	bl	800b712 <mbedtls_mpi_write_binary>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d1f0      	bne.n	800b0b6 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 800b0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d10c      	bne.n	800b0f6 <mbedtls_asn1_write_mpi+0x5c>
 800b0dc:	6833      	ldr	r3, [r6, #0]
 800b0de:	f993 2000 	ldrsb.w	r2, [r3]
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	da07      	bge.n	800b0f6 <mbedtls_asn1_write_mpi+0x5c>
        if( *p - start < 1 )
 800b0e6:	1bda      	subs	r2, r3, r7
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	dde2      	ble.n	800b0b2 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 800b0ec:	1e5a      	subs	r2, r3, #1
 800b0ee:	6032      	str	r2, [r6, #0]
        len += 1;
 800b0f0:	3401      	adds	r4, #1
        *--(*p) = 0x00;
 800b0f2:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ff36 	bl	800af6c <mbedtls_asn1_write_len>
 800b100:	1e05      	subs	r5, r0, #0
 800b102:	dbd8      	blt.n	800b0b6 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800b104:	2202      	movs	r2, #2
 800b106:	4639      	mov	r1, r7
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ffa3 	bl	800b054 <mbedtls_asn1_write_tag>
 800b10e:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800b110:	bfa6      	itte	ge
 800b112:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800b114:	1905      	addge	r5, r0, r4
 800b116:	4605      	movlt	r5, r0
 800b118:	e7cd      	b.n	800b0b6 <mbedtls_asn1_write_mpi+0x1c>

0800b11a <mbedtls_asn1_write_oid>:
    return( (int) len );
}

int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len )
{
 800b11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
    int ret;
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 800b120:	f7ff ffa6 	bl	800b070 <mbedtls_asn1_write_raw_buffer>
 800b124:	1e04      	subs	r4, r0, #0
 800b126:	db11      	blt.n	800b14c <mbedtls_asn1_write_oid+0x32>
                                  (const unsigned char *) oid, oid_len ) );
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 800b128:	4622      	mov	r2, r4
 800b12a:	4639      	mov	r1, r7
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ff1d 	bl	800af6c <mbedtls_asn1_write_len>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
 800b132:	4625      	mov	r5, r4
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 800b134:	1e04      	subs	r4, r0, #0
 800b136:	db09      	blt.n	800b14c <mbedtls_asn1_write_oid+0x32>
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 800b138:	2206      	movs	r2, #6
 800b13a:	4639      	mov	r1, r7
 800b13c:	4630      	mov	r0, r6
 800b13e:	f7ff ff89 	bl	800b054 <mbedtls_asn1_write_tag>
 800b142:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
 800b144:	bfa6      	itte	ge
 800b146:	1964      	addge	r4, r4, r5
    MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
 800b148:	1824      	addge	r4, r4, r0
 800b14a:	4604      	movlt	r4, r0

    return( (int) len );
}
 800b14c:	4620      	mov	r0, r4
 800b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b150 <mbedtls_asn1_write_int>:

    return( (int) len );
}

int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
{
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len = 0;

    if( *p - start < 1 )
 800b152:	6803      	ldr	r3, [r0, #0]
{
 800b154:	460f      	mov	r7, r1
    if( *p - start < 1 )
 800b156:	1a59      	subs	r1, r3, r1
 800b158:	2900      	cmp	r1, #0
{
 800b15a:	4605      	mov	r5, r0
    if( *p - start < 1 )
 800b15c:	dc03      	bgt.n	800b166 <mbedtls_asn1_write_int+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800b15e:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );

    return( (int) len );
}
 800b162:	4620      	mov	r0, r4
 800b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *--(*p) = val;
 800b166:	1e59      	subs	r1, r3, #1
    if( val > 0 && **p & 0x80 )
 800b168:	2a00      	cmp	r2, #0
    *--(*p) = val;
 800b16a:	6001      	str	r1, [r0, #0]
 800b16c:	f803 2c01 	strb.w	r2, [r3, #-1]
    if( val > 0 && **p & 0x80 )
 800b170:	dd1f      	ble.n	800b1b2 <mbedtls_asn1_write_int+0x62>
 800b172:	6803      	ldr	r3, [r0, #0]
 800b174:	f993 2000 	ldrsb.w	r2, [r3]
 800b178:	2a00      	cmp	r2, #0
 800b17a:	da1a      	bge.n	800b1b2 <mbedtls_asn1_write_int+0x62>
        if( *p - start < 1 )
 800b17c:	1bda      	subs	r2, r3, r7
 800b17e:	2a00      	cmp	r2, #0
 800b180:	dded      	ble.n	800b15e <mbedtls_asn1_write_int+0xe>
        *--(*p) = 0x00;
 800b182:	1e5a      	subs	r2, r3, #1
 800b184:	6002      	str	r2, [r0, #0]
 800b186:	2200      	movs	r2, #0
 800b188:	f803 2c01 	strb.w	r2, [r3, #-1]
        len += 1;
 800b18c:	2602      	movs	r6, #2
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800b18e:	4632      	mov	r2, r6
 800b190:	4639      	mov	r1, r7
 800b192:	4628      	mov	r0, r5
 800b194:	f7ff feea 	bl	800af6c <mbedtls_asn1_write_len>
 800b198:	1e04      	subs	r4, r0, #0
 800b19a:	dbe2      	blt.n	800b162 <mbedtls_asn1_write_int+0x12>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800b19c:	2202      	movs	r2, #2
 800b19e:	4639      	mov	r1, r7
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f7ff ff57 	bl	800b054 <mbedtls_asn1_write_tag>
 800b1a6:	2800      	cmp	r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800b1a8:	bfa6      	itte	ge
 800b1aa:	19a4      	addge	r4, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800b1ac:	1824      	addge	r4, r4, r0
 800b1ae:	4604      	movlt	r4, r0
 800b1b0:	e7d7      	b.n	800b162 <mbedtls_asn1_write_int+0x12>
    len += 1;
 800b1b2:	2601      	movs	r6, #1
 800b1b4:	e7eb      	b.n	800b18e <mbedtls_asn1_write_int+0x3e>

0800b1b6 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800b1b6:	2300      	movs	r3, #0
{
 800b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ba:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 800b1bc:	461c      	mov	r4, r3
 800b1be:	4284      	cmp	r4, r0
 800b1c0:	d103      	bne.n	800b1ca <mpi_sub_hlp+0x14>
 800b1c2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800b1c6:	b9bb      	cbnz	r3, 800b1f8 <mpi_sub_hlp+0x42>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
    }
}
 800b1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 800b1ca:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b1ce:	ebac 0503 	sub.w	r5, ip, r3
 800b1d2:	f846 5f04 	str.w	r5, [r6, #4]!
        c = ( *d < *s ) + z; *d -= *s;
 800b1d6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800b1da:	42bd      	cmp	r5, r7
 800b1dc:	bf2c      	ite	cs
 800b1de:	f04f 0e00 	movcs.w	lr, #0
 800b1e2:	f04f 0e01 	movcc.w	lr, #1
 800b1e6:	1bed      	subs	r5, r5, r7
 800b1e8:	459c      	cmp	ip, r3
 800b1ea:	bf2c      	ite	cs
 800b1ec:	4673      	movcs	r3, lr
 800b1ee:	f10e 0301 	addcc.w	r3, lr, #1
 800b1f2:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800b1f4:	3401      	adds	r4, #1
 800b1f6:	e7e2      	b.n	800b1be <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800b1f8:	6811      	ldr	r1, [r2, #0]
 800b1fa:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 800b1fc:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 800b1fe:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 800b202:	bf2c      	ite	cs
 800b204:	2300      	movcs	r3, #0
 800b206:	2301      	movcc	r3, #1
 800b208:	e7dd      	b.n	800b1c6 <mpi_sub_hlp+0x10>

0800b20a <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800b20a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20c:	4607      	mov	r7, r0
 800b20e:	460e      	mov	r6, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800b210:	4605      	mov	r5, r0
    mbedtls_mpi_uint c = 0, t = 0;
 800b212:	2400      	movs	r4, #0
    for( ; i >= 16; i -= 16 )
 800b214:	2d0f      	cmp	r5, #15
 800b216:	d84d      	bhi.n	800b2b4 <mpi_mul_hlp+0xaa>
 800b218:	093d      	lsrs	r5, r7, #4
 800b21a:	f06f 010f 	mvn.w	r1, #15
 800b21e:	fb01 7505 	mla	r5, r1, r5, r7
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800b222:	2d07      	cmp	r5, #7
 800b224:	d938      	bls.n	800b298 <mpi_mul_hlp+0x8e>
    {
        MULADDC_INIT
 800b226:	f856 0b04 	ldr.w	r0, [r6], #4
 800b22a:	6811      	ldr	r1, [r2, #0]
 800b22c:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b230:	f842 1b04 	str.w	r1, [r2], #4
 800b234:	f856 0b04 	ldr.w	r0, [r6], #4
 800b238:	6811      	ldr	r1, [r2, #0]
 800b23a:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b23e:	f842 1b04 	str.w	r1, [r2], #4
 800b242:	f856 0b04 	ldr.w	r0, [r6], #4
 800b246:	6811      	ldr	r1, [r2, #0]
 800b248:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b24c:	f842 1b04 	str.w	r1, [r2], #4
 800b250:	f856 0b04 	ldr.w	r0, [r6], #4
 800b254:	6811      	ldr	r1, [r2, #0]
 800b256:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b25a:	f842 1b04 	str.w	r1, [r2], #4
 800b25e:	f856 0b04 	ldr.w	r0, [r6], #4
 800b262:	6811      	ldr	r1, [r2, #0]
 800b264:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b268:	f842 1b04 	str.w	r1, [r2], #4
 800b26c:	f856 0b04 	ldr.w	r0, [r6], #4
 800b270:	6811      	ldr	r1, [r2, #0]
 800b272:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b276:	f842 1b04 	str.w	r1, [r2], #4
 800b27a:	f856 0b04 	ldr.w	r0, [r6], #4
 800b27e:	6811      	ldr	r1, [r2, #0]
 800b280:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b284:	f842 1b04 	str.w	r1, [r2], #4
 800b288:	f856 0b04 	ldr.w	r0, [r6], #4
 800b28c:	6811      	ldr	r1, [r2, #0]
 800b28e:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b292:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 8; i -= 8 )
 800b296:	3d08      	subs	r5, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800b298:	2d00      	cmp	r5, #0
 800b29a:	d17d      	bne.n	800b398 <mpi_mul_hlp+0x18e>
 800b29c:	6813      	ldr	r3, [r2, #0]
 800b29e:	191c      	adds	r4, r3, r4
 800b2a0:	f04f 0100 	mov.w	r1, #0
 800b2a4:	bf28      	it	cs
 800b2a6:	2101      	movcs	r1, #1
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 800b2a8:	f842 4b04 	str.w	r4, [r2], #4
 800b2ac:	2401      	movs	r4, #1
    }
    while( c != 0 );
 800b2ae:	2900      	cmp	r1, #0
 800b2b0:	d1f4      	bne.n	800b29c <mpi_mul_hlp+0x92>
}
 800b2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MULADDC_INIT
 800b2b4:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2b8:	6811      	ldr	r1, [r2, #0]
 800b2ba:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b2be:	f842 1b04 	str.w	r1, [r2], #4
 800b2c2:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2c6:	6811      	ldr	r1, [r2, #0]
 800b2c8:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b2cc:	f842 1b04 	str.w	r1, [r2], #4
 800b2d0:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2d4:	6811      	ldr	r1, [r2, #0]
 800b2d6:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b2da:	f842 1b04 	str.w	r1, [r2], #4
 800b2de:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2e2:	6811      	ldr	r1, [r2, #0]
 800b2e4:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b2e8:	f842 1b04 	str.w	r1, [r2], #4
 800b2ec:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2f0:	6811      	ldr	r1, [r2, #0]
 800b2f2:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b2f6:	f842 1b04 	str.w	r1, [r2], #4
 800b2fa:	f856 0b04 	ldr.w	r0, [r6], #4
 800b2fe:	6811      	ldr	r1, [r2, #0]
 800b300:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b304:	f842 1b04 	str.w	r1, [r2], #4
 800b308:	f856 0b04 	ldr.w	r0, [r6], #4
 800b30c:	6811      	ldr	r1, [r2, #0]
 800b30e:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b312:	f842 1b04 	str.w	r1, [r2], #4
 800b316:	f856 0b04 	ldr.w	r0, [r6], #4
 800b31a:	6811      	ldr	r1, [r2, #0]
 800b31c:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b320:	f842 1b04 	str.w	r1, [r2], #4
 800b324:	f856 0b04 	ldr.w	r0, [r6], #4
 800b328:	6811      	ldr	r1, [r2, #0]
 800b32a:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b32e:	f842 1b04 	str.w	r1, [r2], #4
 800b332:	f856 0b04 	ldr.w	r0, [r6], #4
 800b336:	6811      	ldr	r1, [r2, #0]
 800b338:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b33c:	f842 1b04 	str.w	r1, [r2], #4
 800b340:	f856 0b04 	ldr.w	r0, [r6], #4
 800b344:	6811      	ldr	r1, [r2, #0]
 800b346:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b34a:	f842 1b04 	str.w	r1, [r2], #4
 800b34e:	f856 0b04 	ldr.w	r0, [r6], #4
 800b352:	6811      	ldr	r1, [r2, #0]
 800b354:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b358:	f842 1b04 	str.w	r1, [r2], #4
 800b35c:	f856 0b04 	ldr.w	r0, [r6], #4
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b366:	f842 1b04 	str.w	r1, [r2], #4
 800b36a:	f856 0b04 	ldr.w	r0, [r6], #4
 800b36e:	6811      	ldr	r1, [r2, #0]
 800b370:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b374:	f842 1b04 	str.w	r1, [r2], #4
 800b378:	f856 0b04 	ldr.w	r0, [r6], #4
 800b37c:	6811      	ldr	r1, [r2, #0]
 800b37e:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b382:	f842 1b04 	str.w	r1, [r2], #4
 800b386:	f856 0b04 	ldr.w	r0, [r6], #4
 800b38a:	6811      	ldr	r1, [r2, #0]
 800b38c:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b390:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 16; i -= 16 )
 800b394:	3d10      	subs	r5, #16
 800b396:	e73d      	b.n	800b214 <mpi_mul_hlp+0xa>
        MULADDC_INIT
 800b398:	f856 0b04 	ldr.w	r0, [r6], #4
 800b39c:	6811      	ldr	r1, [r2, #0]
 800b39e:	fbe3 1460 	umaal	r1, r4, r3, r0
 800b3a2:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 800b3a6:	3d01      	subs	r5, #1
 800b3a8:	e776      	b.n	800b298 <mpi_mul_hlp+0x8e>

0800b3aa <mpi_bigendian_to_host.part.1>:
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 800b3aa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b3ae:	3901      	subs	r1, #1
 800b3b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3b4:	4288      	cmp	r0, r1
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	d900      	bls.n	800b3bc <mpi_bigendian_to_host.part.1+0x12>
}
 800b3ba:	4770      	bx	lr
            return( __builtin_bswap32(x) );
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	680a      	ldr	r2, [r1, #0]
 800b3c0:	ba1b      	rev	r3, r3
 800b3c2:	ba12      	rev	r2, r2
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 800b3c4:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
 800b3c8:	f841 3904 	str.w	r3, [r1], #-4
 800b3cc:	e7f2      	b.n	800b3b4 <mpi_bigendian_to_host.part.1+0xa>

0800b3ce <mbedtls_mpi_mod_int.part.4>:
}

/*
 * Modulo: r = A mod b
 */
int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 800b3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    }

    /*
     * general case
     */
    for( i = A->n, y = 0; i > 0; i-- )
 800b3d0:	684e      	ldr	r6, [r1, #4]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	00b7      	lsls	r7, r6, #2
 800b3d6:	3f04      	subs	r7, #4
 800b3d8:	b93e      	cbnz	r6, 800b3ea <mbedtls_mpi_mod_int.part.4+0x1c>

    /*
     * If A is negative, then the current y represents a negative value.
     * Flipping it to the positive side.
     */
    if( A->s < 0 && y != 0 )
 800b3da:	6809      	ldr	r1, [r1, #0]
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	da01      	bge.n	800b3e4 <mbedtls_mpi_mod_int.part.4+0x16>
 800b3e0:	b103      	cbz	r3, 800b3e4 <mbedtls_mpi_mod_int.part.4+0x16>
        y = b - y;
 800b3e2:	1ad3      	subs	r3, r2, r3

    *r = y;
 800b3e4:	6003      	str	r3, [r0, #0]

    return( 0 );
}
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x  = A->p[i - 1];
 800b3ea:	688c      	ldr	r4, [r1, #8]
 800b3ec:	59e5      	ldr	r5, [r4, r7]
        y  = ( y << biH ) | ( x >> biH );
 800b3ee:	0c2c      	lsrs	r4, r5, #16
 800b3f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
        y  = ( y << biH ) | ( x >> biH );
 800b3f4:	fbb3 f4f2 	udiv	r4, r3, r2
 800b3f8:	fb02 3314 	mls	r3, r2, r4, r3
 800b3fc:	b2ac      	uxth	r4, r5
 800b3fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    for( i = A->n, y = 0; i > 0; i-- )
 800b402:	3e01      	subs	r6, #1
 800b404:	fbb4 f3f2 	udiv	r3, r4, r2
 800b408:	fb02 4313 	mls	r3, r2, r3, r4
 800b40c:	e7e3      	b.n	800b3d6 <mbedtls_mpi_mod_int.part.4+0x8>

0800b40e <mbedtls_mpi_init>:
    X->n = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	2201      	movs	r2, #1
 800b412:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 800b416:	6083      	str	r3, [r0, #8]
}
 800b418:	4770      	bx	lr

0800b41a <mbedtls_mpi_free>:
{
 800b41a:	b510      	push	{r4, lr}
    if( X == NULL )
 800b41c:	4604      	mov	r4, r0
 800b41e:	b168      	cbz	r0, 800b43c <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
 800b420:	6880      	ldr	r0, [r0, #8]
 800b422:	b130      	cbz	r0, 800b432 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 800b424:	6861      	ldr	r1, [r4, #4]
 800b426:	0089      	lsls	r1, r1, #2
 800b428:	f006 ff3a 	bl	80122a0 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 800b42c:	68a0      	ldr	r0, [r4, #8]
 800b42e:	f00b fb2d 	bl	8016a8c <free>
    X->n = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	2201      	movs	r2, #1
 800b436:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 800b43a:	60a3      	str	r3, [r4, #8]
}
 800b43c:	bd10      	pop	{r4, pc}

0800b43e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800b43e:	f242 7310 	movw	r3, #10000	; 0x2710
 800b442:	4299      	cmp	r1, r3
{
 800b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b448:	4604      	mov	r4, r0
 800b44a:	460e      	mov	r6, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800b44c:	d903      	bls.n	800b456 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800b44e:	f06f 000f 	mvn.w	r0, #15
}
 800b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
 800b456:	6845      	ldr	r5, [r0, #4]
 800b458:	428d      	cmp	r5, r1
 800b45a:	d216      	bcs.n	800b48a <mbedtls_mpi_grow+0x4c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800b45c:	2104      	movs	r1, #4
 800b45e:	4630      	mov	r0, r6
 800b460:	f00b fafe 	bl	8016a60 <calloc>
 800b464:	4680      	mov	r8, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0f1      	beq.n	800b44e <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
 800b46a:	68a7      	ldr	r7, [r4, #8]
 800b46c:	b15f      	cbz	r7, 800b486 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 800b46e:	00ad      	lsls	r5, r5, #2
 800b470:	462a      	mov	r2, r5
 800b472:	4639      	mov	r1, r7
 800b474:	f00b fb21 	bl	8016aba <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 800b478:	4638      	mov	r0, r7
 800b47a:	4629      	mov	r1, r5
 800b47c:	f006 ff10 	bl	80122a0 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 800b480:	68a0      	ldr	r0, [r4, #8]
 800b482:	f00b fb03 	bl	8016a8c <free>
        X->p = p;
 800b486:	e9c4 6801 	strd	r6, r8, [r4, #4]
    return( 0 );
 800b48a:	2000      	movs	r0, #0
 800b48c:	e7e1      	b.n	800b452 <mbedtls_mpi_grow+0x14>

0800b48e <mbedtls_mpi_shrink>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800b48e:	f242 7310 	movw	r3, #10000	; 0x2710
 800b492:	4299      	cmp	r1, r3
{
 800b494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b498:	4605      	mov	r5, r0
 800b49a:	460c      	mov	r4, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800b49c:	d903      	bls.n	800b4a6 <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800b49e:	f06f 000f 	mvn.w	r0, #15
}
 800b4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n <= nblimbs )
 800b4a6:	6846      	ldr	r6, [r0, #4]
 800b4a8:	428e      	cmp	r6, r1
 800b4aa:	d803      	bhi.n	800b4b4 <mbedtls_mpi_shrink+0x26>
}
 800b4ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800b4b0:	f7ff bfc5 	b.w	800b43e <mbedtls_mpi_grow>
    for( i = X->n - 1; i > 0; i-- )
 800b4b4:	1e73      	subs	r3, r6, #1
 800b4b6:	00b6      	lsls	r6, r6, #2
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	b9db      	cbnz	r3, 800b4f4 <mbedtls_mpi_shrink+0x66>
    i++;
 800b4bc:	3301      	adds	r3, #1
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	bf38      	it	cc
 800b4c2:	461c      	movcc	r4, r3
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800b4c4:	2104      	movs	r1, #4
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f00b faca 	bl	8016a60 <calloc>
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d0e5      	beq.n	800b49e <mbedtls_mpi_shrink+0x10>
    if( X->p != NULL )
 800b4d2:	68af      	ldr	r7, [r5, #8]
 800b4d4:	b157      	cbz	r7, 800b4ec <mbedtls_mpi_shrink+0x5e>
        memcpy( p, X->p, i * ciL );
 800b4d6:	00a2      	lsls	r2, r4, #2
 800b4d8:	4639      	mov	r1, r7
 800b4da:	f00b faee 	bl	8016aba <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 800b4de:	4638      	mov	r0, r7
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	f006 fedd 	bl	80122a0 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 800b4e6:	68a8      	ldr	r0, [r5, #8]
 800b4e8:	f00b fad0 	bl	8016a8c <free>
    X->p = p;
 800b4ec:	e9c5 4801 	strd	r4, r8, [r5, #4]
    return( 0 );
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	e7d6      	b.n	800b4a2 <mbedtls_mpi_shrink+0x14>
        if( X->p[i] != 0 )
 800b4f4:	68a9      	ldr	r1, [r5, #8]
 800b4f6:	4411      	add	r1, r2
 800b4f8:	3a04      	subs	r2, #4
 800b4fa:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800b4fe:	2900      	cmp	r1, #0
 800b500:	d1dc      	bne.n	800b4bc <mbedtls_mpi_shrink+0x2e>
    for( i = X->n - 1; i > 0; i-- )
 800b502:	3b01      	subs	r3, #1
 800b504:	e7d9      	b.n	800b4ba <mbedtls_mpi_shrink+0x2c>

0800b506 <mbedtls_mpi_copy>:
    if( X == Y )
 800b506:	4288      	cmp	r0, r1
{
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
    if( X == Y )
 800b50e:	d003      	beq.n	800b518 <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
 800b510:	688d      	ldr	r5, [r1, #8]
 800b512:	b91d      	cbnz	r5, 800b51c <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 800b514:	f7ff ff81 	bl	800b41a <mbedtls_mpi_free>
        return( 0 );
 800b518:	2000      	movs	r0, #0
 800b51a:	e011      	b.n	800b540 <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
 800b51c:	684c      	ldr	r4, [r1, #4]
 800b51e:	3c01      	subs	r4, #1
 800b520:	b11c      	cbz	r4, 800b52a <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800b522:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0f9      	beq.n	800b51e <mbedtls_mpi_copy+0x18>
    if( X->n < i )
 800b52a:	6872      	ldr	r2, [r6, #4]
    X->s = Y->s;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	6033      	str	r3, [r6, #0]
    i++;
 800b530:	3401      	adds	r4, #1
    if( X->n < i )
 800b532:	42a2      	cmp	r2, r4
 800b534:	d205      	bcs.n	800b542 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800b536:	4621      	mov	r1, r4
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff ff80 	bl	800b43e <mbedtls_mpi_grow>
 800b53e:	b140      	cbz	r0, 800b552 <mbedtls_mpi_copy+0x4c>
}
 800b540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800b542:	68b0      	ldr	r0, [r6, #8]
 800b544:	1b12      	subs	r2, r2, r4
 800b546:	0092      	lsls	r2, r2, #2
 800b548:	2100      	movs	r1, #0
 800b54a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800b54e:	f00b fad8 	bl	8016b02 <memset>
    memcpy( X->p, Y->p, i * ciL );
 800b552:	00a2      	lsls	r2, r4, #2
 800b554:	68b9      	ldr	r1, [r7, #8]
 800b556:	68b0      	ldr	r0, [r6, #8]
 800b558:	f00b faaf 	bl	8016aba <memcpy>
 800b55c:	e7dc      	b.n	800b518 <mbedtls_mpi_copy+0x12>

0800b55e <mbedtls_mpi_safe_cond_assign>:
{
 800b55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b560:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800b562:	6849      	ldr	r1, [r1, #4]
{
 800b564:	4605      	mov	r5, r0
 800b566:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800b568:	f7ff ff69 	bl	800b43e <mbedtls_mpi_grow>
 800b56c:	b9b0      	cbnz	r0, 800b59c <mbedtls_mpi_safe_cond_assign+0x3e>
    assign = (assign | (unsigned char)-assign) >> 7;
 800b56e:	4262      	negs	r2, r4
 800b570:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800b572:	6831      	ldr	r1, [r6, #0]
 800b574:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800b576:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 800b57a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800b57e:	f1c2 0401 	rsb	r4, r2, #1
 800b582:	4351      	muls	r1, r2
 800b584:	fb03 1304 	mla	r3, r3, r4, r1
 800b588:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800b58a:	4603      	mov	r3, r0
 800b58c:	459e      	cmp	lr, r3
 800b58e:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800b592:	d104      	bne.n	800b59e <mbedtls_mpi_safe_cond_assign+0x40>
    for( ; i < X->n; i++ )
 800b594:	686f      	ldr	r7, [r5, #4]
 800b596:	460a      	mov	r2, r1
 800b598:	429f      	cmp	r7, r3
 800b59a:	d80e      	bhi.n	800b5ba <mbedtls_mpi_safe_cond_assign+0x5c>
}
 800b59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800b59e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800b5a2:	68b1      	ldr	r1, [r6, #8]
 800b5a4:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800b5a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b5ac:	4367      	muls	r7, r4
 800b5ae:	fb01 7102 	mla	r1, r1, r2, r7
 800b5b2:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	e7e8      	b.n	800b58c <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 800b5ba:	68ae      	ldr	r6, [r5, #8]
 800b5bc:	58b1      	ldr	r1, [r6, r2]
 800b5be:	4361      	muls	r1, r4
 800b5c0:	50b1      	str	r1, [r6, r2]
    for( ; i < X->n; i++ )
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	3204      	adds	r2, #4
 800b5c6:	e7e7      	b.n	800b598 <mbedtls_mpi_safe_cond_assign+0x3a>

0800b5c8 <mbedtls_mpi_lset>:
{
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800b5cc:	2101      	movs	r1, #1
{
 800b5ce:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800b5d0:	f7ff ff35 	bl	800b43e <mbedtls_mpi_grow>
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	b988      	cbnz	r0, 800b5fc <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 800b5d8:	6862      	ldr	r2, [r4, #4]
 800b5da:	4601      	mov	r1, r0
 800b5dc:	0092      	lsls	r2, r2, #2
 800b5de:	68a0      	ldr	r0, [r4, #8]
 800b5e0:	f00b fa8f 	bl	8016b02 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 800b5e4:	68a3      	ldr	r3, [r4, #8]
 800b5e6:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 800b5ea:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 800b5ec:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800b5f0:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800b5f2:	bfb4      	ite	lt
 800b5f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5f8:	2301      	movge	r3, #1
 800b5fa:	6023      	str	r3, [r4, #0]
}
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}

0800b600 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 800b600:	6843      	ldr	r3, [r0, #4]
 800b602:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800b606:	bf3f      	itttt	cc
 800b608:	6883      	ldrcc	r3, [r0, #8]
 800b60a:	094a      	lsrcc	r2, r1, #5
 800b60c:	f001 011f 	andcc.w	r1, r1, #31
 800b610:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 800b614:	bf3a      	itte	cc
 800b616:	40c8      	lsrcc	r0, r1
 800b618:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
 800b61c:	2000      	movcs	r0, #0
}
 800b61e:	4770      	bx	lr

0800b620 <mbedtls_mpi_lsb>:
{
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 800b622:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 800b624:	6845      	ldr	r5, [r0, #4]
{
 800b626:	4604      	mov	r4, r0
    for( i = 0; i < X->n; i++ )
 800b628:	460a      	mov	r2, r1
 800b62a:	4295      	cmp	r5, r2
 800b62c:	d101      	bne.n	800b632 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 800b62e:	2000      	movs	r0, #0
}
 800b630:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 800b638:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800b63a:	fa26 f703 	lsr.w	r7, r6, r3
 800b63e:	07ff      	lsls	r7, r7, #31
 800b640:	eb01 0003 	add.w	r0, r1, r3
 800b644:	d4f4      	bmi.n	800b630 <mbedtls_mpi_lsb+0x10>
        for( j = 0; j < biL; j++, count++ )
 800b646:	3301      	adds	r3, #1
 800b648:	2b20      	cmp	r3, #32
 800b64a:	eb01 0003 	add.w	r0, r1, r3
 800b64e:	d1f4      	bne.n	800b63a <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 800b650:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 800b652:	4601      	mov	r1, r0
 800b654:	e7e9      	b.n	800b62a <mbedtls_mpi_lsb+0xa>

0800b656 <mbedtls_mpi_bitlen>:
    if( X->n == 0 )
 800b656:	6843      	ldr	r3, [r0, #4]
 800b658:	b1db      	cbz	r3, 800b692 <mbedtls_mpi_bitlen+0x3c>
 800b65a:	6881      	ldr	r1, [r0, #8]
    for( i = X->n - 1; i > 0; i-- )
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	b97a      	cbnz	r2, 800b682 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 800b662:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    for( j = 0; j < biL; j++ )
 800b666:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800b668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        if( x & mask ) break;
 800b66c:	4219      	tst	r1, r3
 800b66e:	d104      	bne.n	800b67a <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 800b670:	3001      	adds	r0, #1
 800b672:	2820      	cmp	r0, #32
        mask >>= 1;
 800b674:	ea4f 0353 	mov.w	r3, r3, lsr #1
    for( j = 0; j < biL; j++ )
 800b678:	d1f8      	bne.n	800b66c <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 800b67a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b67e:	3020      	adds	r0, #32
 800b680:	4770      	bx	lr
        if( X->p[i] != 0 )
 800b682:	18c8      	adds	r0, r1, r3
 800b684:	3b04      	subs	r3, #4
 800b686:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1e9      	bne.n	800b662 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 800b68e:	3a01      	subs	r2, #1
 800b690:	e7e6      	b.n	800b660 <mbedtls_mpi_bitlen+0xa>
        return( 0 );
 800b692:	4618      	mov	r0, r3
}
 800b694:	4770      	bx	lr

0800b696 <mbedtls_mpi_size>:
{
 800b696:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800b698:	f7ff ffdd 	bl	800b656 <mbedtls_mpi_bitlen>
 800b69c:	3007      	adds	r0, #7
}
 800b69e:	08c0      	lsrs	r0, r0, #3
 800b6a0:	bd08      	pop	{r3, pc}

0800b6a2 <mbedtls_mpi_read_binary>:
{
 800b6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 800b6a6:	f012 0403 	ands.w	r4, r2, #3
 800b6aa:	bf18      	it	ne
 800b6ac:	2401      	movne	r4, #1
    if( X->n != limbs )
 800b6ae:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 800b6b0:	eb04 0492 	add.w	r4, r4, r2, lsr #2
    if( X->n != limbs )
 800b6b4:	42a3      	cmp	r3, r4
{
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	4688      	mov	r8, r1
 800b6ba:	4615      	mov	r5, r2
    if( X->n != limbs )
 800b6bc:	d108      	bne.n	800b6d0 <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800b6be:	2100      	movs	r1, #0
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff ff81 	bl	800b5c8 <mbedtls_mpi_lset>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	b188      	cbz	r0, 800b6ee <mbedtls_mpi_read_binary+0x4c>
}
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
 800b6d0:	f7ff fea3 	bl	800b41a <mbedtls_mpi_free>
    X->n = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	e9c7 2300 	strd	r2, r3, [r7]
    X->p = NULL;
 800b6dc:	60bb      	str	r3, [r7, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7ff feac 	bl	800b43e <mbedtls_mpi_grow>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0e8      	beq.n	800b6be <mbedtls_mpi_read_binary+0x1c>
 800b6ec:	e7ed      	b.n	800b6ca <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
 800b6ee:	f1b8 0f00 	cmp.w	r8, #0
 800b6f2:	d0ea      	beq.n	800b6ca <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
 800b6f6:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
        memcpy( Xp + overhead, buf, buflen );
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	4418      	add	r0, r3
 800b700:	f00b f9db 	bl	8016aba <memcpy>
    if( limbs == 0 )
 800b704:	2c00      	cmp	r4, #0
 800b706:	d0e0      	beq.n	800b6ca <mbedtls_mpi_read_binary+0x28>
 800b708:	4621      	mov	r1, r4
 800b70a:	68b8      	ldr	r0, [r7, #8]
 800b70c:	f7ff fe4d 	bl	800b3aa <mpi_bigendian_to_host.part.1>
    return( ret );
 800b710:	e7db      	b.n	800b6ca <mbedtls_mpi_read_binary+0x28>

0800b712 <mbedtls_mpi_write_binary>:
{
 800b712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b714:	4605      	mov	r5, r0
 800b716:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
 800b718:	686c      	ldr	r4, [r5, #4]
 800b71a:	00a4      	lsls	r4, r4, #2
    if( stored_bytes < buflen )
 800b71c:	4294      	cmp	r4, r2
 800b71e:	d21c      	bcs.n	800b75a <mbedtls_mpi_write_binary+0x48>
        p = buf + buflen - stored_bytes;
 800b720:	1b12      	subs	r2, r2, r4
 800b722:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 800b724:	2100      	movs	r1, #0
 800b726:	f00b f9ec 	bl	8016b02 <memset>
        p = buf + buflen - stored_bytes;
 800b72a:	4630      	mov	r0, r6
 800b72c:	4622      	mov	r2, r4
 800b72e:	4410      	add	r0, r2
    for( i = 0; i < bytes_to_copy; i++ )
 800b730:	2300      	movs	r3, #0
 800b732:	429a      	cmp	r2, r3
 800b734:	d113      	bne.n	800b75e <mbedtls_mpi_write_binary+0x4c>
    return( 0 );
 800b736:	2000      	movs	r0, #0
}
 800b738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
 800b73a:	f023 0c03 	bic.w	ip, r3, #3
 800b73e:	68af      	ldr	r7, [r5, #8]
 800b740:	f003 0103 	and.w	r1, r3, #3
 800b744:	00ce      	lsls	r6, r1, #3
 800b746:	f857 100c 	ldr.w	r1, [r7, ip]
 800b74a:	40f1      	lsrs	r1, r6
 800b74c:	f011 0fff 	tst.w	r1, #255	; 0xff
 800b750:	d111      	bne.n	800b776 <mbedtls_mpi_write_binary+0x64>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 800b752:	3301      	adds	r3, #1
 800b754:	42a3      	cmp	r3, r4
 800b756:	d1f0      	bne.n	800b73a <mbedtls_mpi_write_binary+0x28>
 800b758:	e7e9      	b.n	800b72e <mbedtls_mpi_write_binary+0x1c>
 800b75a:	4613      	mov	r3, r2
 800b75c:	e7fa      	b.n	800b754 <mbedtls_mpi_write_binary+0x42>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 800b75e:	f023 0603 	bic.w	r6, r3, #3
 800b762:	68af      	ldr	r7, [r5, #8]
 800b764:	f003 0103 	and.w	r1, r3, #3
 800b768:	00cc      	lsls	r4, r1, #3
 800b76a:	59b9      	ldr	r1, [r7, r6]
 800b76c:	40e1      	lsrs	r1, r4
 800b76e:	f800 1d01 	strb.w	r1, [r0, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
 800b772:	3301      	adds	r3, #1
 800b774:	e7dd      	b.n	800b732 <mbedtls_mpi_write_binary+0x20>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800b776:	f06f 0007 	mvn.w	r0, #7
 800b77a:	e7dd      	b.n	800b738 <mbedtls_mpi_write_binary+0x26>

0800b77c <mbedtls_mpi_shift_l>:
{
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	4606      	mov	r6, r0
 800b780:	460d      	mov	r5, r1
    v0 = count / (biL    );
 800b782:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 800b784:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 800b788:	f7ff ff65 	bl	800b656 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800b78c:	6873      	ldr	r3, [r6, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800b78e:	4428      	add	r0, r5
    if( X->n * biL < i )
 800b790:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800b794:	d803      	bhi.n	800b79e <mbedtls_mpi_shift_l+0x22>
    if( v0 > 0 )
 800b796:	b974      	cbnz	r4, 800b7b6 <mbedtls_mpi_shift_l+0x3a>
    if( t1 > 0 )
 800b798:	bb2f      	cbnz	r7, 800b7e6 <mbedtls_mpi_shift_l+0x6a>
    ret = 0;
 800b79a:	2000      	movs	r0, #0
 800b79c:	e00a      	b.n	800b7b4 <mbedtls_mpi_shift_l+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800b79e:	f010 011f 	ands.w	r1, r0, #31
 800b7a2:	bf18      	it	ne
 800b7a4:	2101      	movne	r1, #1
 800b7a6:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff fe47 	bl	800b43e <mbedtls_mpi_grow>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0f0      	beq.n	800b796 <mbedtls_mpi_shift_l+0x1a>
}
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 800b7b6:	6873      	ldr	r3, [r6, #4]
 800b7b8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800b7bc:	3a01      	subs	r2, #1
 800b7be:	1b12      	subs	r2, r2, r4
 800b7c0:	0092      	lsls	r2, r2, #2
 800b7c2:	00a0      	lsls	r0, r4, #2
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	d807      	bhi.n	800b7d8 <mbedtls_mpi_shift_l+0x5c>
 800b7c8:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	3b04      	subs	r3, #4
        for( ; i > 0; i-- )
 800b7ce:	1d19      	adds	r1, r3, #4
 800b7d0:	d0e2      	beq.n	800b798 <mbedtls_mpi_shift_l+0x1c>
            X->p[i - 1] = 0;
 800b7d2:	68b1      	ldr	r1, [r6, #8]
 800b7d4:	50ca      	str	r2, [r1, r3]
 800b7d6:	e7f9      	b.n	800b7cc <mbedtls_mpi_shift_l+0x50>
            X->p[i - 1] = X->p[i - v0 - 1];
 800b7d8:	68b1      	ldr	r1, [r6, #8]
 800b7da:	588d      	ldr	r5, [r1, r2]
 800b7dc:	4411      	add	r1, r2
        for( i = X->n; i > v0; i-- )
 800b7de:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 800b7e0:	500d      	str	r5, [r1, r0]
 800b7e2:	3a04      	subs	r2, #4
 800b7e4:	e7ee      	b.n	800b7c4 <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 800b7e6:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b7ea:	00a3      	lsls	r3, r4, #2
    mbedtls_mpi_uint r0 = 0, r1;
 800b7ec:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 800b7ee:	f1c7 0e20 	rsb	lr, r7, #32
        for( i = v0; i < X->n; i++ )
 800b7f2:	45a4      	cmp	ip, r4
 800b7f4:	d9d1      	bls.n	800b79a <mbedtls_mpi_shift_l+0x1e>
            r1 = X->p[i] >> (biL - t1);
 800b7f6:	68b5      	ldr	r5, [r6, #8]
 800b7f8:	58e8      	ldr	r0, [r5, r3]
            X->p[i] <<= t1;
 800b7fa:	fa00 f207 	lsl.w	r2, r0, r7
            X->p[i] |= r0;
 800b7fe:	430a      	orrs	r2, r1
 800b800:	50ea      	str	r2, [r5, r3]
        for( i = v0; i < X->n; i++ )
 800b802:	3401      	adds	r4, #1
 800b804:	3304      	adds	r3, #4
            r1 = X->p[i] >> (biL - t1);
 800b806:	fa20 f10e 	lsr.w	r1, r0, lr
 800b80a:	e7f2      	b.n	800b7f2 <mbedtls_mpi_shift_l+0x76>

0800b80c <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800b80c:	6843      	ldr	r3, [r0, #4]
{
 800b80e:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 800b810:	094d      	lsrs	r5, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800b812:	42ab      	cmp	r3, r5
 800b814:	d303      	bcc.n	800b81e <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
 800b816:	f001 011f 	and.w	r1, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800b81a:	d104      	bne.n	800b826 <mbedtls_mpi_shift_r+0x1a>
 800b81c:	b369      	cbz	r1, 800b87a <mbedtls_mpi_shift_r+0x6e>
        return mbedtls_mpi_lset( X, 0 );
 800b81e:	2100      	movs	r1, #0
}
 800b820:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 800b822:	f7ff bed1 	b.w	800b5c8 <mbedtls_mpi_lset>
    if( v0 > 0 )
 800b826:	b9e5      	cbnz	r5, 800b862 <mbedtls_mpi_shift_r+0x56>
    if( v1 > 0 )
 800b828:	b129      	cbz	r1, 800b836 <mbedtls_mpi_shift_r+0x2a>
 800b82a:	009a      	lsls	r2, r3, #2
    mbedtls_mpi_uint r0 = 0, r1;
 800b82c:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 800b82e:	f1c1 0c20 	rsb	ip, r1, #32
 800b832:	3a04      	subs	r2, #4
        for( i = X->n; i > 0; i-- )
 800b834:	b9bb      	cbnz	r3, 800b866 <mbedtls_mpi_shift_r+0x5a>
}
 800b836:	2000      	movs	r0, #0
 800b838:	bcf0      	pop	{r4, r5, r6, r7}
 800b83a:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 800b83c:	6884      	ldr	r4, [r0, #8]
 800b83e:	1956      	adds	r6, r2, r5
 800b840:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800b844:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 800b848:	3201      	adds	r2, #1
 800b84a:	1b5c      	subs	r4, r3, r5
 800b84c:	4294      	cmp	r4, r2
 800b84e:	d8f5      	bhi.n	800b83c <mbedtls_mpi_shift_r+0x30>
 800b850:	00a2      	lsls	r2, r4, #2
            X->p[i] = 0;
 800b852:	2500      	movs	r5, #0
        for( ; i < X->n; i++ )
 800b854:	42a3      	cmp	r3, r4
 800b856:	d9e7      	bls.n	800b828 <mbedtls_mpi_shift_r+0x1c>
            X->p[i] = 0;
 800b858:	6886      	ldr	r6, [r0, #8]
        for( ; i < X->n; i++ )
 800b85a:	3401      	adds	r4, #1
            X->p[i] = 0;
 800b85c:	50b5      	str	r5, [r6, r2]
 800b85e:	3204      	adds	r2, #4
 800b860:	e7f8      	b.n	800b854 <mbedtls_mpi_shift_r+0x48>
 800b862:	2200      	movs	r2, #0
 800b864:	e7f1      	b.n	800b84a <mbedtls_mpi_shift_r+0x3e>
            r1 = X->p[i - 1] << (biL - v1);
 800b866:	6887      	ldr	r7, [r0, #8]
 800b868:	58be      	ldr	r6, [r7, r2]
            X->p[i - 1] >>= v1;
 800b86a:	fa26 f401 	lsr.w	r4, r6, r1
            X->p[i - 1] |= r0;
 800b86e:	432c      	orrs	r4, r5
 800b870:	50bc      	str	r4, [r7, r2]
        for( i = X->n; i > 0; i-- )
 800b872:	3b01      	subs	r3, #1
            r1 = X->p[i - 1] << (biL - v1);
 800b874:	fa06 f50c 	lsl.w	r5, r6, ip
 800b878:	e7db      	b.n	800b832 <mbedtls_mpi_shift_r+0x26>
    if( v0 > 0 )
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0db      	beq.n	800b836 <mbedtls_mpi_shift_r+0x2a>
 800b87e:	460a      	mov	r2, r1
 800b880:	e7e3      	b.n	800b84a <mbedtls_mpi_shift_r+0x3e>

0800b882 <mbedtls_mpi_cmp_abs>:
{
 800b882:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 800b884:	6843      	ldr	r3, [r0, #4]
 800b886:	009a      	lsls	r2, r3, #2
 800b888:	b933      	cbnz	r3, 800b898 <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
 800b88a:	684a      	ldr	r2, [r1, #4]
 800b88c:	0094      	lsls	r4, r2, #2
 800b88e:	b962      	cbnz	r2, 800b8aa <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
 800b890:	1c18      	adds	r0, r3, #0
 800b892:	bf18      	it	ne
 800b894:	2001      	movne	r0, #1
 800b896:	e016      	b.n	800b8c6 <mbedtls_mpi_cmp_abs+0x44>
        if( X->p[i - 1] != 0 )
 800b898:	6884      	ldr	r4, [r0, #8]
 800b89a:	4414      	add	r4, r2
 800b89c:	3a04      	subs	r2, #4
 800b89e:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800b8a2:	2c00      	cmp	r4, #0
 800b8a4:	d1f1      	bne.n	800b88a <mbedtls_mpi_cmp_abs+0x8>
    for( i = X->n; i > 0; i-- )
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	e7ee      	b.n	800b888 <mbedtls_mpi_cmp_abs+0x6>
        if( Y->p[j - 1] != 0 )
 800b8aa:	688d      	ldr	r5, [r1, #8]
 800b8ac:	192e      	adds	r6, r5, r4
 800b8ae:	3c04      	subs	r4, #4
 800b8b0:	f856 6c04 	ldr.w	r6, [r6, #-4]
 800b8b4:	b90e      	cbnz	r6, 800b8ba <mbedtls_mpi_cmp_abs+0x38>
    for( j = Y->n; j > 0; j-- )
 800b8b6:	3a01      	subs	r2, #1
 800b8b8:	e7e9      	b.n	800b88e <mbedtls_mpi_cmp_abs+0xc>
    if( i > j ) return(  1 );
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d80d      	bhi.n	800b8da <mbedtls_mpi_cmp_abs+0x58>
    if( j > i ) return( -1 );
 800b8be:	d30e      	bcc.n	800b8de <mbedtls_mpi_cmp_abs+0x5c>
 800b8c0:	009a      	lsls	r2, r3, #2
    for( ; i > 0; i-- )
 800b8c2:	b90b      	cbnz	r3, 800b8c8 <mbedtls_mpi_cmp_abs+0x46>
    return( 0 );
 800b8c4:	4618      	mov	r0, r3
}
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800b8c8:	3a04      	subs	r2, #4
 800b8ca:	6881      	ldr	r1, [r0, #8]
 800b8cc:	588c      	ldr	r4, [r1, r2]
 800b8ce:	58a9      	ldr	r1, [r5, r2]
 800b8d0:	428c      	cmp	r4, r1
 800b8d2:	d802      	bhi.n	800b8da <mbedtls_mpi_cmp_abs+0x58>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800b8d4:	d303      	bcc.n	800b8de <mbedtls_mpi_cmp_abs+0x5c>
    for( ; i > 0; i-- )
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	e7f3      	b.n	800b8c2 <mbedtls_mpi_cmp_abs+0x40>
    if( i > j ) return(  1 );
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e7f3      	b.n	800b8c6 <mbedtls_mpi_cmp_abs+0x44>
    if( j > i ) return( -1 );
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	e7f0      	b.n	800b8c6 <mbedtls_mpi_cmp_abs+0x44>

0800b8e4 <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	4616      	mov	r6, r2
 800b8ec:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800b8ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	6873      	ldr	r3, [r6, #4]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	429a      	cmp	r2, r3
{
 800b8f8:	4681      	mov	r9, r0
 800b8fa:	468b      	mov	fp, r1
    if( T->n < N->n + 1 || T->p == NULL )
 800b8fc:	d353      	bcc.n	800b9a6 <mpi_montmul+0xc2>
 800b8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b900:	6898      	ldr	r0, [r3, #8]
 800b902:	2800      	cmp	r0, #0
 800b904:	d04f      	beq.n	800b9a6 <mpi_montmul+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 800b906:	0092      	lsls	r2, r2, #2
 800b908:	2100      	movs	r1, #0
 800b90a:	f00b f8fa 	bl	8016b02 <memset>

    d = T->p;
 800b90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 800b910:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d = T->p;
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800b918:	f8db 3004 	ldr.w	r3, [fp, #4]
    d = T->p;
 800b91c:	9d00      	ldr	r5, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800b91e:	4553      	cmp	r3, sl
 800b920:	bf28      	it	cs
 800b922:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 800b924:	f10a 0701 	add.w	r7, sl, #1
    m = ( B->n < n ) ? B->n : n;
 800b928:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
 800b92a:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 800b92c:	2400      	movs	r4, #0
 800b92e:	4554      	cmp	r4, sl
 800b930:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800b934:	d11b      	bne.n	800b96e <mpi_montmul+0x8a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	1f39      	subs	r1, r7, #4
 800b93a:	440b      	add	r3, r1
 800b93c:	463a      	mov	r2, r7
 800b93e:	4619      	mov	r1, r3
 800b940:	f00b f8bb 	bl	8016aba <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800b944:	4631      	mov	r1, r6
 800b946:	4648      	mov	r0, r9
 800b948:	f7ff ff9b 	bl	800b882 <mbedtls_mpi_cmp_abs>
 800b94c:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800b94e:	bfb3      	iteet	lt
 800b950:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
        mpi_sub_hlp( n, N->p, A->p );
 800b952:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 800b956:	68b1      	ldrge	r1, [r6, #8]
        mpi_sub_hlp( n, A->p, T->p );
 800b958:	689a      	ldrlt	r2, [r3, #8]
 800b95a:	bfb8      	it	lt
 800b95c:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff fc28 	bl	800b1b6 <mpi_sub_hlp>

    return( 0 );
 800b966:	2000      	movs	r0, #0
}
 800b968:	b005      	add	sp, #20
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800b96e:	f8db 1008 	ldr.w	r1, [fp, #8]
        u0 = A->p[i];
 800b972:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800b976:	682a      	ldr	r2, [r5, #0]
 800b978:	680b      	ldr	r3, [r1, #0]
        mpi_mul_hlp( m, B->p, d, u0 );
 800b97a:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800b97c:	fb03 2308 	mla	r3, r3, r8, r2
 800b980:	9a03      	ldr	r2, [sp, #12]
 800b982:	4353      	muls	r3, r2
 800b984:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
 800b986:	462a      	mov	r2, r5
 800b988:	4643      	mov	r3, r8
 800b98a:	f7ff fc3e 	bl	800b20a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800b98e:	9b02      	ldr	r3, [sp, #8]
 800b990:	68b1      	ldr	r1, [r6, #8]
 800b992:	462a      	mov	r2, r5
 800b994:	4650      	mov	r0, sl
 800b996:	f7ff fc38 	bl	800b20a <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 800b99a:	f845 8b04 	str.w	r8, [r5], #4
 800b99e:	2300      	movs	r3, #0
 800b9a0:	51eb      	str	r3, [r5, r7]
    for( i = 0; i < n; i++ )
 800b9a2:	3401      	adds	r4, #1
 800b9a4:	e7c3      	b.n	800b92e <mpi_montmul+0x4a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800b9a6:	f06f 0003 	mvn.w	r0, #3
 800b9aa:	e7dd      	b.n	800b968 <mpi_montmul+0x84>

0800b9ac <mbedtls_mpi_cmp_mpi>:
{
 800b9ac:	b570      	push	{r4, r5, r6, lr}
    for( i = X->n; i > 0; i-- )
 800b9ae:	6843      	ldr	r3, [r0, #4]
 800b9b0:	009a      	lsls	r2, r3, #2
 800b9b2:	b923      	cbnz	r3, 800b9be <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 800b9b4:	684a      	ldr	r2, [r1, #4]
 800b9b6:	0094      	lsls	r4, r2, #2
 800b9b8:	b952      	cbnz	r2, 800b9d0 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 800b9ba:	b99b      	cbnz	r3, 800b9e4 <mbedtls_mpi_cmp_mpi+0x38>
 800b9bc:	e024      	b.n	800ba08 <mbedtls_mpi_cmp_mpi+0x5c>
        if( X->p[i - 1] != 0 )
 800b9be:	6884      	ldr	r4, [r0, #8]
 800b9c0:	4414      	add	r4, r2
 800b9c2:	3a04      	subs	r2, #4
 800b9c4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800b9c8:	2c00      	cmp	r4, #0
 800b9ca:	d1f3      	bne.n	800b9b4 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	e7f0      	b.n	800b9b2 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 800b9d0:	688d      	ldr	r5, [r1, #8]
 800b9d2:	192e      	adds	r6, r5, r4
 800b9d4:	3c04      	subs	r4, #4
 800b9d6:	f856 6c04 	ldr.w	r6, [r6, #-4]
 800b9da:	b90e      	cbnz	r6, 800b9e0 <mbedtls_mpi_cmp_mpi+0x34>
    for( j = Y->n; j > 0; j-- )
 800b9dc:	3a01      	subs	r2, #1
 800b9de:	e7eb      	b.n	800b9b8 <mbedtls_mpi_cmp_mpi+0xc>
    if( i > j ) return(  X->s );
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d902      	bls.n	800b9ea <mbedtls_mpi_cmp_mpi+0x3e>
 800b9e4:	6802      	ldr	r2, [r0, #0]
}
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 800b9ec:	d201      	bcs.n	800b9f2 <mbedtls_mpi_cmp_mpi+0x46>
 800b9ee:	424a      	negs	r2, r1
 800b9f0:	e7f9      	b.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800b9f2:	6802      	ldr	r2, [r0, #0]
 800b9f4:	2a00      	cmp	r2, #0
 800b9f6:	dd01      	ble.n	800b9fc <mbedtls_mpi_cmp_mpi+0x50>
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	db12      	blt.n	800ba22 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	dd01      	ble.n	800ba04 <mbedtls_mpi_cmp_mpi+0x58>
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	db10      	blt.n	800ba26 <mbedtls_mpi_cmp_mpi+0x7a>
 800ba04:	0099      	lsls	r1, r3, #2
    for( ; i > 0; i-- )
 800ba06:	b90b      	cbnz	r3, 800ba0c <mbedtls_mpi_cmp_mpi+0x60>
    return( 0 );
 800ba08:	461a      	mov	r2, r3
 800ba0a:	e7ec      	b.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800ba0c:	3904      	subs	r1, #4
 800ba0e:	6884      	ldr	r4, [r0, #8]
 800ba10:	5866      	ldr	r6, [r4, r1]
 800ba12:	586c      	ldr	r4, [r5, r1]
 800ba14:	42a6      	cmp	r6, r4
 800ba16:	d8e6      	bhi.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800ba18:	d201      	bcs.n	800ba1e <mbedtls_mpi_cmp_mpi+0x72>
 800ba1a:	4252      	negs	r2, r2
 800ba1c:	e7e3      	b.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	e7f1      	b.n	800ba06 <mbedtls_mpi_cmp_mpi+0x5a>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800ba22:	2201      	movs	r2, #1
 800ba24:	e7df      	b.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800ba26:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2a:	e7dc      	b.n	800b9e6 <mbedtls_mpi_cmp_mpi+0x3a>

0800ba2c <mbedtls_mpi_cmp_int>:
{
 800ba2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 800ba2e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800ba32:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 800ba36:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 800ba38:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 800ba3a:	bfb4      	ite	lt
 800ba3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba40:	2301      	movge	r3, #1
 800ba42:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800ba44:	a901      	add	r1, sp, #4
    Y.n = 1;
 800ba46:	2301      	movs	r3, #1
 800ba48:	9302      	str	r3, [sp, #8]
    Y.p = p;
 800ba4a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800ba4e:	f7ff ffad 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
}
 800ba52:	b005      	add	sp, #20
 800ba54:	f85d fb04 	ldr.w	pc, [sp], #4

0800ba58 <mbedtls_mpi_add_abs>:
    if( X == B )
 800ba58:	4290      	cmp	r0, r2
{
 800ba5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5e:	4606      	mov	r6, r0
 800ba60:	460c      	mov	r4, r1
 800ba62:	4615      	mov	r5, r2
    if( X == B )
 800ba64:	d002      	beq.n	800ba6c <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 800ba66:	4288      	cmp	r0, r1
 800ba68:	d133      	bne.n	800bad2 <mbedtls_mpi_add_abs+0x7a>
{
 800ba6a:	462c      	mov	r4, r5
    for( j = B->n; j > 0; j-- )
 800ba6c:	f8d4 8004 	ldr.w	r8, [r4, #4]
    X->s = 1;
 800ba70:	2301      	movs	r3, #1
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	ea4f 0388 	mov.w	r3, r8, lsl #2
    for( j = B->n; j > 0; j-- )
 800ba78:	f1b8 0f00 	cmp.w	r8, #0
 800ba7c:	d131      	bne.n	800bae2 <mbedtls_mpi_add_abs+0x8a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800ba7e:	4641      	mov	r1, r8
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff fcdc 	bl	800b43e <mbedtls_mpi_grow>
 800ba86:	4607      	mov	r7, r0
 800ba88:	bb40      	cbnz	r0, 800badc <mbedtls_mpi_add_abs+0x84>
    o = B->p; p = X->p; c = 0;
 800ba8a:	68b3      	ldr	r3, [r6, #8]
 800ba8c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800ba90:	4619      	mov	r1, r3
 800ba92:	4604      	mov	r4, r0
    for( i = 0; i < j; i++, o++, p++ )
 800ba94:	4605      	mov	r5, r0
 800ba96:	45a8      	cmp	r8, r5
 800ba98:	d12d      	bne.n	800baf6 <mbedtls_mpi_add_abs+0x9e>
 800ba9a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
 800ba9e:	b1ec      	cbz	r4, 800badc <mbedtls_mpi_add_abs+0x84>
        if( i >= X->n )
 800baa0:	6872      	ldr	r2, [r6, #4]
 800baa2:	42aa      	cmp	r2, r5
 800baa4:	f105 0801 	add.w	r8, r5, #1
 800baa8:	d808      	bhi.n	800babc <mbedtls_mpi_add_abs+0x64>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800baaa:	4641      	mov	r1, r8
 800baac:	4630      	mov	r0, r6
 800baae:	f7ff fcc6 	bl	800b43e <mbedtls_mpi_grow>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d131      	bne.n	800bb1a <mbedtls_mpi_add_abs+0xc2>
            p = X->p + i;
 800bab6:	68b3      	ldr	r3, [r6, #8]
 800bab8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	1914      	adds	r4, r2, r4
 800bac0:	f04f 0100 	mov.w	r1, #0
 800bac4:	bf28      	it	cs
 800bac6:	2101      	movcs	r1, #1
        *p += c; c = ( *p < c ); i++; p++;
 800bac8:	f843 4b04 	str.w	r4, [r3], #4
 800bacc:	4645      	mov	r5, r8
 800bace:	460c      	mov	r4, r1
 800bad0:	e7e5      	b.n	800ba9e <mbedtls_mpi_add_abs+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800bad2:	f7ff fd18 	bl	800b506 <mbedtls_mpi_copy>
 800bad6:	4607      	mov	r7, r0
 800bad8:	2800      	cmp	r0, #0
 800bada:	d0c6      	beq.n	800ba6a <mbedtls_mpi_add_abs+0x12>
}
 800badc:	4638      	mov	r0, r7
 800bade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800bae2:	68a2      	ldr	r2, [r4, #8]
 800bae4:	441a      	add	r2, r3
 800bae6:	3b04      	subs	r3, #4
 800bae8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800baec:	2a00      	cmp	r2, #0
 800baee:	d1c6      	bne.n	800ba7e <mbedtls_mpi_add_abs+0x26>
    for( j = B->n; j > 0; j-- )
 800baf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800baf4:	e7c0      	b.n	800ba78 <mbedtls_mpi_add_abs+0x20>
 800baf6:	680a      	ldr	r2, [r1, #0]
        tmp= *o;
 800baf8:	f85e 0025 	ldr.w	r0, [lr, r5, lsl #2]
 800bafc:	1914      	adds	r4, r2, r4
 800bafe:	f04f 0c00 	mov.w	ip, #0
 800bb02:	bf28      	it	cs
 800bb04:	f04f 0c01 	movcs.w	ip, #1
 800bb08:	1824      	adds	r4, r4, r0
        *p += tmp; c += ( *p < tmp );
 800bb0a:	f841 4b04 	str.w	r4, [r1], #4
 800bb0e:	bf2c      	ite	cs
 800bb10:	2401      	movcs	r4, #1
 800bb12:	2400      	movcc	r4, #0
 800bb14:	4464      	add	r4, ip
    for( i = 0; i < j; i++, o++, p++ )
 800bb16:	3501      	adds	r5, #1
 800bb18:	e7bd      	b.n	800ba96 <mbedtls_mpi_add_abs+0x3e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800bb1a:	4607      	mov	r7, r0
    return( ret );
 800bb1c:	e7de      	b.n	800badc <mbedtls_mpi_add_abs+0x84>

0800bb1e <mbedtls_mpi_sub_abs>:
{
 800bb1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb20:	460f      	mov	r7, r1
 800bb22:	b085      	sub	sp, #20
 800bb24:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800bb26:	4611      	mov	r1, r2
 800bb28:	4638      	mov	r0, r7
{
 800bb2a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800bb2c:	f7ff fea9 	bl	800b882 <mbedtls_mpi_cmp_abs>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	db2f      	blt.n	800bb94 <mbedtls_mpi_sub_abs+0x76>
    X->n = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	2201      	movs	r2, #1
    if( X == B )
 800bb38:	42b5      	cmp	r5, r6
    X->n = 0;
 800bb3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 800bb3e:	9303      	str	r3, [sp, #12]
    if( X == B )
 800bb40:	d106      	bne.n	800bb50 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800bb42:	4629      	mov	r1, r5
 800bb44:	a801      	add	r0, sp, #4
 800bb46:	f7ff fcde 	bl	800b506 <mbedtls_mpi_copy>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	b9a0      	cbnz	r0, 800bb78 <mbedtls_mpi_sub_abs+0x5a>
        B = &TB;
 800bb4e:	ad01      	add	r5, sp, #4
    if( X != A )
 800bb50:	42b7      	cmp	r7, r6
 800bb52:	d10a      	bne.n	800bb6a <mbedtls_mpi_sub_abs+0x4c>
    for( n = B->n; n > 0; n-- )
 800bb54:	6868      	ldr	r0, [r5, #4]
 800bb56:	68a9      	ldr	r1, [r5, #8]
    X->s = 1;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	6033      	str	r3, [r6, #0]
 800bb5c:	0083      	lsls	r3, r0, #2
    for( n = B->n; n > 0; n-- )
 800bb5e:	b988      	cbnz	r0, 800bb84 <mbedtls_mpi_sub_abs+0x66>
    mpi_sub_hlp( n, B->p, X->p );
 800bb60:	68b2      	ldr	r2, [r6, #8]
 800bb62:	f7ff fb28 	bl	800b1b6 <mpi_sub_hlp>
    ret = 0;
 800bb66:	2400      	movs	r4, #0
 800bb68:	e006      	b.n	800bb78 <mbedtls_mpi_sub_abs+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff fcca 	bl	800b506 <mbedtls_mpi_copy>
 800bb72:	4604      	mov	r4, r0
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d0ed      	beq.n	800bb54 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 800bb78:	a801      	add	r0, sp, #4
 800bb7a:	f7ff fc4e 	bl	800b41a <mbedtls_mpi_free>
}
 800bb7e:	4620      	mov	r0, r4
 800bb80:	b005      	add	sp, #20
 800bb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800bb84:	18ca      	adds	r2, r1, r3
 800bb86:	3b04      	subs	r3, #4
 800bb88:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	d1e7      	bne.n	800bb60 <mbedtls_mpi_sub_abs+0x42>
    for( n = B->n; n > 0; n-- )
 800bb90:	3801      	subs	r0, #1
 800bb92:	e7e4      	b.n	800bb5e <mbedtls_mpi_sub_abs+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800bb94:	f06f 0409 	mvn.w	r4, #9
 800bb98:	e7f1      	b.n	800bb7e <mbedtls_mpi_sub_abs+0x60>

0800bb9a <mbedtls_mpi_add_mpi>:
{
 800bb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 800bb9c:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 800bb9e:	6813      	ldr	r3, [r2, #0]
 800bba0:	4363      	muls	r3, r4
{
 800bba2:	4605      	mov	r5, r0
 800bba4:	460f      	mov	r7, r1
 800bba6:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 800bba8:	d516      	bpl.n	800bbd8 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff fe68 	bl	800b882 <mbedtls_mpi_cmp_abs>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	db06      	blt.n	800bbc4 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7ff ffaf 	bl	800bb1e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800bbc0:	b140      	cbz	r0, 800bbd4 <mbedtls_mpi_add_mpi+0x3a>
}
 800bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800bbc4:	463a      	mov	r2, r7
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f7ff ffa8 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d1f7      	bne.n	800bbc2 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800bbd2:	4264      	negs	r4, r4
        X->s = s;
 800bbd4:	602c      	str	r4, [r5, #0]
    return( ret );
 800bbd6:	e7f4      	b.n	800bbc2 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800bbd8:	f7ff ff3e 	bl	800ba58 <mbedtls_mpi_add_abs>
 800bbdc:	e7f0      	b.n	800bbc0 <mbedtls_mpi_add_mpi+0x26>

0800bbde <mbedtls_mpi_sub_mpi>:
{
 800bbde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
 800bbe0:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 800bbe2:	6813      	ldr	r3, [r2, #0]
 800bbe4:	4363      	muls	r3, r4
 800bbe6:	2b00      	cmp	r3, #0
{
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460f      	mov	r7, r1
 800bbec:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 800bbee:	dd16      	ble.n	800bc1e <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4638      	mov	r0, r7
 800bbf4:	f7ff fe45 	bl	800b882 <mbedtls_mpi_cmp_abs>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	db06      	blt.n	800bc0a <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800bbfc:	4632      	mov	r2, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4628      	mov	r0, r5
 800bc02:	f7ff ff8c 	bl	800bb1e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800bc06:	b140      	cbz	r0, 800bc1a <mbedtls_mpi_sub_mpi+0x3c>
}
 800bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800bc0a:	463a      	mov	r2, r7
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f7ff ff85 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1f7      	bne.n	800bc08 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 800bc18:	4264      	negs	r4, r4
        X->s = s;
 800bc1a:	602c      	str	r4, [r5, #0]
    return( ret );
 800bc1c:	e7f4      	b.n	800bc08 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800bc1e:	f7ff ff1b 	bl	800ba58 <mbedtls_mpi_add_abs>
 800bc22:	e7f0      	b.n	800bc06 <mbedtls_mpi_sub_mpi+0x28>

0800bc24 <mbedtls_mpi_add_int>:
{
 800bc24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800bc26:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800bc2a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800bc2e:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800bc30:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800bc32:	bfb4      	ite	lt
 800bc34:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc38:	2301      	movge	r3, #1
 800bc3a:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800bc3c:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800bc42:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800bc46:	f7ff ffa8 	bl	800bb9a <mbedtls_mpi_add_mpi>
}
 800bc4a:	b005      	add	sp, #20
 800bc4c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc50 <mbedtls_mpi_sub_int>:
{
 800bc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800bc52:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800bc56:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800bc5a:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800bc5c:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800bc5e:	bfb4      	ite	lt
 800bc60:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc64:	2301      	movge	r3, #1
 800bc66:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800bc68:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800bc6e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800bc72:	f7ff ffb4 	bl	800bbde <mbedtls_mpi_sub_mpi>
}
 800bc76:	b005      	add	sp, #20
 800bc78:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc7c <mbedtls_mpi_mul_mpi>:
{
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    X->n = 0;
 800bc80:	2300      	movs	r3, #0
{
 800bc82:	b086      	sub	sp, #24
 800bc84:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800bc86:	4288      	cmp	r0, r1
    X->n = 0;
 800bc88:	f04f 0201 	mov.w	r2, #1
{
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	460e      	mov	r6, r1
    X->n = 0;
 800bc90:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 800bc94:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 800bc98:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800bc9c:	d105      	bne.n	800bcaa <mbedtls_mpi_mul_mpi+0x2e>
 800bc9e:	4668      	mov	r0, sp
 800bca0:	f7ff fc31 	bl	800b506 <mbedtls_mpi_copy>
 800bca4:	4604      	mov	r4, r0
 800bca6:	bb50      	cbnz	r0, 800bcfe <mbedtls_mpi_mul_mpi+0x82>
 800bca8:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800bcaa:	45a8      	cmp	r8, r5
 800bcac:	d106      	bne.n	800bcbc <mbedtls_mpi_mul_mpi+0x40>
 800bcae:	4641      	mov	r1, r8
 800bcb0:	a803      	add	r0, sp, #12
 800bcb2:	f7ff fc28 	bl	800b506 <mbedtls_mpi_copy>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	bb08      	cbnz	r0, 800bcfe <mbedtls_mpi_mul_mpi+0x82>
 800bcba:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 800bcbc:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800bcc0:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	d123      	bne.n	800bd12 <mbedtls_mpi_mul_mpi+0x96>
    for( j = B->n; j > 0; j-- )
 800bcca:	686f      	ldr	r7, [r5, #4]
 800bccc:	00bb      	lsls	r3, r7, #2
 800bcce:	bb57      	cbnz	r7, 800bd26 <mbedtls_mpi_mul_mpi+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800bcd0:	eb09 0107 	add.w	r1, r9, r7
 800bcd4:	4640      	mov	r0, r8
 800bcd6:	f7ff fbb2 	bl	800b43e <mbedtls_mpi_grow>
 800bcda:	4604      	mov	r4, r0
 800bcdc:	b978      	cbnz	r0, 800bcfe <mbedtls_mpi_mul_mpi+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800bcde:	4601      	mov	r1, r0
 800bce0:	4640      	mov	r0, r8
 800bce2:	f7ff fc71 	bl	800b5c8 <mbedtls_mpi_lset>
 800bce6:	4604      	mov	r4, r0
 800bce8:	b948      	cbnz	r0, 800bcfe <mbedtls_mpi_mul_mpi+0x82>
 800bcea:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800bcee:	f1aa 0a04 	sub.w	sl, sl, #4
    for( ; j > 0; j-- )
 800bcf2:	bb0f      	cbnz	r7, 800bd38 <mbedtls_mpi_mul_mpi+0xbc>
    X->s = A->s * B->s;
 800bcf4:	6832      	ldr	r2, [r6, #0]
 800bcf6:	682b      	ldr	r3, [r5, #0]
 800bcf8:	4353      	muls	r3, r2
 800bcfa:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800bcfe:	a803      	add	r0, sp, #12
 800bd00:	f7ff fb8b 	bl	800b41a <mbedtls_mpi_free>
 800bd04:	4668      	mov	r0, sp
 800bd06:	f7ff fb88 	bl	800b41a <mbedtls_mpi_free>
}
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	b006      	add	sp, #24
 800bd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( A->p[i - 1] != 0 )
 800bd12:	68b2      	ldr	r2, [r6, #8]
 800bd14:	441a      	add	r2, r3
 800bd16:	3b04      	subs	r3, #4
 800bd18:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d1d4      	bne.n	800bcca <mbedtls_mpi_mul_mpi+0x4e>
    for( i = A->n; i > 0; i-- )
 800bd20:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd24:	e7ce      	b.n	800bcc4 <mbedtls_mpi_mul_mpi+0x48>
        if( B->p[j - 1] != 0 )
 800bd26:	68aa      	ldr	r2, [r5, #8]
 800bd28:	441a      	add	r2, r3
 800bd2a:	3b04      	subs	r3, #4
 800bd2c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800bd30:	2a00      	cmp	r2, #0
 800bd32:	d1cd      	bne.n	800bcd0 <mbedtls_mpi_mul_mpi+0x54>
    for( j = B->n; j > 0; j-- )
 800bd34:	3f01      	subs	r7, #1
 800bd36:	e7ca      	b.n	800bcce <mbedtls_mpi_mul_mpi+0x52>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 800bd38:	68ab      	ldr	r3, [r5, #8]
 800bd3a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bd3e:	f853 300a 	ldr.w	r3, [r3, sl]
 800bd42:	68b1      	ldr	r1, [r6, #8]
 800bd44:	4452      	add	r2, sl
 800bd46:	4648      	mov	r0, r9
 800bd48:	f7ff fa5f 	bl	800b20a <mpi_mul_hlp>
    for( ; j > 0; j-- )
 800bd4c:	3f01      	subs	r7, #1
 800bd4e:	e7ce      	b.n	800bcee <mbedtls_mpi_mul_mpi+0x72>

0800bd50 <mbedtls_mpi_mul_int>:
{
 800bd50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 800bd52:	2301      	movs	r3, #1
    p[0] = b;
 800bd54:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800bd56:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800bd58:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 800bd5c:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800bd60:	f7ff ff8c 	bl	800bc7c <mbedtls_mpi_mul_mpi>
}
 800bd64:	b005      	add	sp, #20
 800bd66:	f85d fb04 	ldr.w	pc, [sp], #4

0800bd6a <mbedtls_mpi_div_mpi>:
{
 800bd6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6e:	b099      	sub	sp, #100	; 0x64
 800bd70:	460f      	mov	r7, r1
 800bd72:	9001      	str	r0, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
{
 800bd78:	4690      	mov	r8, r2
 800bd7a:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800bd7c:	f7ff fe56 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	f000 81a5 	beq.w	800c0d0 <mbedtls_mpi_div_mpi+0x366>
    X->n = 0;
 800bd86:	2400      	movs	r4, #0
 800bd88:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800bd8a:	9903      	ldr	r1, [sp, #12]
    X->p = NULL;
 800bd8c:	9417      	str	r4, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800bd8e:	4640      	mov	r0, r8
    X->n = 0;
 800bd90:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    X->s = 1;
 800bd94:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    X->p = NULL;
 800bd98:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    X->n = 0;
 800bd9c:	e9cd 540f 	strd	r5, r4, [sp, #60]	; 0x3c
    X->s = 1;
 800bda0:	e9cd 4511 	strd	r4, r5, [sp, #68]	; 0x44
    X->p = NULL;
 800bda4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
    X->n = 0;
 800bda8:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800bdac:	f7ff fd69 	bl	800b882 <mbedtls_mpi_cmp_abs>
 800bdb0:	42a0      	cmp	r0, r4
 800bdb2:	da26      	bge.n	800be02 <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800bdb4:	9b01      	ldr	r3, [sp, #4]
 800bdb6:	b92b      	cbnz	r3, 800bdc4 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800bdb8:	b9df      	cbnz	r7, 800bdf2 <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
 800bdba:	2400      	movs	r4, #0
}
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	b019      	add	sp, #100	; 0x64
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	9801      	ldr	r0, [sp, #4]
 800bdc8:	f7ff fbfe 	bl	800b5c8 <mbedtls_mpi_lset>
 800bdcc:	4604      	mov	r4, r0
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d0f2      	beq.n	800bdb8 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800bdd2:	a809      	add	r0, sp, #36	; 0x24
 800bdd4:	f7ff fb21 	bl	800b41a <mbedtls_mpi_free>
 800bdd8:	a80c      	add	r0, sp, #48	; 0x30
 800bdda:	f7ff fb1e 	bl	800b41a <mbedtls_mpi_free>
 800bdde:	a80f      	add	r0, sp, #60	; 0x3c
 800bde0:	f7ff fb1b 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800bde4:	a812      	add	r0, sp, #72	; 0x48
 800bde6:	f7ff fb18 	bl	800b41a <mbedtls_mpi_free>
 800bdea:	a815      	add	r0, sp, #84	; 0x54
 800bdec:	f7ff fb15 	bl	800b41a <mbedtls_mpi_free>
    return( ret );
 800bdf0:	e7e4      	b.n	800bdbc <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800bdf2:	4641      	mov	r1, r8
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f7ff fb86 	bl	800b506 <mbedtls_mpi_copy>
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d1e8      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
 800be00:	e7db      	b.n	800bdba <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800be02:	4641      	mov	r1, r8
 800be04:	a809      	add	r0, sp, #36	; 0x24
 800be06:	f7ff fb7e 	bl	800b506 <mbedtls_mpi_copy>
 800be0a:	4604      	mov	r4, r0
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d1e0      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800be10:	ae0c      	add	r6, sp, #48	; 0x30
 800be12:	9903      	ldr	r1, [sp, #12]
 800be14:	4630      	mov	r0, r6
 800be16:	f7ff fb76 	bl	800b506 <mbedtls_mpi_copy>
 800be1a:	4604      	mov	r4, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d1d8      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800be20:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
 800be24:	950c      	str	r5, [sp, #48]	; 0x30
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800be26:	3102      	adds	r1, #2
 800be28:	a80f      	add	r0, sp, #60	; 0x3c
    X.s = Y.s = 1;
 800be2a:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800be2c:	f7ff fb07 	bl	800b43e <mbedtls_mpi_grow>
 800be30:	4604      	mov	r4, r0
 800be32:	2800      	cmp	r0, #0
 800be34:	d1cd      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800be36:	4601      	mov	r1, r0
 800be38:	a80f      	add	r0, sp, #60	; 0x3c
 800be3a:	f7ff fbc5 	bl	800b5c8 <mbedtls_mpi_lset>
 800be3e:	4604      	mov	r4, r0
 800be40:	2800      	cmp	r0, #0
 800be42:	d1c6      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800be44:	2102      	movs	r1, #2
 800be46:	a812      	add	r0, sp, #72	; 0x48
 800be48:	f7ff faf9 	bl	800b43e <mbedtls_mpi_grow>
 800be4c:	4604      	mov	r4, r0
 800be4e:	2800      	cmp	r0, #0
 800be50:	d1bf      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800be52:	2103      	movs	r1, #3
 800be54:	a815      	add	r0, sp, #84	; 0x54
 800be56:	f7ff faf2 	bl	800b43e <mbedtls_mpi_grow>
 800be5a:	4604      	mov	r4, r0
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1b8      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff fbf8 	bl	800b656 <mbedtls_mpi_bitlen>
 800be66:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800be6a:	281f      	cmp	r0, #31
 800be6c:	d076      	beq.n	800bf5c <mbedtls_mpi_div_mpi+0x1f2>
        k = biL - 1 - k;
 800be6e:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800be72:	4619      	mov	r1, r3
 800be74:	a809      	add	r0, sp, #36	; 0x24
        k = biL - 1 - k;
 800be76:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800be78:	f7ff fc80 	bl	800b77c <mbedtls_mpi_shift_l>
 800be7c:	4604      	mov	r4, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	d1a7      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800be82:	9902      	ldr	r1, [sp, #8]
 800be84:	4630      	mov	r0, r6
 800be86:	f7ff fc79 	bl	800b77c <mbedtls_mpi_shift_l>
 800be8a:	4604      	mov	r4, r0
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d1a0      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
 800be90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    t = Y.n - 1;
 800be92:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    n = X.n - 1;
 800be96:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 800be9a:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800be9e:	eba9 0b03 	sub.w	fp, r9, r3
    t = Y.n - 1;
 800bea2:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800bea4:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800bea8:	4619      	mov	r1, r3
 800beaa:	4630      	mov	r0, r6
 800beac:	9304      	str	r3, [sp, #16]
 800beae:	f7ff fc65 	bl	800b77c <mbedtls_mpi_shift_l>
 800beb2:	4604      	mov	r4, r0
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d18c      	bne.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
 800beb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800bebc:	4631      	mov	r1, r6
 800bebe:	a809      	add	r0, sp, #36	; 0x24
 800bec0:	f7ff fd74 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	da4b      	bge.n	800bf60 <mbedtls_mpi_div_mpi+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800bec8:	9904      	ldr	r1, [sp, #16]
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff fc9e 	bl	800b80c <mbedtls_mpi_shift_r>
 800bed0:	4604      	mov	r4, r0
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f47f af7d 	bne.w	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800bed8:	9b00      	ldr	r3, [sp, #0]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800bede:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800bee2:	3b02      	subs	r3, #2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	f06f 0303 	mvn.w	r3, #3
 800beec:	fb03 f30a 	mul.w	r3, r3, sl
 800bef0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800bef4:	3d01      	subs	r5, #1
 800bef6:	9306      	str	r3, [sp, #24]
 800bef8:	ebca 63ca 	rsb	r3, sl, sl, lsl #27
 800befc:	00ad      	lsls	r5, r5, #2
 800befe:	9305      	str	r3, [sp, #20]
    for( i = n; i > t ; i-- )
 800bf00:	9b00      	ldr	r3, [sp, #0]
 800bf02:	4599      	cmp	r9, r3
 800bf04:	d83b      	bhi.n	800bf7e <mbedtls_mpi_div_mpi+0x214>
    if( Q != NULL )
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	b15b      	cbz	r3, 800bf22 <mbedtls_mpi_div_mpi+0x1b8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800bf0a:	a90f      	add	r1, sp, #60	; 0x3c
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff fafa 	bl	800b506 <mbedtls_mpi_copy>
 800bf12:	bb08      	cbnz	r0, 800bf58 <mbedtls_mpi_div_mpi+0x1ee>
        Q->s = A->s * B->s;
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	f8d8 2000 	ldr.w	r2, [r8]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4353      	muls	r3, r2
 800bf1e:	9a01      	ldr	r2, [sp, #4]
 800bf20:	6013      	str	r3, [r2, #0]
    if( R != NULL )
 800bf22:	2f00      	cmp	r7, #0
 800bf24:	f43f af55 	beq.w	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800bf28:	9902      	ldr	r1, [sp, #8]
 800bf2a:	a809      	add	r0, sp, #36	; 0x24
 800bf2c:	f7ff fc6e 	bl	800b80c <mbedtls_mpi_shift_r>
 800bf30:	b990      	cbnz	r0, 800bf58 <mbedtls_mpi_div_mpi+0x1ee>
        X.s = A->s;
 800bf32:	f8d8 3000 	ldr.w	r3, [r8]
 800bf36:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800bf38:	a909      	add	r1, sp, #36	; 0x24
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	f7ff fae3 	bl	800b506 <mbedtls_mpi_copy>
 800bf40:	4601      	mov	r1, r0
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f040 80c2 	bne.w	800c0cc <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff fd6f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f47f af3f 	bne.w	800bdd2 <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
 800bf54:	2301      	movs	r3, #1
 800bf56:	603b      	str	r3, [r7, #0]
cleanup:
 800bf58:	4604      	mov	r4, r0
 800bf5a:	e73a      	b.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
 800bf5c:	9402      	str	r4, [sp, #8]
 800bf5e:	e797      	b.n	800be90 <mbedtls_mpi_div_mpi+0x126>
        Z.p[n - t]++;
 800bf60:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bf62:	f851 200b 	ldr.w	r2, [r1, fp]
 800bf66:	3201      	adds	r2, #1
 800bf68:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800bf6c:	a909      	add	r1, sp, #36	; 0x24
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4608      	mov	r0, r1
 800bf72:	f7ff fe34 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800bf76:	4604      	mov	r4, r0
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d09f      	beq.n	800bebc <mbedtls_mpi_div_mpi+0x152>
cleanup:
 800bf7c:	e729      	b.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
 800bf7e:	9804      	ldr	r0, [sp, #16]
 800bf80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf84:	594b      	ldr	r3, [r1, r5]
 800bf86:	5812      	ldr	r2, [r2, r0]
 800bf88:	9806      	ldr	r0, [sp, #24]
 800bf8a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	eb00 0605 	add.w	r6, r0, r5
 800bf94:	f1a5 0b04 	sub.w	fp, r5, #4
 800bf98:	d37e      	bcc.n	800c098 <mbedtls_mpi_div_mpi+0x32e>
            Z.p[i - t - 1] = ~0;
 800bf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9e:	f84a 3006 	str.w	r3, [sl, r6]
        Z.p[i - t - 1]++;
 800bfa2:	f85a 3006 	ldr.w	r3, [sl, r6]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	f84a 3006 	str.w	r3, [sl, r6]
 800bfac:	f1a5 0a08 	sub.w	sl, r5, #8
            Z.p[i - t - 1]--;
 800bfb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bfb2:	5993      	ldr	r3, [r2, r6]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800bfb8:	2100      	movs	r1, #0
 800bfba:	a812      	add	r0, sp, #72	; 0x48
 800bfbc:	f7ff fb04 	bl	800b5c8 <mbedtls_mpi_lset>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d1c9      	bne.n	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800bfc4:	9b00      	ldr	r3, [sp, #0]
 800bfc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d07d      	beq.n	800c0c8 <mbedtls_mpi_div_mpi+0x35e>
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	58d1      	ldr	r1, [r2, r3]
 800bfd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfd2:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800bfd4:	9904      	ldr	r1, [sp, #16]
 800bfd6:	5852      	ldr	r2, [r2, r1]
 800bfd8:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800bfda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bfdc:	a912      	add	r1, sp, #72	; 0x48
 800bfde:	4608      	mov	r0, r1
 800bfe0:	599a      	ldr	r2, [r3, r6]
 800bfe2:	f7ff feb5 	bl	800bd50 <mbedtls_mpi_mul_int>
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d16f      	bne.n	800c0cc <mbedtls_mpi_div_mpi+0x362>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800bfec:	a815      	add	r0, sp, #84	; 0x54
 800bfee:	f7ff faeb 	bl	800b5c8 <mbedtls_mpi_lset>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d1b0      	bne.n	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
 800bff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800bff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bffa:	f1b9 0f01 	cmp.w	r9, #1
 800bffe:	bf18      	it	ne
 800c000:	f852 000a 	ldrne.w	r0, [r2, sl]
 800c004:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800c006:	f852 100b 	ldr.w	r1, [r2, fp]
 800c00a:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 800c00c:	5952      	ldr	r2, [r2, r5]
 800c00e:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800c010:	a915      	add	r1, sp, #84	; 0x54
 800c012:	a812      	add	r0, sp, #72	; 0x48
 800c014:	f7ff fcca 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c018:	2800      	cmp	r0, #0
 800c01a:	dcc9      	bgt.n	800bfb0 <mbedtls_mpi_div_mpi+0x246>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800c01c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c01e:	a90c      	add	r1, sp, #48	; 0x30
 800c020:	599a      	ldr	r2, [r3, r6]
 800c022:	a812      	add	r0, sp, #72	; 0x48
 800c024:	f7ff fe94 	bl	800bd50 <mbedtls_mpi_mul_int>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d195      	bne.n	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
 800c02c:	9b05      	ldr	r3, [sp, #20]
 800c02e:	eb03 0a09 	add.w	sl, r3, r9
 800c032:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800c036:	4651      	mov	r1, sl
 800c038:	a812      	add	r0, sp, #72	; 0x48
 800c03a:	f7ff fb9f 	bl	800b77c <mbedtls_mpi_shift_l>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d18a      	bne.n	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800c042:	a909      	add	r1, sp, #36	; 0x24
 800c044:	4608      	mov	r0, r1
 800c046:	aa12      	add	r2, sp, #72	; 0x48
 800c048:	f7ff fdc9 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800c04c:	4601      	mov	r1, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d13c      	bne.n	800c0cc <mbedtls_mpi_div_mpi+0x362>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800c052:	a809      	add	r0, sp, #36	; 0x24
 800c054:	f7ff fcea 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c058:	2800      	cmp	r0, #0
 800c05a:	da19      	bge.n	800c090 <mbedtls_mpi_div_mpi+0x326>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800c05c:	a90c      	add	r1, sp, #48	; 0x30
 800c05e:	a812      	add	r0, sp, #72	; 0x48
 800c060:	f7ff fa51 	bl	800b506 <mbedtls_mpi_copy>
 800c064:	2800      	cmp	r0, #0
 800c066:	f47f af77 	bne.w	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800c06a:	4651      	mov	r1, sl
 800c06c:	a812      	add	r0, sp, #72	; 0x48
 800c06e:	f7ff fb85 	bl	800b77c <mbedtls_mpi_shift_l>
 800c072:	2800      	cmp	r0, #0
 800c074:	f47f af70 	bne.w	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800c078:	a909      	add	r1, sp, #36	; 0x24
 800c07a:	aa12      	add	r2, sp, #72	; 0x48
 800c07c:	4608      	mov	r0, r1
 800c07e:	f7ff fd8c 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800c082:	2800      	cmp	r0, #0
 800c084:	f47f af68 	bne.w	800bf58 <mbedtls_mpi_div_mpi+0x1ee>
            Z.p[i - t - 1]--;
 800c088:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c08a:	5993      	ldr	r3, [r2, r6]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	5193      	str	r3, [r2, r6]
    for( i = n; i > t ; i-- )
 800c090:	f109 39ff 	add.w	r9, r9, #4294967295
 800c094:	3d04      	subs	r5, #4
 800c096:	e733      	b.n	800bf00 <mbedtls_mpi_div_mpi+0x196>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800c098:	f851 c00b 	ldr.w	ip, [r1, fp]
    if( 0 == d || u1 >= d )
 800c09c:	b18a      	cbz	r2, 800c0c2 <mbedtls_mpi_div_mpi+0x358>
    dividend  = (mbedtls_t_udbl) u1 << biL;
 800c09e:	4619      	mov	r1, r3
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4618      	mov	r0, r3
    quotient = dividend / d;
 800c0a4:	ea40 000c 	orr.w	r0, r0, ip
 800c0a8:	f7f4 fadc 	bl	8000664 <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b2:	428b      	cmp	r3, r1
 800c0b4:	bf08      	it	eq
 800c0b6:	4282      	cmpeq	r2, r0
 800c0b8:	d200      	bcs.n	800c0bc <mbedtls_mpi_div_mpi+0x352>
 800c0ba:	4610      	mov	r0, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800c0bc:	f84a 0006 	str.w	r0, [sl, r6]
 800c0c0:	e76f      	b.n	800bfa2 <mbedtls_mpi_div_mpi+0x238>
        return ( ~0 );
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c6:	e7f9      	b.n	800c0bc <mbedtls_mpi_div_mpi+0x352>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800c0c8:	9900      	ldr	r1, [sp, #0]
 800c0ca:	e781      	b.n	800bfd0 <mbedtls_mpi_div_mpi+0x266>
cleanup:
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	e680      	b.n	800bdd2 <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800c0d0:	f06f 040b 	mvn.w	r4, #11
 800c0d4:	e672      	b.n	800bdbc <mbedtls_mpi_div_mpi+0x52>

0800c0d6 <mbedtls_mpi_mod_mpi>:
{
 800c0d6:	b570      	push	{r4, r5, r6, lr}
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800c0dc:	4610      	mov	r0, r2
 800c0de:	2100      	movs	r1, #0
{
 800c0e0:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800c0e2:	f7ff fca3 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	db24      	blt.n	800c134 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	4633      	mov	r3, r6
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f7ff fe3a 	bl	800bd6a <mbedtls_mpi_div_mpi>
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	b138      	cbz	r0, 800c10a <mbedtls_mpi_mod_mpi+0x34>
}
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800c0fe:	4632      	mov	r2, r6
 800c100:	4621      	mov	r1, r4
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff fd49 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800c108:	b990      	cbnz	r0, 800c130 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800c10a:	2100      	movs	r1, #0
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7ff fc8d 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c112:	2800      	cmp	r0, #0
 800c114:	dbf3      	blt.n	800c0fe <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800c116:	4631      	mov	r1, r6
 800c118:	4620      	mov	r0, r4
 800c11a:	f7ff fc47 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c11e:	2800      	cmp	r0, #0
 800c120:	dbeb      	blt.n	800c0fa <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800c122:	4632      	mov	r2, r6
 800c124:	4621      	mov	r1, r4
 800c126:	4620      	mov	r0, r4
 800c128:	f7ff fd59 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d0f2      	beq.n	800c116 <mbedtls_mpi_mod_mpi+0x40>
 800c130:	4605      	mov	r5, r0
 800c132:	e7e2      	b.n	800c0fa <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800c134:	f06f 0509 	mvn.w	r5, #9
 800c138:	e7df      	b.n	800c0fa <mbedtls_mpi_mod_mpi+0x24>

0800c13a <mbedtls_mpi_mod_int>:
    if( b == 0 )
 800c13a:	1e13      	subs	r3, r2, #0
{
 800c13c:	b430      	push	{r4, r5}
 800c13e:	4604      	mov	r4, r0
    if( b == 0 )
 800c140:	d012      	beq.n	800c168 <mbedtls_mpi_mod_int+0x2e>
    if( b < 0 )
 800c142:	db14      	blt.n	800c16e <mbedtls_mpi_mod_int+0x34>
    if( b == 1 )
 800c144:	2b01      	cmp	r3, #1
 800c146:	d103      	bne.n	800c150 <mbedtls_mpi_mod_int+0x16>
        *r = 0;
 800c148:	2000      	movs	r0, #0
 800c14a:	6020      	str	r0, [r4, #0]
}
 800c14c:	bc30      	pop	{r4, r5}
 800c14e:	4770      	bx	lr
    if( b == 2 )
 800c150:	2b02      	cmp	r3, #2
 800c152:	d106      	bne.n	800c162 <mbedtls_mpi_mod_int+0x28>
        *r = A->p[0] & 1;
 800c154:	688b      	ldr	r3, [r1, #8]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	6003      	str	r3, [r0, #0]
        return( 0 );
 800c15e:	2000      	movs	r0, #0
 800c160:	e7f4      	b.n	800c14c <mbedtls_mpi_mod_int+0x12>
}
 800c162:	bc30      	pop	{r4, r5}
 800c164:	f7ff b933 	b.w	800b3ce <mbedtls_mpi_mod_int.part.4>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800c168:	f06f 000b 	mvn.w	r0, #11
 800c16c:	e7ee      	b.n	800c14c <mbedtls_mpi_mod_int+0x12>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800c16e:	f06f 0009 	mvn.w	r0, #9
 800c172:	e7eb      	b.n	800c14c <mbedtls_mpi_mod_int+0x12>

0800c174 <mpi_check_small_factors>:
{
    int ret = 0;
    size_t i;
    mbedtls_mpi_uint r;

    if( ( X->p[0] & 1 ) == 0 )
 800c174:	6883      	ldr	r3, [r0, #8]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	07db      	lsls	r3, r3, #31
{
 800c17a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c17c:	4605      	mov	r5, r0
    if( ( X->p[0] & 1 ) == 0 )
 800c17e:	d517      	bpl.n	800c1b0 <mpi_check_small_factors+0x3c>
 800c180:	4e0e      	ldr	r6, [pc, #56]	; (800c1bc <mpi_check_small_factors+0x48>)
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    for( i = 0; small_prime[i] > 0; i++ )
 800c182:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800c186:	2c00      	cmp	r4, #0
 800c188:	dc02      	bgt.n	800c190 <mpi_check_small_factors+0x1c>
 800c18a:	2000      	movs	r0, #0
            return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
    }

cleanup:
    return( ret );
}
 800c18c:	b002      	add	sp, #8
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
        if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
 800c190:	4621      	mov	r1, r4
 800c192:	4628      	mov	r0, r5
 800c194:	f7ff fc4a 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c198:	2800      	cmp	r0, #0
 800c19a:	dd0c      	ble.n	800c1b6 <mpi_check_small_factors+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );
 800c19c:	4622      	mov	r2, r4
 800c19e:	4629      	mov	r1, r5
 800c1a0:	a801      	add	r0, sp, #4
 800c1a2:	f7ff ffca 	bl	800c13a <mbedtls_mpi_mod_int>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d1f0      	bne.n	800c18c <mpi_check_small_factors+0x18>
        if( r == 0 )
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e8      	bne.n	800c182 <mpi_check_small_factors+0xe>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 800c1b0:	f06f 000d 	mvn.w	r0, #13
 800c1b4:	e7ea      	b.n	800c18c <mpi_check_small_factors+0x18>
            return( 1 );
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7e8      	b.n	800c18c <mpi_check_small_factors+0x18>
 800c1ba:	bf00      	nop
 800c1bc:	0801821c 	.word	0x0801821c

0800c1c0 <mbedtls_mpi_exp_mod>:
{
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	2100      	movs	r1, #0
{
 800c1d0:	9203      	str	r2, [sp, #12]
 800c1d2:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 800c1d4:	f7ff fc2a 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	f340 8225 	ble.w	800c628 <mbedtls_mpi_exp_mod+0x468>
 800c1de:	68ab      	ldr	r3, [r5, #8]
 800c1e0:	f8d3 8000 	ldr.w	r8, [r3]
 800c1e4:	f018 0f01 	tst.w	r8, #1
 800c1e8:	f000 821e 	beq.w	800c628 <mbedtls_mpi_exp_mod+0x468>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	9803      	ldr	r0, [sp, #12]
 800c1f0:	f7ff fc1c 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f2c0 8217 	blt.w	800c628 <mbedtls_mpi_exp_mod+0x468>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800c1fa:	f108 0402 	add.w	r4, r8, #2
 800c1fe:	0064      	lsls	r4, r4, #1
 800c200:	f004 0408 	and.w	r4, r4, #8
 800c204:	4444      	add	r4, r8
 800c206:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 800c208:	fb04 f308 	mul.w	r3, r4, r8
 800c20c:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 800c210:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 800c212:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 800c216:	d1f7      	bne.n	800c208 <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 800c218:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
 800c21a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c21e:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 800c220:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 800c224:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 800c228:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 800c22c:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 800c230:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800c232:	f00a fc66 	bl	8016b02 <memset>
    i = mbedtls_mpi_bitlen( E );
 800c236:	9803      	ldr	r0, [sp, #12]
 800c238:	f7ff fa0d 	bl	800b656 <mbedtls_mpi_bitlen>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800c23c:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 800c240:	f080 80e2 	bcs.w	800c408 <mbedtls_mpi_exp_mod+0x248>
 800c244:	28ef      	cmp	r0, #239	; 0xef
 800c246:	f200 80e2 	bhi.w	800c40e <mbedtls_mpi_exp_mod+0x24e>
 800c24a:	284f      	cmp	r0, #79	; 0x4f
 800c24c:	f200 80e2 	bhi.w	800c414 <mbedtls_mpi_exp_mod+0x254>
 800c250:	2818      	cmp	r0, #24
 800c252:	bf34      	ite	cc
 800c254:	f04f 0b01 	movcc.w	fp, #1
 800c258:	f04f 0b03 	movcs.w	fp, #3
    j = N->n + 1;
 800c25c:	686b      	ldr	r3, [r5, #4]
 800c25e:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800c262:	4641      	mov	r1, r8
 800c264:	4630      	mov	r0, r6
 800c266:	f7ff f8ea 	bl	800b43e <mbedtls_mpi_grow>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2800      	cmp	r0, #0
 800c26e:	f040 8163 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800c272:	4641      	mov	r1, r8
 800c274:	a817      	add	r0, sp, #92	; 0x5c
 800c276:	f7ff f8e2 	bl	800b43e <mbedtls_mpi_grow>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f040 815b 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800c282:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800c286:	a80b      	add	r0, sp, #44	; 0x2c
 800c288:	f7ff f8d9 	bl	800b43e <mbedtls_mpi_grow>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2800      	cmp	r0, #0
 800c290:	f040 8152 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    neg = ( A->s == -1 );
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	9304      	str	r3, [sp, #16]
    if( neg )
 800c298:	3301      	adds	r3, #1
 800c29a:	d10a      	bne.n	800c2b2 <mbedtls_mpi_exp_mod+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800c29c:	4639      	mov	r1, r7
 800c29e:	a80e      	add	r0, sp, #56	; 0x38
 800c2a0:	f7ff f931 	bl	800b506 <mbedtls_mpi_copy>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f040 8146 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
        Apos.s = 1;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 800c2b0:	af0e      	add	r7, sp, #56	; 0x38
    if( _RR == NULL || _RR->p == NULL )
 800c2b2:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800c2b6:	b11b      	cbz	r3, 800c2c0 <mbedtls_mpi_exp_mod+0x100>
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f040 80ad 	bne.w	800c41a <mbedtls_mpi_exp_mod+0x25a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	a808      	add	r0, sp, #32
 800c2c4:	f7ff f980 	bl	800b5c8 <mbedtls_mpi_lset>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f040 8134 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800c2d0:	6869      	ldr	r1, [r5, #4]
 800c2d2:	a808      	add	r0, sp, #32
 800c2d4:	0189      	lsls	r1, r1, #6
 800c2d6:	f7ff fa51 	bl	800b77c <mbedtls_mpi_shift_l>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f040 812b 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800c2e2:	a908      	add	r1, sp, #32
 800c2e4:	462a      	mov	r2, r5
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	f7ff fef5 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f040 8122 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
        if( _RR != NULL )
 800c2f4:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800c2f8:	b13b      	cbz	r3, 800c30a <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800c2fa:	ab08      	add	r3, sp, #32
 800c2fc:	cb03      	ldmia	r3!, {r0, r1}
 800c2fe:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800c302:	6010      	str	r0, [r2, #0]
 800c304:	6818      	ldr	r0, [r3, #0]
 800c306:	6051      	str	r1, [r2, #4]
 800c308:	6090      	str	r0, [r2, #8]
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800c30a:	4629      	mov	r1, r5
 800c30c:	4638      	mov	r0, r7
 800c30e:	f7ff fb4d 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c312:	2800      	cmp	r0, #0
 800c314:	f2c0 808a 	blt.w	800c42c <mbedtls_mpi_exp_mod+0x26c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800c318:	462a      	mov	r2, r5
 800c31a:	4639      	mov	r1, r7
 800c31c:	a817      	add	r0, sp, #92	; 0x5c
 800c31e:	f7ff feda 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800c322:	4603      	mov	r3, r0
 800c324:	2800      	cmp	r0, #0
 800c326:	f040 8107 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    *mm = ~x + 1;
 800c32a:	4264      	negs	r4, r4
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800c32c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800c330:	4623      	mov	r3, r4
 800c332:	f8cd 9000 	str.w	r9, [sp]
 800c336:	462a      	mov	r2, r5
 800c338:	a908      	add	r1, sp, #32
 800c33a:	a817      	add	r0, sp, #92	; 0x5c
 800c33c:	f7ff fad2 	bl	800b8e4 <mpi_montmul>
 800c340:	4603      	mov	r3, r0
 800c342:	2800      	cmp	r0, #0
 800c344:	f040 80f8 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800c348:	a908      	add	r1, sp, #32
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7ff f8db 	bl	800b506 <mbedtls_mpi_copy>
 800c350:	4603      	mov	r3, r0
 800c352:	2800      	cmp	r0, #0
 800c354:	f040 80f0 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    mbedtls_mpi_uint z = 1;
 800c358:	ab07      	add	r3, sp, #28
 800c35a:	2701      	movs	r7, #1
    U.p = &z;
 800c35c:	9313      	str	r3, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800c35e:	f8cd 9000 	str.w	r9, [sp]
 800c362:	4623      	mov	r3, r4
 800c364:	462a      	mov	r2, r5
 800c366:	a911      	add	r1, sp, #68	; 0x44
 800c368:	4630      	mov	r0, r6
    mbedtls_mpi_uint z = 1;
 800c36a:	9707      	str	r7, [sp, #28]
    U.n = U.s = (int) z;
 800c36c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    return( mpi_montmul( A, &U, N, mm, T ) );
 800c370:	f7ff fab8 	bl	800b8e4 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800c374:	4603      	mov	r3, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	f040 80de 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    if( wsize > 1 )
 800c37c:	45bb      	cmp	fp, r7
 800c37e:	d15a      	bne.n	800c436 <mbedtls_mpi_exp_mod+0x276>
    nblimbs = E->n;
 800c380:	9b03      	ldr	r3, [sp, #12]
    state   = 0;
 800c382:	f04f 0900 	mov.w	r9, #0
    nblimbs = E->n;
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	9302      	str	r3, [sp, #8]
    nbits   = 0;
 800c38a:	46c8      	mov	r8, r9
    bufsize = 0;
 800c38c:	46ca      	mov	sl, r9
    wbits   = 0;
 800c38e:	464f      	mov	r7, r9
        if( bufsize == 0 )
 800c390:	f1ba 0f00 	cmp.w	sl, #0
 800c394:	f040 80b1 	bne.w	800c4fa <mbedtls_mpi_exp_mod+0x33a>
            if( nblimbs == 0 )
 800c398:	9b02      	ldr	r3, [sp, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f040 80a8 	bne.w	800c4f0 <mbedtls_mpi_exp_mod+0x330>
        if( ( wbits & ( one << wsize ) ) != 0 )
 800c3a0:	f04f 0a01 	mov.w	sl, #1
 800c3a4:	fa0a fa0b 	lsl.w	sl, sl, fp
 800c3a8:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 800c3ac:	9b02      	ldr	r3, [sp, #8]
 800c3ae:	4543      	cmp	r3, r8
 800c3b0:	f040 8113 	bne.w	800c5da <mbedtls_mpi_exp_mod+0x41a>
    mbedtls_mpi_uint z = 1;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	aa07      	add	r2, sp, #28
 800c3b8:	9307      	str	r3, [sp, #28]
    U.n = U.s = (int) z;
 800c3ba:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    U.p = &z;
 800c3be:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	f8cd 9000 	str.w	r9, [sp]
 800c3c6:	462a      	mov	r2, r5
 800c3c8:	a911      	add	r1, sp, #68	; 0x44
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7ff fa8a 	bl	800b8e4 <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	f040 80b0 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800c3d8:	9a04      	ldr	r2, [sp, #16]
 800c3da:	3201      	adds	r2, #1
 800c3dc:	f040 80ac 	bne.w	800c538 <mbedtls_mpi_exp_mod+0x378>
 800c3e0:	9a03      	ldr	r2, [sp, #12]
 800c3e2:	6852      	ldr	r2, [r2, #4]
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	f000 80a7 	beq.w	800c538 <mbedtls_mpi_exp_mod+0x378>
 800c3ea:	9a03      	ldr	r2, [sp, #12]
 800c3ec:	6892      	ldr	r2, [r2, #8]
 800c3ee:	6812      	ldr	r2, [r2, #0]
 800c3f0:	07d2      	lsls	r2, r2, #31
 800c3f2:	f140 80a1 	bpl.w	800c538 <mbedtls_mpi_exp_mod+0x378>
        X->s = -1;
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4630      	mov	r0, r6
 800c400:	f7ff fbcb 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800c404:	4603      	mov	r3, r0
cleanup:
 800c406:	e097      	b.n	800c538 <mbedtls_mpi_exp_mod+0x378>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800c408:	f04f 0b06 	mov.w	fp, #6
 800c40c:	e726      	b.n	800c25c <mbedtls_mpi_exp_mod+0x9c>
 800c40e:	f04f 0b05 	mov.w	fp, #5
 800c412:	e723      	b.n	800c25c <mbedtls_mpi_exp_mod+0x9c>
 800c414:	f04f 0b04 	mov.w	fp, #4
 800c418:	e720      	b.n	800c25c <mbedtls_mpi_exp_mod+0x9c>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800c41a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800c41e:	6810      	ldr	r0, [r2, #0]
 800c420:	6851      	ldr	r1, [r2, #4]
 800c422:	ab08      	add	r3, sp, #32
 800c424:	c303      	stmia	r3!, {r0, r1}
 800c426:	6890      	ldr	r0, [r2, #8]
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	e76e      	b.n	800c30a <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800c42c:	4639      	mov	r1, r7
 800c42e:	a817      	add	r0, sp, #92	; 0x5c
 800c430:	f7ff f869 	bl	800b506 <mbedtls_mpi_copy>
 800c434:	e775      	b.n	800c322 <mbedtls_mpi_exp_mod+0x162>
 800c436:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c43a:	9302      	str	r3, [sp, #8]
 800c43c:	fa07 f303 	lsl.w	r3, r7, r3
 800c440:	9305      	str	r3, [sp, #20]
 800c442:	9b02      	ldr	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800c444:	6869      	ldr	r1, [r5, #4]
 800c446:	270c      	movs	r7, #12
 800c448:	409f      	lsls	r7, r3
 800c44a:	ab14      	add	r3, sp, #80	; 0x50
 800c44c:	eb03 0807 	add.w	r8, r3, r7
 800c450:	3101      	adds	r1, #1
 800c452:	4640      	mov	r0, r8
 800c454:	f7fe fff3 	bl	800b43e <mbedtls_mpi_grow>
 800c458:	4603      	mov	r3, r0
 800c45a:	2800      	cmp	r0, #0
 800c45c:	d16c      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800c45e:	a917      	add	r1, sp, #92	; 0x5c
 800c460:	4640      	mov	r0, r8
 800c462:	f7ff f850 	bl	800b506 <mbedtls_mpi_copy>
 800c466:	4603      	mov	r3, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d165      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 800c46c:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800c46e:	4623      	mov	r3, r4
 800c470:	f8cd 9000 	str.w	r9, [sp]
 800c474:	462a      	mov	r2, r5
 800c476:	4641      	mov	r1, r8
 800c478:	4640      	mov	r0, r8
 800c47a:	f7ff fa33 	bl	800b8e4 <mpi_montmul>
 800c47e:	4603      	mov	r3, r0
 800c480:	2800      	cmp	r0, #0
 800c482:	d159      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
        for( i = 0; i < wsize - 1; i++ )
 800c484:	9b02      	ldr	r3, [sp, #8]
 800c486:	f10a 0a01 	add.w	sl, sl, #1
 800c48a:	4553      	cmp	r3, sl
 800c48c:	d8ef      	bhi.n	800c46e <mbedtls_mpi_exp_mod+0x2ae>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800c48e:	9b05      	ldr	r3, [sp, #20]
 800c490:	f103 0801 	add.w	r8, r3, #1
 800c494:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 800c498:	f04f 0901 	mov.w	r9, #1
 800c49c:	441f      	add	r7, r3
 800c49e:	fa09 f90b 	lsl.w	r9, r9, fp
 800c4a2:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800c4a6:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800c4aa:	45c1      	cmp	r9, r8
 800c4ac:	f67f af68 	bls.w	800c380 <mbedtls_mpi_exp_mod+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800c4b0:	6869      	ldr	r1, [r5, #4]
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	3101      	adds	r1, #1
 800c4b6:	f7fe ffc2 	bl	800b43e <mbedtls_mpi_grow>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d13b      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800c4c0:	f1a7 010c 	sub.w	r1, r7, #12
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7ff f81e 	bl	800b506 <mbedtls_mpi_copy>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	bba0      	cbnz	r0, 800c538 <mbedtls_mpi_exp_mod+0x378>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800c4ce:	4623      	mov	r3, r4
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f8cd a000 	str.w	sl, [sp]
 800c4d6:	462a      	mov	r2, r5
 800c4d8:	a917      	add	r1, sp, #92	; 0x5c
 800c4da:	f7ff fa03 	bl	800b8e4 <mpi_montmul>
 800c4de:	370c      	adds	r7, #12
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	bb48      	cbnz	r0, 800c538 <mbedtls_mpi_exp_mod+0x378>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800c4e4:	f108 0801 	add.w	r8, r8, #1
 800c4e8:	e7df      	b.n	800c4aa <mbedtls_mpi_exp_mod+0x2ea>
        state = 2;
 800c4ea:	f04f 0902 	mov.w	r9, #2
 800c4ee:	e74f      	b.n	800c390 <mbedtls_mpi_exp_mod+0x1d0>
            nblimbs--;
 800c4f0:	9b02      	ldr	r3, [sp, #8]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	9302      	str	r3, [sp, #8]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800c4f6:	f04f 0a20 	mov.w	sl, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800c4fa:	9b03      	ldr	r3, [sp, #12]
 800c4fc:	9a02      	ldr	r2, [sp, #8]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
 800c504:	f10a 3aff 	add.w	sl, sl, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800c508:	fa23 f30a 	lsr.w	r3, r3, sl
        if( ei == 0 && state == 0 )
 800c50c:	f013 0301 	ands.w	r3, r3, #1
 800c510:	d136      	bne.n	800c580 <mbedtls_mpi_exp_mod+0x3c0>
 800c512:	f1b9 0f00 	cmp.w	r9, #0
 800c516:	f43f af3b 	beq.w	800c390 <mbedtls_mpi_exp_mod+0x1d0>
        if( ei == 0 && state == 1 )
 800c51a:	f1b9 0f01 	cmp.w	r9, #1
 800c51e:	d12f      	bne.n	800c580 <mbedtls_mpi_exp_mod+0x3c0>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800c520:	ab0b      	add	r3, sp, #44	; 0x2c
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	462a      	mov	r2, r5
 800c526:	4623      	mov	r3, r4
 800c528:	4631      	mov	r1, r6
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff f9da 	bl	800b8e4 <mpi_montmul>
 800c530:	4603      	mov	r3, r0
 800c532:	2800      	cmp	r0, #0
 800c534:	f43f af2c 	beq.w	800c390 <mbedtls_mpi_exp_mod+0x1d0>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800c538:	2201      	movs	r2, #1
 800c53a:	f10b 34ff 	add.w	r4, fp, #4294967295
 800c53e:	fa02 f404 	lsl.w	r4, r2, r4
 800c542:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 800c546:	260c      	movs	r6, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800c548:	42a5      	cmp	r5, r4
 800c54a:	9302      	str	r3, [sp, #8]
 800c54c:	d864      	bhi.n	800c618 <mbedtls_mpi_exp_mod+0x458>
    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800c54e:	a817      	add	r0, sp, #92	; 0x5c
 800c550:	f7fe ff63 	bl	800b41a <mbedtls_mpi_free>
 800c554:	a80b      	add	r0, sp, #44	; 0x2c
 800c556:	f7fe ff60 	bl	800b41a <mbedtls_mpi_free>
 800c55a:	a80e      	add	r0, sp, #56	; 0x38
 800c55c:	f7fe ff5d 	bl	800b41a <mbedtls_mpi_free>
    if( _RR == NULL || _RR->p == NULL )
 800c560:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800c564:	9b02      	ldr	r3, [sp, #8]
 800c566:	b10a      	cbz	r2, 800c56c <mbedtls_mpi_exp_mod+0x3ac>
 800c568:	6892      	ldr	r2, [r2, #8]
 800c56a:	b922      	cbnz	r2, 800c576 <mbedtls_mpi_exp_mod+0x3b6>
        mbedtls_mpi_free( &RR );
 800c56c:	a808      	add	r0, sp, #32
 800c56e:	9302      	str	r3, [sp, #8]
 800c570:	f7fe ff53 	bl	800b41a <mbedtls_mpi_free>
 800c574:	9b02      	ldr	r3, [sp, #8]
}
 800c576:	4618      	mov	r0, r3
 800c578:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nbits++;
 800c580:	f108 0801 	add.w	r8, r8, #1
        wbits |= ( ei << ( wsize - nbits ) );
 800c584:	ebab 0208 	sub.w	r2, fp, r8
 800c588:	4093      	lsls	r3, r2
        if( nbits == wsize )
 800c58a:	45c3      	cmp	fp, r8
        wbits |= ( ei << ( wsize - nbits ) );
 800c58c:	ea47 0703 	orr.w	r7, r7, r3
        if( nbits == wsize )
 800c590:	d1ab      	bne.n	800c4ea <mbedtls_mpi_exp_mod+0x32a>
            for( i = 0; i < wsize; i++ )
 800c592:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800c596:	ab0b      	add	r3, sp, #44	; 0x2c
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	462a      	mov	r2, r5
 800c59c:	4623      	mov	r3, r4
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7ff f99f 	bl	800b8e4 <mpi_montmul>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1c5      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
            for( i = 0; i < wsize; i++ )
 800c5ac:	f108 0801 	add.w	r8, r8, #1
 800c5b0:	45c3      	cmp	fp, r8
 800c5b2:	d8f0      	bhi.n	800c596 <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800c5b4:	ab0b      	add	r3, sp, #44	; 0x2c
 800c5b6:	a814      	add	r0, sp, #80	; 0x50
 800c5b8:	210c      	movs	r1, #12
 800c5ba:	9300      	str	r3, [sp, #0]
 800c5bc:	fb01 0107 	mla	r1, r1, r7, r0
 800c5c0:	4623      	mov	r3, r4
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff f98d 	bl	800b8e4 <mpi_montmul>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1b3      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
            state--;
 800c5d0:	f04f 0901 	mov.w	r9, #1
            nbits = 0;
 800c5d4:	4607      	mov	r7, r0
            wbits = 0;
 800c5d6:	4680      	mov	r8, r0
 800c5d8:	e6da      	b.n	800c390 <mbedtls_mpi_exp_mod+0x1d0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800c5da:	4623      	mov	r3, r4
 800c5dc:	f8cd 9000 	str.w	r9, [sp]
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	4631      	mov	r1, r6
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f7ff f97d 	bl	800b8e4 <mpi_montmul>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d1a3      	bne.n	800c538 <mbedtls_mpi_exp_mod+0x378>
        wbits <<= 1;
 800c5f0:	007f      	lsls	r7, r7, #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 800c5f2:	ea1a 0f07 	tst.w	sl, r7
 800c5f6:	d103      	bne.n	800c600 <mbedtls_mpi_exp_mod+0x440>
    for( i = 0; i < nbits; i++ )
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	9302      	str	r3, [sp, #8]
 800c5fe:	e6d5      	b.n	800c3ac <mbedtls_mpi_exp_mod+0x1ec>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800c600:	4623      	mov	r3, r4
 800c602:	f8cd 9000 	str.w	r9, [sp]
 800c606:	462a      	mov	r2, r5
 800c608:	a917      	add	r1, sp, #92	; 0x5c
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff f96a 	bl	800b8e4 <mpi_montmul>
 800c610:	4603      	mov	r3, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d0f0      	beq.n	800c5f8 <mbedtls_mpi_exp_mod+0x438>
 800c616:	e78f      	b.n	800c538 <mbedtls_mpi_exp_mod+0x378>
        mbedtls_mpi_free( &W[i] );
 800c618:	ab14      	add	r3, sp, #80	; 0x50
 800c61a:	fb06 3004 	mla	r0, r6, r4, r3
 800c61e:	f7fe fefc 	bl	800b41a <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800c622:	3401      	adds	r4, #1
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	e78f      	b.n	800c548 <mbedtls_mpi_exp_mod+0x388>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800c628:	f06f 0303 	mvn.w	r3, #3
 800c62c:	e7a3      	b.n	800c576 <mbedtls_mpi_exp_mod+0x3b6>

0800c62e <mbedtls_mpi_gcd>:
{
 800c62e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c630:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	2601      	movs	r6, #1
{
 800c636:	4607      	mov	r7, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800c638:	a804      	add	r0, sp, #16
{
 800c63a:	4615      	mov	r5, r2
    X->n = 0;
 800c63c:	e9cd 6301 	strd	r6, r3, [sp, #4]
    X->s = 1;
 800c640:	e9cd 3603 	strd	r3, r6, [sp, #12]
    X->p = NULL;
 800c644:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 800c648:	e9cd 6307 	strd	r6, r3, [sp, #28]
    X->p = NULL;
 800c64c:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800c64e:	f7fe ff5a 	bl	800b506 <mbedtls_mpi_copy>
 800c652:	4604      	mov	r4, r0
 800c654:	2800      	cmp	r0, #0
 800c656:	d157      	bne.n	800c708 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800c658:	4629      	mov	r1, r5
 800c65a:	a807      	add	r0, sp, #28
 800c65c:	f7fe ff53 	bl	800b506 <mbedtls_mpi_copy>
 800c660:	4604      	mov	r4, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d150      	bne.n	800c708 <mbedtls_mpi_gcd+0xda>
    lz = mbedtls_mpi_lsb( &TA );
 800c666:	a804      	add	r0, sp, #16
 800c668:	f7fe ffda 	bl	800b620 <mbedtls_mpi_lsb>
 800c66c:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 800c66e:	a807      	add	r0, sp, #28
 800c670:	f7fe ffd6 	bl	800b620 <mbedtls_mpi_lsb>
 800c674:	4285      	cmp	r5, r0
 800c676:	bf28      	it	cs
 800c678:	4605      	movcs	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800c67a:	4629      	mov	r1, r5
 800c67c:	a804      	add	r0, sp, #16
 800c67e:	f7ff f8c5 	bl	800b80c <mbedtls_mpi_shift_r>
 800c682:	4604      	mov	r4, r0
 800c684:	2800      	cmp	r0, #0
 800c686:	d13f      	bne.n	800c708 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800c688:	4629      	mov	r1, r5
 800c68a:	a807      	add	r0, sp, #28
 800c68c:	f7ff f8be 	bl	800b80c <mbedtls_mpi_shift_r>
 800c690:	4604      	mov	r4, r0
 800c692:	2800      	cmp	r0, #0
 800c694:	d138      	bne.n	800c708 <mbedtls_mpi_gcd+0xda>
    TA.s = TB.s = 1;
 800c696:	9607      	str	r6, [sp, #28]
 800c698:	9604      	str	r6, [sp, #16]
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800c69a:	2100      	movs	r1, #0
 800c69c:	a804      	add	r0, sp, #16
 800c69e:	f7ff f9c5 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c6a2:	b958      	cbnz	r0, 800c6bc <mbedtls_mpi_gcd+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	a807      	add	r0, sp, #28
 800c6a8:	f7ff f868 	bl	800b77c <mbedtls_mpi_shift_l>
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	bb58      	cbnz	r0, 800c708 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800c6b0:	a907      	add	r1, sp, #28
 800c6b2:	4638      	mov	r0, r7
 800c6b4:	f7fe ff27 	bl	800b506 <mbedtls_mpi_copy>
 800c6b8:	4604      	mov	r4, r0
cleanup:
 800c6ba:	e025      	b.n	800c708 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800c6bc:	a804      	add	r0, sp, #16
 800c6be:	f7fe ffaf 	bl	800b620 <mbedtls_mpi_lsb>
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	a804      	add	r0, sp, #16
 800c6c6:	f7ff f8a1 	bl	800b80c <mbedtls_mpi_shift_r>
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	b9e0      	cbnz	r0, 800c708 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800c6ce:	a807      	add	r0, sp, #28
 800c6d0:	f7fe ffa6 	bl	800b620 <mbedtls_mpi_lsb>
 800c6d4:	4601      	mov	r1, r0
 800c6d6:	a807      	add	r0, sp, #28
 800c6d8:	f7ff f898 	bl	800b80c <mbedtls_mpi_shift_r>
 800c6dc:	4604      	mov	r4, r0
 800c6de:	b998      	cbnz	r0, 800c708 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800c6e0:	a907      	add	r1, sp, #28
 800c6e2:	a804      	add	r0, sp, #16
 800c6e4:	f7ff f962 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	db19      	blt.n	800c720 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800c6ec:	a904      	add	r1, sp, #16
 800c6ee:	aa07      	add	r2, sp, #28
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	f7ff fa14 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	b930      	cbnz	r0, 800c708 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800c6fe:	f7ff f885 	bl	800b80c <mbedtls_mpi_shift_r>
 800c702:	4604      	mov	r4, r0
 800c704:	2800      	cmp	r0, #0
 800c706:	d0c8      	beq.n	800c69a <mbedtls_mpi_gcd+0x6c>
    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800c708:	a801      	add	r0, sp, #4
 800c70a:	f7fe fe86 	bl	800b41a <mbedtls_mpi_free>
 800c70e:	a804      	add	r0, sp, #16
 800c710:	f7fe fe83 	bl	800b41a <mbedtls_mpi_free>
 800c714:	a807      	add	r0, sp, #28
 800c716:	f7fe fe80 	bl	800b41a <mbedtls_mpi_free>
}
 800c71a:	4620      	mov	r0, r4
 800c71c:	b00b      	add	sp, #44	; 0x2c
 800c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800c720:	a907      	add	r1, sp, #28
 800c722:	aa04      	add	r2, sp, #16
 800c724:	4608      	mov	r0, r1
 800c726:	f7ff f9fa 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800c72a:	4604      	mov	r4, r0
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d1eb      	bne.n	800c708 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800c730:	2101      	movs	r1, #1
 800c732:	a807      	add	r0, sp, #28
 800c734:	e7e3      	b.n	800c6fe <mbedtls_mpi_gcd+0xd0>

0800c736 <mbedtls_mpi_fill_random>:
{
 800c736:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t const limbs = CHARS_TO_LIMBS( size );
 800c73a:	f011 0403 	ands.w	r4, r1, #3
 800c73e:	bf18      	it	ne
 800c740:	2401      	movne	r4, #1
{
 800c742:	4699      	mov	r9, r3
    if( X->n != limbs )
 800c744:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
 800c746:	eb04 0491 	add.w	r4, r4, r1, lsr #2
    if( X->n != limbs )
 800c74a:	42a3      	cmp	r3, r4
{
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	4690      	mov	r8, r2
    if( X->n != limbs )
 800c752:	d108      	bne.n	800c766 <mbedtls_mpi_fill_random+0x30>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800c754:	2100      	movs	r1, #0
 800c756:	4630      	mov	r0, r6
 800c758:	f7fe ff36 	bl	800b5c8 <mbedtls_mpi_lset>
 800c75c:	4605      	mov	r5, r0
 800c75e:	b188      	cbz	r0, 800c784 <mbedtls_mpi_fill_random+0x4e>
}
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_free( X );
 800c766:	f7fe fe58 	bl	800b41a <mbedtls_mpi_free>
    X->n = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	2201      	movs	r2, #1
 800c76e:	e9c6 2300 	strd	r2, r3, [r6]
    X->p = NULL;
 800c772:	60b3      	str	r3, [r6, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800c774:	4621      	mov	r1, r4
 800c776:	4630      	mov	r0, r6
 800c778:	f7fe fe61 	bl	800b43e <mbedtls_mpi_grow>
 800c77c:	4605      	mov	r5, r0
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0e8      	beq.n	800c754 <mbedtls_mpi_fill_random+0x1e>
 800c782:	e7ed      	b.n	800c760 <mbedtls_mpi_fill_random+0x2a>
    f_rng( p_rng, Xp + overhead, size );
 800c784:	68b1      	ldr	r1, [r6, #8]
    size_t const overhead = ( limbs * ciL ) - size;
 800c786:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
    f_rng( p_rng, Xp + overhead, size );
 800c78a:	463a      	mov	r2, r7
 800c78c:	4419      	add	r1, r3
 800c78e:	4648      	mov	r0, r9
 800c790:	47c0      	blx	r8
    if( limbs == 0 )
 800c792:	2c00      	cmp	r4, #0
 800c794:	d0e4      	beq.n	800c760 <mbedtls_mpi_fill_random+0x2a>
 800c796:	4621      	mov	r1, r4
 800c798:	68b0      	ldr	r0, [r6, #8]
 800c79a:	f7fe fe06 	bl	800b3aa <mpi_bigendian_to_host.part.1>
    return( ret );
 800c79e:	e7df      	b.n	800c760 <mbedtls_mpi_fill_random+0x2a>

0800c7a0 <mpi_miller_rabin>:
 * Miller-Rabin pseudo-primality test  (HAC 4.24)
 */
static int mpi_miller_rabin( const mbedtls_mpi *X, size_t rounds,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	b095      	sub	sp, #84	; 0x54
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	4689      	mov	r9, r1
 800c7aa:	4692      	mov	sl, r2

    /*
     * W = |X| - 1
     * R = W >> lsb( W )
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 800c7ac:	4601      	mov	r1, r0
    X->n = 0;
 800c7ae:	2201      	movs	r2, #1
{
 800c7b0:	469b      	mov	fp, r3
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 800c7b2:	a805      	add	r0, sp, #20
    X->n = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    X->s = 1;
 800c7ba:	e9cd 3207 	strd	r3, r2, [sp, #28]
    X->p = NULL;
 800c7be:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    X->n = 0;
 800c7c2:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    X->s = 1;
 800c7c6:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
    X->p = NULL;
 800c7ca:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    X->n = 0;
 800c7ce:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
    X->p = NULL;
 800c7d2:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
 800c7d4:	f7ff fa3c 	bl	800bc50 <mbedtls_mpi_sub_int>
 800c7d8:	4604      	mov	r4, r0
 800c7da:	b990      	cbnz	r0, 800c802 <mpi_miller_rabin+0x62>
    s = mbedtls_mpi_lsb( &W );
 800c7dc:	a805      	add	r0, sp, #20
 800c7de:	f7fe ff1f 	bl	800b620 <mbedtls_mpi_lsb>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 800c7e2:	a905      	add	r1, sp, #20
    s = mbedtls_mpi_lsb( &W );
 800c7e4:	4680      	mov	r8, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
 800c7e6:	a808      	add	r0, sp, #32
 800c7e8:	f7fe fe8d 	bl	800b506 <mbedtls_mpi_copy>
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	b940      	cbnz	r0, 800c802 <mpi_miller_rabin+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
 800c7f0:	4641      	mov	r1, r8
 800c7f2:	a808      	add	r0, sp, #32
 800c7f4:	f7ff f80a 	bl	800b80c <mbedtls_mpi_shift_r>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	b910      	cbnz	r0, 800c802 <mpi_miller_rabin+0x62>

    i = mbedtls_mpi_bitlen( X );

    for( i = 0; i < rounds; i++ )
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	454e      	cmp	r6, r9
 800c800:	d112      	bne.n	800c828 <mpi_miller_rabin+0x88>
            break;
        }
    }

cleanup:
    mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R );
 800c802:	a805      	add	r0, sp, #20
 800c804:	f7fe fe09 	bl	800b41a <mbedtls_mpi_free>
 800c808:	a808      	add	r0, sp, #32
 800c80a:	f7fe fe06 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
 800c80e:	a80b      	add	r0, sp, #44	; 0x2c
 800c810:	f7fe fe03 	bl	800b41a <mbedtls_mpi_free>
 800c814:	a80e      	add	r0, sp, #56	; 0x38
 800c816:	f7fe fe00 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &RR );
 800c81a:	a811      	add	r0, sp, #68	; 0x44
 800c81c:	f7fe fdfd 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 800c820:	4620      	mov	r0, r4
 800c822:	b015      	add	sp, #84	; 0x54
 800c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	2720      	movs	r7, #32
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
 800c82a:	6869      	ldr	r1, [r5, #4]
 800c82c:	465b      	mov	r3, fp
 800c82e:	4652      	mov	r2, sl
 800c830:	0089      	lsls	r1, r1, #2
 800c832:	a80e      	add	r0, sp, #56	; 0x38
 800c834:	f7ff ff7f 	bl	800c736 <mbedtls_mpi_fill_random>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d16d      	bne.n	800c918 <mpi_miller_rabin+0x178>
            j = mbedtls_mpi_bitlen( &A );
 800c83c:	a80e      	add	r0, sp, #56	; 0x38
 800c83e:	f7fe ff0a 	bl	800b656 <mbedtls_mpi_bitlen>
 800c842:	9003      	str	r0, [sp, #12]
            k = mbedtls_mpi_bitlen( &W );
 800c844:	a805      	add	r0, sp, #20
 800c846:	f7fe ff06 	bl	800b656 <mbedtls_mpi_bitlen>
            if (j > k) {
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	4283      	cmp	r3, r0
 800c84e:	d914      	bls.n	800c87a <mpi_miller_rabin+0xda>
                A.p[A.n - 1] &= ( (mbedtls_mpi_uint) 1 << ( k - ( A.n - 1 ) * biL - 1 ) ) - 1;
 800c850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c854:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 800c858:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c85c:	3b01      	subs	r3, #1
 800c85e:	3901      	subs	r1, #1
 800c860:	ea6f 1343 	mvn.w	r3, r3, lsl #5
 800c864:	4418      	add	r0, r3
 800c866:	f04f 33ff 	mov.w	r3, #4294967295
 800c86a:	fa03 f000 	lsl.w	r0, r3, r0
 800c86e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c872:	ea23 0000 	bic.w	r0, r3, r0
 800c876:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
            if (count++ > 30) {
 800c87a:	3f01      	subs	r7, #1
 800c87c:	d04e      	beq.n	800c91c <mpi_miller_rabin+0x17c>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 800c87e:	a905      	add	r1, sp, #20
 800c880:	a80e      	add	r0, sp, #56	; 0x38
 800c882:	f7ff f893 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
                  mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
 800c886:	2800      	cmp	r0, #0
 800c888:	dacf      	bge.n	800c82a <mpi_miller_rabin+0x8a>
 800c88a:	2101      	movs	r1, #1
 800c88c:	a80e      	add	r0, sp, #56	; 0x38
 800c88e:	f7ff f8cd 	bl	800ba2c <mbedtls_mpi_cmp_int>
        } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
 800c892:	2800      	cmp	r0, #0
 800c894:	ddc9      	ble.n	800c82a <mpi_miller_rabin+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
 800c896:	ab11      	add	r3, sp, #68	; 0x44
 800c898:	a90e      	add	r1, sp, #56	; 0x38
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	aa08      	add	r2, sp, #32
 800c89e:	462b      	mov	r3, r5
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	f7ff fc8d 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d136      	bne.n	800c918 <mpi_miller_rabin+0x178>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 800c8aa:	a905      	add	r1, sp, #20
 800c8ac:	a80e      	add	r0, sp, #56	; 0x38
 800c8ae:	f7ff f87d 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c8b2:	b908      	cbnz	r0, 800c8b8 <mpi_miller_rabin+0x118>
    for( i = 0; i < rounds; i++ )
 800c8b4:	3601      	adds	r6, #1
 800c8b6:	e7a2      	b.n	800c7fe <mpi_miller_rabin+0x5e>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	a80e      	add	r0, sp, #56	; 0x38
 800c8bc:	f7ff f8b6 	bl	800ba2c <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d0f7      	beq.n	800c8b4 <mpi_miller_rabin+0x114>
        j = 1;
 800c8c4:	2701      	movs	r7, #1
 800c8c6:	a905      	add	r1, sp, #20
 800c8c8:	a80e      	add	r0, sp, #56	; 0x38
 800c8ca:	f7ff f86f 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
 800c8ce:	4547      	cmp	r7, r8
 800c8d0:	d211      	bcs.n	800c8f6 <mpi_miller_rabin+0x156>
 800c8d2:	b180      	cbz	r0, 800c8f6 <mpi_miller_rabin+0x156>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
 800c8d4:	aa0e      	add	r2, sp, #56	; 0x38
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	a80b      	add	r0, sp, #44	; 0x2c
 800c8da:	f7ff f9cf 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800c8de:	b9d8      	cbnz	r0, 800c918 <mpi_miller_rabin+0x178>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	a90b      	add	r1, sp, #44	; 0x2c
 800c8e4:	a80e      	add	r0, sp, #56	; 0x38
 800c8e6:	f7ff fbf6 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800c8ea:	b9a8      	cbnz	r0, 800c918 <mpi_miller_rabin+0x178>
            if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	a80e      	add	r0, sp, #56	; 0x38
 800c8f0:	f7ff f89c 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c8f4:	b938      	cbnz	r0, 800c906 <mpi_miller_rabin+0x166>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 800c8f6:	a905      	add	r1, sp, #20
 800c8f8:	a80e      	add	r0, sp, #56	; 0x38
 800c8fa:	f7ff f857 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800c8fe:	b120      	cbz	r0, 800c90a <mpi_miller_rabin+0x16a>
            ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800c900:	f06f 040d 	mvn.w	r4, #13
 800c904:	e77d      	b.n	800c802 <mpi_miller_rabin+0x62>
            j++;
 800c906:	3701      	adds	r7, #1
 800c908:	e7dd      	b.n	800c8c6 <mpi_miller_rabin+0x126>
            mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
 800c90a:	2101      	movs	r1, #1
 800c90c:	a80e      	add	r0, sp, #56	; 0x38
 800c90e:	f7ff f88d 	bl	800ba2c <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
 800c912:	2800      	cmp	r0, #0
 800c914:	d1ce      	bne.n	800c8b4 <mpi_miller_rabin+0x114>
 800c916:	e7f3      	b.n	800c900 <mpi_miller_rabin+0x160>
cleanup:
 800c918:	4604      	mov	r4, r0
 800c91a:	e772      	b.n	800c802 <mpi_miller_rabin+0x62>
                return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800c91c:	f06f 040d 	mvn.w	r4, #13
 800c920:	e77e      	b.n	800c820 <mpi_miller_rabin+0x80>

0800c922 <mbedtls_mpi_inv_mod>:
{
 800c922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c926:	4680      	mov	r8, r0
 800c928:	b09c      	sub	sp, #112	; 0x70
 800c92a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800c92c:	4610      	mov	r0, r2
 800c92e:	2101      	movs	r1, #1
{
 800c930:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800c932:	f7ff f87b 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c936:	2800      	cmp	r0, #0
 800c938:	f340 8143 	ble.w	800cbc2 <mbedtls_mpi_inv_mod+0x2a0>
    X->n = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	2501      	movs	r5, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800c940:	4632      	mov	r2, r6
 800c942:	4639      	mov	r1, r7
 800c944:	a801      	add	r0, sp, #4
    X->n = 0;
 800c946:	e9cd 5304 	strd	r5, r3, [sp, #16]
    X->s = 1;
 800c94a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    X->p = NULL;
 800c94e:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 800c952:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
    X->s = 1;
 800c956:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
    X->p = NULL;
 800c95a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 800c95e:	e9cd 5301 	strd	r5, r3, [sp, #4]
    X->p = NULL;
 800c962:	9303      	str	r3, [sp, #12]
    X->n = 0;
 800c964:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
    X->s = 1;
 800c968:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
    X->p = NULL;
 800c96c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 800c970:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
    X->s = 1;
 800c974:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
    X->p = NULL;
 800c978:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800c97c:	f7ff fe57 	bl	800c62e <mbedtls_mpi_gcd>
 800c980:	4604      	mov	r4, r0
 800c982:	2800      	cmp	r0, #0
 800c984:	d154      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800c986:	4629      	mov	r1, r5
 800c988:	a801      	add	r0, sp, #4
 800c98a:	f7ff f84f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f040 8114 	bne.w	800cbbc <mbedtls_mpi_inv_mod+0x29a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800c994:	4632      	mov	r2, r6
 800c996:	4639      	mov	r1, r7
 800c998:	a804      	add	r0, sp, #16
 800c99a:	f7ff fb9c 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d145      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800c9a4:	a904      	add	r1, sp, #16
 800c9a6:	a807      	add	r0, sp, #28
 800c9a8:	f7fe fdad 	bl	800b506 <mbedtls_mpi_copy>
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d13e      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	a810      	add	r0, sp, #64	; 0x40
 800c9b6:	f7fe fda6 	bl	800b506 <mbedtls_mpi_copy>
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d137      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	a813      	add	r0, sp, #76	; 0x4c
 800c9c4:	f7fe fd9f 	bl	800b506 <mbedtls_mpi_copy>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d130      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	a80a      	add	r0, sp, #40	; 0x28
 800c9d2:	f7fe fdf9 	bl	800b5c8 <mbedtls_mpi_lset>
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	bb50      	cbnz	r0, 800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800c9da:	4601      	mov	r1, r0
 800c9dc:	a80d      	add	r0, sp, #52	; 0x34
 800c9de:	f7fe fdf3 	bl	800b5c8 <mbedtls_mpi_lset>
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	bb20      	cbnz	r0, 800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	a816      	add	r0, sp, #88	; 0x58
 800c9ea:	f7fe fded 	bl	800b5c8 <mbedtls_mpi_lset>
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	b9f0      	cbnz	r0, 800ca30 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	a819      	add	r0, sp, #100	; 0x64
 800c9f6:	f7fe fde7 	bl	800b5c8 <mbedtls_mpi_lset>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	b9c0      	cbnz	r0, 800ca30 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TU.p[0] & 1 ) == 0 )
 800c9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	07d8      	lsls	r0, r3, #31
 800ca04:	d466      	bmi.n	800cad4 <mbedtls_mpi_inv_mod+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800ca06:	2101      	movs	r1, #1
 800ca08:	a807      	add	r0, sp, #28
 800ca0a:	f7fe feff 	bl	800b80c <mbedtls_mpi_shift_r>
 800ca0e:	4604      	mov	r4, r0
 800ca10:	b970      	cbnz	r0, 800ca30 <mbedtls_mpi_inv_mod+0x10e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800ca12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	07dd      	lsls	r5, r3, #31
 800ca18:	d429      	bmi.n	800ca6e <mbedtls_mpi_inv_mod+0x14c>
 800ca1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	07dc      	lsls	r4, r3, #31
 800ca20:	d425      	bmi.n	800ca6e <mbedtls_mpi_inv_mod+0x14c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800ca22:	2101      	movs	r1, #1
 800ca24:	a80a      	add	r0, sp, #40	; 0x28
 800ca26:	f7fe fef1 	bl	800b80c <mbedtls_mpi_shift_r>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d02f      	beq.n	800ca90 <mbedtls_mpi_inv_mod+0x16e>
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800ca30:	a804      	add	r0, sp, #16
 800ca32:	f7fe fcf2 	bl	800b41a <mbedtls_mpi_free>
 800ca36:	a807      	add	r0, sp, #28
 800ca38:	f7fe fcef 	bl	800b41a <mbedtls_mpi_free>
 800ca3c:	a80a      	add	r0, sp, #40	; 0x28
 800ca3e:	f7fe fcec 	bl	800b41a <mbedtls_mpi_free>
 800ca42:	a80d      	add	r0, sp, #52	; 0x34
 800ca44:	f7fe fce9 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800ca48:	a801      	add	r0, sp, #4
 800ca4a:	f7fe fce6 	bl	800b41a <mbedtls_mpi_free>
 800ca4e:	a810      	add	r0, sp, #64	; 0x40
 800ca50:	f7fe fce3 	bl	800b41a <mbedtls_mpi_free>
 800ca54:	a813      	add	r0, sp, #76	; 0x4c
 800ca56:	f7fe fce0 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800ca5a:	a816      	add	r0, sp, #88	; 0x58
 800ca5c:	f7fe fcdd 	bl	800b41a <mbedtls_mpi_free>
 800ca60:	a819      	add	r0, sp, #100	; 0x64
 800ca62:	f7fe fcda 	bl	800b41a <mbedtls_mpi_free>
}
 800ca66:	4620      	mov	r0, r4
 800ca68:	b01c      	add	sp, #112	; 0x70
 800ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800ca6e:	a90a      	add	r1, sp, #40	; 0x28
 800ca70:	aa10      	add	r2, sp, #64	; 0x40
 800ca72:	4608      	mov	r0, r1
 800ca74:	f7ff f891 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800ca78:	4604      	mov	r4, r0
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d1d8      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800ca7e:	a90d      	add	r1, sp, #52	; 0x34
 800ca80:	aa04      	add	r2, sp, #16
 800ca82:	4608      	mov	r0, r1
 800ca84:	f7ff f8ab 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800ca88:	4604      	mov	r4, r0
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d0c9      	beq.n	800ca22 <mbedtls_mpi_inv_mod+0x100>
 800ca8e:	e7cf      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800ca90:	2101      	movs	r1, #1
 800ca92:	a80d      	add	r0, sp, #52	; 0x34
 800ca94:	f7fe feba 	bl	800b80c <mbedtls_mpi_shift_r>
 800ca98:	e7af      	b.n	800c9fa <mbedtls_mpi_inv_mod+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	a813      	add	r0, sp, #76	; 0x4c
 800ca9e:	f7fe feb5 	bl	800b80c <mbedtls_mpi_shift_r>
 800caa2:	4604      	mov	r4, r0
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d1c3      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800caa8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	07d9      	lsls	r1, r3, #31
 800caae:	d44c      	bmi.n	800cb4a <mbedtls_mpi_inv_mod+0x228>
 800cab0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	07da      	lsls	r2, r3, #31
 800cab6:	d448      	bmi.n	800cb4a <mbedtls_mpi_inv_mod+0x228>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800cab8:	2101      	movs	r1, #1
 800caba:	a816      	add	r0, sp, #88	; 0x58
 800cabc:	f7fe fea6 	bl	800b80c <mbedtls_mpi_shift_r>
 800cac0:	4604      	mov	r4, r0
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d1b4      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800cac6:	2101      	movs	r1, #1
 800cac8:	a819      	add	r0, sp, #100	; 0x64
 800caca:	f7fe fe9f 	bl	800b80c <mbedtls_mpi_shift_r>
 800cace:	4604      	mov	r4, r0
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d1ad      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
        while( ( TV.p[0] & 1 ) == 0 )
 800cad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	07db      	lsls	r3, r3, #31
 800cada:	d5de      	bpl.n	800ca9a <mbedtls_mpi_inv_mod+0x178>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800cadc:	a913      	add	r1, sp, #76	; 0x4c
 800cade:	a807      	add	r0, sp, #28
 800cae0:	f7fe ff64 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	db42      	blt.n	800cb6e <mbedtls_mpi_inv_mod+0x24c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800cae8:	a907      	add	r1, sp, #28
 800caea:	aa13      	add	r2, sp, #76	; 0x4c
 800caec:	4608      	mov	r0, r1
 800caee:	f7ff f876 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800caf2:	4604      	mov	r4, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d19b      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800caf8:	a90a      	add	r1, sp, #40	; 0x28
 800cafa:	aa16      	add	r2, sp, #88	; 0x58
 800cafc:	4608      	mov	r0, r1
 800cafe:	f7ff f86e 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cb02:	4604      	mov	r4, r0
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d193      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800cb08:	aa19      	add	r2, sp, #100	; 0x64
 800cb0a:	a90d      	add	r1, sp, #52	; 0x34
 800cb0c:	4608      	mov	r0, r1
 800cb0e:	f7ff f866 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cb12:	4604      	mov	r4, r0
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d18b      	bne.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800cb18:	2100      	movs	r1, #0
 800cb1a:	a807      	add	r0, sp, #28
 800cb1c:	f7fe ff86 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	f47f af6c 	bne.w	800c9fe <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800cb26:	2100      	movs	r1, #0
 800cb28:	a816      	add	r0, sp, #88	; 0x58
 800cb2a:	f7fe ff7f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	db32      	blt.n	800cb98 <mbedtls_mpi_inv_mod+0x276>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800cb32:	4631      	mov	r1, r6
 800cb34:	a816      	add	r0, sp, #88	; 0x58
 800cb36:	f7fe ff39 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	da35      	bge.n	800cbaa <mbedtls_mpi_inv_mod+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800cb3e:	a916      	add	r1, sp, #88	; 0x58
 800cb40:	4640      	mov	r0, r8
 800cb42:	f7fe fce0 	bl	800b506 <mbedtls_mpi_copy>
 800cb46:	4604      	mov	r4, r0
cleanup:
 800cb48:	e772      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800cb4a:	a916      	add	r1, sp, #88	; 0x58
 800cb4c:	aa10      	add	r2, sp, #64	; 0x40
 800cb4e:	4608      	mov	r0, r1
 800cb50:	f7ff f823 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800cb54:	4604      	mov	r4, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f47f af6a 	bne.w	800ca30 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800cb5c:	a919      	add	r1, sp, #100	; 0x64
 800cb5e:	aa04      	add	r2, sp, #16
 800cb60:	4608      	mov	r0, r1
 800cb62:	f7ff f83c 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cb66:	4604      	mov	r4, r0
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d0a5      	beq.n	800cab8 <mbedtls_mpi_inv_mod+0x196>
 800cb6c:	e760      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800cb6e:	a913      	add	r1, sp, #76	; 0x4c
 800cb70:	aa07      	add	r2, sp, #28
 800cb72:	4608      	mov	r0, r1
 800cb74:	f7ff f833 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	f47f af58 	bne.w	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800cb80:	a916      	add	r1, sp, #88	; 0x58
 800cb82:	aa0a      	add	r2, sp, #40	; 0x28
 800cb84:	4608      	mov	r0, r1
 800cb86:	f7ff f82a 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	f47f af4f 	bne.w	800ca30 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800cb92:	aa0d      	add	r2, sp, #52	; 0x34
 800cb94:	a919      	add	r1, sp, #100	; 0x64
 800cb96:	e7b9      	b.n	800cb0c <mbedtls_mpi_inv_mod+0x1ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800cb98:	a916      	add	r1, sp, #88	; 0x58
 800cb9a:	4632      	mov	r2, r6
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	f7fe fffc 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800cba2:	4604      	mov	r4, r0
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0be      	beq.n	800cb26 <mbedtls_mpi_inv_mod+0x204>
cleanup:
 800cba8:	e742      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800cbaa:	a916      	add	r1, sp, #88	; 0x58
 800cbac:	4632      	mov	r2, r6
 800cbae:	4608      	mov	r0, r1
 800cbb0:	f7ff f815 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0bb      	beq.n	800cb32 <mbedtls_mpi_inv_mod+0x210>
cleanup:
 800cbba:	e739      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800cbbc:	f06f 040d 	mvn.w	r4, #13
 800cbc0:	e736      	b.n	800ca30 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800cbc2:	f06f 0403 	mvn.w	r4, #3
 800cbc6:	e74e      	b.n	800ca66 <mbedtls_mpi_inv_mod+0x144>

0800cbc8 <mbedtls_mpi_is_prime_ext>:
 * Pseudo-primality test: small factors, then Miller-Rabin
 */
int mbedtls_mpi_is_prime_ext( const mbedtls_mpi *X, int rounds,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 800cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	461f      	mov	r7, r3
    mbedtls_mpi XX;
    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    XX.s = 1;
    XX.n = X->n;
 800cbce:	6843      	ldr	r3, [r0, #4]
 800cbd0:	9302      	str	r3, [sp, #8]
{
 800cbd2:	460d      	mov	r5, r1
    XX.p = X->p;
 800cbd4:	6883      	ldr	r3, [r0, #8]
 800cbd6:	9303      	str	r3, [sp, #12]
    XX.s = 1;
 800cbd8:	2401      	movs	r4, #1

    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 800cbda:	2100      	movs	r1, #0
 800cbdc:	a801      	add	r0, sp, #4
{
 800cbde:	4616      	mov	r6, r2
    XX.s = 1;
 800cbe0:	9401      	str	r4, [sp, #4]
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 800cbe2:	f7fe ff23 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800cbe6:	b1c8      	cbz	r0, 800cc1c <mbedtls_mpi_is_prime_ext+0x54>
        mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )
 800cbe8:	4621      	mov	r1, r4
 800cbea:	a801      	add	r0, sp, #4
 800cbec:	f7fe ff1e 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
 800cbf0:	b1a0      	cbz	r0, 800cc1c <mbedtls_mpi_is_prime_ext+0x54>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );

    if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
 800cbf2:	2102      	movs	r1, #2
 800cbf4:	a801      	add	r0, sp, #4
 800cbf6:	f7fe ff19 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800cbfa:	b128      	cbz	r0, 800cc08 <mbedtls_mpi_is_prime_ext+0x40>
        return( 0 );

    if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
 800cbfc:	a801      	add	r0, sp, #4
 800cbfe:	f7ff fab9 	bl	800c174 <mpi_check_small_factors>
 800cc02:	b120      	cbz	r0, 800cc0e <mbedtls_mpi_is_prime_ext+0x46>
    {
        if( ret == 1 )
 800cc04:	42a0      	cmp	r0, r4
 800cc06:	d100      	bne.n	800cc0a <mbedtls_mpi_is_prime_ext+0x42>
            return( 0 );
 800cc08:	2000      	movs	r0, #0

        return( ret );
    }

    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
}
 800cc0a:	b005      	add	sp, #20
 800cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( mpi_miller_rabin( &XX, rounds, f_rng, p_rng ) );
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4632      	mov	r2, r6
 800cc12:	4629      	mov	r1, r5
 800cc14:	a801      	add	r0, sp, #4
 800cc16:	f7ff fdc3 	bl	800c7a0 <mpi_miller_rabin>
 800cc1a:	e7f6      	b.n	800cc0a <mbedtls_mpi_is_prime_ext+0x42>
        return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
 800cc1c:	f06f 000d 	mvn.w	r0, #13
 800cc20:	e7f3      	b.n	800cc0a <mbedtls_mpi_is_prime_ext+0x42>
	...

0800cc24 <camellia_feistel>:

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 800cc24:	680b      	ldr	r3, [r1, #0]
    I1 = x[1] ^ k[1];
 800cc26:	6849      	ldr	r1, [r1, #4]
{
 800cc28:	b570      	push	{r4, r5, r6, lr}
    I0 = x[0] ^ k[0];
 800cc2a:	6804      	ldr	r4, [r0, #0]
    I1 = x[1] ^ k[1];
 800cc2c:	6840      	ldr	r0, [r0, #4]
    I0 = x[0] ^ k[0];
 800cc2e:	4063      	eors	r3, r4
    I1 = x[1] ^ k[1];
 800cc30:	4048      	eors	r0, r1

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 800cc32:	4c1e      	ldr	r4, [pc, #120]	; (800ccac <camellia_feistel+0x88>)
 800cc34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cc38:	5c65      	ldrb	r5, [r4, r1]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 800cc3a:	eb04 6113 	add.w	r1, r4, r3, lsr #24
 800cc3e:	f891 6100 	ldrb.w	r6, [r1, #256]	; 0x100
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 800cc42:	fa54 f183 	uxtab	r1, r4, r3
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 800cc46:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800cc4a:	4423      	add	r3, r4
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 800cc4c:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 800cc50:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 800cc54:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800cc58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 800cc5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cc60:	4423      	add	r3, r4
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 800cc62:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 800cc66:	f893 5200 	ldrb.w	r5, [r3, #512]	; 0x200
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 800cc6a:	eb04 6310 	add.w	r3, r4, r0, lsr #24
 800cc6e:	f893 6300 	ldrb.w	r6, [r3, #768]	; 0x300
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 800cc72:	fa54 f380 	uxtab	r3, r4, r0
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 800cc76:	f3c0 4007 	ubfx	r0, r0, #16, #8
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 800cc7a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 800cc7e:	5c20      	ldrb	r0, [r4, r0]
 800cc80:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800cc84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 800cc88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    I0 ^= (I1 << 8) | (I1 >> 24);
 800cc8c:	ea81 6133 	eor.w	r1, r1, r3, ror #24
    I1 ^= (I0 << 16) | (I0 >> 16);
    I0 ^= (I1 >> 8) | (I1 << 24);
    I1 ^= (I0 >> 8) | (I0 << 24);

    z[0] ^= I1;
 800cc90:	6810      	ldr	r0, [r2, #0]
    I1 ^= (I0 << 16) | (I0 >> 16);
 800cc92:	ea83 4331 	eor.w	r3, r3, r1, ror #16
    I0 ^= (I1 >> 8) | (I1 << 24);
 800cc96:	ea81 2133 	eor.w	r1, r1, r3, ror #8
    z[0] ^= I1;
 800cc9a:	4043      	eors	r3, r0
 800cc9c:	ea83 2331 	eor.w	r3, r3, r1, ror #8
 800cca0:	6013      	str	r3, [r2, #0]
    z[1] ^= I0;
 800cca2:	6853      	ldr	r3, [r2, #4]
 800cca4:	4059      	eors	r1, r3
 800cca6:	6051      	str	r1, [r2, #4]
}
 800cca8:	bd70      	pop	{r4, r5, r6, pc}
 800ccaa:	bf00      	nop
 800ccac:	080184c0 	.word	0x080184c0

0800ccb0 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 800ccb0:	f44f 728a 	mov.w	r2, #276	; 0x114
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	f009 bf24 	b.w	8016b02 <memset>

0800ccba <mbedtls_camellia_free>:
}

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
    if( ctx == NULL )
 800ccba:	b118      	cbz	r0, 800ccc4 <mbedtls_camellia_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 800ccbc:	f44f 718a 	mov.w	r1, #276	; 0x114
 800ccc0:	f005 baee 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 800ccc4:	4770      	bx	lr
	...

0800ccc8 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	b0c3      	sub	sp, #268	; 0x10c
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;

    memset( t, 0, 64 );
 800ccce:	af0e      	add	r7, sp, #56	; 0x38
{
 800ccd0:	4614      	mov	r4, r2
    RK = ctx->rk;
 800ccd2:	1d05      	adds	r5, r0, #4
    memset( t, 0, 64 );
 800ccd4:	2240      	movs	r2, #64	; 0x40
{
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	4688      	mov	r8, r1
    memset( t, 0, 64 );
 800ccda:	4638      	mov	r0, r7
 800ccdc:	2100      	movs	r1, #0
 800ccde:	f009 ff10 	bl	8016b02 <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 800cce2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800cce6:	2100      	movs	r1, #0
 800cce8:	4628      	mov	r0, r5
 800ccea:	f009 ff0a 	bl	8016b02 <memset>

    switch( keybits )
 800ccee:	2cc0      	cmp	r4, #192	; 0xc0
 800ccf0:	f000 81f1 	beq.w	800d0d6 <mbedtls_camellia_setkey_enc+0x40e>
 800ccf4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800ccf8:	f000 81ed 	beq.w	800d0d6 <mbedtls_camellia_setkey_enc+0x40e>
 800ccfc:	2c80      	cmp	r4, #128	; 0x80
 800ccfe:	f040 81f3 	bne.w	800d0e8 <mbedtls_camellia_setkey_enc+0x420>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 800cd02:	2303      	movs	r3, #3
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	2300      	movs	r3, #0
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 800cd08:	9301      	str	r3, [sp, #4]
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
    }

    for( i = 0; i < keybits / 8; ++i )
 800cd0a:	08e2      	lsrs	r2, r4, #3
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	f040 81e5 	bne.w	800d0de <mbedtls_camellia_setkey_enc+0x416>
        t[i] = key[i];

    if( keybits == 192 ) {
 800cd14:	2cc0      	cmp	r4, #192	; 0xc0
 800cd16:	d109      	bne.n	800cd2c <mbedtls_camellia_setkey_enc+0x64>
 800cd18:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 800cd1c:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
        for( i = 0; i < 8; i++ )
            t[24 + i] = ~t[16 + i];
 800cd20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800cd24:	43d2      	mvns	r2, r2
        for( i = 0; i < 8; i++ )
 800cd26:	428b      	cmp	r3, r1
            t[24 + i] = ~t[16 + i];
 800cd28:	721a      	strb	r2, [r3, #8]
        for( i = 0; i < 8; i++ )
 800cd2a:	d1f9      	bne.n	800cd20 <mbedtls_camellia_setkey_enc+0x58>
 800cd2c:	4b92      	ldr	r3, [pc, #584]	; (800cf78 <mbedtls_camellia_setkey_enc+0x2b0>)
    for( i = 0; i < keybits / 8; ++i )
 800cd2e:	2100      	movs	r1, #0

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 800cd30:	785a      	ldrb	r2, [r3, #1]
 800cd32:	7818      	ldrb	r0, [r3, #0]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 800cd34:	f893 c004 	ldrb.w	ip, [r3, #4]
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 800cd38:	0412      	lsls	r2, r2, #16
 800cd3a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800cd3e:	78d8      	ldrb	r0, [r3, #3]
 800cd40:	4302      	orrs	r2, r0
 800cd42:	7898      	ldrb	r0, [r3, #2]
 800cd44:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800cd48:	a802      	add	r0, sp, #8
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	5042      	str	r2, [r0, r1]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 800cd4e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800cd52:	0412      	lsls	r2, r2, #16
 800cd54:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800cd58:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 800cd5c:	ea42 020c 	orr.w	r2, r2, ip
 800cd60:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 800cd64:	4408      	add	r0, r1
 800cd66:	3108      	adds	r1, #8
 800cd68:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    for( i = 0; i < 6; i++ ) {
 800cd6c:	2930      	cmp	r1, #48	; 0x30
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 800cd6e:	6042      	str	r2, [r0, #4]
    for( i = 0; i < 6; i++ ) {
 800cd70:	d1de      	bne.n	800cd30 <mbedtls_camellia_setkey_enc+0x68>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 800cd72:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 800cd76:	2240      	movs	r2, #64	; 0x40
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	f009 fec1 	bl	8016b02 <memset>
 800cd80:	2200      	movs	r2, #0
 800cd82:	18b9      	adds	r1, r7, r2

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
        GET_UINT32_BE( KC[i], t, i * 4 );
 800cd84:	5cb8      	ldrb	r0, [r7, r2]
 800cd86:	78cb      	ldrb	r3, [r1, #3]
 800cd88:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800cd8c:	7848      	ldrb	r0, [r1, #1]
 800cd8e:	7889      	ldrb	r1, [r1, #2]
 800cd90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cd98:	f848 3002 	str.w	r3, [r8, r2]
 800cd9c:	3204      	adds	r2, #4
    for( i = 0; i < 8; i++ )
 800cd9e:	2a20      	cmp	r2, #32
 800cda0:	d1ef      	bne.n	800cd82 <mbedtls_camellia_setkey_enc+0xba>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
        KC[8 + i] = KC[i] ^ KC[4 + i];
 800cda2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cda4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cda6:	4053      	eors	r3, r2
 800cda8:	9326      	str	r3, [sp, #152]	; 0x98
 800cdaa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cdac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdae:	4053      	eors	r3, r2
 800cdb0:	9327      	str	r3, [sp, #156]	; 0x9c
 800cdb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cdb6:	4053      	eors	r3, r2
 800cdb8:	9328      	str	r3, [sp, #160]	; 0xa0
 800cdba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cdbc:	9b21      	ldr	r3, [sp, #132]	; 0x84

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 800cdbe:	a902      	add	r1, sp, #8
        KC[8 + i] = KC[i] ^ KC[4 + i];
 800cdc0:	4053      	eors	r3, r2
    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 800cdc2:	a826      	add	r0, sp, #152	; 0x98
 800cdc4:	aa28      	add	r2, sp, #160	; 0xa0
        KC[8 + i] = KC[i] ^ KC[4 + i];
 800cdc6:	9329      	str	r3, [sp, #164]	; 0xa4
    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 800cdc8:	f7ff ff2c 	bl	800cc24 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 800cdcc:	aa26      	add	r2, sp, #152	; 0x98
 800cdce:	a904      	add	r1, sp, #16
 800cdd0:	a828      	add	r0, sp, #160	; 0xa0
 800cdd2:	f7ff ff27 	bl	800cc24 <camellia_feistel>
 800cdd6:	af26      	add	r7, sp, #152	; 0x98
 800cdd8:	aa2a      	add	r2, sp, #168	; 0xa8

    for( i = 0; i < 4; ++i )
        KC[8 + i] ^= KC[i];
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	f857 1c20 	ldr.w	r1, [r7, #-32]
 800cde0:	404b      	eors	r3, r1
 800cde2:	f847 3b04 	str.w	r3, [r7], #4
    for( i = 0; i < 4; ++i )
 800cde6:	4297      	cmp	r7, r2
 800cde8:	d1f7      	bne.n	800cdda <mbedtls_camellia_setkey_enc+0x112>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 800cdea:	aa28      	add	r2, sp, #160	; 0xa0
 800cdec:	a906      	add	r1, sp, #24
 800cdee:	a826      	add	r0, sp, #152	; 0x98
 800cdf0:	f7ff ff18 	bl	800cc24 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 800cdf4:	aa26      	add	r2, sp, #152	; 0x98
 800cdf6:	a908      	add	r1, sp, #32
 800cdf8:	a828      	add	r0, sp, #160	; 0xa0
 800cdfa:	f7ff ff13 	bl	800cc24 <camellia_feistel>

    if( keybits > 128 ) {
 800cdfe:	2c80      	cmp	r4, #128	; 0x80
 800ce00:	d919      	bls.n	800ce36 <mbedtls_camellia_setkey_enc+0x16e>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 800ce02:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ce04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce06:	4053      	eors	r3, r2
 800ce08:	932a      	str	r3, [sp, #168]	; 0xa8
 800ce0a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ce0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce0e:	4053      	eors	r3, r2
 800ce10:	932b      	str	r3, [sp, #172]	; 0xac
 800ce12:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ce14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ce16:	4053      	eors	r3, r2
 800ce18:	932c      	str	r3, [sp, #176]	; 0xb0
 800ce1a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ce1c:	9b25      	ldr	r3, [sp, #148]	; 0x94

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 800ce1e:	a90a      	add	r1, sp, #40	; 0x28
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 800ce20:	4053      	eors	r3, r2
        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 800ce22:	4638      	mov	r0, r7
 800ce24:	aa2c      	add	r2, sp, #176	; 0xb0
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 800ce26:	932d      	str	r3, [sp, #180]	; 0xb4
        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 800ce28:	f7ff fefc 	bl	800cc24 <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 800ce2c:	463a      	mov	r2, r7
 800ce2e:	a90c      	add	r1, sp, #48	; 0x30
 800ce30:	a82c      	add	r0, sp, #176	; 0xb0
 800ce32:	f7ff fef7 	bl	800cc24 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 800ce36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce38:	932e      	str	r3, [sp, #184]	; 0xb8
 800ce3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce3c:	932f      	str	r3, [sp, #188]	; 0xbc
 800ce3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ce40:	9330      	str	r3, [sp, #192]	; 0xc0
 800ce42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce44:	9331      	str	r3, [sp, #196]	; 0xc4
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	494c      	ldr	r1, [pc, #304]	; (800cf7c <mbedtls_camellia_setkey_enc+0x2b4>)
 800ce4a:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 800ce4e:	f10e 38ff 	add.w	r8, lr, #4294967295
 800ce52:	ab2e      	add	r3, sp, #184	; 0xb8
 800ce54:	4488      	add	r8, r1
 800ce56:	461a      	mov	r2, r3
 800ce58:	f04f 0c0f 	mov.w	ip, #15
 800ce5c:	4689      	mov	r9, r1
 800ce5e:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800ce62:	b311      	cbz	r1, 800ceaa <mbedtls_camellia_setkey_enc+0x1e2>
 800ce64:	f00c 001f 	and.w	r0, ip, #31
 800ce68:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800ce6a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800ce6c:	f1c0 0720 	rsb	r7, r0, #32
 800ce70:	fa26 fa07 	lsr.w	sl, r6, r7
 800ce74:	4081      	lsls	r1, r0
 800ce76:	ea81 010a 	eor.w	r1, r1, sl
 800ce7a:	6111      	str	r1, [r2, #16]
 800ce7c:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800ce7e:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800ce80:	fa26 fa07 	lsr.w	sl, r6, r7
 800ce84:	4081      	lsls	r1, r0
 800ce86:	ea81 010a 	eor.w	r1, r1, sl
 800ce8a:	6151      	str	r1, [r2, #20]
 800ce8c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800ce8e:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800ce90:	4081      	lsls	r1, r0
 800ce92:	fa26 fa07 	lsr.w	sl, r6, r7
 800ce96:	ea81 010a 	eor.w	r1, r1, sl
 800ce9a:	6191      	str	r1, [r2, #24]
 800ce9c:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800ce9e:	4081      	lsls	r1, r0
 800cea0:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800cea2:	fa20 f707 	lsr.w	r7, r0, r7
 800cea6:	4079      	eors	r1, r7
 800cea8:	61d1      	str	r1, [r2, #28]
 800ceaa:	f10c 0c0f 	add.w	ip, ip, #15
 800ceae:	f1bc 0f4b 	cmp.w	ip, #75	; 0x4b
 800ceb2:	f102 0210 	add.w	r2, r2, #16
 800ceb6:	d1d2      	bne.n	800ce5e <mbedtls_camellia_setkey_enc+0x196>
 800ceb8:	9901      	ldr	r1, [sp, #4]
 800ceba:	4a31      	ldr	r2, [pc, #196]	; (800cf80 <mbedtls_camellia_setkey_enc+0x2b8>)
 800cebc:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cec0:	fb08 2801 	mla	r8, r8, r1, r2
 800cec4:	2100      	movs	r1, #0
 800cec6:	f918 0001 	ldrsb.w	r0, [r8, r1]
 800ceca:	1c46      	adds	r6, r0, #1
 800cecc:	bf1c      	itt	ne
 800cece:	f853 2021 	ldrne.w	r2, [r3, r1, lsl #2]
 800ced2:	f845 2020 	strne.w	r2, [r5, r0, lsl #2]
 800ced6:	3101      	adds	r1, #1
 800ced8:	2914      	cmp	r1, #20
 800ceda:	d1f4      	bne.n	800cec6 <mbedtls_camellia_setkey_enc+0x1fe>

    /* Manipulating KR */
    if( keybits > 128 ) {
 800cedc:	2c80      	cmp	r4, #128	; 0x80
 800cede:	d951      	bls.n	800cf84 <mbedtls_camellia_setkey_enc+0x2bc>
        SHIFT_AND_PLACE( idx, 1 );
 800cee0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cee2:	922e      	str	r2, [sp, #184]	; 0xb8
 800cee4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800cee6:	922f      	str	r2, [sp, #188]	; 0xbc
 800cee8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ceea:	9230      	str	r2, [sp, #192]	; 0xc0
 800ceec:	f10e 0a03 	add.w	sl, lr, #3
 800cef0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800cef2:	9231      	str	r2, [sp, #196]	; 0xc4
 800cef4:	44ca      	add	sl, r9
 800cef6:	461a      	mov	r2, r3
 800cef8:	f04f 0c0f 	mov.w	ip, #15
 800cefc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800cf00:	b311      	cbz	r1, 800cf48 <mbedtls_camellia_setkey_enc+0x280>
 800cf02:	f00c 001f 	and.w	r0, ip, #31
 800cf06:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800cf08:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800cf0a:	f1c0 0720 	rsb	r7, r0, #32
 800cf0e:	fa26 fb07 	lsr.w	fp, r6, r7
 800cf12:	4081      	lsls	r1, r0
 800cf14:	ea81 010b 	eor.w	r1, r1, fp
 800cf18:	6111      	str	r1, [r2, #16]
 800cf1a:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800cf1c:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800cf1e:	fa26 fb07 	lsr.w	fp, r6, r7
 800cf22:	4081      	lsls	r1, r0
 800cf24:	ea81 010b 	eor.w	r1, r1, fp
 800cf28:	6151      	str	r1, [r2, #20]
 800cf2a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800cf2c:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800cf2e:	4081      	lsls	r1, r0
 800cf30:	fa26 fb07 	lsr.w	fp, r6, r7
 800cf34:	ea81 010b 	eor.w	r1, r1, fp
 800cf38:	6191      	str	r1, [r2, #24]
 800cf3a:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800cf3c:	4081      	lsls	r1, r0
 800cf3e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800cf40:	fa20 f707 	lsr.w	r7, r0, r7
 800cf44:	4079      	eors	r1, r7
 800cf46:	61d1      	str	r1, [r2, #28]
 800cf48:	f10c 0c0f 	add.w	ip, ip, #15
 800cf4c:	f1bc 0f4b 	cmp.w	ip, #75	; 0x4b
 800cf50:	f102 0210 	add.w	r2, r2, #16
 800cf54:	d1d2      	bne.n	800cefc <mbedtls_camellia_setkey_enc+0x234>
 800cf56:	2100      	movs	r1, #0
 800cf58:	af2e      	add	r7, sp, #184	; 0xb8
 800cf5a:	eb08 0201 	add.w	r2, r8, r1
 800cf5e:	f992 0014 	ldrsb.w	r0, [r2, #20]
 800cf62:	1c42      	adds	r2, r0, #1
 800cf64:	bf1c      	itt	ne
 800cf66:	f857 2021 	ldrne.w	r2, [r7, r1, lsl #2]
 800cf6a:	f845 2020 	strne.w	r2, [r5, r0, lsl #2]
 800cf6e:	3101      	adds	r1, #1
 800cf70:	2914      	cmp	r1, #20
 800cf72:	d1f2      	bne.n	800cf5a <mbedtls_camellia_setkey_enc+0x292>
 800cf74:	e006      	b.n	800cf84 <mbedtls_camellia_setkey_enc+0x2bc>
 800cf76:	bf00      	nop
 800cf78:	080188c0 	.word	0x080188c0
 800cf7c:	080188f0 	.word	0x080188f0
 800cf80:	08018910 	.word	0x08018910
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 800cf84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cf86:	922e      	str	r2, [sp, #184]	; 0xb8
 800cf88:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cf8a:	922f      	str	r2, [sp, #188]	; 0xbc
 800cf8c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800cf8e:	9230      	str	r2, [sp, #192]	; 0xc0
 800cf90:	f10e 0a07 	add.w	sl, lr, #7
 800cf94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800cf96:	9231      	str	r2, [sp, #196]	; 0xc4
 800cf98:	44ca      	add	sl, r9
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	f04f 0c0f 	mov.w	ip, #15
 800cfa0:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800cfa4:	b311      	cbz	r1, 800cfec <mbedtls_camellia_setkey_enc+0x324>
 800cfa6:	f00c 001f 	and.w	r0, ip, #31
 800cfaa:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 800cfac:	992e      	ldr	r1, [sp, #184]	; 0xb8
 800cfae:	f1c0 0720 	rsb	r7, r0, #32
 800cfb2:	fa26 fb07 	lsr.w	fp, r6, r7
 800cfb6:	4081      	lsls	r1, r0
 800cfb8:	ea81 010b 	eor.w	r1, r1, fp
 800cfbc:	6111      	str	r1, [r2, #16]
 800cfbe:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800cfc0:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800cfc2:	fa26 fb07 	lsr.w	fp, r6, r7
 800cfc6:	4081      	lsls	r1, r0
 800cfc8:	ea81 010b 	eor.w	r1, r1, fp
 800cfcc:	6151      	str	r1, [r2, #20]
 800cfce:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800cfd0:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800cfd2:	4081      	lsls	r1, r0
 800cfd4:	fa26 fb07 	lsr.w	fp, r6, r7
 800cfd8:	ea81 010b 	eor.w	r1, r1, fp
 800cfdc:	6191      	str	r1, [r2, #24]
 800cfde:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800cfe0:	4081      	lsls	r1, r0
 800cfe2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 800cfe4:	fa20 f707 	lsr.w	r7, r0, r7
 800cfe8:	4079      	eors	r1, r7
 800cfea:	61d1      	str	r1, [r2, #28]
 800cfec:	f10c 0c0f 	add.w	ip, ip, #15
 800cff0:	f1bc 0f4b 	cmp.w	ip, #75	; 0x4b
 800cff4:	f102 0210 	add.w	r2, r2, #16
 800cff8:	d1d2      	bne.n	800cfa0 <mbedtls_camellia_setkey_enc+0x2d8>
 800cffa:	2100      	movs	r1, #0
 800cffc:	af2e      	add	r7, sp, #184	; 0xb8
 800cffe:	eb08 0201 	add.w	r2, r8, r1
 800d002:	f992 0028 	ldrsb.w	r0, [r2, #40]	; 0x28
 800d006:	1c46      	adds	r6, r0, #1
 800d008:	bf1c      	itt	ne
 800d00a:	f857 2021 	ldrne.w	r2, [r7, r1, lsl #2]
 800d00e:	f845 2020 	strne.w	r2, [r5, r0, lsl #2]
 800d012:	3101      	adds	r1, #1
 800d014:	2914      	cmp	r1, #20
 800d016:	d1f2      	bne.n	800cffe <mbedtls_camellia_setkey_enc+0x336>

    /* Manipulating KB */
    if( keybits > 128 ) {
 800d018:	2c80      	cmp	r4, #128	; 0x80
 800d01a:	d93f      	bls.n	800d09c <mbedtls_camellia_setkey_enc+0x3d4>
        SHIFT_AND_PLACE( idx, 3 );
 800d01c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d01e:	922e      	str	r2, [sp, #184]	; 0xb8
 800d020:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800d022:	922f      	str	r2, [sp, #188]	; 0xbc
 800d024:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d026:	9230      	str	r2, [sp, #192]	; 0xc0
 800d028:	f10e 0e0b 	add.w	lr, lr, #11
 800d02c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d02e:	9231      	str	r2, [sp, #196]	; 0xc4
 800d030:	44f1      	add	r9, lr
 800d032:	200f      	movs	r0, #15
 800d034:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d038:	b1e2      	cbz	r2, 800d074 <mbedtls_camellia_setkey_enc+0x3ac>
 800d03a:	f000 011f 	and.w	r1, r0, #31
 800d03e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800d040:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 800d042:	f1c1 0420 	rsb	r4, r1, #32
 800d046:	40e7      	lsrs	r7, r4
 800d048:	408a      	lsls	r2, r1
 800d04a:	407a      	eors	r2, r7
 800d04c:	611a      	str	r2, [r3, #16]
 800d04e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800d050:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800d052:	408a      	lsls	r2, r1
 800d054:	40e7      	lsrs	r7, r4
 800d056:	407a      	eors	r2, r7
 800d058:	615a      	str	r2, [r3, #20]
 800d05a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d05c:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 800d05e:	408a      	lsls	r2, r1
 800d060:	40e7      	lsrs	r7, r4
 800d062:	407a      	eors	r2, r7
 800d064:	619a      	str	r2, [r3, #24]
 800d066:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800d068:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800d06a:	408a      	lsls	r2, r1
 800d06c:	fa27 f404 	lsr.w	r4, r7, r4
 800d070:	4062      	eors	r2, r4
 800d072:	61da      	str	r2, [r3, #28]
 800d074:	300f      	adds	r0, #15
 800d076:	284b      	cmp	r0, #75	; 0x4b
 800d078:	f103 0310 	add.w	r3, r3, #16
 800d07c:	d1da      	bne.n	800d034 <mbedtls_camellia_setkey_enc+0x36c>
 800d07e:	2300      	movs	r3, #0
 800d080:	a92e      	add	r1, sp, #184	; 0xb8
 800d082:	eb08 0203 	add.w	r2, r8, r3
 800d086:	f992 203c 	ldrsb.w	r2, [r2, #60]	; 0x3c
 800d08a:	1c54      	adds	r4, r2, #1
 800d08c:	bf1c      	itt	ne
 800d08e:	f851 0023 	ldrne.w	r0, [r1, r3, lsl #2]
 800d092:	f845 0022 	strne.w	r0, [r5, r2, lsl #2]
 800d096:	3301      	adds	r3, #1
 800d098:	2b14      	cmp	r3, #20
 800d09a:	d1f2      	bne.n	800d082 <mbedtls_camellia_setkey_enc+0x3ba>
 800d09c:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <mbedtls_camellia_setkey_enc+0x428>)
 800d09e:	9901      	ldr	r1, [sp, #4]
 800d0a0:	2214      	movs	r2, #20
 800d0a2:	fb02 3201 	mla	r2, r2, r1, r3
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
        if( transposes[idx][i] != -1 ) {
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 800d0a6:	460e      	mov	r6, r1
 800d0a8:	230c      	movs	r3, #12
 800d0aa:	435e      	muls	r6, r3
 800d0ac:	00b6      	lsls	r6, r6, #2
 800d0ae:	2300      	movs	r3, #0
        if( transposes[idx][i] != -1 ) {
 800d0b0:	56d1      	ldrsb	r1, [r2, r3]
 800d0b2:	1c48      	adds	r0, r1, #1
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 800d0b4:	bf1e      	ittt	ne
 800d0b6:	f855 0021 	ldrne.w	r0, [r5, r1, lsl #2]
 800d0ba:	eb06 0183 	addne.w	r1, r6, r3, lsl #2
 800d0be:	1949      	addne	r1, r1, r5
    for( i = 0; i < 20; i++ ) {
 800d0c0:	f103 0301 	add.w	r3, r3, #1
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 800d0c4:	bf18      	it	ne
 800d0c6:	f8c1 0080 	strne.w	r0, [r1, #128]	; 0x80
    for( i = 0; i < 20; i++ ) {
 800d0ca:	2b14      	cmp	r3, #20
 800d0cc:	d1f0      	bne.n	800d0b0 <mbedtls_camellia_setkey_enc+0x3e8>
        }
    }

    return( 0 );
 800d0ce:	2000      	movs	r0, #0
}
 800d0d0:	b043      	add	sp, #268	; 0x10c
 800d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 256: ctx->nr = 4; idx = 1; break;
 800d0d6:	2304      	movs	r3, #4
 800d0d8:	6033      	str	r3, [r6, #0]
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e614      	b.n	800cd08 <mbedtls_camellia_setkey_enc+0x40>
        t[i] = key[i];
 800d0de:	f818 1003 	ldrb.w	r1, [r8, r3]
 800d0e2:	54f9      	strb	r1, [r7, r3]
    for( i = 0; i < keybits / 8; ++i )
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	e612      	b.n	800cd0e <mbedtls_camellia_setkey_enc+0x46>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 800d0e8:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800d0ec:	e7f0      	b.n	800d0d0 <mbedtls_camellia_setkey_enc+0x408>
 800d0ee:	bf00      	nop
 800d0f0:	080189b0 	.word	0x080189b0

0800d0f4 <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 800d0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0f6:	b0c7      	sub	sp, #284	; 0x11c
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	4616      	mov	r6, r2
 800d0fc:	4604      	mov	r4, r0
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 800d0fe:	a801      	add	r0, sp, #4
 800d100:	f7ff fdd6 	bl	800ccb0 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d104:	4629      	mov	r1, r5
 800d106:	4632      	mov	r2, r6
 800d108:	a801      	add	r0, sp, #4
 800d10a:	f7ff fddd 	bl	800ccc8 <mbedtls_camellia_setkey_enc>
 800d10e:	4605      	mov	r5, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d13a      	bne.n	800d18a <mbedtls_camellia_setkey_dec+0x96>
        goto exit;

    ctx->nr = cty.nr;
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	6023      	str	r3, [r4, #0]
    idx = ( ctx->nr == 4 );
 800d118:	1f1a      	subs	r2, r3, #4
 800d11a:	4253      	negs	r3, r2
 800d11c:	4153      	adcs	r3, r2

    RK = ctx->rk;
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 800d11e:	1cd9      	adds	r1, r3, #3
 800d120:	a802      	add	r0, sp, #8
 800d122:	0189      	lsls	r1, r1, #6
 800d124:	1842      	adds	r2, r0, r1

    *RK++ = *SK++;
 800d126:	5841      	ldr	r1, [r0, r1]
 800d128:	6061      	str	r1, [r4, #4]
    *RK++ = *SK++;
 800d12a:	6851      	ldr	r1, [r2, #4]
    *RK++ = *SK++;
    *RK++ = *SK++;
 800d12c:	68d0      	ldr	r0, [r2, #12]
    *RK++ = *SK++;
 800d12e:	60a1      	str	r1, [r4, #8]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 800d130:	00db      	lsls	r3, r3, #3
    *RK++ = *SK++;
 800d132:	6891      	ldr	r1, [r2, #8]
 800d134:	60e1      	str	r1, [r4, #12]
    *RK++ = *SK++;
 800d136:	6120      	str	r0, [r4, #16]
 800d138:	f104 0114 	add.w	r1, r4, #20
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 800d13c:	f1a2 0608 	sub.w	r6, r2, #8
 800d140:	f103 0016 	add.w	r0, r3, #22
 800d144:	341c      	adds	r4, #28
 800d146:	3a10      	subs	r2, #16
    {
        *RK++ = *SK++;
 800d148:	6897      	ldr	r7, [r2, #8]
 800d14a:	f844 7c08 	str.w	r7, [r4, #-8]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 800d14e:	3801      	subs	r0, #1
        *RK++ = *SK++;
 800d150:	68d7      	ldr	r7, [r2, #12]
 800d152:	f844 7c04 	str.w	r7, [r4, #-4]
 800d156:	f1a2 0208 	sub.w	r2, r2, #8
 800d15a:	f104 0408 	add.w	r4, r4, #8
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 800d15e:	d1f3      	bne.n	800d148 <mbedtls_camellia_setkey_dec+0x54>
 800d160:	f103 0215 	add.w	r2, r3, #21
 800d164:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d168:	f06f 0107 	mvn.w	r1, #7
 800d16c:	fb01 6303 	mla	r3, r1, r3, r6
 800d170:	3ba8      	subs	r3, #168	; 0xa8
    }

    SK -= 2;

    *RK++ = *SK++;
 800d172:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800d176:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 800d178:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 800d17c:	60d1      	str	r1, [r2, #12]
    *RK++ = *SK++;
 800d17e:	f853 1c08 	ldr.w	r1, [r3, #-8]
    *RK++ = *SK++;
 800d182:	f853 3c04 	ldr.w	r3, [r3, #-4]
    *RK++ = *SK++;
 800d186:	6111      	str	r1, [r2, #16]
    *RK++ = *SK++;
 800d188:	6153      	str	r3, [r2, #20]

exit:
    mbedtls_camellia_free( &cty );
 800d18a:	a801      	add	r0, sp, #4
 800d18c:	f7ff fd95 	bl	800ccba <mbedtls_camellia_free>

    return( ret );
}
 800d190:	4628      	mov	r0, r5
 800d192:	b047      	add	sp, #284	; 0x11c
 800d194:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d196 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 800d196:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d198:	461d      	mov	r5, r3
 800d19a:	6813      	ldr	r3, [r2, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 800d19c:	6806      	ldr	r6, [r0, #0]
 800d19e:	ba1f      	rev	r7, r3
 800d1a0:	6853      	ldr	r3, [r2, #4]
 800d1a2:	ba1c      	rev	r4, r3
 800d1a4:	6893      	ldr	r3, [r2, #8]
 800d1a6:	ba19      	rev	r1, r3
 800d1a8:	68d3      	ldr	r3, [r2, #12]
 800d1aa:	ba1a      	rev	r2, r3
    GET_UINT32_BE( X[0], input,  0 );
    GET_UINT32_BE( X[1], input,  4 );
    GET_UINT32_BE( X[2], input,  8 );
    GET_UINT32_BE( X[3], input, 12 );

    X[0] ^= *RK++;
 800d1ac:	6843      	ldr	r3, [r0, #4]
{
 800d1ae:	b085      	sub	sp, #20
    X[0] ^= *RK++;
 800d1b0:	407b      	eors	r3, r7
 800d1b2:	9300      	str	r3, [sp, #0]
    X[1] ^= *RK++;
 800d1b4:	6883      	ldr	r3, [r0, #8]
 800d1b6:	4063      	eors	r3, r4
 800d1b8:	9301      	str	r3, [sp, #4]
    X[2] ^= *RK++;
 800d1ba:	68c3      	ldr	r3, [r0, #12]
 800d1bc:	404b      	eors	r3, r1
 800d1be:	9302      	str	r3, [sp, #8]
    X[3] ^= *RK++;
 800d1c0:	6903      	ldr	r3, [r0, #16]
 800d1c2:	4053      	eors	r3, r2
 800d1c4:	f100 0414 	add.w	r4, r0, #20
 800d1c8:	9303      	str	r3, [sp, #12]

    while( NR ) {
 800d1ca:	b32e      	cbz	r6, 800d218 <mbedtls_camellia_crypt_ecb+0x82>
        --NR;
        camellia_feistel( X, RK, X + 2 );
 800d1cc:	aa02      	add	r2, sp, #8
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4668      	mov	r0, sp
 800d1d2:	f7ff fd27 	bl	800cc24 <camellia_feistel>
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 800d1d6:	466a      	mov	r2, sp
 800d1d8:	f104 0108 	add.w	r1, r4, #8
 800d1dc:	a802      	add	r0, sp, #8
 800d1de:	f7ff fd21 	bl	800cc24 <camellia_feistel>
        RK += 2;
        camellia_feistel( X, RK, X + 2 );
 800d1e2:	aa02      	add	r2, sp, #8
 800d1e4:	f104 0110 	add.w	r1, r4, #16
 800d1e8:	4668      	mov	r0, sp
 800d1ea:	f7ff fd1b 	bl	800cc24 <camellia_feistel>
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 800d1ee:	466a      	mov	r2, sp
 800d1f0:	f104 0118 	add.w	r1, r4, #24
 800d1f4:	a802      	add	r0, sp, #8
 800d1f6:	f7ff fd15 	bl	800cc24 <camellia_feistel>
        RK += 2;
        camellia_feistel( X, RK, X + 2 );
 800d1fa:	aa02      	add	r2, sp, #8
 800d1fc:	f104 0120 	add.w	r1, r4, #32
 800d200:	4668      	mov	r0, sp
 800d202:	f7ff fd0f 	bl	800cc24 <camellia_feistel>
        --NR;
 800d206:	3e01      	subs	r6, #1
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 800d208:	466a      	mov	r2, sp
 800d20a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800d20e:	a802      	add	r0, sp, #8
 800d210:	f7ff fd08 	bl	800cc24 <camellia_feistel>
        RK += 2;

        if( NR ) {
 800d214:	bb5e      	cbnz	r6, 800d26e <mbedtls_camellia_crypt_ecb+0xd8>
        RK += 2;
 800d216:	3430      	adds	r4, #48	; 0x30
            FLInv(X[2], X[3], RK[0], RK[1]);
            RK += 2;
        }
    }

    X[2] ^= *RK++;
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	9802      	ldr	r0, [sp, #8]
    X[3] ^= *RK++;
 800d21c:	9903      	ldr	r1, [sp, #12]
    X[0] ^= *RK++;
 800d21e:	9a00      	ldr	r2, [sp, #0]
    X[2] ^= *RK++;
 800d220:	4058      	eors	r0, r3
    X[3] ^= *RK++;
 800d222:	6863      	ldr	r3, [r4, #4]
 800d224:	4059      	eors	r1, r3
    X[0] ^= *RK++;
 800d226:	68a3      	ldr	r3, [r4, #8]
 800d228:	405a      	eors	r2, r3
    X[1] ^= *RK++;
 800d22a:	68e3      	ldr	r3, [r4, #12]
 800d22c:	9c01      	ldr	r4, [sp, #4]

    PUT_UINT32_BE( X[2], output,  0 );
 800d22e:	70e8      	strb	r0, [r5, #3]
    X[1] ^= *RK++;
 800d230:	4063      	eors	r3, r4
    PUT_UINT32_BE( X[2], output,  0 );
 800d232:	0e04      	lsrs	r4, r0, #24
 800d234:	702c      	strb	r4, [r5, #0]
 800d236:	0c04      	lsrs	r4, r0, #16
 800d238:	706c      	strb	r4, [r5, #1]
 800d23a:	0a04      	lsrs	r4, r0, #8
    PUT_UINT32_BE( X[3], output,  4 );
 800d23c:	0e08      	lsrs	r0, r1, #24
 800d23e:	7128      	strb	r0, [r5, #4]
 800d240:	0c08      	lsrs	r0, r1, #16
 800d242:	7168      	strb	r0, [r5, #5]
 800d244:	71e9      	strb	r1, [r5, #7]
 800d246:	0a08      	lsrs	r0, r1, #8
    PUT_UINT32_BE( X[0], output,  8 );
 800d248:	0e11      	lsrs	r1, r2, #24
 800d24a:	7229      	strb	r1, [r5, #8]
 800d24c:	0c11      	lsrs	r1, r2, #16
 800d24e:	7269      	strb	r1, [r5, #9]
 800d250:	72ea      	strb	r2, [r5, #11]
 800d252:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( X[1], output, 12 );
 800d254:	0e1a      	lsrs	r2, r3, #24
 800d256:	732a      	strb	r2, [r5, #12]
 800d258:	0c1a      	lsrs	r2, r3, #16
    PUT_UINT32_BE( X[3], output,  4 );
 800d25a:	71a8      	strb	r0, [r5, #6]
    PUT_UINT32_BE( X[1], output, 12 );
 800d25c:	736a      	strb	r2, [r5, #13]

    return( 0 );
}
 800d25e:	2000      	movs	r0, #0
    PUT_UINT32_BE( X[1], output, 12 );
 800d260:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( X[2], output,  0 );
 800d262:	70ac      	strb	r4, [r5, #2]
    PUT_UINT32_BE( X[0], output,  8 );
 800d264:	72a9      	strb	r1, [r5, #10]
    PUT_UINT32_BE( X[1], output, 12 );
 800d266:	73aa      	strb	r2, [r5, #14]
 800d268:	73eb      	strb	r3, [r5, #15]
}
 800d26a:	b005      	add	sp, #20
 800d26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            FL(X[0], X[1], RK[0], RK[1]);
 800d26e:	9900      	ldr	r1, [sp, #0]
 800d270:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d272:	9b01      	ldr	r3, [sp, #4]
 800d274:	400a      	ands	r2, r1
 800d276:	ea83 73f2 	eor.w	r3, r3, r2, ror #31
 800d27a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	4313      	orrs	r3, r2
 800d280:	404b      	eors	r3, r1
            FLInv(X[2], X[3], RK[0], RK[1]);
 800d282:	9a03      	ldr	r2, [sp, #12]
            FL(X[0], X[1], RK[0], RK[1]);
 800d284:	9300      	str	r3, [sp, #0]
            FLInv(X[2], X[3], RK[0], RK[1]);
 800d286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d288:	9902      	ldr	r1, [sp, #8]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	404b      	eors	r3, r1
 800d28e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d290:	9302      	str	r3, [sp, #8]
 800d292:	400b      	ands	r3, r1
 800d294:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 800d298:	9303      	str	r3, [sp, #12]
            RK += 2;
 800d29a:	3440      	adds	r4, #64	; 0x40
 800d29c:	e795      	b.n	800d1ca <mbedtls_camellia_crypt_ecb+0x34>

0800d29e <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 800d29e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a2:	461f      	mov	r7, r3
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 800d2a4:	0713      	lsls	r3, r2, #28
{
 800d2a6:	4680      	mov	r8, r0
 800d2a8:	4689      	mov	r9, r1
 800d2aa:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    if( length % 16 )
 800d2ae:	d15c      	bne.n	800d36a <mbedtls_camellia_crypt_cbc+0xcc>
 800d2b0:	18a6      	adds	r6, r4, r2
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 800d2b2:	2900      	cmp	r1, #0
 800d2b4:	d056      	beq.n	800d364 <mbedtls_camellia_crypt_cbc+0xc6>
 800d2b6:	3d01      	subs	r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 800d2b8:	42a6      	cmp	r6, r4
 800d2ba:	d04f      	beq.n	800d35c <mbedtls_camellia_crypt_cbc+0xbe>
 800d2bc:	1e79      	subs	r1, r7, #1
 800d2be:	1e62      	subs	r2, r4, #1
 800d2c0:	f105 0010 	add.w	r0, r5, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800d2c4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800d2c8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800d2cc:	4285      	cmp	r5, r0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800d2ce:	ea83 030c 	eor.w	r3, r3, ip
 800d2d2:	f802 3f01 	strb.w	r3, [r2, #1]!
            for( i = 0; i < 16; i++ )
 800d2d6:	d1f5      	bne.n	800d2c4 <mbedtls_camellia_crypt_cbc+0x26>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 800d2d8:	4623      	mov	r3, r4
 800d2da:	4622      	mov	r2, r4
 800d2dc:	4649      	mov	r1, r9
 800d2de:	4640      	mov	r0, r8
 800d2e0:	f7ff ff59 	bl	800d196 <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 800d2e4:	463b      	mov	r3, r7
 800d2e6:	f104 0210 	add.w	r2, r4, #16
 800d2ea:	f854 1b04 	ldr.w	r1, [r4], #4
 800d2ee:	f843 1b04 	str.w	r1, [r3], #4
 800d2f2:	4294      	cmp	r4, r2
 800d2f4:	d1f9      	bne.n	800d2ea <mbedtls_camellia_crypt_cbc+0x4c>
 800d2f6:	e7df      	b.n	800d2b8 <mbedtls_camellia_crypt_cbc+0x1a>
            memcpy( temp, input, 16 );
 800d2f8:	466a      	mov	r2, sp
 800d2fa:	462b      	mov	r3, r5
 800d2fc:	f105 0e10 	add.w	lr, r5, #16
 800d300:	4692      	mov	sl, r2
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	6859      	ldr	r1, [r3, #4]
 800d306:	4694      	mov	ip, r2
 800d308:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d30c:	3308      	adds	r3, #8
 800d30e:	4573      	cmp	r3, lr
 800d310:	4662      	mov	r2, ip
 800d312:	d1f6      	bne.n	800d302 <mbedtls_camellia_crypt_cbc+0x64>
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 800d314:	4623      	mov	r3, r4
 800d316:	2100      	movs	r1, #0
 800d318:	462a      	mov	r2, r5
 800d31a:	4640      	mov	r0, r8
 800d31c:	f7ff ff3b 	bl	800d196 <mbedtls_camellia_crypt_ecb>
 800d320:	1e63      	subs	r3, r4, #1
 800d322:	1e79      	subs	r1, r7, #1
 800d324:	f104 000f 	add.w	r0, r4, #15
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800d328:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d32c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800d330:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800d332:	ea82 020c 	eor.w	r2, r2, ip
 800d336:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800d338:	d1f6      	bne.n	800d328 <mbedtls_camellia_crypt_cbc+0x8a>
            memcpy( iv, temp, 16 );
 800d33a:	4652      	mov	r2, sl
 800d33c:	46bc      	mov	ip, r7
 800d33e:	4613      	mov	r3, r2
 800d340:	cb03      	ldmia	r3!, {r0, r1}
 800d342:	454b      	cmp	r3, r9
 800d344:	f8cc 0000 	str.w	r0, [ip]
 800d348:	f8cc 1004 	str.w	r1, [ip, #4]
 800d34c:	461a      	mov	r2, r3
 800d34e:	f10c 0c08 	add.w	ip, ip, #8
 800d352:	d1f4      	bne.n	800d33e <mbedtls_camellia_crypt_cbc+0xa0>
            input  += 16;
 800d354:	3510      	adds	r5, #16
            output += 16;
 800d356:	3410      	adds	r4, #16
        while( length > 0 )
 800d358:	42a6      	cmp	r6, r4
 800d35a:	d1cd      	bne.n	800d2f8 <mbedtls_camellia_crypt_cbc+0x5a>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 800d35c:	2000      	movs	r0, #0
}
 800d35e:	b004      	add	sp, #16
 800d360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            memcpy( iv, temp, 16 );
 800d364:	f10d 0910 	add.w	r9, sp, #16
 800d368:	e7f6      	b.n	800d358 <mbedtls_camellia_crypt_cbc+0xba>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 800d36a:	f06f 0025 	mvn.w	r0, #37	; 0x25
 800d36e:	e7f6      	b.n	800d35e <mbedtls_camellia_crypt_cbc+0xc0>

0800d370 <mbedtls_camellia_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 800d370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    CAMELLIA_VALIDATE_RET( iv     != NULL );
    CAMELLIA_VALIDATE_RET( iv_off != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    n = *iv_off;
 800d374:	681c      	ldr	r4, [r3, #0]
{
 800d376:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    if( n >= 16 )
 800d378:	2c0f      	cmp	r4, #15
{
 800d37a:	4682      	mov	sl, r0
 800d37c:	4699      	mov	r9, r3
 800d37e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    if( n >= 16 )
 800d382:	d82d      	bhi.n	800d3e0 <mbedtls_camellia_crypt_cfb128+0x70>
 800d384:	18b7      	adds	r7, r6, r2
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 800d386:	b321      	cbz	r1, 800d3d2 <mbedtls_camellia_crypt_cfb128+0x62>
            n = ( n + 1 ) & 0x0F;
        }
    }
    else
    {
        while( length-- )
 800d388:	42be      	cmp	r6, r7
 800d38a:	d024      	beq.n	800d3d6 <mbedtls_camellia_crypt_cfb128+0x66>
        {
            if( n == 0 )
 800d38c:	b92c      	cbnz	r4, 800d39a <mbedtls_camellia_crypt_cfb128+0x2a>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 800d38e:	462b      	mov	r3, r5
 800d390:	462a      	mov	r2, r5
 800d392:	2101      	movs	r1, #1
 800d394:	4650      	mov	r0, sl
 800d396:	f7ff fefe 	bl	800d196 <mbedtls_camellia_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 800d39a:	5d2b      	ldrb	r3, [r5, r4]
 800d39c:	f818 2b01 	ldrb.w	r2, [r8], #1
 800d3a0:	4053      	eors	r3, r2
 800d3a2:	f806 3b01 	strb.w	r3, [r6], #1
 800d3a6:	552b      	strb	r3, [r5, r4]

            n = ( n + 1 ) & 0x0F;
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	f004 040f 	and.w	r4, r4, #15
 800d3ae:	e7eb      	b.n	800d388 <mbedtls_camellia_crypt_cfb128+0x18>
            if( n == 0 )
 800d3b0:	b92c      	cbnz	r4, 800d3be <mbedtls_camellia_crypt_cfb128+0x4e>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 800d3b2:	462b      	mov	r3, r5
 800d3b4:	462a      	mov	r2, r5
 800d3b6:	2101      	movs	r1, #1
 800d3b8:	4650      	mov	r0, sl
 800d3ba:	f7ff feec 	bl	800d196 <mbedtls_camellia_crypt_ecb>
            *output++ = (unsigned char)( c ^ iv[n] );
 800d3be:	5d2b      	ldrb	r3, [r5, r4]
            c = *input++;
 800d3c0:	f818 2b01 	ldrb.w	r2, [r8], #1
            *output++ = (unsigned char)( c ^ iv[n] );
 800d3c4:	4053      	eors	r3, r2
 800d3c6:	f806 3b01 	strb.w	r3, [r6], #1
            iv[n] = (unsigned char) c;
 800d3ca:	552a      	strb	r2, [r5, r4]
            n = ( n + 1 ) & 0x0F;
 800d3cc:	3401      	adds	r4, #1
 800d3ce:	f004 040f 	and.w	r4, r4, #15
        while( length-- )
 800d3d2:	42be      	cmp	r6, r7
 800d3d4:	d1ec      	bne.n	800d3b0 <mbedtls_camellia_crypt_cfb128+0x40>
        }
    }

    *iv_off = n;
 800d3d6:	f8c9 4000 	str.w	r4, [r9]

    return( 0 );
 800d3da:	2000      	movs	r0, #0
}
 800d3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 800d3e0:	f06f 0023 	mvn.w	r0, #35	; 0x23
 800d3e4:	e7fa      	b.n	800d3dc <mbedtls_camellia_crypt_cfb128+0x6c>

0800d3e6 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 800d3e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ea:	b095      	sub	sp, #84	; 0x54
 800d3ec:	4607      	mov	r7, r0
 800d3ee:	9304      	str	r3, [sp, #16]
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800d3f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d3f2:	2b02      	cmp	r3, #2
{
 800d3f4:	4689      	mov	r9, r1
 800d3f6:	4616      	mov	r6, r2
 800d3f8:	e9dd b41f 	ldrd	fp, r4, [sp, #124]	; 0x7c
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800d3fc:	d105      	bne.n	800d40a <ccm_auth_crypt+0x24>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800d3fe:	f06f 030c 	mvn.w	r3, #12

    CTR_CRYPT( y, y, 16 );
    memcpy( tag, y, tag_len );

    return( 0 );
}
 800d402:	4618      	mov	r0, r3
 800d404:	b015      	add	sp, #84	; 0x54
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 800d40a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d40c:	2b10      	cmp	r3, #16
 800d40e:	d8f6      	bhi.n	800d3fe <ccm_auth_crypt+0x18>
 800d410:	07db      	lsls	r3, r3, #31
 800d412:	d4f4      	bmi.n	800d3fe <ccm_auth_crypt+0x18>
    if( iv_len < 7 || iv_len > 13 )
 800d414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d416:	3b07      	subs	r3, #7
 800d418:	2b06      	cmp	r3, #6
 800d41a:	d8f0      	bhi.n	800d3fe <ccm_auth_crypt+0x18>
    if( add_len > 0xFF00 )
 800d41c:	f5b4 4f7f 	cmp.w	r4, #65280	; 0xff00
 800d420:	d8ed      	bhi.n	800d3fe <ccm_auth_crypt+0x18>
    q = 16 - 1 - (unsigned char) iv_len;
 800d422:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800d424:	9a24      	ldr	r2, [sp, #144]	; 0x90
    memcpy( b + 1, iv, iv_len );
 800d426:	9904      	ldr	r1, [sp, #16]
    q = 16 - 1 - (unsigned char) iv_len;
 800d428:	b2dd      	uxtb	r5, r3
 800d42a:	f1c5 030f 	rsb	r3, r5, #15
 800d42e:	b2db      	uxtb	r3, r3
    b[0] |= ( add_len > 0 ) << 6;
 800d430:	2c00      	cmp	r4, #0
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800d432:	f1a2 0202 	sub.w	r2, r2, #2
    q = 16 - 1 - (unsigned char) iv_len;
 800d436:	9303      	str	r3, [sp, #12]
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800d438:	ea4f 0252 	mov.w	r2, r2, lsr #1
    b[0] |= ( add_len > 0 ) << 6;
 800d43c:	bf0c      	ite	eq
 800d43e:	2300      	moveq	r3, #0
 800d440:	2340      	movne	r3, #64	; 0x40
    b[0] |= q - 1;
 800d442:	f1c5 050e 	rsb	r5, r5, #14
 800d446:	b2ed      	uxtb	r5, r5
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 800d448:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    b[0] |= q - 1;
 800d44c:	432b      	orrs	r3, r5
    memcpy( b + 1, iv, iv_len );
 800d44e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b[0] |= q - 1;
 800d450:	f88d 3020 	strb.w	r3, [sp, #32]
    memcpy( b + 1, iv, iv_len );
 800d454:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800d458:	f009 fb2f 	bl	8016aba <memcpy>
 800d45c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 800d460:	ab0c      	add	r3, sp, #48	; 0x30
 800d462:	1b52      	subs	r2, r2, r5
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800d464:	46b0      	mov	r8, r6
        b[15-i] = (unsigned char)( len_left & 0xFF );
 800d466:	f803 8d01 	strb.w	r8, [r3, #-1]!
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 800d46a:	429a      	cmp	r2, r3
 800d46c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 800d470:	d1f9      	bne.n	800d466 <ccm_auth_crypt+0x80>
    if( len_left > 0 )
 800d472:	f1b8 0f00 	cmp.w	r8, #0
 800d476:	d1c2      	bne.n	800d3fe <ccm_auth_crypt+0x18>
    memset( y, 0, 16 );
 800d478:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 800d47c:	2210      	movs	r2, #16
 800d47e:	4641      	mov	r1, r8
 800d480:	4650      	mov	r0, sl
 800d482:	f009 fb3e 	bl	8016b02 <memset>
 800d486:	4642      	mov	r2, r8
    UPDATE_CBC_MAC;
 800d488:	a808      	add	r0, sp, #32
 800d48a:	f812 300a 	ldrb.w	r3, [r2, sl]
 800d48e:	5c11      	ldrb	r1, [r2, r0]
 800d490:	404b      	eors	r3, r1
 800d492:	f802 300a 	strb.w	r3, [r2, sl]
 800d496:	3201      	adds	r2, #1
 800d498:	2a10      	cmp	r2, #16
 800d49a:	d1f6      	bne.n	800d48a <ccm_auth_crypt+0xa4>
 800d49c:	ab07      	add	r3, sp, #28
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	4651      	mov	r1, sl
 800d4a2:	4653      	mov	r3, sl
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	f000 fa27 	bl	800d8f8 <mbedtls_cipher_update>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d1a8      	bne.n	800d402 <ccm_auth_crypt+0x1c>
    if( add_len > 0 )
 800d4b0:	2c00      	cmp	r4, #0
 800d4b2:	d13c      	bne.n	800d52e <ccm_auth_crypt+0x148>
    ctr[0] = q - 1;
 800d4b4:	ac14      	add	r4, sp, #80	; 0x50
    memcpy( ctr + 1, iv, iv_len );
 800d4b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d4b8:	9904      	ldr	r1, [sp, #16]
    ctr[0] = q - 1;
 800d4ba:	f804 5d10 	strb.w	r5, [r4, #-16]!
    memcpy( ctr + 1, iv, iv_len );
 800d4be:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 800d4c2:	f009 fafa 	bl	8016aba <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 800d4c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d4c8:	9a03      	ldr	r2, [sp, #12]
 800d4ca:	1c58      	adds	r0, r3, #1
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	4420      	add	r0, r4
 800d4d0:	f009 fb17 	bl	8016b02 <memset>
    ctr[15] = 1;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            memset( b, 0, 16 );
 800d4da:	f10d 0820 	add.w	r8, sp, #32
    while( len_left > 0 )
 800d4de:	2e00      	cmp	r6, #0
 800d4e0:	f040 8083 	bne.w	800d5ea <ccm_auth_crypt+0x204>
 800d4e4:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800d4e8:	ab14      	add	r3, sp, #80	; 0x50
 800d4ea:	1b55      	subs	r5, r2, r5
        ctr[15-i] = 0;
 800d4ec:	f803 6d01 	strb.w	r6, [r3, #-1]!
    for( i = 0; i < q; i++ )
 800d4f0:	429d      	cmp	r5, r3
 800d4f2:	d1fb      	bne.n	800d4ec <ccm_auth_crypt+0x106>
    CTR_CRYPT( y, y, 16 );
 800d4f4:	ab07      	add	r3, sp, #28
 800d4f6:	ad08      	add	r5, sp, #32
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	2210      	movs	r2, #16
 800d4fc:	462b      	mov	r3, r5
 800d4fe:	4621      	mov	r1, r4
 800d500:	4638      	mov	r0, r7
 800d502:	f000 f9f9 	bl	800d8f8 <mbedtls_cipher_update>
 800d506:	4603      	mov	r3, r0
 800d508:	2800      	cmp	r0, #0
 800d50a:	f47f af7a 	bne.w	800d402 <ccm_auth_crypt+0x1c>
 800d50e:	4602      	mov	r2, r0
 800d510:	a90c      	add	r1, sp, #48	; 0x30
 800d512:	5c50      	ldrb	r0, [r2, r1]
 800d514:	5cac      	ldrb	r4, [r5, r2]
 800d516:	4060      	eors	r0, r4
 800d518:	5450      	strb	r0, [r2, r1]
 800d51a:	3201      	adds	r2, #1
 800d51c:	2a10      	cmp	r2, #16
 800d51e:	d1f8      	bne.n	800d512 <ccm_auth_crypt+0x12c>
    memcpy( tag, y, tag_len );
 800d520:	e9dd 0223 	ldrd	r0, r2, [sp, #140]	; 0x8c
 800d524:	9303      	str	r3, [sp, #12]
 800d526:	f009 fac8 	bl	8016aba <memcpy>
 800d52a:	9b03      	ldr	r3, [sp, #12]
    return( 0 );
 800d52c:	e769      	b.n	800d402 <ccm_auth_crypt+0x1c>
        memset( b, 0, 16 );
 800d52e:	4601      	mov	r1, r0
 800d530:	220e      	movs	r2, #14
 800d532:	9005      	str	r0, [sp, #20]
 800d534:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800d538:	f009 fae3 	bl	8016b02 <memset>
        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800d53c:	2c0e      	cmp	r4, #14
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800d53e:	ea4f 2214 	mov.w	r2, r4, lsr #8
        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 800d542:	46a0      	mov	r8, r4
 800d544:	bf28      	it	cs
 800d546:	f04f 080e 	movcs.w	r8, #14
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 800d54a:	f88d 2020 	strb.w	r2, [sp, #32]
        memcpy( b + 2, src, use_len );
 800d54e:	4659      	mov	r1, fp
 800d550:	4642      	mov	r2, r8
 800d552:	f10d 0022 	add.w	r0, sp, #34	; 0x22
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 800d556:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
        memcpy( b + 2, src, use_len );
 800d55a:	f009 faae 	bl	8016aba <memcpy>
 800d55e:	9b05      	ldr	r3, [sp, #20]
        UPDATE_CBC_MAC;
 800d560:	f10d 0c20 	add.w	ip, sp, #32
        memcpy( b + 2, src, use_len );
 800d564:	461a      	mov	r2, r3
        UPDATE_CBC_MAC;
 800d566:	4653      	mov	r3, sl
 800d568:	5cd1      	ldrb	r1, [r2, r3]
 800d56a:	f812 000c 	ldrb.w	r0, [r2, ip]
 800d56e:	4041      	eors	r1, r0
 800d570:	54d1      	strb	r1, [r2, r3]
 800d572:	3201      	adds	r2, #1
 800d574:	2a10      	cmp	r2, #16
 800d576:	d1f7      	bne.n	800d568 <ccm_auth_crypt+0x182>
 800d578:	a907      	add	r1, sp, #28
 800d57a:	9100      	str	r1, [sp, #0]
 800d57c:	4638      	mov	r0, r7
 800d57e:	4619      	mov	r1, r3
 800d580:	f000 f9ba 	bl	800d8f8 <mbedtls_cipher_update>
 800d584:	4603      	mov	r3, r0
 800d586:	2800      	cmp	r0, #0
 800d588:	f47f af3b 	bne.w	800d402 <ccm_auth_crypt+0x1c>
        len_left -= use_len;
 800d58c:	eba4 0408 	sub.w	r4, r4, r8
            memset( b, 0, 16 );
 800d590:	f10d 0a20 	add.w	sl, sp, #32
        src += use_len;
 800d594:	44d8      	add	r8, fp
        while( len_left > 0 )
 800d596:	2c00      	cmp	r4, #0
 800d598:	d08c      	beq.n	800d4b4 <ccm_auth_crypt+0xce>
            use_len = len_left > 16 ? 16 : len_left;
 800d59a:	2c10      	cmp	r4, #16
 800d59c:	46a3      	mov	fp, r4
            memset( b, 0, 16 );
 800d59e:	f04f 0210 	mov.w	r2, #16
            use_len = len_left > 16 ? 16 : len_left;
 800d5a2:	bf28      	it	cs
 800d5a4:	f04f 0b10 	movcs.w	fp, #16
            memset( b, 0, 16 );
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4650      	mov	r0, sl
 800d5ac:	f009 faa9 	bl	8016b02 <memset>
            memcpy( b, src, use_len );
 800d5b0:	465a      	mov	r2, fp
 800d5b2:	4641      	mov	r1, r8
 800d5b4:	4650      	mov	r0, sl
 800d5b6:	f009 fa80 	bl	8016aba <memcpy>
 800d5ba:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 800d5bc:	ab0c      	add	r3, sp, #48	; 0x30
 800d5be:	5cd1      	ldrb	r1, [r2, r3]
 800d5c0:	f812 000a 	ldrb.w	r0, [r2, sl]
 800d5c4:	4041      	eors	r1, r0
 800d5c6:	54d1      	strb	r1, [r2, r3]
 800d5c8:	3201      	adds	r2, #1
 800d5ca:	2a10      	cmp	r2, #16
 800d5cc:	d1f7      	bne.n	800d5be <ccm_auth_crypt+0x1d8>
 800d5ce:	a907      	add	r1, sp, #28
 800d5d0:	9100      	str	r1, [sp, #0]
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f000 f98f 	bl	800d8f8 <mbedtls_cipher_update>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	f47f af10 	bne.w	800d402 <ccm_auth_crypt+0x1c>
            len_left -= use_len;
 800d5e2:	eba4 040b 	sub.w	r4, r4, fp
            src += use_len;
 800d5e6:	44d8      	add	r8, fp
 800d5e8:	e7d5      	b.n	800d596 <ccm_auth_crypt+0x1b0>
        size_t use_len = len_left > 16 ? 16 : len_left;
 800d5ea:	2e10      	cmp	r6, #16
 800d5ec:	46b2      	mov	sl, r6
 800d5ee:	bf28      	it	cs
 800d5f0:	f04f 0a10 	movcs.w	sl, #16
        if( mode == CCM_ENCRYPT )
 800d5f4:	f1b9 0f00 	cmp.w	r9, #0
 800d5f8:	d02c      	beq.n	800d654 <ccm_auth_crypt+0x26e>
        CTR_CRYPT( dst, src, use_len );
 800d5fa:	ab07      	add	r3, sp, #28
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	2210      	movs	r2, #16
 800d600:	4643      	mov	r3, r8
 800d602:	4621      	mov	r1, r4
 800d604:	4638      	mov	r0, r7
 800d606:	f000 f977 	bl	800d8f8 <mbedtls_cipher_update>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2800      	cmp	r0, #0
 800d60e:	f47f aef8 	bne.w	800d402 <ccm_auth_crypt+0x1c>
 800d612:	b2da      	uxtb	r2, r3
 800d614:	4592      	cmp	sl, r2
 800d616:	f103 0301 	add.w	r3, r3, #1
 800d61a:	d839      	bhi.n	800d690 <ccm_auth_crypt+0x2aa>
        if( mode == CCM_DECRYPT )
 800d61c:	f1b9 0f01 	cmp.w	r9, #1
 800d620:	d040      	beq.n	800d6a4 <ccm_auth_crypt+0x2be>
        dst += use_len;
 800d622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d624:	4453      	add	r3, sl
 800d626:	9322      	str	r3, [sp, #136]	; 0x88
        src += use_len;
 800d628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d62a:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
 800d62e:	4453      	add	r3, sl
 800d630:	9321      	str	r3, [sp, #132]	; 0x84
        len_left -= use_len;
 800d632:	eba6 060a 	sub.w	r6, r6, sl
 800d636:	460a      	mov	r2, r1
            if( ++ctr[15-i] != 0 )
 800d638:	7813      	ldrb	r3, [r2, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	f802 3901 	strb.w	r3, [r2], #-1
 800d642:	2b00      	cmp	r3, #0
 800d644:	f47f af4b 	bne.w	800d4de <ccm_auth_crypt+0xf8>
        for( i = 0; i < q; i++ )
 800d648:	1a8b      	subs	r3, r1, r2
 800d64a:	9803      	ldr	r0, [sp, #12]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	4283      	cmp	r3, r0
 800d650:	d3f2      	bcc.n	800d638 <ccm_auth_crypt+0x252>
 800d652:	e744      	b.n	800d4de <ccm_auth_crypt+0xf8>
            memset( b, 0, 16 );
 800d654:	2210      	movs	r2, #16
 800d656:	4649      	mov	r1, r9
 800d658:	4640      	mov	r0, r8
 800d65a:	f009 fa52 	bl	8016b02 <memset>
            memcpy( b, src, use_len );
 800d65e:	4652      	mov	r2, sl
 800d660:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d662:	4640      	mov	r0, r8
 800d664:	f009 fa29 	bl	8016aba <memcpy>
 800d668:	464a      	mov	r2, r9
            UPDATE_CBC_MAC;
 800d66a:	ab0c      	add	r3, sp, #48	; 0x30
 800d66c:	5cd1      	ldrb	r1, [r2, r3]
 800d66e:	f812 0008 	ldrb.w	r0, [r2, r8]
 800d672:	4041      	eors	r1, r0
 800d674:	54d1      	strb	r1, [r2, r3]
 800d676:	3201      	adds	r2, #1
 800d678:	2a10      	cmp	r2, #16
 800d67a:	d1f7      	bne.n	800d66c <ccm_auth_crypt+0x286>
 800d67c:	a907      	add	r1, sp, #28
 800d67e:	9100      	str	r1, [sp, #0]
 800d680:	4638      	mov	r0, r7
 800d682:	4619      	mov	r1, r3
 800d684:	f000 f938 	bl	800d8f8 <mbedtls_cipher_update>
 800d688:	4603      	mov	r3, r0
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d0b5      	beq.n	800d5fa <ccm_auth_crypt+0x214>
 800d68e:	e6b8      	b.n	800d402 <ccm_auth_crypt+0x1c>
        CTR_CRYPT( dst, src, use_len );
 800d690:	a914      	add	r1, sp, #80	; 0x50
 800d692:	1888      	adds	r0, r1, r2
 800d694:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d696:	f810 0c30 	ldrb.w	r0, [r0, #-48]
 800d69a:	5c89      	ldrb	r1, [r1, r2]
 800d69c:	4041      	eors	r1, r0
 800d69e:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d6a0:	5481      	strb	r1, [r0, r2]
 800d6a2:	e7b6      	b.n	800d612 <ccm_auth_crypt+0x22c>
            memset( b, 0, 16 );
 800d6a4:	2210      	movs	r2, #16
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	f009 fa2a 	bl	8016b02 <memset>
            memcpy( b, dst, use_len );
 800d6ae:	4652      	mov	r2, sl
 800d6b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	f009 fa01 	bl	8016aba <memcpy>
 800d6b8:	2200      	movs	r2, #0
            UPDATE_CBC_MAC;
 800d6ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d6bc:	5cd1      	ldrb	r1, [r2, r3]
 800d6be:	f812 0008 	ldrb.w	r0, [r2, r8]
 800d6c2:	4041      	eors	r1, r0
 800d6c4:	54d1      	strb	r1, [r2, r3]
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	2a10      	cmp	r2, #16
 800d6ca:	d1f7      	bne.n	800d6bc <ccm_auth_crypt+0x2d6>
 800d6cc:	a907      	add	r1, sp, #28
 800d6ce:	9100      	str	r1, [sp, #0]
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	f000 f910 	bl	800d8f8 <mbedtls_cipher_update>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0a1      	beq.n	800d622 <ccm_auth_crypt+0x23c>
 800d6de:	e690      	b.n	800d402 <ccm_auth_crypt+0x1c>

0800d6e0 <mbedtls_ccm_init>:
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 800d6e0:	2244      	movs	r2, #68	; 0x44
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	f009 ba0d 	b.w	8016b02 <memset>

0800d6e8 <mbedtls_ccm_setkey>:
{
 800d6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	4617      	mov	r7, r2
 800d6f0:	4608      	mov	r0, r1
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	4619      	mov	r1, r3
{
 800d6f6:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 800d6f8:	f000 f88c 	bl	800d814 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	b190      	cbz	r0, 800d726 <mbedtls_ccm_setkey+0x3e>
    if( cipher_info->block_size != 16 )
 800d700:	6943      	ldr	r3, [r0, #20]
 800d702:	2b10      	cmp	r3, #16
 800d704:	d10f      	bne.n	800d726 <mbedtls_ccm_setkey+0x3e>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d706:	4620      	mov	r0, r4
 800d708:	f000 f89c 	bl	800d844 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800d70c:	4629      	mov	r1, r5
 800d70e:	4620      	mov	r0, r4
 800d710:	f000 fa3e 	bl	800db90 <mbedtls_cipher_setup>
 800d714:	b948      	cbnz	r0, 800d72a <mbedtls_ccm_setkey+0x42>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d716:	4632      	mov	r2, r6
 800d718:	4639      	mov	r1, r7
 800d71a:	4620      	mov	r0, r4
 800d71c:	2301      	movs	r3, #1
}
 800d71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d722:	f000 b8a7 	b.w	800d874 <mbedtls_cipher_setkey>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 800d726:	f06f 000c 	mvn.w	r0, #12
}
 800d72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d72e <mbedtls_ccm_free>:
{
 800d72e:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800d730:	4604      	mov	r4, r0
 800d732:	b138      	cbz	r0, 800d744 <mbedtls_ccm_free+0x16>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d734:	f000 f886 	bl	800d844 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800d738:	4620      	mov	r0, r4
 800d73a:	2144      	movs	r1, #68	; 0x44
}
 800d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 800d740:	f004 bdae 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 800d744:	bd10      	pop	{r4, pc}

0800d746 <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 800d746:	b510      	push	{r4, lr}
 800d748:	b088      	sub	sp, #32
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 800d74a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800d74c:	9406      	str	r4, [sp, #24]
 800d74e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800d750:	9405      	str	r4, [sp, #20]
 800d752:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d754:	9404      	str	r4, [sp, #16]
 800d756:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d758:	9403      	str	r4, [sp, #12]
 800d75a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d75c:	9402      	str	r4, [sp, #8]
 800d75e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d760:	e9cd 3400 	strd	r3, r4, [sp]
 800d764:	4613      	mov	r3, r2
 800d766:	460a      	mov	r2, r1
 800d768:	2100      	movs	r1, #0
 800d76a:	f7ff fe3c 	bl	800d3e6 <ccm_auth_crypt>
                            add, add_len, input, output, tag, tag_len ) );
}
 800d76e:	b008      	add	sp, #32
 800d770:	bd10      	pop	{r4, pc}

0800d772 <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 800d772:	b410      	push	{r4}
 800d774:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 800d776:	b11c      	cbz	r4, 800d780 <mbedtls_ccm_encrypt_and_tag+0xe>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800d778:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
 800d77c:	f7ff bfe3 	b.w	800d746 <mbedtls_ccm_star_encrypt_and_tag>
}
 800d780:	f06f 000c 	mvn.w	r0, #12
 800d784:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 800d78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d78c:	b08d      	sub	sp, #52	; 0x34
 800d78e:	e9dd 5415 	ldrd	r5, r4, [sp, #84]	; 0x54
 800d792:	460e      	mov	r6, r1
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 800d794:	a908      	add	r1, sp, #32
 800d796:	e9cd 5104 	strd	r5, r1, [sp, #16]
 800d79a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d79c:	9103      	str	r1, [sp, #12]
 800d79e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d7a0:	9102      	str	r1, [sp, #8]
 800d7a2:	9912      	ldr	r1, [sp, #72]	; 0x48
{
 800d7a4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 800d7a6:	9706      	str	r7, [sp, #24]
 800d7a8:	e9cd 3100 	strd	r3, r1, [sp]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	2101      	movs	r1, #1
 800d7b0:	4632      	mov	r2, r6
 800d7b2:	f7ff fe18 	bl	800d3e6 <ccm_auth_crypt>
 800d7b6:	b960      	cbnz	r0, 800d7d2 <mbedtls_ccm_star_auth_decrypt+0x48>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	b2da      	uxtb	r2, r3
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800d7bc:	4297      	cmp	r7, r2
 800d7be:	f103 0301 	add.w	r3, r3, #1
 800d7c2:	d808      	bhi.n	800d7d6 <mbedtls_ccm_star_auth_decrypt+0x4c>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 800d7c4:	b128      	cbz	r0, 800d7d2 <mbedtls_ccm_star_auth_decrypt+0x48>
    {
        mbedtls_platform_zeroize( output, length );
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	f004 fd69 	bl	80122a0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 800d7ce:	f06f 000e 	mvn.w	r0, #14
    }

    return( 0 );
}
 800d7d2:	b00d      	add	sp, #52	; 0x34
 800d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 800d7d6:	a90c      	add	r1, sp, #48	; 0x30
 800d7d8:	4411      	add	r1, r2
 800d7da:	5ca2      	ldrb	r2, [r4, r2]
 800d7dc:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d7e0:	404a      	eors	r2, r1
 800d7e2:	4310      	orrs	r0, r2
 800d7e4:	e7e9      	b.n	800d7ba <mbedtls_ccm_star_auth_decrypt+0x30>

0800d7e6 <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 800d7e6:	b410      	push	{r4}
 800d7e8:	9c06      	ldr	r4, [sp, #24]
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 800d7ea:	b11c      	cbz	r4, 800d7f4 <mbedtls_ccm_auth_decrypt+0xe>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
                add_len, input, output, tag, tag_len ) );
}
 800d7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
 800d7f0:	f7ff bfcb 	b.w	800d78a <mbedtls_ccm_star_auth_decrypt>
}
 800d7f4:	f06f 000c 	mvn.w	r0, #12
 800d7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fc:	4770      	bx	lr
	...

0800d800 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 800d800:	b118      	cbz	r0, 800d80a <get_no_padding+0xa>
 800d802:	b112      	cbz	r2, 800d80a <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 800d804:	6011      	str	r1, [r2, #0]

    return( 0 );
 800d806:	2000      	movs	r0, #0
 800d808:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800d80a:	4801      	ldr	r0, [pc, #4]	; (800d810 <get_no_padding+0x10>)
}
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	ffff9f00 	.word	0xffff9f00

0800d814 <mbedtls_cipher_info_from_values>:
{
 800d814:	b530      	push	{r4, r5, lr}
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800d816:	4c08      	ldr	r4, [pc, #32]	; (800d838 <mbedtls_cipher_info_from_values+0x24>)
 800d818:	6863      	ldr	r3, [r4, #4]
 800d81a:	b90b      	cbnz	r3, 800d820 <mbedtls_cipher_info_from_values+0xc>
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 800d820:	699d      	ldr	r5, [r3, #24]
 800d822:	782d      	ldrb	r5, [r5, #0]
 800d824:	4285      	cmp	r5, r0
 800d826:	d105      	bne.n	800d834 <mbedtls_cipher_info_from_values+0x20>
 800d828:	685d      	ldr	r5, [r3, #4]
 800d82a:	428d      	cmp	r5, r1
 800d82c:	d102      	bne.n	800d834 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800d82e:	785d      	ldrb	r5, [r3, #1]
 800d830:	4295      	cmp	r5, r2
 800d832:	d0f3      	beq.n	800d81c <mbedtls_cipher_info_from_values+0x8>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800d834:	3408      	adds	r4, #8
 800d836:	e7ef      	b.n	800d818 <mbedtls_cipher_info_from_values+0x4>
 800d838:	080189d8 	.word	0x080189d8

0800d83c <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800d83c:	2244      	movs	r2, #68	; 0x44
 800d83e:	2100      	movs	r1, #0
 800d840:	f009 b95f 	b.w	8016b02 <memset>

0800d844 <mbedtls_cipher_free>:
{
 800d844:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800d846:	4604      	mov	r4, r0
 800d848:	b198      	cbz	r0, 800d872 <mbedtls_cipher_free+0x2e>
    if( ctx->cmac_ctx )
 800d84a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800d84c:	b128      	cbz	r0, 800d85a <mbedtls_cipher_free+0x16>
       mbedtls_platform_zeroize( ctx->cmac_ctx,
 800d84e:	2124      	movs	r1, #36	; 0x24
 800d850:	f004 fd26 	bl	80122a0 <mbedtls_platform_zeroize>
       mbedtls_free( ctx->cmac_ctx );
 800d854:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d856:	f009 f919 	bl	8016a8c <free>
    if( ctx->cipher_ctx )
 800d85a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d85c:	b118      	cbz	r0, 800d866 <mbedtls_cipher_free+0x22>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	4798      	blx	r3
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800d866:	4620      	mov	r0, r4
 800d868:	2144      	movs	r1, #68	; 0x44
}
 800d86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800d86e:	f004 bd17 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 800d872:	bd10      	pop	{r4, pc}

0800d874 <mbedtls_cipher_setkey>:
{
 800d874:	b430      	push	{r4, r5}
    if( ctx->cipher_info == NULL )
 800d876:	6804      	ldr	r4, [r0, #0]
 800d878:	b1b4      	cbz	r4, 800d8a8 <mbedtls_cipher_setkey+0x34>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800d87a:	6925      	ldr	r5, [r4, #16]
 800d87c:	07ad      	lsls	r5, r5, #30
 800d87e:	d402      	bmi.n	800d886 <mbedtls_cipher_setkey+0x12>
 800d880:	6865      	ldr	r5, [r4, #4]
 800d882:	4295      	cmp	r5, r2
 800d884:	d110      	bne.n	800d8a8 <mbedtls_cipher_setkey+0x34>
    if( MBEDTLS_ENCRYPT == operation ||
 800d886:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 800d888:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 800d88a:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 800d88c:	d003      	beq.n	800d896 <mbedtls_cipher_setkey+0x22>
 800d88e:	7865      	ldrb	r5, [r4, #1]
 800d890:	3d03      	subs	r5, #3
 800d892:	2d02      	cmp	r5, #2
 800d894:	d804      	bhi.n	800d8a0 <mbedtls_cipher_setkey+0x2c>
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800d896:	69a3      	ldr	r3, [r4, #24]
 800d898:	691b      	ldr	r3, [r3, #16]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800d89a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800d89c:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800d89e:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 800d8a0:	b913      	cbnz	r3, 800d8a8 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800d8a2:	69a3      	ldr	r3, [r4, #24]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	e7f8      	b.n	800d89a <mbedtls_cipher_setkey+0x26>
}
 800d8a8:	4801      	ldr	r0, [pc, #4]	; (800d8b0 <mbedtls_cipher_setkey+0x3c>)
 800d8aa:	bc30      	pop	{r4, r5}
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	ffff9f00 	.word	0xffff9f00

0800d8b4 <mbedtls_cipher_set_iv>:
{
 800d8b4:	b538      	push	{r3, r4, r5, lr}
    if( ctx->cipher_info == NULL )
 800d8b6:	6803      	ldr	r3, [r0, #0]
{
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
 800d8bc:	b19b      	cbz	r3, 800d8e6 <mbedtls_cipher_set_iv+0x32>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800d8be:	2a10      	cmp	r2, #16
 800d8c0:	d80f      	bhi.n	800d8e2 <mbedtls_cipher_set_iv+0x2e>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800d8c2:	691a      	ldr	r2, [r3, #16]
 800d8c4:	07d2      	lsls	r2, r2, #31
 800d8c6:	d403      	bmi.n	800d8d0 <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = ctx->cipher_info->iv_size;
 800d8c8:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 800d8ca:	429c      	cmp	r4, r3
 800d8cc:	d30b      	bcc.n	800d8e6 <mbedtls_cipher_set_iv+0x32>
 800d8ce:	461c      	mov	r4, r3
    if ( actual_iv_size != 0 )
 800d8d0:	b15c      	cbz	r4, 800d8ea <mbedtls_cipher_set_iv+0x36>
        memcpy( ctx->iv, iv, actual_iv_size );
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d8d8:	f009 f8ef 	bl	8016aba <memcpy>
        ctx->iv_size = actual_iv_size;
 800d8dc:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 800d8de:	2000      	movs	r0, #0
}
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800d8e2:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <mbedtls_cipher_set_iv+0x3c>)
 800d8e4:	e7fc      	b.n	800d8e0 <mbedtls_cipher_set_iv+0x2c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800d8e6:	4803      	ldr	r0, [pc, #12]	; (800d8f4 <mbedtls_cipher_set_iv+0x40>)
 800d8e8:	e7fa      	b.n	800d8e0 <mbedtls_cipher_set_iv+0x2c>
    return( 0 );
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	e7f8      	b.n	800d8e0 <mbedtls_cipher_set_iv+0x2c>
 800d8ee:	bf00      	nop
 800d8f0:	ffff9f80 	.word	0xffff9f80
 800d8f4:	ffff9f00 	.word	0xffff9f00

0800d8f8 <mbedtls_cipher_update>:
{
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	4615      	mov	r5, r2
 800d8fe:	b085      	sub	sp, #20
    if( ctx->cipher_info == NULL )
 800d900:	6802      	ldr	r2, [r0, #0]
{
 800d902:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800d906:	4604      	mov	r4, r0
 800d908:	460f      	mov	r7, r1
 800d90a:	4699      	mov	r9, r3
    if( ctx->cipher_info == NULL )
 800d90c:	b91a      	cbnz	r2, 800d916 <mbedtls_cipher_update+0x1e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800d90e:	485f      	ldr	r0, [pc, #380]	; (800da8c <mbedtls_cipher_update+0x194>)
}
 800d910:	b005      	add	sp, #20
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *olen = 0;
 800d916:	2100      	movs	r1, #0
 800d918:	f8c8 1000 	str.w	r1, [r8]
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800d91c:	7851      	ldrb	r1, [r2, #1]
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    return ctx->cipher_info->block_size;
 800d91e:	6956      	ldr	r6, [r2, #20]
 800d920:	2901      	cmp	r1, #1
 800d922:	d10f      	bne.n	800d944 <mbedtls_cipher_update+0x4c>
        if( ilen != block_size )
 800d924:	42b5      	cmp	r5, r6
 800d926:	f040 80ab 	bne.w	800da80 <mbedtls_cipher_update+0x188>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800d92a:	6992      	ldr	r2, [r2, #24]
        *olen = ilen;
 800d92c:	f8c8 5000 	str.w	r5, [r8]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800d930:	6855      	ldr	r5, [r2, #4]
 800d932:	f990 1008 	ldrsb.w	r1, [r0, #8]
 800d936:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800d938:	463a      	mov	r2, r7
 800d93a:	46ac      	mov	ip, r5
}
 800d93c:	b005      	add	sp, #20
 800d93e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800d942:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800d944:	2906      	cmp	r1, #6
 800d946:	d109      	bne.n	800d95c <mbedtls_cipher_update+0x64>
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800d948:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
        *olen = ilen;
 800d94a:	f8c8 5000 	str.w	r5, [r8]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800d94e:	463a      	mov	r2, r7
 800d950:	4629      	mov	r1, r5
}
 800d952:	b005      	add	sp, #20
 800d954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800d958:	f003 b9e4 	b.w	8010d24 <mbedtls_gcm_update>
    if ( 0 == block_size )
 800d95c:	2e00      	cmp	r6, #0
 800d95e:	f000 8091 	beq.w	800da84 <mbedtls_cipher_update+0x18c>
    if( input == output &&
 800d962:	429f      	cmp	r7, r3
 800d964:	d108      	bne.n	800d978 <mbedtls_cipher_update+0x80>
 800d966:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1d0      	bne.n	800d90e <mbedtls_cipher_update+0x16>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800d96c:	fbb5 f3f6 	udiv	r3, r5, r6
 800d970:	fb06 5313 	mls	r3, r6, r3, r5
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1ca      	bne.n	800d90e <mbedtls_cipher_update+0x16>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800d978:	2902      	cmp	r1, #2
 800d97a:	d16e      	bne.n	800da5a <mbedtls_cipher_update+0x162>
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800d97c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d980:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d982:	b97b      	cbnz	r3, 800d9a4 <mbedtls_cipher_update+0xac>
 800d984:	68e2      	ldr	r2, [r4, #12]
 800d986:	1a33      	subs	r3, r6, r0
 800d988:	b17a      	cbz	r2, 800d9aa <mbedtls_cipher_update+0xb2>
 800d98a:	42ab      	cmp	r3, r5
 800d98c:	d30f      	bcc.n	800d9ae <mbedtls_cipher_update+0xb6>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800d98e:	3014      	adds	r0, #20
 800d990:	462a      	mov	r2, r5
 800d992:	4639      	mov	r1, r7
 800d994:	4420      	add	r0, r4
 800d996:	f009 f890 	bl	8016aba <memcpy>
            ctx->unprocessed_len += ilen;
 800d99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d99c:	441d      	add	r5, r3
 800d99e:	6265      	str	r5, [r4, #36]	; 0x24
        return( 0 );
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e7b5      	b.n	800d910 <mbedtls_cipher_update+0x18>
                ilen < block_size - ctx->unprocessed_len ) ||
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d102      	bne.n	800d9ae <mbedtls_cipher_update+0xb6>
                ilen < block_size - ctx->unprocessed_len ) )
 800d9a8:	1a33      	subs	r3, r6, r0
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800d9aa:	42ab      	cmp	r3, r5
 800d9ac:	d8ef      	bhi.n	800d98e <mbedtls_cipher_update+0x96>
        if( 0 != ctx->unprocessed_len )
 800d9ae:	b310      	cbz	r0, 800d9f6 <mbedtls_cipher_update+0xfe>
            copy_len = block_size - ctx->unprocessed_len;
 800d9b0:	eba6 0a00 	sub.w	sl, r6, r0
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800d9b4:	3014      	adds	r0, #20
 800d9b6:	4652      	mov	r2, sl
 800d9b8:	4639      	mov	r1, r7
 800d9ba:	4420      	add	r0, r4
 800d9bc:	f009 f87d 	bl	8016aba <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800d9c0:	4623      	mov	r3, r4
 800d9c2:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800d9c6:	f853 2b14 	ldr.w	r2, [r3], #20
 800d9ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d9cc:	6992      	ldr	r2, [r2, #24]
 800d9ce:	e9cd 3900 	strd	r3, r9, [sp]
 800d9d2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800d9d6:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800d9da:	4632      	mov	r2, r6
 800d9dc:	47d8      	blx	fp
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d196      	bne.n	800d910 <mbedtls_cipher_update+0x18>
            *olen += block_size;
 800d9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9e6:	4433      	add	r3, r6
 800d9e8:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
 800d9ec:	44b1      	add	r9, r6
            ctx->unprocessed_len = 0;
 800d9ee:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 800d9f0:	4457      	add	r7, sl
            ilen -= copy_len;
 800d9f2:	eba5 050a 	sub.w	r5, r5, sl
        if( 0 != ilen )
 800d9f6:	2d00      	cmp	r5, #0
 800d9f8:	d0d2      	beq.n	800d9a0 <mbedtls_cipher_update+0xa8>
            copy_len = ilen % block_size;
 800d9fa:	fbb5 faf6 	udiv	sl, r5, r6
 800d9fe:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 800da02:	f1ba 0f00 	cmp.w	sl, #0
 800da06:	d106      	bne.n	800da16 <mbedtls_cipher_update+0x11e>
 800da08:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800da0c:	b91b      	cbnz	r3, 800da16 <mbedtls_cipher_update+0x11e>
                ctx->operation == MBEDTLS_DECRYPT &&
 800da0e:	68e3      	ldr	r3, [r4, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	bf18      	it	ne
 800da14:	46b2      	movne	sl, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 800da16:	eba5 050a 	sub.w	r5, r5, sl
 800da1a:	4652      	mov	r2, sl
 800da1c:	1979      	adds	r1, r7, r5
 800da1e:	f104 0014 	add.w	r0, r4, #20
 800da22:	f009 f84a 	bl	8016aba <memcpy>
            ctx->unprocessed_len += copy_len;
 800da26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da28:	4453      	add	r3, sl
 800da2a:	6263      	str	r3, [r4, #36]	; 0x24
        if( ilen )
 800da2c:	2d00      	cmp	r5, #0
 800da2e:	d0b7      	beq.n	800d9a0 <mbedtls_cipher_update+0xa8>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800da3a:	e9cd 7900 	strd	r7, r9, [sp]
 800da3e:	462a      	mov	r2, r5
 800da40:	689e      	ldr	r6, [r3, #8]
 800da42:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800da46:	47b0      	blx	r6
 800da48:	2800      	cmp	r0, #0
 800da4a:	f47f af61 	bne.w	800d910 <mbedtls_cipher_update+0x18>
            *olen += ilen;
 800da4e:	f8d8 3000 	ldr.w	r3, [r8]
 800da52:	441d      	add	r5, r3
        *olen = ilen;
 800da54:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
 800da58:	e75a      	b.n	800d910 <mbedtls_cipher_update+0x18>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )
 800da5a:	2903      	cmp	r1, #3
 800da5c:	d114      	bne.n	800da88 <mbedtls_cipher_update+0x190>
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 800da5e:	6993      	ldr	r3, [r2, #24]
 800da60:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800da64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800da66:	e9cd 7901 	strd	r7, r9, [sp, #4]
                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,
 800da6a:	f104 0228 	add.w	r2, r4, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 800da6e:	9200      	str	r2, [sp, #0]
 800da70:	68de      	ldr	r6, [r3, #12]
 800da72:	462a      	mov	r2, r5
 800da74:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800da78:	47b0      	blx	r6
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d0ea      	beq.n	800da54 <mbedtls_cipher_update+0x15c>
 800da7e:	e747      	b.n	800d910 <mbedtls_cipher_update+0x18>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800da80:	4803      	ldr	r0, [pc, #12]	; (800da90 <mbedtls_cipher_update+0x198>)
 800da82:	e745      	b.n	800d910 <mbedtls_cipher_update+0x18>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 800da84:	4803      	ldr	r0, [pc, #12]	; (800da94 <mbedtls_cipher_update+0x19c>)
 800da86:	e743      	b.n	800d910 <mbedtls_cipher_update+0x18>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800da88:	4803      	ldr	r0, [pc, #12]	; (800da98 <mbedtls_cipher_update+0x1a0>)
 800da8a:	e741      	b.n	800d910 <mbedtls_cipher_update+0x18>
 800da8c:	ffff9f00 	.word	0xffff9f00
 800da90:	ffff9d80 	.word	0xffff9d80
 800da94:	ffff9c80 	.word	0xffff9c80
 800da98:	ffff9f80 	.word	0xffff9f80

0800da9c <mbedtls_cipher_finish>:
                   unsigned char *output, size_t *olen )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800da9c:	6803      	ldr	r3, [r0, #0]
{
 800da9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daa0:	4604      	mov	r4, r0
 800daa2:	460e      	mov	r6, r1
 800daa4:	4615      	mov	r5, r2
    if( ctx->cipher_info == NULL )
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d050      	beq.n	800db4c <mbedtls_cipher_finish+0xb0>
         * accessible through the cipher layer. */
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 800daaa:	2000      	movs	r0, #0
 800daac:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800daae:	785a      	ldrb	r2, [r3, #1]
 800dab0:	1ed1      	subs	r1, r2, #3
 800dab2:	2904      	cmp	r1, #4
 800dab4:	d90c      	bls.n	800dad0 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 800dab6:	2a09      	cmp	r2, #9
 800dab8:	d00a      	beq.n	800dad0 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 800daba:	7819      	ldrb	r1, [r3, #0]
 800dabc:	3948      	subs	r1, #72	; 0x48
 800dabe:	2901      	cmp	r1, #1
 800dac0:	d906      	bls.n	800dad0 <mbedtls_cipher_finish+0x34>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 800dac2:	2a01      	cmp	r2, #1
 800dac4:	d106      	bne.n	800dad4 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
 800dac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dac8:	4283      	cmp	r3, r0
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800daca:	4822      	ldr	r0, [pc, #136]	; (800db54 <mbedtls_cipher_finish+0xb8>)
 800dacc:	bf08      	it	eq
 800dace:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 800dad0:	b003      	add	sp, #12
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 800dad4:	2a02      	cmp	r2, #2
 800dad6:	d13b      	bne.n	800db50 <mbedtls_cipher_finish+0xb4>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 800dad8:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800dadc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dade:	2901      	cmp	r1, #1
 800dae0:	d126      	bne.n	800db30 <mbedtls_cipher_finish+0x94>
            if( NULL == ctx->add_padding )
 800dae2:	68e7      	ldr	r7, [r4, #12]
 800dae4:	b90f      	cbnz	r7, 800daea <mbedtls_cipher_finish+0x4e>
                if( 0 != ctx->unprocessed_len )
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	e7ef      	b.n	800daca <mbedtls_cipher_finish+0x2e>
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;

    if( ctx->iv_size != 0 )
 800daea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 800daec:	f104 0014 	add.w	r0, r4, #20
 800daf0:	b901      	cbnz	r1, 800daf4 <mbedtls_cipher_finish+0x58>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 800daf2:	68d9      	ldr	r1, [r3, #12]
 800daf4:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800daf6:	4623      	mov	r3, r4
                ctx->unprocessed_data, output ) ) )
 800daf8:	f104 0714 	add.w	r7, r4, #20
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800dafc:	f853 2b28 	ldr.w	r2, [r3], #40
 800db00:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800db04:	6990      	ldr	r0, [r2, #24]
 800db06:	9601      	str	r6, [sp, #4]
 800db08:	9700      	str	r7, [sp, #0]
 800db0a:	6887      	ldr	r7, [r0, #8]
 800db0c:	6952      	ldr	r2, [r2, #20]
 800db0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800db10:	47b8      	blx	r7
 800db12:	2800      	cmp	r0, #0
 800db14:	d1dc      	bne.n	800dad0 <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 800db16:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800db1a:	6821      	ldr	r1, [r4, #0]
 800db1c:	b983      	cbnz	r3, 800db40 <mbedtls_cipher_finish+0xa4>
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800db1e:	6923      	ldr	r3, [r4, #16]
    if( ctx->cipher_info == NULL )
 800db20:	b101      	cbz	r1, 800db24 <mbedtls_cipher_finish+0x88>
    return ctx->cipher_info->block_size;
 800db22:	6949      	ldr	r1, [r1, #20]
 800db24:	462a      	mov	r2, r5
 800db26:	4630      	mov	r0, r6
}
 800db28:	b003      	add	sp, #12
 800db2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return( ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 800db2e:	4718      	bx	r3
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	4293      	cmp	r3, r2
 800db34:	d0df      	beq.n	800daf6 <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 800db36:	68e3      	ldr	r3, [r4, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0d4      	beq.n	800dae6 <mbedtls_cipher_finish+0x4a>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800db3c:	4805      	ldr	r0, [pc, #20]	; (800db54 <mbedtls_cipher_finish+0xb8>)
 800db3e:	e7c7      	b.n	800dad0 <mbedtls_cipher_finish+0x34>
    if( ctx->cipher_info == NULL )
 800db40:	b111      	cbz	r1, 800db48 <mbedtls_cipher_finish+0xac>
    return ctx->cipher_info->block_size;
 800db42:	694b      	ldr	r3, [r1, #20]
        *olen = mbedtls_cipher_get_block_size( ctx );
 800db44:	602b      	str	r3, [r5, #0]
        return( 0 );
 800db46:	e7c3      	b.n	800dad0 <mbedtls_cipher_finish+0x34>
        return 0;
 800db48:	4603      	mov	r3, r0
 800db4a:	e7fb      	b.n	800db44 <mbedtls_cipher_finish+0xa8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800db4c:	4802      	ldr	r0, [pc, #8]	; (800db58 <mbedtls_cipher_finish+0xbc>)
 800db4e:	e7bf      	b.n	800dad0 <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800db50:	4802      	ldr	r0, [pc, #8]	; (800db5c <mbedtls_cipher_finish+0xc0>)
 800db52:	e7bd      	b.n	800dad0 <mbedtls_cipher_finish+0x34>
 800db54:	ffff9d80 	.word	0xffff9d80
 800db58:	ffff9f00 	.word	0xffff9f00
 800db5c:	ffff9f80 	.word	0xffff9f80

0800db60 <mbedtls_cipher_set_padding_mode>:
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800db60:	6803      	ldr	r3, [r0, #0]
 800db62:	b153      	cbz	r3, 800db7a <mbedtls_cipher_set_padding_mode+0x1a>
 800db64:	785b      	ldrb	r3, [r3, #1]
 800db66:	2b02      	cmp	r3, #2
 800db68:	d107      	bne.n	800db7a <mbedtls_cipher_set_padding_mode+0x1a>

        return( 0 );
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch( mode )
 800db6a:	2904      	cmp	r1, #4
 800db6c:	d107      	bne.n	800db7e <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800db6e:	2300      	movs	r3, #0
        ctx->get_padding = get_no_padding;
 800db70:	4a04      	ldr	r2, [pc, #16]	; (800db84 <mbedtls_cipher_set_padding_mode+0x24>)
        ctx->add_padding = NULL;
 800db72:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 800db74:	6102      	str	r2, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800db76:	4618      	mov	r0, r3
 800db78:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800db7a:	4803      	ldr	r0, [pc, #12]	; (800db88 <mbedtls_cipher_set_padding_mode+0x28>)
 800db7c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800db7e:	4803      	ldr	r0, [pc, #12]	; (800db8c <mbedtls_cipher_set_padding_mode+0x2c>)
}
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	0800d801 	.word	0x0800d801
 800db88:	ffff9f00 	.word	0xffff9f00
 800db8c:	ffff9f80 	.word	0xffff9f80

0800db90 <mbedtls_cipher_setup>:
{
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4604      	mov	r4, r0
    if( cipher_info == NULL )
 800db94:	460d      	mov	r5, r1
 800db96:	b179      	cbz	r1, 800dbb8 <mbedtls_cipher_setup+0x28>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800db98:	2244      	movs	r2, #68	; 0x44
 800db9a:	2100      	movs	r1, #0
 800db9c:	f008 ffb1 	bl	8016b02 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800dba0:	69ab      	ldr	r3, [r5, #24]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	4798      	blx	r3
 800dba6:	63e0      	str	r0, [r4, #60]	; 0x3c
 800dba8:	b140      	cbz	r0, 800dbbc <mbedtls_cipher_setup+0x2c>
    ctx->cipher_info = cipher_info;
 800dbaa:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 800dbac:	2104      	movs	r1, #4
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f7ff ffd6 	bl	800db60 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 800dbb4:	2000      	movs	r0, #0
}
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800dbb8:	4801      	ldr	r0, [pc, #4]	; (800dbc0 <mbedtls_cipher_setup+0x30>)
 800dbba:	e7fc      	b.n	800dbb6 <mbedtls_cipher_setup+0x26>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800dbbc:	4801      	ldr	r0, [pc, #4]	; (800dbc4 <mbedtls_cipher_setup+0x34>)
 800dbbe:	e7fa      	b.n	800dbb6 <mbedtls_cipher_setup+0x26>
 800dbc0:	ffff9f00 	.word	0xffff9f00
 800dbc4:	ffff9e80 	.word	0xffff9e80

0800dbc8 <ccm_ctx_free>:

    return( ctx );
}

static void ccm_ctx_free( void *ctx )
{
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	4604      	mov	r4, r0
    mbedtls_ccm_free( ctx );
 800dbcc:	f7ff fdaf 	bl	800d72e <mbedtls_ccm_free>
    mbedtls_free( ctx );
 800dbd0:	4620      	mov	r0, r4
}
 800dbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800dbd6:	f008 bf59 	b.w	8016a8c <free>

0800dbda <ccm_ctx_alloc>:
{
 800dbda:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 800dbdc:	2144      	movs	r1, #68	; 0x44
 800dbde:	2001      	movs	r0, #1
 800dbe0:	f008 ff3e 	bl	8016a60 <calloc>
    if( ctx != NULL )
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	b108      	cbz	r0, 800dbec <ccm_ctx_alloc+0x12>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 800dbe8:	f7ff fd7a 	bl	800d6e0 <mbedtls_ccm_init>
}
 800dbec:	4620      	mov	r0, r4
 800dbee:	bd10      	pop	{r4, pc}

0800dbf0 <ccm_camellia_setkey_wrap>:

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	460a      	mov	r2, r1
 800dbf4:	2105      	movs	r1, #5
 800dbf6:	f7ff bd77 	b.w	800d6e8 <mbedtls_ccm_setkey>

0800dbfa <ccm_aes_setkey_wrap>:
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	460a      	mov	r2, r1
 800dbfe:	2102      	movs	r1, #2
 800dc00:	f7ff bd72 	b.w	800d6e8 <mbedtls_ccm_setkey>

0800dc04 <gcm_ctx_free>:
{
 800dc04:	b510      	push	{r4, lr}
 800dc06:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 800dc08:	f003 f982 	bl	8010f10 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800dc0c:	4620      	mov	r0, r4
}
 800dc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800dc12:	f008 bf3b 	b.w	8016a8c <free>

0800dc16 <gcm_ctx_alloc>:
{
 800dc16:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800dc18:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	f008 ff1f 	bl	8016a60 <calloc>
    if( ctx != NULL )
 800dc22:	4604      	mov	r4, r0
 800dc24:	b108      	cbz	r0, 800dc2a <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800dc26:	f002 ff09 	bl	8010a3c <mbedtls_gcm_init>
}
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	bd10      	pop	{r4, pc}

0800dc2e <gcm_camellia_setkey_wrap>:
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800dc2e:	4613      	mov	r3, r2
 800dc30:	460a      	mov	r2, r1
 800dc32:	2105      	movs	r1, #5
 800dc34:	f002 bf07 	b.w	8010a46 <mbedtls_gcm_setkey>

0800dc38 <gcm_aes_setkey_wrap>:
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800dc38:	4613      	mov	r3, r2
 800dc3a:	460a      	mov	r2, r1
 800dc3c:	2102      	movs	r1, #2
 800dc3e:	f002 bf02 	b.w	8010a46 <mbedtls_gcm_setkey>

0800dc42 <camellia_ctx_free>:
{
 800dc42:	b510      	push	{r4, lr}
 800dc44:	4604      	mov	r4, r0
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 800dc46:	f7ff f838 	bl	800ccba <mbedtls_camellia_free>
    mbedtls_free( ctx );
 800dc4a:	4620      	mov	r0, r4
}
 800dc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800dc50:	f008 bf1c 	b.w	8016a8c <free>

0800dc54 <camellia_ctx_alloc>:
{
 800dc54:	b510      	push	{r4, lr}
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 800dc56:	f44f 718a 	mov.w	r1, #276	; 0x114
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	f008 ff00 	bl	8016a60 <calloc>
    if( ctx == NULL )
 800dc60:	4604      	mov	r4, r0
 800dc62:	b108      	cbz	r0, 800dc68 <camellia_ctx_alloc+0x14>
    mbedtls_camellia_init( ctx );
 800dc64:	f7ff f824 	bl	800ccb0 <mbedtls_camellia_init>
}
 800dc68:	4620      	mov	r0, r4
 800dc6a:	bd10      	pop	{r4, pc}

0800dc6c <camellia_setkey_dec_wrap>:
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800dc6c:	f7ff ba42 	b.w	800d0f4 <mbedtls_camellia_setkey_dec>

0800dc70 <camellia_setkey_enc_wrap>:
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800dc70:	f7ff b82a 	b.w	800ccc8 <mbedtls_camellia_setkey_enc>

0800dc74 <camellia_crypt_cfb128_wrap>:
    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,
 800dc74:	f7ff bb7c 	b.w	800d370 <mbedtls_camellia_crypt_cfb128>

0800dc78 <camellia_crypt_cbc_wrap>:
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 800dc78:	f7ff bb11 	b.w	800d29e <mbedtls_camellia_crypt_cbc>

0800dc7c <camellia_crypt_ecb_wrap>:
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 800dc7c:	f7ff ba8b 	b.w	800d196 <mbedtls_camellia_crypt_ecb>

0800dc80 <aes_ctx_free>:
{
 800dc80:	b510      	push	{r4, lr}
 800dc82:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800dc84:	f7fc fad9 	bl	800a23a <mbedtls_aes_free>
    mbedtls_free( ctx );
 800dc88:	4620      	mov	r0, r4
}
 800dc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 800dc8e:	f008 befd 	b.w	8016a8c <free>

0800dc92 <aes_ctx_alloc>:
{
 800dc92:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800dc94:	f44f 718c 	mov.w	r1, #280	; 0x118
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f008 fee1 	bl	8016a60 <calloc>
    if( aes == NULL )
 800dc9e:	4604      	mov	r4, r0
 800dca0:	b108      	cbz	r0, 800dca6 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 800dca2:	f7fc fac5 	bl	800a230 <mbedtls_aes_init>
}
 800dca6:	4620      	mov	r0, r4
 800dca8:	bd10      	pop	{r4, pc}

0800dcaa <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800dcaa:	f7fc bbe1 	b.w	800a470 <mbedtls_aes_setkey_dec>

0800dcae <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800dcae:	f7fc bacb 	b.w	800a248 <mbedtls_aes_setkey_enc>

0800dcb2 <aes_crypt_cfb128_wrap>:
    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 800dcb2:	f7fd b82f 	b.w	800ad14 <mbedtls_aes_crypt_cfb128>

0800dcb6 <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800dcb6:	f7fc bfc5 	b.w	800ac44 <mbedtls_aes_crypt_cbc>

0800dcba <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800dcba:	f7fc bfb5 	b.w	800ac28 <mbedtls_aes_crypt_ecb>
	...

0800dcc0 <cmac_multiply_by_u>:
    const unsigned char R_64 = 0x1B;
    unsigned char R_n, mask;
    unsigned char overflow = 0x00;
    int i;

    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 800dcc0:	2a10      	cmp	r2, #16
{
 800dcc2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( blocksize == MBEDTLS_AES_BLOCK_SIZE )
 800dcc4:	d011      	beq.n	800dcea <cmac_multiply_by_u+0x2a>
    {
        R_n = R_128;
    }
    else if( blocksize == MBEDTLS_DES3_BLOCK_SIZE )
 800dcc6:	2a08      	cmp	r2, #8
 800dcc8:	d11a      	bne.n	800dd00 <cmac_multiply_by_u+0x40>
    {
        R_n = R_64;
 800dcca:	231b      	movs	r3, #27
    else
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    for( i = (int)blocksize - 1; i >= 0; i-- )
 800dccc:	1e55      	subs	r5, r2, #1
    unsigned char overflow = 0x00;
 800dcce:	2400      	movs	r4, #0
 800dcd0:	440a      	add	r2, r1
 800dcd2:	462e      	mov	r6, r5
    for( i = (int)blocksize - 1; i >= 0; i-- )
 800dcd4:	2d00      	cmp	r5, #0
 800dcd6:	da0a      	bge.n	800dcee <cmac_multiply_by_u+0x2e>
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    mask = - ( input[0] >> 7 );
 800dcd8:	f991 2000 	ldrsb.w	r2, [r1]
#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    output[ blocksize - 1 ] ^= R_n & mask;
 800dcdc:	ea03 73e2 	and.w	r3, r3, r2, asr #31
 800dce0:	5d82      	ldrb	r2, [r0, r6]
 800dce2:	4053      	eors	r3, r2
 800dce4:	5583      	strb	r3, [r0, r6]

    return( 0 );
 800dce6:	2000      	movs	r0, #0
}
 800dce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        R_n = R_128;
 800dcea:	2387      	movs	r3, #135	; 0x87
 800dcec:	e7ee      	b.n	800dccc <cmac_multiply_by_u+0xc>
        output[i] = input[i] << 1 | overflow;
 800dcee:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
 800dcf2:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 800dcf6:	5544      	strb	r4, [r0, r5]
        overflow = input[i] >> 7;
 800dcf8:	7814      	ldrb	r4, [r2, #0]
    for( i = (int)blocksize - 1; i >= 0; i-- )
 800dcfa:	3d01      	subs	r5, #1
        overflow = input[i] >> 7;
 800dcfc:	09e4      	lsrs	r4, r4, #7
 800dcfe:	e7e9      	b.n	800dcd4 <cmac_multiply_by_u+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800dd00:	4800      	ldr	r0, [pc, #0]	; (800dd04 <cmac_multiply_by_u+0x44>)
 800dd02:	e7f1      	b.n	800dce8 <cmac_multiply_by_u+0x28>
 800dd04:	ffff9f00 	.word	0xffff9f00

0800dd08 <cmac_xor_block>:

#if !defined(MBEDTLS_CMAC_ALT)
static void cmac_xor_block( unsigned char *output, const unsigned char *input1,
                            const unsigned char *input2,
                            const size_t block_size )
{
 800dd08:	b570      	push	{r4, r5, r6, lr}
    size_t idx;

    for( idx = 0; idx < block_size; idx++ )
 800dd0a:	2400      	movs	r4, #0
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	d100      	bne.n	800dd12 <cmac_xor_block+0xa>
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
}
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
        output[ idx ] = input1[ idx ] ^ input2[ idx ];
 800dd12:	5d0d      	ldrb	r5, [r1, r4]
 800dd14:	5d16      	ldrb	r6, [r2, r4]
 800dd16:	4075      	eors	r5, r6
 800dd18:	5505      	strb	r5, [r0, r4]
    for( idx = 0; idx < block_size; idx++ )
 800dd1a:	3401      	adds	r4, #1
 800dd1c:	e7f6      	b.n	800dd0c <cmac_xor_block+0x4>
	...

0800dd20 <mbedtls_cipher_cmac_starts>:
    }
}

int mbedtls_cipher_cmac_starts( mbedtls_cipher_context_t *ctx,
                                const unsigned char *key, size_t keybits )
{
 800dd20:	b538      	push	{r3, r4, r5, lr}
    mbedtls_cipher_type_t type;
    mbedtls_cmac_context_t *cmac_ctx;
    int retval;

    if( ctx == NULL || ctx->cipher_info == NULL || key == NULL )
 800dd22:	4605      	mov	r5, r0
 800dd24:	b1d0      	cbz	r0, 800dd5c <mbedtls_cipher_cmac_starts+0x3c>
 800dd26:	6804      	ldr	r4, [r0, #0]
 800dd28:	b1c4      	cbz	r4, 800dd5c <mbedtls_cipher_cmac_starts+0x3c>
 800dd2a:	b1b9      	cbz	r1, 800dd5c <mbedtls_cipher_cmac_starts+0x3c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( retval = mbedtls_cipher_setkey( ctx, key, (int)keybits,
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f7ff fda1 	bl	800d874 <mbedtls_cipher_setkey>
 800dd32:	4604      	mov	r4, r0
 800dd34:	b980      	cbnz	r0, 800dd58 <mbedtls_cipher_cmac_starts+0x38>
                                          MBEDTLS_ENCRYPT ) ) != 0 )
        return( retval );

    type = ctx->cipher_info->type;
 800dd36:	682b      	ldr	r3, [r5, #0]

    switch( type )
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b02      	cmp	r3, #2
 800dd3c:	d30e      	bcc.n	800dd5c <mbedtls_cipher_cmac_starts+0x3c>
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d901      	bls.n	800dd46 <mbedtls_cipher_cmac_starts+0x26>
 800dd42:	2b24      	cmp	r3, #36	; 0x24
 800dd44:	d10a      	bne.n	800dd5c <mbedtls_cipher_cmac_starts+0x3c>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    /* Allocated and initialise in the cipher context memory for the CMAC
     * context */
    cmac_ctx = mbedtls_calloc( 1, sizeof( mbedtls_cmac_context_t ) );
 800dd46:	2124      	movs	r1, #36	; 0x24
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f008 fe89 	bl	8016a60 <calloc>
    if( cmac_ctx == NULL )
 800dd4e:	b138      	cbz	r0, 800dd60 <mbedtls_cipher_cmac_starts+0x40>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cmac_ctx = cmac_ctx;
 800dd50:	6428      	str	r0, [r5, #64]	; 0x40

    mbedtls_platform_zeroize( cmac_ctx->state, sizeof( cmac_ctx->state ) );
 800dd52:	2110      	movs	r1, #16
 800dd54:	f004 faa4 	bl	80122a0 <mbedtls_platform_zeroize>

    return 0;
}
 800dd58:	4620      	mov	r0, r4
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800dd5c:	4c01      	ldr	r4, [pc, #4]	; (800dd64 <mbedtls_cipher_cmac_starts+0x44>)
 800dd5e:	e7fb      	b.n	800dd58 <mbedtls_cipher_cmac_starts+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 800dd60:	4c01      	ldr	r4, [pc, #4]	; (800dd68 <mbedtls_cipher_cmac_starts+0x48>)
 800dd62:	e7f9      	b.n	800dd58 <mbedtls_cipher_cmac_starts+0x38>
 800dd64:	ffff9f00 	.word	0xffff9f00
 800dd68:	ffff9e80 	.word	0xffff9e80

0800dd6c <mbedtls_cipher_cmac_update>:

int mbedtls_cipher_cmac_update( mbedtls_cipher_context_t *ctx,
                                const unsigned char *input, size_t ilen )
{
 800dd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd70:	460f      	mov	r7, r1
 800dd72:	b085      	sub	sp, #20
 800dd74:	4616      	mov	r6, r2
    mbedtls_cmac_context_t* cmac_ctx;
    unsigned char *state;
    int ret = 0;
    size_t n, j, olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 800dd76:	4681      	mov	r9, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d056      	beq.n	800de2a <mbedtls_cipher_cmac_update+0xbe>
 800dd7c:	6803      	ldr	r3, [r0, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d053      	beq.n	800de2a <mbedtls_cipher_cmac_update+0xbe>
 800dd82:	2900      	cmp	r1, #0
 800dd84:	d051      	beq.n	800de2a <mbedtls_cipher_cmac_update+0xbe>
        ctx->cmac_ctx == NULL )
 800dd86:	6c04      	ldr	r4, [r0, #64]	; 0x40
    if( ctx == NULL || ctx->cipher_info == NULL || input == NULL ||
 800dd88:	2c00      	cmp	r4, #0
 800dd8a:	d04e      	beq.n	800de2a <mbedtls_cipher_cmac_update+0xbe>
    block_size = ctx->cipher_info->block_size;
    state = ctx->cmac_ctx->state;

    /* Is there data still to process from the last call, that's greater in
     * size than a block? */
    if( cmac_ctx->unprocessed_len > 0 &&
 800dd8c:	6a20      	ldr	r0, [r4, #32]
    block_size = ctx->cipher_info->block_size;
 800dd8e:	695d      	ldr	r5, [r3, #20]
    if( cmac_ctx->unprocessed_len > 0 &&
 800dd90:	b1e0      	cbz	r0, 800ddcc <mbedtls_cipher_cmac_update+0x60>
        ilen > block_size - cmac_ctx->unprocessed_len )
 800dd92:	1a2a      	subs	r2, r5, r0
    if( cmac_ctx->unprocessed_len > 0 &&
 800dd94:	42b2      	cmp	r2, r6
 800dd96:	d219      	bcs.n	800ddcc <mbedtls_cipher_cmac_update+0x60>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 800dd98:	3010      	adds	r0, #16
 800dd9a:	4420      	add	r0, r4
 800dd9c:	f008 fe8d 	bl	8016aba <memcpy>
                input,
                block_size - cmac_ctx->unprocessed_len );

        cmac_xor_block( state, cmac_ctx->unprocessed_block, state, block_size );
 800dda0:	462b      	mov	r3, r5
 800dda2:	4622      	mov	r2, r4
 800dda4:	f104 0110 	add.w	r1, r4, #16
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f7ff ffad 	bl	800dd08 <cmac_xor_block>

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 800ddae:	ab03      	add	r3, sp, #12
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4648      	mov	r0, r9
 800ddba:	f7ff fd9d 	bl	800d8f8 <mbedtls_cipher_update>
 800ddbe:	b9e0      	cbnz	r0, 800ddfa <mbedtls_cipher_cmac_update+0x8e>
                                           &olen ) ) != 0 )
        {
           goto exit;
        }

        input += block_size - cmac_ctx->unprocessed_len;
 800ddc0:	6a23      	ldr	r3, [r4, #32]
        ilen -= block_size - cmac_ctx->unprocessed_len;
        cmac_ctx->unprocessed_len = 0;
 800ddc2:	6220      	str	r0, [r4, #32]
        input += block_size - cmac_ctx->unprocessed_len;
 800ddc4:	1aea      	subs	r2, r5, r3
 800ddc6:	441e      	add	r6, r3
 800ddc8:	4417      	add	r7, r2
        ilen -= block_size - cmac_ctx->unprocessed_len;
 800ddca:	1b76      	subs	r6, r6, r5
    }

    /* n is the number of blocks including any final partial block */
    n = ( ilen + block_size - 1 ) / block_size;
 800ddcc:	f105 38ff 	add.w	r8, r5, #4294967295

    /* Iterate across the input data in block sized chunks, excluding any
     * final partial or complete block */
    for( j = 1; j < n; j++ )
 800ddd0:	f04f 0a01 	mov.w	sl, #1
    {
        cmac_xor_block( state, input, state, block_size );

        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 800ddd4:	f10d 0b0c 	add.w	fp, sp, #12
    n = ( ilen + block_size - 1 ) / block_size;
 800ddd8:	44b0      	add	r8, r6
 800ddda:	fbb8 f8f5 	udiv	r8, r8, r5
    for( j = 1; j < n; j++ )
 800ddde:	45c2      	cmp	sl, r8
 800dde0:	d30e      	bcc.n	800de00 <mbedtls_cipher_cmac_update+0x94>
        ilen -= block_size;
        input += block_size;
    }

    /* If there is data left over that wasn't aligned to a block */
    if( ilen > 0 )
 800dde2:	b326      	cbz	r6, 800de2e <mbedtls_cipher_cmac_update+0xc2>
    {
        memcpy( &cmac_ctx->unprocessed_block[cmac_ctx->unprocessed_len],
 800dde4:	6a20      	ldr	r0, [r4, #32]
 800dde6:	3010      	adds	r0, #16
 800dde8:	4632      	mov	r2, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	4420      	add	r0, r4
 800ddee:	f008 fe64 	bl	8016aba <memcpy>
                input,
                ilen );
        cmac_ctx->unprocessed_len += ilen;
 800ddf2:	6a23      	ldr	r3, [r4, #32]
 800ddf4:	441e      	add	r6, r3
 800ddf6:	6226      	str	r6, [r4, #32]
 800ddf8:	2000      	movs	r0, #0
    }

exit:
    return( ret );
}
 800ddfa:	b005      	add	sp, #20
 800ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cmac_xor_block( state, input, state, block_size );
 800de00:	462b      	mov	r3, r5
 800de02:	4622      	mov	r2, r4
 800de04:	4639      	mov	r1, r7
 800de06:	4620      	mov	r0, r4
 800de08:	f7ff ff7e 	bl	800dd08 <cmac_xor_block>
        if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 800de0c:	f8cd b000 	str.w	fp, [sp]
 800de10:	4623      	mov	r3, r4
 800de12:	462a      	mov	r2, r5
 800de14:	4621      	mov	r1, r4
 800de16:	4648      	mov	r0, r9
 800de18:	f7ff fd6e 	bl	800d8f8 <mbedtls_cipher_update>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1ec      	bne.n	800ddfa <mbedtls_cipher_cmac_update+0x8e>
        ilen -= block_size;
 800de20:	1b76      	subs	r6, r6, r5
        input += block_size;
 800de22:	442f      	add	r7, r5
    for( j = 1; j < n; j++ )
 800de24:	f10a 0a01 	add.w	sl, sl, #1
 800de28:	e7d9      	b.n	800ddde <mbedtls_cipher_cmac_update+0x72>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800de2a:	4802      	ldr	r0, [pc, #8]	; (800de34 <mbedtls_cipher_cmac_update+0xc8>)
 800de2c:	e7e5      	b.n	800ddfa <mbedtls_cipher_cmac_update+0x8e>
exit:
 800de2e:	4630      	mov	r0, r6
 800de30:	e7e3      	b.n	800ddfa <mbedtls_cipher_cmac_update+0x8e>
 800de32:	bf00      	nop
 800de34:	ffff9f00 	.word	0xffff9f00

0800de38 <mbedtls_cipher_cmac_finish>:

int mbedtls_cipher_cmac_finish( mbedtls_cipher_context_t *ctx,
                                unsigned char *output )
{
 800de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3c:	4689      	mov	r9, r1
 800de3e:	b090      	sub	sp, #64	; 0x40
    unsigned char K2[MBEDTLS_CIPHER_BLKSIZE_MAX];
    unsigned char M_last[MBEDTLS_CIPHER_BLKSIZE_MAX];
    int ret;
    size_t olen, block_size;

    if( ctx == NULL || ctx->cipher_info == NULL || ctx->cmac_ctx == NULL ||
 800de40:	4682      	mov	sl, r0
 800de42:	2800      	cmp	r0, #0
 800de44:	d07d      	beq.n	800df42 <mbedtls_cipher_cmac_finish+0x10a>
 800de46:	6803      	ldr	r3, [r0, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d07a      	beq.n	800df42 <mbedtls_cipher_cmac_finish+0x10a>
 800de4c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800de4e:	2d00      	cmp	r5, #0
 800de50:	d077      	beq.n	800df42 <mbedtls_cipher_cmac_finish+0x10a>
 800de52:	2900      	cmp	r1, #0
 800de54:	d075      	beq.n	800df42 <mbedtls_cipher_cmac_finish+0x10a>

    cmac_ctx = ctx->cmac_ctx;
    block_size = ctx->cipher_info->block_size;
    state = cmac_ctx->state;

    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 800de56:	2110      	movs	r1, #16
 800de58:	eb0d 0001 	add.w	r0, sp, r1
    block_size = ctx->cipher_info->block_size;
 800de5c:	695f      	ldr	r7, [r3, #20]
    mbedtls_platform_zeroize( L, sizeof( L ) );
 800de5e:	ac0c      	add	r4, sp, #48	; 0x30
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 800de60:	f004 fa1e 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 800de64:	2110      	movs	r1, #16
 800de66:	a808      	add	r0, sp, #32
 800de68:	f004 fa1a 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 800de6c:	2110      	movs	r1, #16
 800de6e:	4620      	mov	r0, r4
 800de70:	f004 fa16 	bl	80122a0 <mbedtls_platform_zeroize>
    block_size = ctx->cipher_info->block_size;
 800de74:	f8da 3000 	ldr.w	r3, [sl]
 800de78:	f8d3 8014 	ldr.w	r8, [r3, #20]
    if( ( ret = mbedtls_cipher_update( ctx, L, block_size, L, &olen ) ) != 0 )
 800de7c:	ae03      	add	r6, sp, #12
 800de7e:	9600      	str	r6, [sp, #0]
 800de80:	4623      	mov	r3, r4
 800de82:	4642      	mov	r2, r8
 800de84:	4621      	mov	r1, r4
 800de86:	4650      	mov	r0, sl
 800de88:	f7ff fd36 	bl	800d8f8 <mbedtls_cipher_update>
 800de8c:	b950      	cbnz	r0, 800dea4 <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K1, L , block_size ) ) != 0 )
 800de8e:	4642      	mov	r2, r8
 800de90:	4621      	mov	r1, r4
 800de92:	a804      	add	r0, sp, #16
 800de94:	f7ff ff14 	bl	800dcc0 <cmac_multiply_by_u>
 800de98:	b920      	cbnz	r0, 800dea4 <mbedtls_cipher_cmac_finish+0x6c>
    if( ( ret = cmac_multiply_by_u( K2, K1 , block_size ) ) != 0 )
 800de9a:	4642      	mov	r2, r8
 800de9c:	a904      	add	r1, sp, #16
 800de9e:	a808      	add	r0, sp, #32
 800dea0:	f7ff ff0e 	bl	800dcc0 <cmac_multiply_by_u>
    mbedtls_platform_zeroize( L, sizeof( L ) );
 800dea4:	2110      	movs	r1, #16
 800dea6:	4620      	mov	r0, r4
 800dea8:	f004 f9fa 	bl	80122a0 <mbedtls_platform_zeroize>
    cmac_generate_subkeys( ctx, K1, K2 );

    last_block = cmac_ctx->unprocessed_block;

    /* Calculate last block */
    if( cmac_ctx->unprocessed_len < block_size )
 800deac:	6a2a      	ldr	r2, [r5, #32]
 800deae:	42ba      	cmp	r2, r7
    last_block = cmac_ctx->unprocessed_block;
 800deb0:	f105 0810 	add.w	r8, r5, #16
    if( cmac_ctx->unprocessed_len < block_size )
 800deb4:	d341      	bcc.n	800df3a <mbedtls_cipher_cmac_finish+0x102>
        cmac_xor_block( M_last, M_last, K2, block_size );
    }
    else
    {
        /* Last block is complete block */
        cmac_xor_block( M_last, last_block, K1, block_size );
 800deb6:	463b      	mov	r3, r7
 800deb8:	aa04      	add	r2, sp, #16
 800deba:	4641      	mov	r1, r8
 800debc:	e00b      	b.n	800ded6 <mbedtls_cipher_cmac_finish+0x9e>
        if( j < last_block_len )
 800debe:	429a      	cmp	r2, r3
 800dec0:	d937      	bls.n	800df32 <mbedtls_cipher_cmac_finish+0xfa>
            padded_block[j] = last_block[j];
 800dec2:	f818 c003 	ldrb.w	ip, [r8, r3]
 800dec6:	f804 c003 	strb.w	ip, [r4, r3]
    for( j = 0; j < padded_block_len; j++ )
 800deca:	3301      	adds	r3, #1
 800decc:	429f      	cmp	r7, r3
 800dece:	d1f6      	bne.n	800debe <mbedtls_cipher_cmac_finish+0x86>
        cmac_xor_block( M_last, M_last, K2, block_size );
 800ded0:	463b      	mov	r3, r7
 800ded2:	aa08      	add	r2, sp, #32
 800ded4:	4621      	mov	r1, r4
        cmac_xor_block( M_last, last_block, K1, block_size );
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff ff16 	bl	800dd08 <cmac_xor_block>
    }


    cmac_xor_block( state, M_last, state, block_size );
 800dedc:	4621      	mov	r1, r4
 800dede:	463b      	mov	r3, r7
 800dee0:	462a      	mov	r2, r5
 800dee2:	4628      	mov	r0, r5
 800dee4:	f7ff ff10 	bl	800dd08 <cmac_xor_block>
    if( ( ret = mbedtls_cipher_update( ctx, state, block_size, state,
 800dee8:	9600      	str	r6, [sp, #0]
 800deea:	462b      	mov	r3, r5
 800deec:	463a      	mov	r2, r7
 800deee:	4629      	mov	r1, r5
 800def0:	4650      	mov	r0, sl
 800def2:	f7ff fd01 	bl	800d8f8 <mbedtls_cipher_update>
 800def6:	4604      	mov	r4, r0
 800def8:	b920      	cbnz	r0, 800df04 <mbedtls_cipher_cmac_finish+0xcc>
                                       &olen ) ) != 0 )
    {
        goto exit;
    }

    memcpy( output, state, block_size );
 800defa:	463a      	mov	r2, r7
 800defc:	4629      	mov	r1, r5
 800defe:	4648      	mov	r0, r9
 800df00:	f008 fddb 	bl	8016aba <memcpy>

exit:
    /* Wipe the generated keys on the stack, and any other transients to avoid
     * side channel leakage */
    mbedtls_platform_zeroize( K1, sizeof( K1 ) );
 800df04:	2110      	movs	r1, #16
 800df06:	eb0d 0001 	add.w	r0, sp, r1
 800df0a:	f004 f9c9 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( K2, sizeof( K2 ) );
 800df0e:	2110      	movs	r1, #16
 800df10:	a808      	add	r0, sp, #32
 800df12:	f004 f9c5 	bl	80122a0 <mbedtls_platform_zeroize>

    cmac_ctx->unprocessed_len = 0;
 800df16:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 800df18:	2110      	movs	r1, #16
 800df1a:	4640      	mov	r0, r8
    cmac_ctx->unprocessed_len = 0;
 800df1c:	622b      	str	r3, [r5, #32]
    mbedtls_platform_zeroize( cmac_ctx->unprocessed_block,
 800df1e:	f004 f9bf 	bl	80122a0 <mbedtls_platform_zeroize>
                              sizeof( cmac_ctx->unprocessed_block ) );

    mbedtls_platform_zeroize( state, MBEDTLS_CIPHER_BLKSIZE_MAX );
 800df22:	2110      	movs	r1, #16
 800df24:	4628      	mov	r0, r5
 800df26:	f004 f9bb 	bl	80122a0 <mbedtls_platform_zeroize>
    return( ret );
}
 800df2a:	4620      	mov	r0, r4
 800df2c:	b010      	add	sp, #64	; 0x40
 800df2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            padded_block[j] = 0x80;
 800df32:	bf0c      	ite	eq
 800df34:	54a0      	strbeq	r0, [r4, r2]
            padded_block[j] = 0x00;
 800df36:	54e1      	strbne	r1, [r4, r3]
 800df38:	e7c7      	b.n	800deca <mbedtls_cipher_cmac_finish+0x92>
    for( j = 0; j < padded_block_len; j++ )
 800df3a:	2300      	movs	r3, #0
            padded_block[j] = 0x00;
 800df3c:	4619      	mov	r1, r3
            padded_block[j] = 0x80;
 800df3e:	2080      	movs	r0, #128	; 0x80
 800df40:	e7c4      	b.n	800decc <mbedtls_cipher_cmac_finish+0x94>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800df42:	4c01      	ldr	r4, [pc, #4]	; (800df48 <mbedtls_cipher_cmac_finish+0x110>)
 800df44:	e7f1      	b.n	800df2a <mbedtls_cipher_cmac_finish+0xf2>
 800df46:	bf00      	nop
 800df48:	ffff9f00 	.word	0xffff9f00

0800df4c <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 800df4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800df50:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 800df54:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800df58:	4607      	mov	r7, r0
 800df5a:	460e      	mov	r6, r1
 800df5c:	4615      	mov	r5, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800df5e:	f200 80a3 	bhi.w	800e0a8 <block_cipher_df+0x15c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 800df62:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800df66:	2100      	movs	r1, #0
 800df68:	a85e      	add	r0, sp, #376	; 0x178
 800df6a:	f008 fdca 	bl	8016b02 <memset>
            MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
    mbedtls_aes_init( &aes_ctx );
 800df6e:	a818      	add	r0, sp, #96	; 0x60
 800df70:	f7fc f95e 	bl	800a230 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 800df74:	0a2b      	lsrs	r3, r5, #8
 800df76:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 800df7a:	2330      	movs	r3, #48	; 0x30
 800df7c:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 800df80:	ab64      	add	r3, sp, #400	; 0x190
    *p++ = ( data_len >> 24 ) & 0xff;
 800df82:	2400      	movs	r4, #0
    memcpy( p, data, data_len );
 800df84:	462a      	mov	r2, r5
 800df86:	4618      	mov	r0, r3
 800df88:	4631      	mov	r1, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 800df8a:	f8ad 4188 	strh.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len       ) & 0xff;
 800df8e:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    memcpy( p, data, data_len );
 800df92:	f008 fd92 	bl	8016aba <memcpy>
    p[data_len] = 0x80;
 800df96:	2280      	movs	r2, #128	; 0x80
 800df98:	5542      	strb	r2, [r0, r5]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800df9a:	4623      	mov	r3, r4
        key[i] = i;
 800df9c:	f10d 0810 	add.w	r8, sp, #16
 800dfa0:	f803 3008 	strb.w	r3, [r3, r8]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	2b20      	cmp	r3, #32
 800dfa8:	d1fa      	bne.n	800dfa0 <block_cipher_df+0x54>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key,
 800dfaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfae:	4641      	mov	r1, r8
 800dfb0:	a818      	add	r0, sp, #96	; 0x60
 800dfb2:	f7fc f949 	bl	800a248 <mbedtls_aes_setkey_enc>
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d156      	bne.n	800e06a <block_cipher_df+0x11e>
    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 800dfbc:	f105 0619 	add.w	r6, r5, #25
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800dfc0:	4681      	mov	r9, r0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800dfc2:	466d      	mov	r5, sp
 800dfc4:	2210      	movs	r2, #16
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	f008 fd9a 	bl	8016b02 <memset>
 800dfce:	f20d 1a77 	addw	sl, sp, #375	; 0x177
        use_len = buf_len;
 800dfd2:	46b3      	mov	fp, r6
 800dfd4:	f10d 33ff 	add.w	r3, sp, #4294967295
 800dfd8:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 800dfdc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800dfe0:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 800dfe4:	4042      	eors	r2, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 800dfe6:	4551      	cmp	r1, sl
                chain[i] ^= p[i];
 800dfe8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 800dfea:	d1f7      	bne.n	800dfdc <block_cipher_df+0x90>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 800dfec:	f1bb 0f10 	cmp.w	fp, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 800dff0:	462b      	mov	r3, r5
 800dff2:	462a      	mov	r2, r5
 800dff4:	f04f 0101 	mov.w	r1, #1
 800dff8:	a818      	add	r0, sp, #96	; 0x60
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 800dffa:	bf94      	ite	ls
 800dffc:	ebab 0b0b 	subls.w	fp, fp, fp
 800e000:	f1ab 0b10 	subhi.w	fp, fp, #16
            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e004:	f7fc fe10 	bl	800ac28 <mbedtls_aes_crypt_ecb>
 800e008:	4604      	mov	r4, r0
 800e00a:	bb70      	cbnz	r0, 800e06a <block_cipher_df+0x11e>
        while( use_len > 0 )
 800e00c:	f1bb 0f00 	cmp.w	fp, #0
 800e010:	d1e0      	bne.n	800dfd4 <block_cipher_df+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800e012:	ab0c      	add	r3, sp, #48	; 0x30
 800e014:	eb09 0403 	add.w	r4, r9, r3
 800e018:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e01c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 800e020:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e024:	f109 0910 	add.w	r9, r9, #16
        buf[3]++;
 800e028:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e02a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        buf[3]++;
 800e02e:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e032:	d1c7      	bne.n	800dfc4 <block_cipher_df+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp,
 800e034:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e038:	a90c      	add	r1, sp, #48	; 0x30
 800e03a:	a818      	add	r0, sp, #96	; 0x60
 800e03c:	f7fc f904 	bl	800a248 <mbedtls_aes_setkey_enc>
 800e040:	4604      	mov	r4, r0
 800e042:	b990      	cbnz	r0, 800e06a <block_cipher_df+0x11e>
 800e044:	f107 0930 	add.w	r9, r7, #48	; 0x30
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;
 800e048:	463d      	mov	r5, r7

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e04a:	ae14      	add	r6, sp, #80	; 0x50
 800e04c:	4633      	mov	r3, r6
 800e04e:	4632      	mov	r2, r6
 800e050:	2101      	movs	r1, #1
 800e052:	a818      	add	r0, sp, #96	; 0x60
 800e054:	f7fc fde8 	bl	800ac28 <mbedtls_aes_crypt_ecb>
 800e058:	4604      	mov	r4, r0
 800e05a:	b930      	cbnz	r0, 800e06a <block_cipher_df+0x11e>
                                           iv, iv ) ) != 0 )
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800e05c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800e060:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800e064:	3510      	adds	r5, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e066:	45a9      	cmp	r9, r5
 800e068:	d1f0      	bne.n	800e04c <block_cipher_df+0x100>
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 800e06a:	a818      	add	r0, sp, #96	; 0x60
 800e06c:	f7fc f8e5 	bl	800a23a <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800e070:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800e074:	a85e      	add	r0, sp, #376	; 0x178
 800e076:	f004 f913 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800e07a:	2130      	movs	r1, #48	; 0x30
 800e07c:	eb0d 0001 	add.w	r0, sp, r1
 800e080:	f004 f90e 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 800e084:	2120      	movs	r1, #32
 800e086:	4640      	mov	r0, r8
 800e088:	f004 f90a 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 800e08c:	2110      	movs	r1, #16
 800e08e:	4668      	mov	r0, sp
 800e090:	f004 f906 	bl	80122a0 <mbedtls_platform_zeroize>
    if( 0 != ret )
 800e094:	b11c      	cbz	r4, 800e09e <block_cipher_df+0x152>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 800e096:	2130      	movs	r1, #48	; 0x30
 800e098:	4638      	mov	r0, r7
 800e09a:	f004 f901 	bl	80122a0 <mbedtls_platform_zeroize>
    }

    return( ret );
}
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800e0a8:	f06f 0437 	mvn.w	r4, #55	; 0x37
 800e0ac:	e7f7      	b.n	800e09e <block_cipher_df+0x152>

0800e0ae <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                          const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 800e0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b2:	b08c      	sub	sp, #48	; 0x30
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460e      	mov	r6, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 800e0b8:	2230      	movs	r2, #48	; 0x30
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4668      	mov	r0, sp
 800e0be:	f008 fd20 	bl	8016b02 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e0c2:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e0c6:	f104 0720 	add.w	r7, r4, #32
 800e0ca:	eb0d 0308 	add.w	r3, sp, r8
 800e0ce:	f104 0110 	add.w	r1, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 800e0d2:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 800e0d6:	3201      	adds	r2, #1
 800e0d8:	b2d2      	uxtb	r2, r2
 800e0da:	700a      	strb	r2, [r1, #0]
 800e0dc:	b90a      	cbnz	r2, 800e0e2 <ctr_drbg_update_internal+0x34>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800e0de:	42a1      	cmp	r1, r4
 800e0e0:	d1f7      	bne.n	800e0d2 <ctr_drbg_update_internal+0x24>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	4638      	mov	r0, r7
 800e0e8:	f7fc fd9e 	bl	800ac28 <mbedtls_aes_crypt_ecb>
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	bb18      	cbnz	r0, 800e138 <ctr_drbg_update_internal+0x8a>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e0f0:	f108 0810 	add.w	r8, r8, #16
 800e0f4:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 800e0f8:	d1e7      	bne.n	800e0ca <ctr_drbg_update_internal+0x1c>
 800e0fa:	1e73      	subs	r3, r6, #1
 800e0fc:	f10d 32ff 	add.w	r2, sp, #4294967295
 800e100:	362f      	adds	r6, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 800e102:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e106:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e10a:	4041      	eors	r1, r0
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800e10c:	42b3      	cmp	r3, r6
        tmp[i] ^= data[i];
 800e10e:	7011      	strb	r1, [r2, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800e110:	d1f7      	bne.n	800e102 <ctr_drbg_update_internal+0x54>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 800e112:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e116:	4669      	mov	r1, sp
 800e118:	4638      	mov	r0, r7
 800e11a:	f7fc f895 	bl	800a248 <mbedtls_aes_setkey_enc>
 800e11e:	4605      	mov	r5, r0
 800e120:	b950      	cbnz	r0, 800e138 <ctr_drbg_update_internal+0x8a>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 800e122:	aa08      	add	r2, sp, #32
 800e124:	ae0c      	add	r6, sp, #48	; 0x30
 800e126:	4613      	mov	r3, r2
 800e128:	cb03      	ldmia	r3!, {r0, r1}
 800e12a:	42b3      	cmp	r3, r6
 800e12c:	6020      	str	r0, [r4, #0]
 800e12e:	6061      	str	r1, [r4, #4]
 800e130:	461a      	mov	r2, r3
 800e132:	f104 0408 	add.w	r4, r4, #8
 800e136:	d1f6      	bne.n	800e126 <ctr_drbg_update_internal+0x78>
            MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800e138:	4668      	mov	r0, sp
 800e13a:	2130      	movs	r1, #48	; 0x30
 800e13c:	f004 f8b0 	bl	80122a0 <mbedtls_platform_zeroize>
    return( ret );
}
 800e140:	4628      	mov	r0, r5
 800e142:	b00c      	add	sp, #48	; 0x30
 800e144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e148 <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800e148:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e14c:	2100      	movs	r1, #0
 800e14e:	f008 bcd8 	b.w	8016b02 <memset>

0800e152 <mbedtls_ctr_drbg_free>:
{
 800e152:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800e154:	4604      	mov	r4, r0
 800e156:	b148      	cbz	r0, 800e16c <mbedtls_ctr_drbg_free+0x1a>
    mbedtls_aes_free( &ctx->aes_ctx );
 800e158:	3020      	adds	r0, #32
 800e15a:	f7fc f86e 	bl	800a23a <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800e15e:	4620      	mov	r0, r4
 800e160:	f44f 71a0 	mov.w	r1, #320	; 0x140
}
 800e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800e168:	f004 b89a 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 800e16c:	bd10      	pop	{r4, pc}

0800e16e <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 800e16e:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 800e170:	6984      	ldr	r4, [r0, #24]
 800e172:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
{
 800e176:	b0e1      	sub	sp, #388	; 0x184
 800e178:	4605      	mov	r5, r0
 800e17a:	460f      	mov	r7, r1
 800e17c:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 800e17e:	d832      	bhi.n	800e1e6 <mbedtls_ctr_drbg_reseed+0x78>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 800e180:	f5c4 73c0 	rsb	r3, r4, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 800e184:	4293      	cmp	r3, r2
 800e186:	d32e      	bcc.n	800e1e6 <mbedtls_ctr_drbg_reseed+0x78>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 800e188:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800e18c:	2100      	movs	r1, #0
 800e18e:	4668      	mov	r0, sp
 800e190:	f008 fcb7 	bl	8016b02 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 800e194:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800e198:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
 800e19c:	4622      	mov	r2, r4
 800e19e:	4669      	mov	r1, sp
 800e1a0:	4798      	blx	r3
 800e1a2:	bb18      	cbnz	r0, 800e1ec <mbedtls_ctr_drbg_reseed+0x7e>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 800e1a4:	69ac      	ldr	r4, [r5, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 800e1a6:	b13f      	cbz	r7, 800e1b8 <mbedtls_ctr_drbg_reseed+0x4a>
 800e1a8:	b136      	cbz	r6, 800e1b8 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 800e1aa:	eb0d 0004 	add.w	r0, sp, r4
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	f008 fc82 	bl	8016aba <memcpy>
        seedlen += len;
 800e1b6:	4434      	add	r4, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 800e1b8:	4622      	mov	r2, r4
 800e1ba:	4669      	mov	r1, sp
 800e1bc:	4668      	mov	r0, sp
 800e1be:	f7ff fec5 	bl	800df4c <block_cipher_df>
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	b938      	cbnz	r0, 800e1d6 <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 800e1c6:	4669      	mov	r1, sp
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7ff ff70 	bl	800e0ae <ctr_drbg_update_internal>
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	b908      	cbnz	r0, 800e1d6 <mbedtls_ctr_drbg_reseed+0x68>
        goto exit;
    ctx->reseed_counter = 1;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	612b      	str	r3, [r5, #16]

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 800e1d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800e1da:	4668      	mov	r0, sp
 800e1dc:	f004 f860 	bl	80122a0 <mbedtls_platform_zeroize>
    return( ret );
}
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	b061      	add	sp, #388	; 0x184
 800e1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800e1e6:	f06f 0437 	mvn.w	r4, #55	; 0x37
 800e1ea:	e7f9      	b.n	800e1e0 <mbedtls_ctr_drbg_reseed+0x72>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 800e1ec:	f06f 0433 	mvn.w	r4, #51	; 0x33
 800e1f0:	e7f6      	b.n	800e1e0 <mbedtls_ctr_drbg_reseed+0x72>

0800e1f2 <mbedtls_ctr_drbg_seed_entropy_len>:
{
 800e1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	b088      	sub	sp, #32
 800e1fa:	4688      	mov	r8, r1
 800e1fc:	4617      	mov	r7, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800e1fe:	2100      	movs	r1, #0
 800e200:	2220      	movs	r2, #32
    mbedtls_aes_init( &ctx->aes_ctx );
 800e202:	f104 0520 	add.w	r5, r4, #32
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800e206:	4668      	mov	r0, sp
{
 800e208:	461e      	mov	r6, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800e20a:	f008 fc7a 	bl	8016b02 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 800e20e:	4628      	mov	r0, r5
 800e210:	f7fc f80e 	bl	800a230 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 800e214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e216:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 800e218:	f242 7310 	movw	r3, #10000	; 0x2710
    ctx->f_entropy = f_entropy;
 800e21c:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 800e220:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 800e224:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 800e226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e22a:	4669      	mov	r1, sp
 800e22c:	4628      	mov	r0, r5
 800e22e:	f7fc f80b 	bl	800a248 <mbedtls_aes_setkey_enc>
 800e232:	b920      	cbnz	r0, 800e23e <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 800e234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e236:	4631      	mov	r1, r6
 800e238:	4620      	mov	r0, r4
 800e23a:	f7ff ff98 	bl	800e16e <mbedtls_ctr_drbg_reseed>
}
 800e23e:	b008      	add	sp, #32
 800e240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e244 <mbedtls_ctr_drbg_seed>:
{
 800e244:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy,
 800e246:	2420      	movs	r4, #32
 800e248:	9401      	str	r4, [sp, #4]
 800e24a:	9c04      	ldr	r4, [sp, #16]
 800e24c:	9400      	str	r4, [sp, #0]
 800e24e:	f7ff ffd0 	bl	800e1f2 <mbedtls_ctr_drbg_seed_entropy_len>
}
 800e252:	b002      	add	sp, #8
 800e254:	bd10      	pop	{r4, pc}

0800e256 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 800e256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25a:	b090      	sub	sp, #64	; 0x40
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 800e25c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 800e260:	4604      	mov	r4, r0
 800e262:	460e      	mov	r6, r1
 800e264:	4615      	mov	r5, r2
 800e266:	4698      	mov	r8, r3
 800e268:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 800e26a:	d859      	bhi.n	800e320 <mbedtls_ctr_drbg_random_with_add+0xca>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 800e26c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800e270:	d859      	bhi.n	800e326 <mbedtls_ctr_drbg_random_with_add+0xd0>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 800e272:	2230      	movs	r2, #48	; 0x30
 800e274:	2100      	movs	r1, #0
 800e276:	a804      	add	r0, sp, #16
 800e278:	f008 fc43 	bl	8016b02 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 800e27c:	6922      	ldr	r2, [r4, #16]
 800e27e:	69e3      	ldr	r3, [r4, #28]
 800e280:	429a      	cmp	r2, r3
 800e282:	dc01      	bgt.n	800e288 <mbedtls_ctr_drbg_random_with_add+0x32>
 800e284:	6963      	ldr	r3, [r4, #20]
 800e286:	b18b      	cbz	r3, 800e2ac <mbedtls_ctr_drbg_random_with_add+0x56>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 800e288:	463a      	mov	r2, r7
 800e28a:	4641      	mov	r1, r8
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7ff ff6e 	bl	800e16e <mbedtls_ctr_drbg_reseed>
 800e292:	bb10      	cbnz	r0, 800e2da <mbedtls_ctr_drbg_random_with_add+0x84>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e294:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 800e298:	bb15      	cbnz	r5, 800e2e0 <mbedtls_ctr_drbg_random_with_add+0x8a>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4620      	mov	r0, r4
 800e29e:	f7ff ff06 	bl	800e0ae <ctr_drbg_update_internal>
 800e2a2:	b988      	cbnz	r0, 800e2c8 <mbedtls_ctr_drbg_random_with_add+0x72>
        goto exit;

    ctx->reseed_counter++;
 800e2a4:	6923      	ldr	r3, [r4, #16]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	6123      	str	r3, [r4, #16]
 800e2aa:	e00d      	b.n	800e2c8 <mbedtls_ctr_drbg_random_with_add+0x72>
    if( add_len > 0 )
 800e2ac:	2f00      	cmp	r7, #0
 800e2ae:	d0f1      	beq.n	800e294 <mbedtls_ctr_drbg_random_with_add+0x3e>
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 800e2b0:	463a      	mov	r2, r7
 800e2b2:	4641      	mov	r1, r8
 800e2b4:	a804      	add	r0, sp, #16
 800e2b6:	f7ff fe49 	bl	800df4c <block_cipher_df>
 800e2ba:	b928      	cbnz	r0, 800e2c8 <mbedtls_ctr_drbg_random_with_add+0x72>
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800e2bc:	a904      	add	r1, sp, #16
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f7ff fef5 	bl	800e0ae <ctr_drbg_update_internal>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d0e5      	beq.n	800e294 <mbedtls_ctr_drbg_random_with_add+0x3e>

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 800e2c8:	2130      	movs	r1, #48	; 0x30
 800e2ca:	a804      	add	r0, sp, #16
 800e2cc:	f003 ffe8 	bl	80122a0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800e2d0:	4668      	mov	r0, sp
 800e2d2:	2110      	movs	r1, #16
 800e2d4:	f003 ffe4 	bl	80122a0 <mbedtls_platform_zeroize>
    return( 0 );
 800e2d8:	2000      	movs	r0, #0
}
 800e2da:	b010      	add	sp, #64	; 0x40
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	f104 0210 	add.w	r2, r4, #16
            if( ++ctx->counter[i - 1] != 0 )
 800e2e4:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	7013      	strb	r3, [r2, #0]
 800e2ee:	b90b      	cbnz	r3, 800e2f4 <mbedtls_ctr_drbg_random_with_add+0x9e>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800e2f0:	42a2      	cmp	r2, r4
 800e2f2:	d1f7      	bne.n	800e2e4 <mbedtls_ctr_drbg_random_with_add+0x8e>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800e2f4:	466b      	mov	r3, sp
 800e2f6:	4622      	mov	r2, r4
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7fc fc94 	bl	800ac28 <mbedtls_aes_crypt_ecb>
 800e300:	2800      	cmp	r0, #0
 800e302:	d1e1      	bne.n	800e2c8 <mbedtls_ctr_drbg_random_with_add+0x72>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800e304:	2d10      	cmp	r5, #16
 800e306:	46a8      	mov	r8, r5
 800e308:	bf28      	it	cs
 800e30a:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 800e30e:	4630      	mov	r0, r6
 800e310:	4642      	mov	r2, r8
 800e312:	4669      	mov	r1, sp
 800e314:	f008 fbd1 	bl	8016aba <memcpy>
        p += use_len;
 800e318:	4446      	add	r6, r8
        output_len -= use_len;
 800e31a:	eba5 0508 	sub.w	r5, r5, r8
 800e31e:	e7bb      	b.n	800e298 <mbedtls_ctr_drbg_random_with_add+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 800e320:	f06f 0035 	mvn.w	r0, #53	; 0x35
 800e324:	e7d9      	b.n	800e2da <mbedtls_ctr_drbg_random_with_add+0x84>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800e326:	f06f 0037 	mvn.w	r0, #55	; 0x37
 800e32a:	e7d6      	b.n	800e2da <mbedtls_ctr_drbg_random_with_add+0x84>

0800e32c <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output,
                             size_t output_len )
{
 800e32c:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 800e32e:	2300      	movs	r3, #0
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	f7ff ff90 	bl	800e256 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 800e336:	b003      	add	sp, #12
 800e338:	f85d fb04 	ldr.w	pc, [sp], #4

0800e33c <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 800e33e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800e340:	3407      	adds	r4, #7
 800e342:	08e4      	lsrs	r4, r4, #3
    size_t use_size = blen > n_size ? n_size : blen;
 800e344:	429c      	cmp	r4, r3
{
 800e346:	460e      	mov	r6, r1
    size_t use_size = blen > n_size ? n_size : blen;
 800e348:	bf28      	it	cs
 800e34a:	461c      	movcs	r4, r3
{
 800e34c:	4611      	mov	r1, r2
 800e34e:	4605      	mov	r5, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 800e350:	4622      	mov	r2, r4
 800e352:	4630      	mov	r0, r6
 800e354:	f7fd f9a5 	bl	800b6a2 <mbedtls_mpi_read_binary>
 800e358:	4607      	mov	r7, r0
 800e35a:	b950      	cbnz	r0, 800e372 <derive_mpi+0x36>
    if( use_size * 8 > grp->nbits )
 800e35c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800e35e:	00e4      	lsls	r4, r4, #3
 800e360:	428c      	cmp	r4, r1
 800e362:	d808      	bhi.n	800e376 <derive_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 800e364:	354c      	adds	r5, #76	; 0x4c
 800e366:	4629      	mov	r1, r5
 800e368:	4630      	mov	r0, r6
 800e36a:	f7fd fb1f 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e36e:	2800      	cmp	r0, #0
 800e370:	da09      	bge.n	800e386 <derive_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
 800e372:	4638      	mov	r0, r7
 800e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800e376:	1a61      	subs	r1, r4, r1
 800e378:	4630      	mov	r0, r6
 800e37a:	f7fd fa47 	bl	800b80c <mbedtls_mpi_shift_r>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d0f0      	beq.n	800e364 <derive_mpi+0x28>
cleanup:
 800e382:	4607      	mov	r7, r0
    return( ret );
 800e384:	e7f5      	b.n	800e372 <derive_mpi+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800e386:	462a      	mov	r2, r5
 800e388:	4631      	mov	r1, r6
 800e38a:	4630      	mov	r0, r6
}
 800e38c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800e390:	f7fd bc25 	b.w	800bbde <mbedtls_mpi_sub_mpi>

0800e394 <ecdsa_sign_restartable.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 800e394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800e39a:	6d43      	ldr	r3, [r0, #84]	; 0x54
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 800e39c:	b09b      	sub	sp, #108	; 0x6c
 800e39e:	4606      	mov	r6, r0
 800e3a0:	468a      	mov	sl, r1
 800e3a2:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 80b6 	beq.w	800e516 <ecdsa_sign_restartable.isra.0+0x182>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800e3aa:	2101      	movs	r1, #1
 800e3ac:	4658      	mov	r0, fp
 800e3ae:	f7fd fb3d 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	da04      	bge.n	800e3c0 <ecdsa_sign_restartable.isra.0+0x2c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800e3b6:	4b59      	ldr	r3, [pc, #356]	; (800e51c <ecdsa_sign_restartable.isra.0+0x188>)
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	b01b      	add	sp, #108	; 0x6c
 800e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800e3c0:	f106 074c 	add.w	r7, r6, #76	; 0x4c
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	4658      	mov	r0, fp
 800e3c8:	f7fd faf0 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	daf2      	bge.n	800e3b6 <ecdsa_sign_restartable.isra.0+0x22>
    mbedtls_ecp_point_init( &R );
 800e3d0:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 800e3d2:	ad08      	add	r5, sp, #32
    mbedtls_ecp_point_init( &R );
 800e3d4:	f000 fed6 	bl	800f184 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f7fd f818 	bl	800b40e <mbedtls_mpi_init>
 800e3de:	a80b      	add	r0, sp, #44	; 0x2c
 800e3e0:	f7fd f815 	bl	800b40e <mbedtls_mpi_init>
 800e3e4:	a80e      	add	r0, sp, #56	; 0x38
 800e3e6:	f7fd f812 	bl	800b40e <mbedtls_mpi_init>
 800e3ea:	f10d 0918 	add.w	r9, sp, #24
    *p_sign_tries = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	9307      	str	r3, [sp, #28]
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 800e3f2:	46c8      	mov	r8, r9
        *p_key_tries = 0;
 800e3f4:	9305      	str	r3, [sp, #20]
        if( *p_sign_tries++ > 10 )
 800e3f6:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800e3fa:	2b0a      	cmp	r3, #10
 800e3fc:	f300 8089 	bgt.w	800e512 <ecdsa_sign_restartable.isra.0+0x17e>
        *p_key_tries = 0;
 800e400:	9b05      	ldr	r3, [sp, #20]
 800e402:	f8c8 3000 	str.w	r3, [r8]
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 800e406:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800e40a:	9304      	str	r3, [sp, #16]
            if( *p_key_tries++ > 10 )
 800e40c:	f858 3b04 	ldr.w	r3, [r8], #4
 800e410:	2b0a      	cmp	r3, #10
 800e412:	dc7e      	bgt.n	800e512 <ecdsa_sign_restartable.isra.0+0x17e>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 800e414:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800e418:	4629      	mov	r1, r5
 800e41a:	4630      	mov	r0, r6
 800e41c:	f001 fdea 	bl	800fff4 <mbedtls_ecp_gen_privkey>
 800e420:	4603      	mov	r3, r0
 800e422:	2800      	cmp	r0, #0
 800e424:	d166      	bne.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 800e426:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e42c:	9002      	str	r0, [sp, #8]
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	462a      	mov	r2, r5
 800e432:	9b04      	ldr	r3, [sp, #16]
 800e434:	a911      	add	r1, sp, #68	; 0x44
 800e436:	4630      	mov	r0, r6
 800e438:	f001 fc34 	bl	800fca4 <mbedtls_ecp_mul_restartable>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2800      	cmp	r0, #0
 800e440:	d158      	bne.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 800e442:	463a      	mov	r2, r7
 800e444:	a911      	add	r1, sp, #68	; 0x44
 800e446:	4650      	mov	r0, sl
 800e448:	f7fd fe45 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2800      	cmp	r0, #0
 800e450:	d150      	bne.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 800e452:	4601      	mov	r1, r0
 800e454:	4650      	mov	r0, sl
 800e456:	f7fd fae9 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d0d6      	beq.n	800e40c <ecdsa_sign_restartable.isra.0+0x78>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800e45e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800e462:	a90b      	add	r1, sp, #44	; 0x2c
 800e464:	4630      	mov	r0, r6
 800e466:	f7ff ff69 	bl	800e33c <derive_mpi>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d141      	bne.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 800e470:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800e474:	a90e      	add	r1, sp, #56	; 0x38
 800e476:	4630      	mov	r0, r6
 800e478:	f001 fdbc 	bl	800fff4 <mbedtls_ecp_gen_privkey>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2800      	cmp	r0, #0
 800e480:	d138      	bne.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 800e482:	465a      	mov	r2, fp
 800e484:	4651      	mov	r1, sl
 800e486:	4620      	mov	r0, r4
 800e488:	f7fd fbf8 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e48c:	4603      	mov	r3, r0
 800e48e:	bb88      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 800e490:	a90b      	add	r1, sp, #44	; 0x2c
 800e492:	4622      	mov	r2, r4
 800e494:	4608      	mov	r0, r1
 800e496:	f7fd fb80 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800e49a:	4603      	mov	r3, r0
 800e49c:	bb50      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 800e49e:	a90b      	add	r1, sp, #44	; 0x2c
 800e4a0:	aa0e      	add	r2, sp, #56	; 0x38
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	f7fd fbea 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	bb18      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 800e4ac:	aa0e      	add	r2, sp, #56	; 0x38
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f7fd fbe3 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	b9e0      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f7fe fa2f 	bl	800c922 <mbedtls_mpi_inv_mod>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	b9a8      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 800e4c8:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7fd fbd5 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	b970      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 800e4d6:	463a      	mov	r2, r7
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f7fd fdfb 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	b938      	cbnz	r0, 800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 800e4e4:	4601      	mov	r1, r0
 800e4e6:	9004      	str	r0, [sp, #16]
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7fd fa9f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e4ee:	9b04      	ldr	r3, [sp, #16]
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d080      	beq.n	800e3f6 <ecdsa_sign_restartable.isra.0+0x62>
    mbedtls_ecp_point_free( &R );
 800e4f4:	a811      	add	r0, sp, #68	; 0x44
 800e4f6:	9304      	str	r3, [sp, #16]
 800e4f8:	f000 fe81 	bl	800f1fe <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 800e4fc:	a808      	add	r0, sp, #32
 800e4fe:	f7fc ff8c 	bl	800b41a <mbedtls_mpi_free>
 800e502:	a80b      	add	r0, sp, #44	; 0x2c
 800e504:	f7fc ff89 	bl	800b41a <mbedtls_mpi_free>
 800e508:	a80e      	add	r0, sp, #56	; 0x38
 800e50a:	f7fc ff86 	bl	800b41a <mbedtls_mpi_free>
 800e50e:	9b04      	ldr	r3, [sp, #16]
 800e510:	e752      	b.n	800e3b8 <ecdsa_sign_restartable.isra.0+0x24>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 800e512:	4b03      	ldr	r3, [pc, #12]	; (800e520 <ecdsa_sign_restartable.isra.0+0x18c>)
 800e514:	e7ee      	b.n	800e4f4 <ecdsa_sign_restartable.isra.0+0x160>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e516:	4b03      	ldr	r3, [pc, #12]	; (800e524 <ecdsa_sign_restartable.isra.0+0x190>)
 800e518:	e74e      	b.n	800e3b8 <ecdsa_sign_restartable.isra.0+0x24>
 800e51a:	bf00      	nop
 800e51c:	ffffb380 	.word	0xffffb380
 800e520:	ffffb300 	.word	0xffffb300
 800e524:	ffffb080 	.word	0xffffb080

0800e528 <ecdsa_sign_det_restartable.isra.1>:

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
/*
 * Deterministic signature wrapper
 */
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	b0bb      	sub	sp, #236	; 0xec
{
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    mbedtls_hmac_drbg_context *p_rng = &rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 800e52e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 800e530:	4606      	mov	r6, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800e532:	f89d 0118 	ldrb.w	r0, [sp, #280]	; 0x118
static int ecdsa_sign_det_restartable( mbedtls_ecp_group *grp,
 800e536:	468a      	mov	sl, r1
 800e538:	4693      	mov	fp, r2
 800e53a:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800e53c:	f002 fe34 	bl	80111a8 <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 800e540:	3407      	adds	r4, #7
 800e542:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 800e544:	4681      	mov	r9, r0
 800e546:	2800      	cmp	r0, #0
 800e548:	d03b      	beq.n	800e5c2 <ecdsa_sign_det_restartable.isra.1+0x9a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 800e54a:	a805      	add	r0, sp, #20
    mbedtls_hmac_drbg_init( &rng_ctx );
 800e54c:	ad08      	add	r5, sp, #32
    mbedtls_mpi_init( &h );
 800e54e:	f7fc ff5e 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 800e552:	4628      	mov	r0, r5
 800e554:	f002 fce9 	bl	8010f2a <mbedtls_hmac_drbg_init>
            goto sign;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 800e558:	4622      	mov	r2, r4
 800e55a:	a919      	add	r1, sp, #100	; 0x64
 800e55c:	4638      	mov	r0, r7
 800e55e:	f7fd f8d8 	bl	800b712 <mbedtls_mpi_write_binary>
 800e562:	4680      	mov	r8, r0
 800e564:	bb18      	cbnz	r0, 800e5ae <ecdsa_sign_det_restartable.isra.1+0x86>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 800e566:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e568:	9a44      	ldr	r2, [sp, #272]	; 0x110
 800e56a:	a905      	add	r1, sp, #20
 800e56c:	4630      	mov	r0, r6
 800e56e:	f7ff fee5 	bl	800e33c <derive_mpi>
 800e572:	4680      	mov	r8, r0
 800e574:	b9d8      	cbnz	r0, 800e5ae <ecdsa_sign_det_restartable.isra.1+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 800e576:	ab19      	add	r3, sp, #100	; 0x64
 800e578:	4622      	mov	r2, r4
 800e57a:	1919      	adds	r1, r3, r4
 800e57c:	a805      	add	r0, sp, #20
 800e57e:	f7fd f8c8 	bl	800b712 <mbedtls_mpi_write_binary>
 800e582:	4680      	mov	r8, r0
 800e584:	b998      	cbnz	r0, 800e5ae <ecdsa_sign_det_restartable.isra.1+0x86>
    mbedtls_hmac_drbg_seed_buf( p_rng, md_info, data, 2 * grp_len );
 800e586:	0063      	lsls	r3, r4, #1
 800e588:	aa19      	add	r2, sp, #100	; 0x64
 800e58a:	4649      	mov	r1, r9
 800e58c:	4628      	mov	r0, r5
 800e58e:	f002 fd38 	bl	8011002 <mbedtls_hmac_drbg_seed_buf>
#endif
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
                              mbedtls_hmac_drbg_random, p_rng );
#else
    ret = ecdsa_sign_restartable( grp, r, s, d, buf, blen,
 800e592:	4b0d      	ldr	r3, [pc, #52]	; (800e5c8 <ecdsa_sign_det_restartable.isra.1+0xa0>)
 800e594:	9302      	str	r3, [sp, #8]
 800e596:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	9503      	str	r5, [sp, #12]
 800e5a0:	463b      	mov	r3, r7
 800e5a2:	465a      	mov	r2, fp
 800e5a4:	4651      	mov	r1, sl
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f7ff fef4 	bl	800e394 <ecdsa_sign_restartable.isra.0>
 800e5ac:	4680      	mov	r8, r0
                      mbedtls_hmac_drbg_random, p_rng, rs_ctx );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f002 fdee 	bl	8011190 <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 800e5b4:	a805      	add	r0, sp, #20
 800e5b6:	f7fc ff30 	bl	800b41a <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( det );

    return( ret );
}
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	b03b      	add	sp, #236	; 0xec
 800e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e5c2:	f8df 8008 	ldr.w	r8, [pc, #8]	; 800e5cc <ecdsa_sign_det_restartable.isra.1+0xa4>
 800e5c6:	e7f8      	b.n	800e5ba <ecdsa_sign_det_restartable.isra.1+0x92>
 800e5c8:	08011181 	.word	0x08011181
 800e5cc:	ffffb080 	.word	0xffffb080

0800e5d0 <ecdsa_verify_restartable.isra.2>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d4:	b09a      	sub	sp, #104	; 0x68
 800e5d6:	4606      	mov	r6, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
 800e5d8:	a811      	add	r0, sp, #68	; 0x44
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 800e5da:	4698      	mov	r8, r3
 800e5dc:	460c      	mov	r4, r1
 800e5de:	4617      	mov	r7, r2
    mbedtls_ecp_point_init( &R );
 800e5e0:	f000 fdd0 	bl	800f184 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 800e5e4:	a805      	add	r0, sp, #20
 800e5e6:	f7fc ff12 	bl	800b40e <mbedtls_mpi_init>
 800e5ea:	a808      	add	r0, sp, #32
 800e5ec:	f7fc ff0f 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 800e5f0:	a80b      	add	r0, sp, #44	; 0x2c
 800e5f2:	f7fc ff0c 	bl	800b40e <mbedtls_mpi_init>
 800e5f6:	a80e      	add	r0, sp, #56	; 0x38
 800e5f8:	f7fc ff09 	bl	800b40e <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800e5fc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d079      	beq.n	800e6f6 <ecdsa_verify_restartable.isra.2+0x126>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800e602:	2101      	movs	r1, #1
 800e604:	9820      	ldr	r0, [sp, #128]	; 0x80
 800e606:	f7fd fa11 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e60a:	2800      	cmp	r0, #0
 800e60c:	db5f      	blt.n	800e6ce <ecdsa_verify_restartable.isra.2+0xfe>
 800e60e:	f106 054c 	add.w	r5, r6, #76	; 0x4c
 800e612:	4629      	mov	r1, r5
 800e614:	9820      	ldr	r0, [sp, #128]	; 0x80
 800e616:	f7fd f9c9 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	da57      	bge.n	800e6ce <ecdsa_verify_restartable.isra.2+0xfe>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800e61e:	2101      	movs	r1, #1
 800e620:	9821      	ldr	r0, [sp, #132]	; 0x84
 800e622:	f7fd fa03 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800e626:	2800      	cmp	r0, #0
 800e628:	db51      	blt.n	800e6ce <ecdsa_verify_restartable.isra.2+0xfe>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800e62a:	4629      	mov	r1, r5
 800e62c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800e62e:	f7fd f9bd 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e632:	2800      	cmp	r0, #0
 800e634:	da4b      	bge.n	800e6ce <ecdsa_verify_restartable.isra.2+0xfe>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800e636:	4622      	mov	r2, r4
 800e638:	463b      	mov	r3, r7
 800e63a:	a905      	add	r1, sp, #20
 800e63c:	4630      	mov	r0, r6
 800e63e:	f7ff fe7d 	bl	800e33c <derive_mpi>
 800e642:	4604      	mov	r4, r0
 800e644:	2800      	cmp	r0, #0
 800e646:	d143      	bne.n	800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800e648:	462a      	mov	r2, r5
 800e64a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e64c:	a808      	add	r0, sp, #32
 800e64e:	f7fe f968 	bl	800c922 <mbedtls_mpi_inv_mod>
 800e652:	4604      	mov	r4, r0
 800e654:	2800      	cmp	r0, #0
 800e656:	d13b      	bne.n	800e6d0 <ecdsa_verify_restartable.isra.2+0x100>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800e658:	aa08      	add	r2, sp, #32
 800e65a:	a905      	add	r1, sp, #20
 800e65c:	a80b      	add	r0, sp, #44	; 0x2c
 800e65e:	f7fd fb0d 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e662:	4604      	mov	r4, r0
 800e664:	2800      	cmp	r0, #0
 800e666:	d133      	bne.n	800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800e668:	a90b      	add	r1, sp, #44	; 0x2c
 800e66a:	462a      	mov	r2, r5
 800e66c:	4608      	mov	r0, r1
 800e66e:	f7fd fd32 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800e672:	4604      	mov	r4, r0
 800e674:	bb60      	cbnz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 800e676:	aa08      	add	r2, sp, #32
 800e678:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e67a:	a80e      	add	r0, sp, #56	; 0x38
 800e67c:	f7fd fafe 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e680:	4604      	mov	r4, r0
 800e682:	bb28      	cbnz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800e684:	af0e      	add	r7, sp, #56	; 0x38
 800e686:	462a      	mov	r2, r5
 800e688:	4639      	mov	r1, r7
 800e68a:	4638      	mov	r0, r7
 800e68c:	f7fd fd23 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800e690:	4604      	mov	r4, r0
 800e692:	b9e8      	cbnz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800e694:	e9cd 8001 	strd	r8, r0, [sp, #4]
 800e698:	9700      	str	r7, [sp, #0]
 800e69a:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800e69e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e6a0:	a911      	add	r1, sp, #68	; 0x44
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	f001 fc6c 	bl	800ff80 <mbedtls_ecp_muladd_restartable>
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	b988      	cbnz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 800e6ac:	a811      	add	r0, sp, #68	; 0x44
 800e6ae:	f001 f983 	bl	800f9b8 <mbedtls_ecp_is_zero>
 800e6b2:	b960      	cbnz	r0, 800e6ce <ecdsa_verify_restartable.isra.2+0xfe>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800e6b4:	a911      	add	r1, sp, #68	; 0x44
 800e6b6:	462a      	mov	r2, r5
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	f7fd fd0c 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 800e6be:	4604      	mov	r4, r0
 800e6c0:	b930      	cbnz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800e6c2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e6c4:	a811      	add	r0, sp, #68	; 0x44
 800e6c6:	f7fd f971 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	b100      	cbz	r0, 800e6d0 <ecdsa_verify_restartable.isra.2+0x100>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800e6ce:	4c0b      	ldr	r4, [pc, #44]	; (800e6fc <ecdsa_verify_restartable.isra.2+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 800e6d0:	a811      	add	r0, sp, #68	; 0x44
 800e6d2:	f000 fd94 	bl	800f1fe <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800e6d6:	a805      	add	r0, sp, #20
 800e6d8:	f7fc fe9f 	bl	800b41a <mbedtls_mpi_free>
 800e6dc:	a808      	add	r0, sp, #32
 800e6de:	f7fc fe9c 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 800e6e2:	a80b      	add	r0, sp, #44	; 0x2c
 800e6e4:	f7fc fe99 	bl	800b41a <mbedtls_mpi_free>
 800e6e8:	a80e      	add	r0, sp, #56	; 0x38
 800e6ea:	f7fc fe96 	bl	800b41a <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	b01a      	add	sp, #104	; 0x68
 800e6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e6f6:	4c02      	ldr	r4, [pc, #8]	; (800e700 <ecdsa_verify_restartable.isra.2+0x130>)
 800e6f8:	e7f9      	b.n	800e6ee <ecdsa_verify_restartable.isra.2+0x11e>
 800e6fa:	bf00      	nop
 800e6fc:	ffffb200 	.word	0xffffb200
 800e700:	ffffb080 	.word	0xffffb080

0800e704 <mbedtls_ecdsa_sign>:
    return( ecdsa_sign_restartable( grp, r, s, d, buf, blen,
 800e704:	f7ff be46 	b.w	800e394 <ecdsa_sign_restartable.isra.0>

0800e708 <mbedtls_ecdsa_sign_det>:
{
 800e708:	b410      	push	{r4}
 800e70a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 800e70e:	9403      	str	r4, [sp, #12]
}
 800e710:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ecdsa_sign_det_restartable( grp, r, s, d, buf, blen, md_alg, NULL ) );
 800e714:	f7ff bf08 	b.w	800e528 <ecdsa_sign_det_restartable.isra.1>

0800e718 <mbedtls_ecdsa_verify>:
    ECDSA_VALIDATE_RET( Q   != NULL );
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
 800e718:	f7ff bf5a 	b.w	800e5d0 <ecdsa_verify_restartable.isra.2>

0800e71c <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e71e:	b0af      	sub	sp, #188	; 0xbc
 800e720:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 800e722:	a805      	add	r0, sp, #20
{
 800e724:	460f      	mov	r7, r1
 800e726:	4615      	mov	r5, r2
 800e728:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 800e72a:	f7fc fe70 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 800e72e:	a808      	add	r0, sp, #32
 800e730:	f7fc fe6d 	bl	800b40e <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( ecdsa_sign_det_restartable( &ctx->grp, &r, &s, &ctx->d,
 800e734:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800e738:	9500      	str	r5, [sp, #0]
 800e73a:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 800e73e:	aa08      	add	r2, sp, #32
 800e740:	a905      	add	r1, sp, #20
 800e742:	4620      	mov	r0, r4
 800e744:	f7ff fef0 	bl	800e528 <ecdsa_sign_det_restartable.isra.1>
 800e748:	4607      	mov	r7, r0
 800e74a:	bb60      	cbnz	r0, 800e7a6 <mbedtls_ecdsa_write_signature_restartable+0x8a>
    unsigned char *p = buf + sizeof( buf );
 800e74c:	ad2e      	add	r5, sp, #184	; 0xb8
 800e74e:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 800e752:	f845 3da8 	str.w	r3, [r5, #-168]!
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 800e756:	aa08      	add	r2, sp, #32
 800e758:	a90b      	add	r1, sp, #44	; 0x2c
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7fc fc9d 	bl	800b09a <mbedtls_asn1_write_mpi>
 800e760:	1e04      	subs	r4, r0, #0
 800e762:	db1f      	blt.n	800e7a4 <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 800e764:	aa05      	add	r2, sp, #20
 800e766:	a90b      	add	r1, sp, #44	; 0x2c
 800e768:	4628      	mov	r0, r5
 800e76a:	f7fc fc96 	bl	800b09a <mbedtls_asn1_write_mpi>
 800e76e:	2800      	cmp	r0, #0
 800e770:	db22      	blt.n	800e7b8 <mbedtls_ecdsa_write_signature_restartable+0x9c>
 800e772:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 800e774:	4632      	mov	r2, r6
 800e776:	a90b      	add	r1, sp, #44	; 0x2c
 800e778:	4628      	mov	r0, r5
 800e77a:	f7fc fbf7 	bl	800af6c <mbedtls_asn1_write_len>
 800e77e:	1e04      	subs	r4, r0, #0
 800e780:	db10      	blt.n	800e7a4 <mbedtls_ecdsa_write_signature_restartable+0x88>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 800e782:	2230      	movs	r2, #48	; 0x30
 800e784:	a90b      	add	r1, sp, #44	; 0x2c
 800e786:	4628      	mov	r0, r5
 800e788:	f7fc fc64 	bl	800b054 <mbedtls_asn1_write_tag>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	db13      	blt.n	800e7b8 <mbedtls_ecdsa_write_signature_restartable+0x9c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 800e790:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 800e792:	4404      	add	r4, r0
    memcpy( sig, p, len );
 800e794:	4622      	mov	r2, r4
 800e796:	9904      	ldr	r1, [sp, #16]
 800e798:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800e79a:	f008 f98e 	bl	8016aba <memcpy>
    *slen = len;
 800e79e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800e7a0:	601c      	str	r4, [r3, #0]
    return( 0 );
 800e7a2:	463c      	mov	r4, r7
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 800e7a4:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 800e7a6:	a805      	add	r0, sp, #20
 800e7a8:	f7fc fe37 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 800e7ac:	a808      	add	r0, sp, #32
 800e7ae:	f7fc fe34 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	b02f      	add	sp, #188	; 0xbc
 800e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	e7f3      	b.n	800e7a4 <mbedtls_ecdsa_write_signature_restartable+0x88>

0800e7bc <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 800e7bc:	b510      	push	{r4, lr}
 800e7be:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 800e7c0:	2400      	movs	r4, #0
 800e7c2:	9404      	str	r4, [sp, #16]
 800e7c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e7c6:	9403      	str	r4, [sp, #12]
 800e7c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e7ca:	9402      	str	r4, [sp, #8]
 800e7cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e7ce:	9401      	str	r4, [sp, #4]
 800e7d0:	9c08      	ldr	r4, [sp, #32]
 800e7d2:	9400      	str	r4, [sp, #0]
 800e7d4:	f7ff ffa2 	bl	800e71c <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 800e7d8:	b006      	add	sp, #24
 800e7da:	bd10      	pop	{r4, pc}

0800e7dc <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800e7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7e0:	b08b      	sub	sp, #44	; 0x2c
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 800e7e2:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 800e7e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 800e7e6:	9302      	str	r3, [sp, #8]
{
 800e7e8:	4604      	mov	r4, r0
    mbedtls_mpi_init( &s );
 800e7ea:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 800e7ec:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 800e7ee:	441d      	add	r5, r3
{
 800e7f0:	4688      	mov	r8, r1
 800e7f2:	4691      	mov	r9, r2
    mbedtls_mpi_init( &r );
 800e7f4:	f7fc fe0b 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7fc fe08 	bl	800b40e <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 800e7fe:	2330      	movs	r3, #48	; 0x30
 800e800:	aa03      	add	r2, sp, #12
 800e802:	4629      	mov	r1, r5
 800e804:	a802      	add	r0, sp, #8
 800e806:	f7fc fb05 	bl	800ae14 <mbedtls_asn1_get_tag>
 800e80a:	b158      	cbz	r0, 800e824 <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800e80c:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 800e810:	4638      	mov	r0, r7
 800e812:	f7fc fe02 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 800e816:	4630      	mov	r0, r6
 800e818:	f7fc fdff 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 800e81c:	4620      	mov	r0, r4
 800e81e:	b00b      	add	sp, #44	; 0x2c
 800e820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( p + len != end )
 800e824:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e828:	4413      	add	r3, r2
 800e82a:	429d      	cmp	r5, r3
 800e82c:	d11f      	bne.n	800e86e <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 800e82e:	463a      	mov	r2, r7
 800e830:	4629      	mov	r1, r5
 800e832:	a802      	add	r0, sp, #8
 800e834:	f7fc fb26 	bl	800ae84 <mbedtls_asn1_get_mpi>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d1e7      	bne.n	800e80c <mbedtls_ecdsa_read_signature_restartable+0x30>
 800e83c:	4632      	mov	r2, r6
 800e83e:	4629      	mov	r1, r5
 800e840:	a802      	add	r0, sp, #8
 800e842:	f7fc fb1f 	bl	800ae84 <mbedtls_asn1_get_mpi>
 800e846:	2800      	cmp	r0, #0
 800e848:	d1e0      	bne.n	800e80c <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 800e84a:	f104 0388 	add.w	r3, r4, #136	; 0x88
 800e84e:	4620      	mov	r0, r4
 800e850:	e9cd 7600 	strd	r7, r6, [sp]
 800e854:	464a      	mov	r2, r9
 800e856:	4641      	mov	r1, r8
 800e858:	f7ff feba 	bl	800e5d0 <ecdsa_verify_restartable.isra.2>
 800e85c:	4604      	mov	r4, r0
 800e85e:	2800      	cmp	r0, #0
 800e860:	d1d6      	bne.n	800e810 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 800e862:	9a02      	ldr	r2, [sp, #8]
 800e864:	4b03      	ldr	r3, [pc, #12]	; (800e874 <mbedtls_ecdsa_read_signature_restartable+0x98>)
 800e866:	42aa      	cmp	r2, r5
 800e868:	bf18      	it	ne
 800e86a:	461c      	movne	r4, r3
 800e86c:	e7d0      	b.n	800e810 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 800e86e:	4c02      	ldr	r4, [pc, #8]	; (800e878 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
 800e870:	e7ce      	b.n	800e810 <mbedtls_ecdsa_read_signature_restartable+0x34>
 800e872:	bf00      	nop
 800e874:	ffffb400 	.word	0xffffb400
 800e878:	ffffb01a 	.word	0xffffb01a

0800e87c <mbedtls_ecdsa_read_signature>:
{
 800e87c:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
 800e87e:	2400      	movs	r4, #0
 800e880:	9401      	str	r4, [sp, #4]
 800e882:	9c04      	ldr	r4, [sp, #16]
 800e884:	9400      	str	r4, [sp, #0]
 800e886:	f7ff ffa9 	bl	800e7dc <mbedtls_ecdsa_read_signature_restartable>
}
 800e88a:	b002      	add	sp, #8
 800e88c:	bd10      	pop	{r4, pc}

0800e88e <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 800e88e:	f000 bca8 	b.w	800f1e2 <mbedtls_ecp_keypair_init>

0800e892 <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
 800e892:	b108      	cbz	r0, 800e898 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
 800e894:	f000 bce8 	b.w	800f268 <mbedtls_ecp_keypair_free>
}
 800e898:	4770      	bx	lr

0800e89a <mbedtls_ecdsa_from_keypair>:
{
 800e89a:	b570      	push	{r4, r5, r6, lr}
 800e89c:	4605      	mov	r5, r0
 800e89e:	460e      	mov	r6, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 800e8a0:	f000 fd08 	bl	800f2b4 <mbedtls_ecp_group_copy>
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	b978      	cbnz	r0, 800e8c8 <mbedtls_ecdsa_from_keypair+0x2e>
 800e8a8:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 800e8ac:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 800e8b0:	f7fc fe29 	bl	800b506 <mbedtls_mpi_copy>
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	b938      	cbnz	r0, 800e8c8 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 800e8b8:	f106 0188 	add.w	r1, r6, #136	; 0x88
 800e8bc:	f105 0088 	add.w	r0, r5, #136	; 0x88
 800e8c0:	f000 fce2 	bl	800f288 <mbedtls_ecp_copy>
 800e8c4:	4604      	mov	r4, r0
 800e8c6:	b110      	cbz	r0, 800e8ce <mbedtls_ecdsa_from_keypair+0x34>
        mbedtls_ecdsa_free( ctx );
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f7ff ffe2 	bl	800e892 <mbedtls_ecdsa_free>
}
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	bd70      	pop	{r4, r5, r6, pc}

0800e8d2 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800e8d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e8d8:	340c      	adds	r4, #12
    mbedtls_mpi_init( &mQY );
 800e8da:	a801      	add	r0, sp, #4
{
 800e8dc:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 800e8de:	f7fc fd96 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e8e2:	1d29      	adds	r1, r5, #4
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	a801      	add	r0, sp, #4
 800e8e8:	f7fd f979 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	b968      	cbnz	r0, 800e90c <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f7fd f89a 	bl	800ba2c <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800e8f8:	a901      	add	r1, sp, #4
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	bf0c      	ite	eq
 800e8fe:	2200      	moveq	r2, #0
 800e900:	f006 0201 	andne.w	r2, r6, #1
 800e904:	4620      	mov	r0, r4
 800e906:	f7fc fe2a 	bl	800b55e <mbedtls_mpi_safe_cond_assign>
 800e90a:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 800e90c:	a801      	add	r0, sp, #4
 800e90e:	f7fc fd84 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 800e912:	4628      	mov	r0, r5
 800e914:	b004      	add	sp, #16
 800e916:	bd70      	pop	{r4, r5, r6, pc}

0800e918 <ecp_modp>:
    if( grp->modp == NULL )
 800e918:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 800e91a:	b570      	push	{r4, r5, r6, lr}
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 800e920:	b92b      	cbnz	r3, 800e92e <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800e922:	1d0a      	adds	r2, r1, #4
}
 800e924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800e928:	4601      	mov	r1, r0
 800e92a:	f7fd bbd4 	b.w	800c0d6 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e92e:	6803      	ldr	r3, [r0, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	db09      	blt.n	800e948 <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800e934:	4620      	mov	r0, r4
 800e936:	f7fc fe8e 	bl	800b656 <mbedtls_mpi_bitlen>
 800e93a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e93c:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800e940:	d908      	bls.n	800e954 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e942:	4e17      	ldr	r6, [pc, #92]	; (800e9a0 <ecp_modp+0x88>)
}
 800e944:	4630      	mov	r0, r6
 800e946:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e948:	2100      	movs	r1, #0
 800e94a:	f7fd f86f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e94e:	2800      	cmp	r0, #0
 800e950:	d0f0      	beq.n	800e934 <ecp_modp+0x1c>
 800e952:	e7f6      	b.n	800e942 <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800e954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e956:	4620      	mov	r0, r4
 800e958:	4798      	blx	r3
 800e95a:	4606      	mov	r6, r0
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d1f1      	bne.n	800e944 <ecp_modp+0x2c>
 800e960:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	da04      	bge.n	800e972 <ecp_modp+0x5a>
 800e968:	2100      	movs	r1, #0
 800e96a:	4620      	mov	r0, r4
 800e96c:	f7fd f85e 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800e970:	b968      	cbnz	r0, 800e98e <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e972:	4629      	mov	r1, r5
 800e974:	4620      	mov	r0, r4
 800e976:	f7fd f819 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	dbe2      	blt.n	800e944 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800e97e:	462a      	mov	r2, r5
 800e980:	4621      	mov	r1, r4
 800e982:	4620      	mov	r0, r4
 800e984:	f7fd f8cb 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d0f2      	beq.n	800e972 <ecp_modp+0x5a>
 800e98c:	e006      	b.n	800e99c <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800e98e:	462a      	mov	r2, r5
 800e990:	4621      	mov	r1, r4
 800e992:	4620      	mov	r0, r4
 800e994:	f7fd f901 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d0e2      	beq.n	800e962 <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800e99c:	4606      	mov	r6, r0
 800e99e:	e7d1      	b.n	800e944 <ecp_modp+0x2c>
 800e9a0:	ffffb080 	.word	0xffffb080

0800e9a4 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800e9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	b08d      	sub	sp, #52	; 0x34
 800e9aa:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e9ac:	ad03      	add	r5, sp, #12
 800e9ae:	4668      	mov	r0, sp
{
 800e9b0:	4689      	mov	r9, r1
 800e9b2:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e9b4:	f7fc fd2b 	bl	800b40e <mbedtls_mpi_init>
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f7fc fd28 	bl	800b40e <mbedtls_mpi_init>
 800e9be:	a806      	add	r0, sp, #24
 800e9c0:	f7fc fd25 	bl	800b40e <mbedtls_mpi_init>
 800e9c4:	a809      	add	r0, sp, #36	; 0x24
 800e9c6:	f7fc fd22 	bl	800b40e <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800e9ca:	69b3      	ldr	r3, [r6, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f040 815e 	bne.w	800ec8e <ecp_double_jac+0x2ea>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800e9d2:	f108 0218 	add.w	r2, r8, #24
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f7fd f94f 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800e9de:	4604      	mov	r4, r0
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	f040 8131 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f7ff ff95 	bl	800e918 <ecp_modp>
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	f040 8129 	bne.w	800ec48 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800e9f6:	462a      	mov	r2, r5
 800e9f8:	4641      	mov	r1, r8
 800e9fa:	a806      	add	r0, sp, #24
 800e9fc:	f7fd f8cd 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800ea00:	4604      	mov	r4, r0
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f040 8120 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ea08:	1d37      	adds	r7, r6, #4
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	a806      	add	r0, sp, #24
 800ea0e:	f7fc ffcd 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	f280 810f 	bge.w	800ec36 <ecp_double_jac+0x292>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800ea18:	462a      	mov	r2, r5
 800ea1a:	4641      	mov	r1, r8
 800ea1c:	a809      	add	r0, sp, #36	; 0x24
 800ea1e:	f7fd f8de 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800ea22:	4604      	mov	r4, r0
 800ea24:	2800      	cmp	r0, #0
 800ea26:	f040 810f 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ea2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f2c0 811b 	blt.w	800ec68 <ecp_double_jac+0x2c4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800ea32:	aa09      	add	r2, sp, #36	; 0x24
 800ea34:	a906      	add	r1, sp, #24
 800ea36:	4628      	mov	r0, r5
 800ea38:	f7fd f920 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f040 8102 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ea44:	4631      	mov	r1, r6
 800ea46:	4628      	mov	r0, r5
 800ea48:	f7ff ff66 	bl	800e918 <ecp_modp>
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f040 80fa 	bne.w	800ec48 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ea54:	2203      	movs	r2, #3
 800ea56:	4629      	mov	r1, r5
 800ea58:	4668      	mov	r0, sp
 800ea5a:	f7fd f979 	bl	800bd50 <mbedtls_mpi_mul_int>
 800ea5e:	4604      	mov	r4, r0
 800ea60:	2800      	cmp	r0, #0
 800ea62:	f040 80f1 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ea66:	4639      	mov	r1, r7
 800ea68:	4668      	mov	r0, sp
 800ea6a:	f7fc ff9f 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f280 8107 	bge.w	800ec82 <ecp_double_jac+0x2de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800ea74:	f108 0a0c 	add.w	sl, r8, #12
 800ea78:	4652      	mov	r2, sl
 800ea7a:	4651      	mov	r1, sl
 800ea7c:	a806      	add	r0, sp, #24
 800ea7e:	f7fd f8fd 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ea82:	4604      	mov	r4, r0
 800ea84:	2800      	cmp	r0, #0
 800ea86:	f040 80df 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ea8a:	4631      	mov	r1, r6
 800ea8c:	a806      	add	r0, sp, #24
 800ea8e:	f7ff ff43 	bl	800e918 <ecp_modp>
 800ea92:	4604      	mov	r4, r0
 800ea94:	2800      	cmp	r0, #0
 800ea96:	f040 80d7 	bne.w	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	a806      	add	r0, sp, #24
 800ea9e:	f7fc fe6d 	bl	800b77c <mbedtls_mpi_shift_l>
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f040 80cf 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800eaaa:	1d37      	adds	r7, r6, #4
 800eaac:	4639      	mov	r1, r7
 800eaae:	a806      	add	r0, sp, #24
 800eab0:	f7fc ff7c 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f280 815e 	bge.w	800ed76 <ecp_double_jac+0x3d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800eaba:	aa06      	add	r2, sp, #24
 800eabc:	4641      	mov	r1, r8
 800eabe:	4628      	mov	r0, r5
 800eac0:	f7fd f8dc 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800eac4:	4604      	mov	r4, r0
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f040 80be 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800eacc:	4631      	mov	r1, r6
 800eace:	4628      	mov	r0, r5
 800ead0:	f7ff ff22 	bl	800e918 <ecp_modp>
 800ead4:	4604      	mov	r4, r0
 800ead6:	2800      	cmp	r0, #0
 800ead8:	f040 80b6 	bne.w	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800eadc:	2101      	movs	r1, #1
 800eade:	4628      	mov	r0, r5
 800eae0:	f7fc fe4c 	bl	800b77c <mbedtls_mpi_shift_l>
 800eae4:	4604      	mov	r4, r0
 800eae6:	2800      	cmp	r0, #0
 800eae8:	f040 80ae 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800eaec:	4639      	mov	r1, r7
 800eaee:	4628      	mov	r0, r5
 800eaf0:	f7fc ff5c 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	f280 8148 	bge.w	800ed8a <ecp_double_jac+0x3e6>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800eafa:	aa06      	add	r2, sp, #24
 800eafc:	4611      	mov	r1, r2
 800eafe:	a809      	add	r0, sp, #36	; 0x24
 800eb00:	f7fd f8bc 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800eb04:	4604      	mov	r4, r0
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f040 809e 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	a809      	add	r0, sp, #36	; 0x24
 800eb10:	f7ff ff02 	bl	800e918 <ecp_modp>
 800eb14:	4604      	mov	r4, r0
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f040 8096 	bne.w	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	a809      	add	r0, sp, #36	; 0x24
 800eb20:	f7fc fe2c 	bl	800b77c <mbedtls_mpi_shift_l>
 800eb24:	4604      	mov	r4, r0
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f040 808e 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800eb2c:	4639      	mov	r1, r7
 800eb2e:	a809      	add	r0, sp, #36	; 0x24
 800eb30:	f7fc ff3c 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	f280 812e 	bge.w	800ed96 <ecp_double_jac+0x3f2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800eb3a:	466a      	mov	r2, sp
 800eb3c:	4669      	mov	r1, sp
 800eb3e:	a806      	add	r0, sp, #24
 800eb40:	f7fd f89c 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800eb44:	4604      	mov	r4, r0
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d17e      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	a806      	add	r0, sp, #24
 800eb4e:	f7ff fee3 	bl	800e918 <ecp_modp>
 800eb52:	4604      	mov	r4, r0
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d177      	bne.n	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800eb58:	a906      	add	r1, sp, #24
 800eb5a:	462a      	mov	r2, r5
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	f7fd f83e 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800eb62:	4604      	mov	r4, r0
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d16f      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800eb68:	9b06      	ldr	r3, [sp, #24]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f2c0 8119 	blt.w	800eda2 <ecp_double_jac+0x3fe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800eb70:	a906      	add	r1, sp, #24
 800eb72:	462a      	mov	r2, r5
 800eb74:	4608      	mov	r0, r1
 800eb76:	f7fd f832 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d163      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800eb80:	9b06      	ldr	r3, [sp, #24]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f2c0 811a 	blt.w	800edbc <ecp_double_jac+0x418>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800eb88:	aa06      	add	r2, sp, #24
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7fd f826 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800eb92:	4604      	mov	r4, r0
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d157      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	f2c0 811b 	blt.w	800edd6 <ecp_double_jac+0x432>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800eba0:	466a      	mov	r2, sp
 800eba2:	4629      	mov	r1, r5
 800eba4:	4628      	mov	r0, r5
 800eba6:	f7fd f869 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ebaa:	4604      	mov	r4, r0
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d14b      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f7ff feb0 	bl	800e918 <ecp_modp>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d144      	bne.n	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800ebbe:	aa09      	add	r2, sp, #36	; 0x24
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f7fd f80b 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d13c      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ebce:	46ab      	mov	fp, r5
 800ebd0:	9b03      	ldr	r3, [sp, #12]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f2c0 810c 	blt.w	800edf0 <ecp_double_jac+0x44c>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800ebd8:	f108 0218 	add.w	r2, r8, #24
 800ebdc:	4651      	mov	r1, sl
 800ebde:	a809      	add	r0, sp, #36	; 0x24
 800ebe0:	f7fd f84c 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	bb78      	cbnz	r0, 800ec48 <ecp_double_jac+0x2a4>
 800ebe8:	4631      	mov	r1, r6
 800ebea:	a809      	add	r0, sp, #36	; 0x24
 800ebec:	f7ff fe94 	bl	800e918 <ecp_modp>
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	bb48      	cbnz	r0, 800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ebf4:	2101      	movs	r1, #1
 800ebf6:	a809      	add	r0, sp, #36	; 0x24
 800ebf8:	f7fc fdc0 	bl	800b77c <mbedtls_mpi_shift_l>
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	bb18      	cbnz	r0, 800ec48 <ecp_double_jac+0x2a4>
 800ec00:	4639      	mov	r1, r7
 800ec02:	a809      	add	r0, sp, #36	; 0x24
 800ec04:	f7fc fed2 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f280 8102 	bge.w	800ee12 <ecp_double_jac+0x46e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800ec0e:	a906      	add	r1, sp, #24
 800ec10:	4648      	mov	r0, r9
 800ec12:	f7fc fc78 	bl	800b506 <mbedtls_mpi_copy>
 800ec16:	4604      	mov	r4, r0
 800ec18:	b9b0      	cbnz	r0, 800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800ec1a:	a903      	add	r1, sp, #12
 800ec1c:	f109 000c 	add.w	r0, r9, #12
 800ec20:	f7fc fc71 	bl	800b506 <mbedtls_mpi_copy>
 800ec24:	4604      	mov	r4, r0
 800ec26:	b978      	cbnz	r0, 800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800ec28:	a909      	add	r1, sp, #36	; 0x24
 800ec2a:	f109 0018 	add.w	r0, r9, #24
 800ec2e:	f7fc fc6a 	bl	800b506 <mbedtls_mpi_copy>
 800ec32:	4604      	mov	r4, r0

cleanup:
 800ec34:	e008      	b.n	800ec48 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800ec36:	a906      	add	r1, sp, #24
 800ec38:	463a      	mov	r2, r7
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	f7fc ff6f 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ec40:	4604      	mov	r4, r0
 800ec42:	2800      	cmp	r0, #0
 800ec44:	f43f aee1 	beq.w	800ea0a <ecp_double_jac+0x66>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800ec48:	4668      	mov	r0, sp
 800ec4a:	f7fc fbe6 	bl	800b41a <mbedtls_mpi_free>
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f7fc fbe3 	bl	800b41a <mbedtls_mpi_free>
 800ec54:	a806      	add	r0, sp, #24
 800ec56:	f7fc fbe0 	bl	800b41a <mbedtls_mpi_free>
 800ec5a:	a809      	add	r0, sp, #36	; 0x24
 800ec5c:	f7fc fbdd 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 800ec60:	4620      	mov	r0, r4
 800ec62:	b00d      	add	sp, #52	; 0x34
 800ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800ec68:	2100      	movs	r1, #0
 800ec6a:	a809      	add	r0, sp, #36	; 0x24
 800ec6c:	f7fc fede 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f43f aede 	beq.w	800ea32 <ecp_double_jac+0x8e>
 800ec76:	a909      	add	r1, sp, #36	; 0x24
 800ec78:	463a      	mov	r2, r7
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	f7fc ff8d 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800ec80:	e6cf      	b.n	800ea22 <ecp_double_jac+0x7e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ec82:	463a      	mov	r2, r7
 800ec84:	4669      	mov	r1, sp
 800ec86:	4668      	mov	r0, sp
 800ec88:	f7fc ff49 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ec8c:	e6e7      	b.n	800ea5e <ecp_double_jac+0xba>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800ec8e:	4642      	mov	r2, r8
 800ec90:	4641      	mov	r1, r8
 800ec92:	4628      	mov	r0, r5
 800ec94:	f7fc fff2 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d1d4      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ec9e:	4631      	mov	r1, r6
 800eca0:	4628      	mov	r0, r5
 800eca2:	f7ff fe39 	bl	800e918 <ecp_modp>
 800eca6:	4604      	mov	r4, r0
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d1cd      	bne.n	800ec48 <ecp_double_jac+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ecac:	2203      	movs	r2, #3
 800ecae:	4629      	mov	r1, r5
 800ecb0:	4668      	mov	r0, sp
 800ecb2:	f7fd f84d 	bl	800bd50 <mbedtls_mpi_mul_int>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d1c5      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ecbc:	1d37      	adds	r7, r6, #4
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	4668      	mov	r0, sp
 800ecc2:	f7fc fe73 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	da4c      	bge.n	800ed64 <ecp_double_jac+0x3c0>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800ecca:	f106 0a10 	add.w	sl, r6, #16
 800ecce:	2100      	movs	r1, #0
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	f7fc feab 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f43f aecc 	beq.w	800ea74 <ecp_double_jac+0xd0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800ecdc:	f108 0218 	add.w	r2, r8, #24
 800ece0:	4611      	mov	r1, r2
 800ece2:	4628      	mov	r0, r5
 800ece4:	f7fc ffca 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ece8:	4604      	mov	r4, r0
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d1ac      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f7ff fe11 	bl	800e918 <ecp_modp>
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d1a5      	bne.n	800ec48 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800ecfc:	462a      	mov	r2, r5
 800ecfe:	4629      	mov	r1, r5
 800ed00:	a806      	add	r0, sp, #24
 800ed02:	f7fc ffbb 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ed06:	4604      	mov	r4, r0
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d19d      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	a806      	add	r0, sp, #24
 800ed10:	f7ff fe02 	bl	800e918 <ecp_modp>
 800ed14:	4604      	mov	r4, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d196      	bne.n	800ec48 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800ed1a:	4652      	mov	r2, sl
 800ed1c:	a906      	add	r1, sp, #24
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f7fc ffac 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ed24:	4604      	mov	r4, r0
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d18e      	bne.n	800ec48 <ecp_double_jac+0x2a4>
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f7ff fdf3 	bl	800e918 <ecp_modp>
 800ed32:	4604      	mov	r4, r0
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d187      	bne.n	800ec48 <ecp_double_jac+0x2a4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800ed38:	462a      	mov	r2, r5
 800ed3a:	4669      	mov	r1, sp
 800ed3c:	4668      	mov	r0, sp
 800ed3e:	f7fc ff2c 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800ed42:	4604      	mov	r4, r0
 800ed44:	2800      	cmp	r0, #0
 800ed46:	f47f af7f 	bne.w	800ec48 <ecp_double_jac+0x2a4>
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	4668      	mov	r0, sp
 800ed4e:	f7fc fe2d 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	f6ff ae8e 	blt.w	800ea74 <ecp_double_jac+0xd0>
 800ed58:	463a      	mov	r2, r7
 800ed5a:	4669      	mov	r1, sp
 800ed5c:	4668      	mov	r0, sp
 800ed5e:	f7fc fede 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ed62:	e7ee      	b.n	800ed42 <ecp_double_jac+0x39e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ed64:	463a      	mov	r2, r7
 800ed66:	4669      	mov	r1, sp
 800ed68:	4668      	mov	r0, sp
 800ed6a:	f7fc fed8 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ed6e:	4604      	mov	r4, r0
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d0a4      	beq.n	800ecbe <ecp_double_jac+0x31a>
cleanup:
 800ed74:	e768      	b.n	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800ed76:	a906      	add	r1, sp, #24
 800ed78:	463a      	mov	r2, r7
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	f7fc fecf 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ed80:	4604      	mov	r4, r0
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f43f ae92 	beq.w	800eaac <ecp_double_jac+0x108>
cleanup:
 800ed88:	e75e      	b.n	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800ed8a:	463a      	mov	r2, r7
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	4628      	mov	r0, r5
 800ed90:	f7fc fec5 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ed94:	e6a6      	b.n	800eae4 <ecp_double_jac+0x140>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ed96:	a909      	add	r1, sp, #36	; 0x24
 800ed98:	463a      	mov	r2, r7
 800ed9a:	4608      	mov	r0, r1
 800ed9c:	f7fc febf 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800eda0:	e6c0      	b.n	800eb24 <ecp_double_jac+0x180>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800eda2:	2100      	movs	r1, #0
 800eda4:	a806      	add	r0, sp, #24
 800eda6:	f7fc fe41 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800edaa:	2800      	cmp	r0, #0
 800edac:	f43f aee0 	beq.w	800eb70 <ecp_double_jac+0x1cc>
 800edb0:	a906      	add	r1, sp, #24
 800edb2:	463a      	mov	r2, r7
 800edb4:	4608      	mov	r0, r1
 800edb6:	f7fc fef0 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800edba:	e6d2      	b.n	800eb62 <ecp_double_jac+0x1be>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800edbc:	2100      	movs	r1, #0
 800edbe:	a806      	add	r0, sp, #24
 800edc0:	f7fc fe34 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	f43f aedf 	beq.w	800eb88 <ecp_double_jac+0x1e4>
 800edca:	a906      	add	r1, sp, #24
 800edcc:	463a      	mov	r2, r7
 800edce:	4608      	mov	r0, r1
 800edd0:	f7fc fee3 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800edd4:	e6d1      	b.n	800eb7a <ecp_double_jac+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800edd6:	2100      	movs	r1, #0
 800edd8:	4628      	mov	r0, r5
 800edda:	f7fc fe27 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800edde:	2800      	cmp	r0, #0
 800ede0:	f43f aede 	beq.w	800eba0 <ecp_double_jac+0x1fc>
 800ede4:	463a      	mov	r2, r7
 800ede6:	4629      	mov	r1, r5
 800ede8:	4628      	mov	r0, r5
 800edea:	f7fc fed6 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800edee:	e6d0      	b.n	800eb92 <ecp_double_jac+0x1ee>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800edf0:	2100      	movs	r1, #0
 800edf2:	4658      	mov	r0, fp
 800edf4:	f7fc fe1a 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	f43f aeed 	beq.w	800ebd8 <ecp_double_jac+0x234>
 800edfe:	463a      	mov	r2, r7
 800ee00:	4659      	mov	r1, fp
 800ee02:	4658      	mov	r0, fp
 800ee04:	f7fc fec9 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800ee08:	4604      	mov	r4, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	f43f aee0 	beq.w	800ebd0 <ecp_double_jac+0x22c>
cleanup:
 800ee10:	e71a      	b.n	800ec48 <ecp_double_jac+0x2a4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ee12:	a909      	add	r1, sp, #36	; 0x24
 800ee14:	463a      	mov	r2, r7
 800ee16:	4608      	mov	r0, r1
 800ee18:	f7fc fe81 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800ee1c:	e6ee      	b.n	800ebfc <ecp_double_jac+0x258>

0800ee1e <ecp_normalize_jac>:
{
 800ee1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800ee20:	f101 0718 	add.w	r7, r1, #24
{
 800ee24:	b087      	sub	sp, #28
 800ee26:	4606      	mov	r6, r0
 800ee28:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	f7fc fdfd 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ee32:	4604      	mov	r4, r0
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d04c      	beq.n	800eed2 <ecp_normalize_jac+0xb4>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800ee38:	4668      	mov	r0, sp
 800ee3a:	f7fc fae8 	bl	800b40e <mbedtls_mpi_init>
 800ee3e:	a803      	add	r0, sp, #12
 800ee40:	f7fc fae5 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800ee44:	1d32      	adds	r2, r6, #4
 800ee46:	4639      	mov	r1, r7
 800ee48:	4668      	mov	r0, sp
 800ee4a:	f7fd fd6a 	bl	800c922 <mbedtls_mpi_inv_mod>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	bbc8      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800ee52:	466a      	mov	r2, sp
 800ee54:	4669      	mov	r1, sp
 800ee56:	a803      	add	r0, sp, #12
 800ee58:	f7fc ff10 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	bb90      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
 800ee60:	4631      	mov	r1, r6
 800ee62:	a803      	add	r0, sp, #12
 800ee64:	f7ff fd58 	bl	800e918 <ecp_modp>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	bb60      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800ee6c:	aa03      	add	r2, sp, #12
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4628      	mov	r0, r5
 800ee72:	f7fc ff03 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ee76:	4604      	mov	r4, r0
 800ee78:	bb28      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
 800ee7a:	4631      	mov	r1, r6
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	f7ff fd4b 	bl	800e918 <ecp_modp>
 800ee82:	4604      	mov	r4, r0
 800ee84:	b9f8      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 800ee86:	350c      	adds	r5, #12
 800ee88:	aa03      	add	r2, sp, #12
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	f7fc fef5 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ee92:	4604      	mov	r4, r0
 800ee94:	b9b8      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
 800ee96:	4631      	mov	r1, r6
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f7ff fd3d 	bl	800e918 <ecp_modp>
 800ee9e:	4604      	mov	r4, r0
 800eea0:	b988      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 800eea2:	466a      	mov	r2, sp
 800eea4:	4629      	mov	r1, r5
 800eea6:	4628      	mov	r0, r5
 800eea8:	f7fc fee8 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800eeac:	4604      	mov	r4, r0
 800eeae:	b950      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
 800eeb0:	4631      	mov	r1, r6
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7ff fd30 	bl	800e918 <ecp_modp>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	b920      	cbnz	r0, 800eec6 <ecp_normalize_jac+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800eebc:	2101      	movs	r1, #1
 800eebe:	4638      	mov	r0, r7
 800eec0:	f7fc fb82 	bl	800b5c8 <mbedtls_mpi_lset>
 800eec4:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800eec6:	4668      	mov	r0, sp
 800eec8:	f7fc faa7 	bl	800b41a <mbedtls_mpi_free>
 800eecc:	a803      	add	r0, sp, #12
 800eece:	f7fc faa4 	bl	800b41a <mbedtls_mpi_free>
}
 800eed2:	4620      	mov	r0, r4
 800eed4:	b007      	add	sp, #28
 800eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eed8 <ecp_normalize_jac_many.part.2>:
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	4606      	mov	r6, r0
 800eede:	b08d      	sub	sp, #52	; 0x34
 800eee0:	460c      	mov	r4, r1
    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800eee2:	4610      	mov	r0, r2
 800eee4:	210c      	movs	r1, #12
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
 800eee6:	4691      	mov	r9, r2
    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800eee8:	f007 fdba 	bl	8016a60 <calloc>
 800eeec:	4607      	mov	r7, r0
 800eeee:	2800      	cmp	r0, #0
 800eef0:	f000 80f9 	beq.w	800f0e6 <ecp_normalize_jac_many.part.2+0x20e>
 800eef4:	250c      	movs	r5, #12
 800eef6:	fb05 f509 	mul.w	r5, r5, r9
 800eefa:	4683      	mov	fp, r0
 800eefc:	eb05 0a00 	add.w	sl, r5, r0
 800ef00:	4680      	mov	r8, r0
    for( i = 0; i < T_size; i++ )
 800ef02:	45c2      	cmp	sl, r8
 800ef04:	d14b      	bne.n	800ef9e <ecp_normalize_jac_many.part.2+0xc6>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800ef06:	a803      	add	r0, sp, #12
 800ef08:	f7fc fa81 	bl	800b40e <mbedtls_mpi_init>
 800ef0c:	a806      	add	r0, sp, #24
 800ef0e:	f7fc fa7e 	bl	800b40e <mbedtls_mpi_init>
 800ef12:	a809      	add	r0, sp, #36	; 0x24
 800ef14:	f7fc fa7b 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800ef18:	6821      	ldr	r1, [r4, #0]
 800ef1a:	4638      	mov	r0, r7
 800ef1c:	3118      	adds	r1, #24
 800ef1e:	f7fc faf2 	bl	800b506 <mbedtls_mpi_copy>
 800ef22:	4602      	mov	r2, r0
 800ef24:	bb20      	cbnz	r0, 800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800ef26:	f107 0a0c 	add.w	sl, r7, #12
    for( i = 1; i < T_size; i++ )
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	4599      	cmp	r9, r3
 800ef2e:	d83c      	bhi.n	800efaa <ecp_normalize_jac_many.part.2+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800ef30:	f1a5 010c 	sub.w	r1, r5, #12
 800ef34:	1d32      	adds	r2, r6, #4
 800ef36:	4439      	add	r1, r7
 800ef38:	a803      	add	r0, sp, #12
 800ef3a:	f7fd fcf2 	bl	800c922 <mbedtls_mpi_inv_mod>
 800ef3e:	4602      	mov	r2, r0
 800ef40:	b9b0      	cbnz	r0, 800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800ef42:	3d18      	subs	r5, #24
    for( i = T_size - 1; ; i-- )
 800ef44:	f109 3aff 	add.w	sl, r9, #4294967295
 800ef48:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 800ef4c:	443d      	add	r5, r7
        if( i == 0 ) {
 800ef4e:	f1ba 0f00 	cmp.w	sl, #0
 800ef52:	d142      	bne.n	800efda <ecp_normalize_jac_many.part.2+0x102>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800ef54:	a903      	add	r1, sp, #12
 800ef56:	a806      	add	r0, sp, #24
 800ef58:	f7fc fad5 	bl	800b506 <mbedtls_mpi_copy>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	b938      	cbnz	r0, 800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800ef60:	aa06      	add	r2, sp, #24
 800ef62:	4611      	mov	r1, r2
 800ef64:	a809      	add	r0, sp, #36	; 0x24
 800ef66:	f7fc fe89 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d052      	beq.n	800f016 <ecp_normalize_jac_many.part.2+0x13e>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800ef70:	a803      	add	r0, sp, #12
 800ef72:	9201      	str	r2, [sp, #4]
 800ef74:	f7fc fa51 	bl	800b41a <mbedtls_mpi_free>
 800ef78:	a806      	add	r0, sp, #24
 800ef7a:	f7fc fa4e 	bl	800b41a <mbedtls_mpi_free>
 800ef7e:	a809      	add	r0, sp, #36	; 0x24
 800ef80:	f7fc fa4b 	bl	800b41a <mbedtls_mpi_free>
 800ef84:	9a01      	ldr	r2, [sp, #4]
 800ef86:	9201      	str	r2, [sp, #4]
    for( i = 0; i < T_size; i++ )
 800ef88:	45c3      	cmp	fp, r8
 800ef8a:	f040 80a6 	bne.w	800f0da <ecp_normalize_jac_many.part.2+0x202>
    mbedtls_free( c );
 800ef8e:	4638      	mov	r0, r7
 800ef90:	f007 fd7c 	bl	8016a8c <free>
 800ef94:	9a01      	ldr	r2, [sp, #4]
}
 800ef96:	4610      	mov	r0, r2
 800ef98:	b00d      	add	sp, #52	; 0x34
 800ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_init( &c[i] );
 800ef9e:	4640      	mov	r0, r8
 800efa0:	f7fc fa35 	bl	800b40e <mbedtls_mpi_init>
 800efa4:	f108 080c 	add.w	r8, r8, #12
 800efa8:	e7ab      	b.n	800ef02 <ecp_normalize_jac_many.part.2+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800efaa:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800efae:	9301      	str	r3, [sp, #4]
 800efb0:	3218      	adds	r2, #24
 800efb2:	f1aa 010c 	sub.w	r1, sl, #12
 800efb6:	4650      	mov	r0, sl
 800efb8:	f7fc fe60 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800efbc:	4602      	mov	r2, r0
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d1d6      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MOD_MUL( c[i] );
 800efc2:	4650      	mov	r0, sl
 800efc4:	4631      	mov	r1, r6
 800efc6:	f7ff fca7 	bl	800e918 <ecp_modp>
 800efca:	f10a 0a0c 	add.w	sl, sl, #12
 800efce:	4602      	mov	r2, r0
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d1cd      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
    for( i = 1; i < T_size; i++ )
 800efd4:	9b01      	ldr	r3, [sp, #4]
 800efd6:	3301      	adds	r3, #1
 800efd8:	e7a8      	b.n	800ef2c <ecp_normalize_jac_many.part.2+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800efda:	462a      	mov	r2, r5
 800efdc:	a903      	add	r1, sp, #12
 800efde:	a806      	add	r0, sp, #24
 800efe0:	f7fc fe4c 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800efe4:	4602      	mov	r2, r0
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d1c2      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800efea:	4631      	mov	r1, r6
 800efec:	a806      	add	r0, sp, #24
 800efee:	f7ff fc93 	bl	800e918 <ecp_modp>
 800eff2:	4602      	mov	r2, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d1bb      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800eff8:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800effc:	a903      	add	r1, sp, #12
 800effe:	3218      	adds	r2, #24
 800f000:	4608      	mov	r0, r1
 800f002:	f7fc fe3b 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f006:	4602      	mov	r2, r0
 800f008:	2800      	cmp	r0, #0
 800f00a:	d1b1      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800f00c:	4631      	mov	r1, r6
 800f00e:	a803      	add	r0, sp, #12
 800f010:	f7ff fc82 	bl	800e918 <ecp_modp>
 800f014:	e7a2      	b.n	800ef5c <ecp_normalize_jac_many.part.2+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800f016:	4631      	mov	r1, r6
 800f018:	a809      	add	r0, sp, #36	; 0x24
 800f01a:	f7ff fc7d 	bl	800e918 <ecp_modp>
 800f01e:	4602      	mov	r2, r0
 800f020:	2800      	cmp	r0, #0
 800f022:	d1a5      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800f024:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f028:	aa09      	add	r2, sp, #36	; 0x24
 800f02a:	4608      	mov	r0, r1
 800f02c:	f7fc fe26 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f030:	4602      	mov	r2, r0
 800f032:	2800      	cmp	r0, #0
 800f034:	d19c      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800f036:	4631      	mov	r1, r6
 800f038:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f03c:	f7ff fc6c 	bl	800e918 <ecp_modp>
 800f040:	4602      	mov	r2, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d194      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800f046:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f04a:	310c      	adds	r1, #12
 800f04c:	aa09      	add	r2, sp, #36	; 0x24
 800f04e:	4608      	mov	r0, r1
 800f050:	f7fc fe14 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f054:	4602      	mov	r2, r0
 800f056:	2800      	cmp	r0, #0
 800f058:	d18a      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800f05a:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f05e:	4631      	mov	r1, r6
 800f060:	300c      	adds	r0, #12
 800f062:	f7ff fc59 	bl	800e918 <ecp_modp>
 800f066:	4602      	mov	r2, r0
 800f068:	2800      	cmp	r0, #0
 800f06a:	d181      	bne.n	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800f06c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f070:	310c      	adds	r1, #12
 800f072:	aa06      	add	r2, sp, #24
 800f074:	4608      	mov	r0, r1
 800f076:	f7fc fe01 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f07a:	4602      	mov	r2, r0
 800f07c:	2800      	cmp	r0, #0
 800f07e:	f47f af77 	bne.w	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800f082:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f086:	4631      	mov	r1, r6
 800f088:	300c      	adds	r0, #12
 800f08a:	f7ff fc45 	bl	800e918 <ecp_modp>
 800f08e:	4602      	mov	r2, r0
 800f090:	2800      	cmp	r0, #0
 800f092:	f47f af6d 	bne.w	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800f096:	68b1      	ldr	r1, [r6, #8]
 800f098:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f09c:	f7fc f9f7 	bl	800b48e <mbedtls_mpi_shrink>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	f47f af64 	bne.w	800ef70 <ecp_normalize_jac_many.part.2+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800f0a8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f0ac:	68b1      	ldr	r1, [r6, #8]
 800f0ae:	300c      	adds	r0, #12
 800f0b0:	f7fc f9ed 	bl	800b48e <mbedtls_mpi_shrink>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f47f af5a 	bne.w	800ef70 <ecp_normalize_jac_many.part.2+0x98>
 800f0bc:	9001      	str	r0, [sp, #4]
        mbedtls_mpi_free( &T[i]->Z );
 800f0be:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 800f0c2:	3018      	adds	r0, #24
 800f0c4:	f7fc f9a9 	bl	800b41a <mbedtls_mpi_free>
 800f0c8:	3d0c      	subs	r5, #12
        if( i == 0 )
 800f0ca:	9a01      	ldr	r2, [sp, #4]
 800f0cc:	f1ba 0f00 	cmp.w	sl, #0
 800f0d0:	f43f af4e 	beq.w	800ef70 <ecp_normalize_jac_many.part.2+0x98>
    for( i = T_size - 1; ; i-- )
 800f0d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0d8:	e739      	b.n	800ef4e <ecp_normalize_jac_many.part.2+0x76>
        mbedtls_mpi_free( &c[i] );
 800f0da:	4658      	mov	r0, fp
 800f0dc:	f7fc f99d 	bl	800b41a <mbedtls_mpi_free>
 800f0e0:	f10b 0b0c 	add.w	fp, fp, #12
 800f0e4:	e74e      	b.n	800ef84 <ecp_normalize_jac_many.part.2+0xac>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800f0e6:	4a01      	ldr	r2, [pc, #4]	; (800f0ec <ecp_normalize_jac_many.part.2+0x214>)
 800f0e8:	e755      	b.n	800ef96 <ecp_normalize_jac_many.part.2+0xbe>
 800f0ea:	bf00      	nop
 800f0ec:	ffffb280 	.word	0xffffb280

0800f0f0 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800f0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	460e      	mov	r6, r1
 800f0fc:	4699      	mov	r9, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800f0fe:	f3c7 0a45 	ubfx	sl, r7, #1, #6
 800f102:	f102 050c 	add.w	r5, r2, #12

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800f106:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800f108:	f101 0b0c 	add.w	fp, r1, #12
    for( j = 0; j < T_size; j++ )
 800f10c:	454c      	cmp	r4, r9
 800f10e:	d107      	bne.n	800f120 <ecp_select_comb+0x30>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800f110:	09fa      	lsrs	r2, r7, #7
 800f112:	4631      	mov	r1, r6
 800f114:	4640      	mov	r0, r8

cleanup:
    return( ret );
}
 800f116:	b003      	add	sp, #12
 800f118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800f11c:	f7ff bbd9 	b.w	800e8d2 <ecp_safe_invert_jac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800f120:	b2e3      	uxtb	r3, r4
 800f122:	eba3 020a 	sub.w	r2, r3, sl
 800f126:	4253      	negs	r3, r2
 800f128:	4153      	adcs	r3, r2
 800f12a:	461a      	mov	r2, r3
 800f12c:	f1a5 010c 	sub.w	r1, r5, #12
 800f130:	4630      	mov	r0, r6
 800f132:	9301      	str	r3, [sp, #4]
 800f134:	f7fc fa13 	bl	800b55e <mbedtls_mpi_safe_cond_assign>
 800f138:	b948      	cbnz	r0, 800f14e <ecp_select_comb+0x5e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800f13a:	9b01      	ldr	r3, [sp, #4]
 800f13c:	4629      	mov	r1, r5
 800f13e:	461a      	mov	r2, r3
 800f140:	4658      	mov	r0, fp
 800f142:	f7fc fa0c 	bl	800b55e <mbedtls_mpi_safe_cond_assign>
 800f146:	3401      	adds	r4, #1
 800f148:	3524      	adds	r5, #36	; 0x24
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0de      	beq.n	800f10c <ecp_select_comb+0x1c>
}
 800f14e:	b003      	add	sp, #12
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f154 <mbedtls_ecp_point_free.part.4>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 800f154:	b510      	push	{r4, lr}
 800f156:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 800f158:	f7fc f95f 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800f15c:	f104 000c 	add.w	r0, r4, #12
 800f160:	f7fc f95b 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800f164:	f104 0018 	add.w	r0, r4, #24
}
 800f168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 800f16c:	f7fc b955 	b.w	800b41a <mbedtls_mpi_free>

0800f170 <mbedtls_ecp_get_type>:
    if( grp->G.X.p == NULL )
 800f170:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f172:	b12b      	cbz	r3, 800f180 <mbedtls_ecp_get_type+0x10>
    if( grp->G.Y.p == NULL )
 800f174:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f176:	2b00      	cmp	r3, #0
        return( MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS );
 800f178:	bf0c      	ite	eq
 800f17a:	2002      	moveq	r0, #2
 800f17c:	2001      	movne	r0, #1
 800f17e:	4770      	bx	lr
        return( MBEDTLS_ECP_TYPE_NONE );
 800f180:	4618      	mov	r0, r3
}
 800f182:	4770      	bx	lr

0800f184 <mbedtls_ecp_point_init>:
{
 800f184:	b510      	push	{r4, lr}
 800f186:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 800f188:	f7fc f941 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800f18c:	f104 000c 	add.w	r0, r4, #12
 800f190:	f7fc f93d 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800f194:	f104 0018 	add.w	r0, r4, #24
}
 800f198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 800f19c:	f7fc b937 	b.w	800b40e <mbedtls_mpi_init>

0800f1a0 <mbedtls_ecp_group_init>:
{
 800f1a0:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
 800f1a2:	2500      	movs	r5, #0
{
 800f1a4:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
 800f1a6:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 800f1aa:	f7fc f930 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800f1ae:	f104 0010 	add.w	r0, r4, #16
 800f1b2:	f7fc f92c 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800f1b6:	f104 001c 	add.w	r0, r4, #28
 800f1ba:	f7fc f928 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800f1be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f1c2:	f7ff ffdf 	bl	800f184 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800f1c6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f1ca:	f7fc f920 	bl	800b40e <mbedtls_mpi_init>
    grp->nbits = 0;
 800f1ce:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
 800f1d2:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
 800f1d6:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
 800f1da:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->T_size = 0;
 800f1de:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800f1e0:	bd38      	pop	{r3, r4, r5, pc}

0800f1e2 <mbedtls_ecp_keypair_init>:
{
 800f1e2:	b510      	push	{r4, lr}
 800f1e4:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
 800f1e6:	f7ff ffdb 	bl	800f1a0 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800f1ea:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800f1ee:	f7fc f90e 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 800f1f2:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 800f1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 800f1fa:	f7ff bfc3 	b.w	800f184 <mbedtls_ecp_point_init>

0800f1fe <mbedtls_ecp_point_free>:
    if( pt == NULL )
 800f1fe:	b108      	cbz	r0, 800f204 <mbedtls_ecp_point_free+0x6>
 800f200:	f7ff bfa8 	b.w	800f154 <mbedtls_ecp_point_free.part.4>
}
 800f204:	4770      	bx	lr

0800f206 <mbedtls_ecp_group_free>:
{
 800f206:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 800f208:	4604      	mov	r4, r0
 800f20a:	b360      	cbz	r0, 800f266 <mbedtls_ecp_group_free+0x60>
    if( grp->h != 1 )
 800f20c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d012      	beq.n	800f238 <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 800f212:	3004      	adds	r0, #4
 800f214:	f7fc f901 	bl	800b41a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800f218:	f104 0010 	add.w	r0, r4, #16
 800f21c:	f7fc f8fd 	bl	800b41a <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800f220:	f104 001c 	add.w	r0, r4, #28
 800f224:	f7fc f8f9 	bl	800b41a <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800f228:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f22c:	f7ff ffe7 	bl	800f1fe <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800f230:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800f234:	f7fc f8f1 	bl	800b41a <mbedtls_mpi_free>
    if( grp->T != NULL )
 800f238:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f23a:	b98b      	cbnz	r3, 800f260 <mbedtls_ecp_group_free+0x5a>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800f23c:	4620      	mov	r0, r4
 800f23e:	217c      	movs	r1, #124	; 0x7c
}
 800f240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800f244:	f003 b82c 	b.w	80122a0 <mbedtls_platform_zeroize>
            mbedtls_ecp_point_free( &grp->T[i] );
 800f248:	fb06 0005 	mla	r0, r6, r5, r0
 800f24c:	f7ff ffd7 	bl	800f1fe <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800f250:	3501      	adds	r5, #1
 800f252:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 800f256:	42ab      	cmp	r3, r5
 800f258:	d8f6      	bhi.n	800f248 <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 800f25a:	f007 fc17 	bl	8016a8c <free>
 800f25e:	e7ed      	b.n	800f23c <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 800f260:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 800f262:	2624      	movs	r6, #36	; 0x24
 800f264:	e7f5      	b.n	800f252 <mbedtls_ecp_group_free+0x4c>
}
 800f266:	bd70      	pop	{r4, r5, r6, pc}

0800f268 <mbedtls_ecp_keypair_free>:
{
 800f268:	b510      	push	{r4, lr}
    if( key == NULL )
 800f26a:	4604      	mov	r4, r0
 800f26c:	b158      	cbz	r0, 800f286 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 800f26e:	f7ff ffca 	bl	800f206 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800f272:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800f276:	f7fc f8d0 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 800f27a:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 800f27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 800f282:	f7ff bfbc 	b.w	800f1fe <mbedtls_ecp_point_free>
}
 800f286:	bd10      	pop	{r4, pc}

0800f288 <mbedtls_ecp_copy>:
{
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4604      	mov	r4, r0
 800f28c:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800f28e:	f7fc f93a 	bl	800b506 <mbedtls_mpi_copy>
 800f292:	b970      	cbnz	r0, 800f2b2 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800f294:	f105 010c 	add.w	r1, r5, #12
 800f298:	f104 000c 	add.w	r0, r4, #12
 800f29c:	f7fc f933 	bl	800b506 <mbedtls_mpi_copy>
 800f2a0:	b938      	cbnz	r0, 800f2b2 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800f2a2:	f105 0118 	add.w	r1, r5, #24
 800f2a6:	f104 0018 	add.w	r0, r4, #24
}
 800f2aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800f2ae:	f7fc b92a 	b.w	800b506 <mbedtls_mpi_copy>
}
 800f2b2:	bd38      	pop	{r3, r4, r5, pc}

0800f2b4 <mbedtls_ecp_group_copy>:
    return( mbedtls_ecp_group_load( dst, src->id ) );
 800f2b4:	7809      	ldrb	r1, [r1, #0]
 800f2b6:	f001 b9b1 	b.w	801061c <mbedtls_ecp_group_load>

0800f2ba <mbedtls_ecp_set_zero>:
{
 800f2ba:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800f2bc:	2101      	movs	r1, #1
{
 800f2be:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800f2c0:	f7fc f982 	bl	800b5c8 <mbedtls_mpi_lset>
 800f2c4:	b960      	cbnz	r0, 800f2e0 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	f104 000c 	add.w	r0, r4, #12
 800f2cc:	f7fc f97c 	bl	800b5c8 <mbedtls_mpi_lset>
 800f2d0:	b930      	cbnz	r0, 800f2e0 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800f2d2:	4601      	mov	r1, r0
 800f2d4:	f104 0018 	add.w	r0, r4, #24
}
 800f2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800f2dc:	f7fc b974 	b.w	800b5c8 <mbedtls_mpi_lset>
}
 800f2e0:	bd10      	pop	{r4, pc}
	...

0800f2e4 <ecp_add_mixed>:
{
 800f2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f2e8:	f102 0918 	add.w	r9, r2, #24
{
 800f2ec:	b096      	sub	sp, #88	; 0x58
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	460e      	mov	r6, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f2f2:	4648      	mov	r0, r9
 800f2f4:	2100      	movs	r1, #0
{
 800f2f6:	4690      	mov	r8, r2
 800f2f8:	461f      	mov	r7, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f2fa:	f7fc fb97 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f2fe:	b940      	cbnz	r0, 800f312 <ecp_add_mixed+0x2e>
        return( mbedtls_ecp_copy( R, Q ) );
 800f300:	4639      	mov	r1, r7
        return( mbedtls_ecp_copy( R, P ) );
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ffc0 	bl	800f288 <mbedtls_ecp_copy>
 800f308:	4604      	mov	r4, r0
}
 800f30a:	4620      	mov	r0, r4
 800f30c:	b016      	add	sp, #88	; 0x58
 800f30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800f312:	6a3b      	ldr	r3, [r7, #32]
 800f314:	b13b      	cbz	r3, 800f326 <ecp_add_mixed+0x42>
 800f316:	2100      	movs	r1, #0
 800f318:	f107 0018 	add.w	r0, r7, #24
 800f31c:	f7fc fb86 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f320:	b908      	cbnz	r0, 800f326 <ecp_add_mixed+0x42>
        return( mbedtls_ecp_copy( R, P ) );
 800f322:	4641      	mov	r1, r8
 800f324:	e7ed      	b.n	800f302 <ecp_add_mixed+0x1e>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f040 8145 	bne.w	800f5b8 <ecp_add_mixed+0x2d4>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800f32e:	a801      	add	r0, sp, #4
 800f330:	f7fc f86d 	bl	800b40e <mbedtls_mpi_init>
 800f334:	a804      	add	r0, sp, #16
 800f336:	f7fc f86a 	bl	800b40e <mbedtls_mpi_init>
 800f33a:	a807      	add	r0, sp, #28
 800f33c:	f7fc f867 	bl	800b40e <mbedtls_mpi_init>
 800f340:	a80a      	add	r0, sp, #40	; 0x28
 800f342:	f7fc f864 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800f346:	a80d      	add	r0, sp, #52	; 0x34
 800f348:	f7fc f861 	bl	800b40e <mbedtls_mpi_init>
 800f34c:	a810      	add	r0, sp, #64	; 0x40
 800f34e:	f7fc f85e 	bl	800b40e <mbedtls_mpi_init>
 800f352:	a813      	add	r0, sp, #76	; 0x4c
 800f354:	f7fc f85b 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800f358:	464a      	mov	r2, r9
 800f35a:	4649      	mov	r1, r9
 800f35c:	a801      	add	r0, sp, #4
 800f35e:	f7fc fc8d 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f362:	4604      	mov	r4, r0
 800f364:	2800      	cmp	r0, #0
 800f366:	f040 8141 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f36a:	4629      	mov	r1, r5
 800f36c:	a801      	add	r0, sp, #4
 800f36e:	f7ff fad3 	bl	800e918 <ecp_modp>
 800f372:	4604      	mov	r4, r0
 800f374:	2800      	cmp	r0, #0
 800f376:	f040 8139 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800f37a:	464a      	mov	r2, r9
 800f37c:	a901      	add	r1, sp, #4
 800f37e:	a804      	add	r0, sp, #16
 800f380:	f7fc fc7c 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f384:	4604      	mov	r4, r0
 800f386:	2800      	cmp	r0, #0
 800f388:	f040 8130 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f38c:	4629      	mov	r1, r5
 800f38e:	a804      	add	r0, sp, #16
 800f390:	f7ff fac2 	bl	800e918 <ecp_modp>
 800f394:	4604      	mov	r4, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	f040 8128 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800f39c:	a901      	add	r1, sp, #4
 800f39e:	463a      	mov	r2, r7
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	f7fc fc6b 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	f040 811f 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	a801      	add	r0, sp, #4
 800f3b2:	f7ff fab1 	bl	800e918 <ecp_modp>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f040 8117 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800f3be:	a904      	add	r1, sp, #16
 800f3c0:	f107 020c 	add.w	r2, r7, #12
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	f7fc fc59 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	f040 810d 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	a804      	add	r0, sp, #16
 800f3d6:	f7ff fa9f 	bl	800e918 <ecp_modp>
 800f3da:	4604      	mov	r4, r0
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	f040 8105 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800f3e2:	a901      	add	r1, sp, #4
 800f3e4:	4642      	mov	r2, r8
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	f7fc fbf9 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f040 80fc 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f3f4:	1d2f      	adds	r7, r5, #4
 800f3f6:	9b01      	ldr	r3, [sp, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f2c0 80e7 	blt.w	800f5cc <ecp_add_mixed+0x2e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800f3fe:	a904      	add	r1, sp, #16
 800f400:	f108 0a0c 	add.w	sl, r8, #12
 800f404:	4652      	mov	r2, sl
 800f406:	4608      	mov	r0, r1
 800f408:	f7fc fbe9 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f40c:	4604      	mov	r4, r0
 800f40e:	2800      	cmp	r0, #0
 800f410:	f040 80ec 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f414:	1d2f      	adds	r7, r5, #4
 800f416:	9b04      	ldr	r3, [sp, #16]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f2c0 80fd 	blt.w	800f618 <ecp_add_mixed+0x334>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800f41e:	2100      	movs	r1, #0
 800f420:	a801      	add	r0, sp, #4
 800f422:	f7fc fb03 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f426:	4601      	mov	r1, r0
 800f428:	2800      	cmp	r0, #0
 800f42a:	f000 8106 	beq.w	800f63a <ecp_add_mixed+0x356>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800f42e:	aa01      	add	r2, sp, #4
 800f430:	4649      	mov	r1, r9
 800f432:	a813      	add	r0, sp, #76	; 0x4c
 800f434:	f7fc fc22 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f438:	4604      	mov	r4, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f040 80d6 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f440:	4629      	mov	r1, r5
 800f442:	a813      	add	r0, sp, #76	; 0x4c
 800f444:	f7ff fa68 	bl	800e918 <ecp_modp>
 800f448:	4604      	mov	r4, r0
 800f44a:	2800      	cmp	r0, #0
 800f44c:	f040 80ce 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800f450:	aa01      	add	r2, sp, #4
 800f452:	4611      	mov	r1, r2
 800f454:	a807      	add	r0, sp, #28
 800f456:	f7fc fc11 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f45a:	4604      	mov	r4, r0
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f040 80c5 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f462:	4629      	mov	r1, r5
 800f464:	a807      	add	r0, sp, #28
 800f466:	f7ff fa57 	bl	800e918 <ecp_modp>
 800f46a:	4604      	mov	r4, r0
 800f46c:	2800      	cmp	r0, #0
 800f46e:	f040 80bd 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800f472:	aa01      	add	r2, sp, #4
 800f474:	a907      	add	r1, sp, #28
 800f476:	a80a      	add	r0, sp, #40	; 0x28
 800f478:	f7fc fc00 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f47c:	4604      	mov	r4, r0
 800f47e:	2800      	cmp	r0, #0
 800f480:	f040 80b4 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f484:	4629      	mov	r1, r5
 800f486:	a80a      	add	r0, sp, #40	; 0x28
 800f488:	f7ff fa46 	bl	800e918 <ecp_modp>
 800f48c:	4604      	mov	r4, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	f040 80ac 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800f494:	a907      	add	r1, sp, #28
 800f496:	4642      	mov	r2, r8
 800f498:	4608      	mov	r0, r1
 800f49a:	f7fc fbef 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f040 80a3 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	a807      	add	r0, sp, #28
 800f4aa:	f7ff fa35 	bl	800e918 <ecp_modp>
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	f040 809b 	bne.w	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	a907      	add	r1, sp, #28
 800f4ba:	a801      	add	r0, sp, #4
 800f4bc:	f7fc fc48 	bl	800bd50 <mbedtls_mpi_mul_int>
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	f040 8092 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f4c8:	1d2f      	adds	r7, r5, #4
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	a801      	add	r0, sp, #4
 800f4ce:	f7fc fa6d 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	f280 80c0 	bge.w	800f658 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800f4d8:	aa04      	add	r2, sp, #16
 800f4da:	4611      	mov	r1, r2
 800f4dc:	a80d      	add	r0, sp, #52	; 0x34
 800f4de:	f7fc fbcd 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	f040 8081 	bne.w	800f5ec <ecp_add_mixed+0x308>
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	a80d      	add	r0, sp, #52	; 0x34
 800f4ee:	f7ff fa13 	bl	800e918 <ecp_modp>
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d179      	bne.n	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800f4f8:	a90d      	add	r1, sp, #52	; 0x34
 800f4fa:	aa01      	add	r2, sp, #4
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	f7fc fb6e 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f502:	4604      	mov	r4, r0
 800f504:	2800      	cmp	r0, #0
 800f506:	d171      	bne.n	800f5ec <ecp_add_mixed+0x308>
 800f508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f2c0 80ae 	blt.w	800f66c <ecp_add_mixed+0x388>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800f510:	a90d      	add	r1, sp, #52	; 0x34
 800f512:	aa0a      	add	r2, sp, #40	; 0x28
 800f514:	4608      	mov	r0, r1
 800f516:	f7fc fb62 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f51a:	4604      	mov	r4, r0
 800f51c:	2800      	cmp	r0, #0
 800f51e:	d165      	bne.n	800f5ec <ecp_add_mixed+0x308>
 800f520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f522:	2b00      	cmp	r3, #0
 800f524:	f2c0 80af 	blt.w	800f686 <ecp_add_mixed+0x3a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800f528:	a907      	add	r1, sp, #28
 800f52a:	aa0d      	add	r2, sp, #52	; 0x34
 800f52c:	4608      	mov	r0, r1
 800f52e:	f7fc fb56 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f532:	4604      	mov	r4, r0
 800f534:	2800      	cmp	r0, #0
 800f536:	d159      	bne.n	800f5ec <ecp_add_mixed+0x308>
 800f538:	9b07      	ldr	r3, [sp, #28]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f2c0 80b0 	blt.w	800f6a0 <ecp_add_mixed+0x3bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800f540:	a907      	add	r1, sp, #28
 800f542:	aa04      	add	r2, sp, #16
 800f544:	4608      	mov	r0, r1
 800f546:	f7fc fb99 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f54a:	4604      	mov	r4, r0
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d14d      	bne.n	800f5ec <ecp_add_mixed+0x308>
 800f550:	4629      	mov	r1, r5
 800f552:	a807      	add	r0, sp, #28
 800f554:	f7ff f9e0 	bl	800e918 <ecp_modp>
 800f558:	4604      	mov	r4, r0
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d146      	bne.n	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800f55e:	a90a      	add	r1, sp, #40	; 0x28
 800f560:	4652      	mov	r2, sl
 800f562:	4608      	mov	r0, r1
 800f564:	f7fc fb8a 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f568:	4604      	mov	r4, r0
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d13e      	bne.n	800f5ec <ecp_add_mixed+0x308>
 800f56e:	4629      	mov	r1, r5
 800f570:	a80a      	add	r0, sp, #40	; 0x28
 800f572:	f7ff f9d1 	bl	800e918 <ecp_modp>
 800f576:	4604      	mov	r4, r0
 800f578:	2800      	cmp	r0, #0
 800f57a:	d137      	bne.n	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800f57c:	aa0a      	add	r2, sp, #40	; 0x28
 800f57e:	a907      	add	r1, sp, #28
 800f580:	a810      	add	r0, sp, #64	; 0x40
 800f582:	f7fc fb2c 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f586:	4604      	mov	r4, r0
 800f588:	bb80      	cbnz	r0, 800f5ec <ecp_add_mixed+0x308>
 800f58a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	f2c0 8094 	blt.w	800f6ba <ecp_add_mixed+0x3d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800f592:	a90d      	add	r1, sp, #52	; 0x34
 800f594:	4630      	mov	r0, r6
 800f596:	f7fb ffb6 	bl	800b506 <mbedtls_mpi_copy>
 800f59a:	4604      	mov	r4, r0
 800f59c:	bb30      	cbnz	r0, 800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800f59e:	a910      	add	r1, sp, #64	; 0x40
 800f5a0:	f106 000c 	add.w	r0, r6, #12
 800f5a4:	f7fb ffaf 	bl	800b506 <mbedtls_mpi_copy>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	b9f8      	cbnz	r0, 800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800f5ac:	a913      	add	r1, sp, #76	; 0x4c
 800f5ae:	f106 0018 	add.w	r0, r6, #24
 800f5b2:	f7fb ffa8 	bl	800b506 <mbedtls_mpi_copy>
 800f5b6:	e049      	b.n	800f64c <ecp_add_mixed+0x368>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	f107 0018 	add.w	r0, r7, #24
 800f5be:	f7fc fa35 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	f43f aeb3 	beq.w	800f32e <ecp_add_mixed+0x4a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f5c8:	4c42      	ldr	r4, [pc, #264]	; (800f6d4 <ecp_add_mixed+0x3f0>)
 800f5ca:	e69e      	b.n	800f30a <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	a801      	add	r0, sp, #4
 800f5d0:	f7fc fa2c 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f5d4:	2800      	cmp	r0, #0
 800f5d6:	f43f af12 	beq.w	800f3fe <ecp_add_mixed+0x11a>
 800f5da:	a901      	add	r1, sp, #4
 800f5dc:	463a      	mov	r2, r7
 800f5de:	4608      	mov	r0, r1
 800f5e0:	f7fc fadb 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f43f af05 	beq.w	800f3f6 <ecp_add_mixed+0x112>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800f5ec:	a801      	add	r0, sp, #4
 800f5ee:	f7fb ff14 	bl	800b41a <mbedtls_mpi_free>
 800f5f2:	a804      	add	r0, sp, #16
 800f5f4:	f7fb ff11 	bl	800b41a <mbedtls_mpi_free>
 800f5f8:	a807      	add	r0, sp, #28
 800f5fa:	f7fb ff0e 	bl	800b41a <mbedtls_mpi_free>
 800f5fe:	a80a      	add	r0, sp, #40	; 0x28
 800f600:	f7fb ff0b 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f604:	a80d      	add	r0, sp, #52	; 0x34
 800f606:	f7fb ff08 	bl	800b41a <mbedtls_mpi_free>
 800f60a:	a810      	add	r0, sp, #64	; 0x40
 800f60c:	f7fb ff05 	bl	800b41a <mbedtls_mpi_free>
 800f610:	a813      	add	r0, sp, #76	; 0x4c
 800f612:	f7fb ff02 	bl	800b41a <mbedtls_mpi_free>
    return( ret );
 800f616:	e678      	b.n	800f30a <ecp_add_mixed+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800f618:	2100      	movs	r1, #0
 800f61a:	a804      	add	r0, sp, #16
 800f61c:	f7fc fa06 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f620:	2800      	cmp	r0, #0
 800f622:	f43f aefc 	beq.w	800f41e <ecp_add_mixed+0x13a>
 800f626:	a904      	add	r1, sp, #16
 800f628:	463a      	mov	r2, r7
 800f62a:	4608      	mov	r0, r1
 800f62c:	f7fc fab5 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f630:	4604      	mov	r4, r0
 800f632:	2800      	cmp	r0, #0
 800f634:	f43f aeef 	beq.w	800f416 <ecp_add_mixed+0x132>
cleanup:
 800f638:	e7d8      	b.n	800f5ec <ecp_add_mixed+0x308>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800f63a:	a804      	add	r0, sp, #16
 800f63c:	f7fc f9f6 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f640:	b930      	cbnz	r0, 800f650 <ecp_add_mixed+0x36c>
            ret = ecp_double_jac( grp, R, P );
 800f642:	4642      	mov	r2, r8
 800f644:	4631      	mov	r1, r6
 800f646:	4628      	mov	r0, r5
 800f648:	f7ff f9ac 	bl	800e9a4 <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800f64c:	4604      	mov	r4, r0
cleanup:
 800f64e:	e7cd      	b.n	800f5ec <ecp_add_mixed+0x308>
            ret = mbedtls_ecp_set_zero( R );
 800f650:	4630      	mov	r0, r6
 800f652:	f7ff fe32 	bl	800f2ba <mbedtls_ecp_set_zero>
 800f656:	e7f9      	b.n	800f64c <ecp_add_mixed+0x368>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800f658:	a901      	add	r1, sp, #4
 800f65a:	463a      	mov	r2, r7
 800f65c:	4608      	mov	r0, r1
 800f65e:	f7fc fa5e 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800f662:	4604      	mov	r4, r0
 800f664:	2800      	cmp	r0, #0
 800f666:	f43f af30 	beq.w	800f4ca <ecp_add_mixed+0x1e6>
cleanup:
 800f66a:	e7bf      	b.n	800f5ec <ecp_add_mixed+0x308>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800f66c:	2100      	movs	r1, #0
 800f66e:	a80d      	add	r0, sp, #52	; 0x34
 800f670:	f7fc f9dc 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f674:	2800      	cmp	r0, #0
 800f676:	f43f af4b 	beq.w	800f510 <ecp_add_mixed+0x22c>
 800f67a:	a90d      	add	r1, sp, #52	; 0x34
 800f67c:	463a      	mov	r2, r7
 800f67e:	4608      	mov	r0, r1
 800f680:	f7fc fa8b 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f684:	e73d      	b.n	800f502 <ecp_add_mixed+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800f686:	2100      	movs	r1, #0
 800f688:	a80d      	add	r0, sp, #52	; 0x34
 800f68a:	f7fc f9cf 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f68e:	2800      	cmp	r0, #0
 800f690:	f43f af4a 	beq.w	800f528 <ecp_add_mixed+0x244>
 800f694:	a90d      	add	r1, sp, #52	; 0x34
 800f696:	463a      	mov	r2, r7
 800f698:	4608      	mov	r0, r1
 800f69a:	f7fc fa7e 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f69e:	e73c      	b.n	800f51a <ecp_add_mixed+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	a807      	add	r0, sp, #28
 800f6a4:	f7fc f9c2 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	f43f af49 	beq.w	800f540 <ecp_add_mixed+0x25c>
 800f6ae:	a907      	add	r1, sp, #28
 800f6b0:	463a      	mov	r2, r7
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	f7fc fa71 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f6b8:	e73b      	b.n	800f532 <ecp_add_mixed+0x24e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	a810      	add	r0, sp, #64	; 0x40
 800f6be:	f7fc f9b5 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f43f af65 	beq.w	800f592 <ecp_add_mixed+0x2ae>
 800f6c8:	a910      	add	r1, sp, #64	; 0x40
 800f6ca:	463a      	mov	r2, r7
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	f7fc fa64 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800f6d2:	e758      	b.n	800f586 <ecp_add_mixed+0x2a2>
 800f6d4:	ffffb080 	.word	0xffffb080

0800f6d8 <ecp_mul_comb_after_precomp.isra.9>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 800f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6dc:	b0db      	sub	sp, #364	; 0x16c
    mbedtls_mpi_init( &M );
 800f6de:	f10d 0930 	add.w	r9, sp, #48	; 0x30
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 800f6e2:	9303      	str	r3, [sp, #12]
 800f6e4:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
 800f6e8:	9304      	str	r3, [sp, #16]
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	f89d 3194 	ldrb.w	r3, [sp, #404]	; 0x194
 800f6f0:	9305      	str	r3, [sp, #20]
    mbedtls_mpi_init( &M );
 800f6f2:	4648      	mov	r0, r9
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 800f6f4:	460e      	mov	r6, r1
 800f6f6:	4617      	mov	r7, r2
 800f6f8:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800f6fc:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    mbedtls_mpi_init( &M );
 800f700:	f7fb fe85 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800f704:	a80f      	add	r0, sp, #60	; 0x3c
 800f706:	f7fb fe82 	bl	800b40e <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800f70a:	2100      	movs	r1, #0
 800f70c:	4640      	mov	r0, r8
 800f70e:	f7fb ff77 	bl	800b600 <mbedtls_mpi_get_bit>
 800f712:	2801      	cmp	r0, #1
 800f714:	d004      	beq.n	800f720 <ecp_mul_comb_after_precomp.isra.9+0x48>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f716:	4ca6      	ldr	r4, [pc, #664]	; (800f9b0 <ecp_mul_comb_after_precomp.isra.9+0x2d8>)
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
 800f718:	4620      	mov	r0, r4
 800f71a:	b05b      	add	sp, #364	; 0x16c
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800f720:	2100      	movs	r1, #0
 800f722:	4638      	mov	r0, r7
 800f724:	f7fb ff6c 	bl	800b600 <mbedtls_mpi_get_bit>
 800f728:	fab0 f380 	clz	r3, r0
 800f72c:	095b      	lsrs	r3, r3, #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800f72e:	4639      	mov	r1, r7
 800f730:	4648      	mov	r0, r9
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800f732:	9302      	str	r3, [sp, #8]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800f734:	f7fb fee7 	bl	800b506 <mbedtls_mpi_copy>
 800f738:	4604      	mov	r4, r0
 800f73a:	bb28      	cbnz	r0, 800f788 <ecp_mul_comb_after_precomp.isra.9+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800f73c:	463a      	mov	r2, r7
 800f73e:	4641      	mov	r1, r8
 800f740:	a80f      	add	r0, sp, #60	; 0x3c
 800f742:	f7fc fa4c 	bl	800bbde <mbedtls_mpi_sub_mpi>
 800f746:	4604      	mov	r4, r0
 800f748:	b9f0      	cbnz	r0, 800f788 <ecp_mul_comb_after_precomp.isra.9+0xb0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800f74a:	9a02      	ldr	r2, [sp, #8]
 800f74c:	a90f      	add	r1, sp, #60	; 0x3c
 800f74e:	4648      	mov	r0, r9
 800f750:	f7fb ff05 	bl	800b55e <mbedtls_mpi_safe_cond_assign>
 800f754:	4604      	mov	r4, r0
 800f756:	b9b8      	cbnz	r0, 800f788 <ecp_mul_comb_after_precomp.isra.9+0xb0>
    memset( x, 0, d+1 );
 800f758:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 800f75c:	4601      	mov	r1, r0
 800f75e:	f10b 0201 	add.w	r2, fp, #1
 800f762:	4650      	mov	r0, sl
 800f764:	f007 f9cd 	bl	8016b02 <memset>
 800f768:	46d0      	mov	r8, sl
    for( i = 0; i < d; i++ )
 800f76a:	4627      	mov	r7, r4
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800f76c:	f8cd 9018 	str.w	r9, [sp, #24]
    for( i = 0; i < d; i++ )
 800f770:	45bb      	cmp	fp, r7
 800f772:	f040 80bf 	bne.w	800f8f4 <ecp_mul_comb_after_precomp.isra.9+0x21c>
 800f776:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    c = 0;
 800f77a:	f04f 0e00 	mov.w	lr, #0
    for( i = 1; i <= d; i++ )
 800f77e:	eba3 020a 	sub.w	r2, r3, sl
 800f782:	42ba      	cmp	r2, r7
 800f784:	f240 80ba 	bls.w	800f8fc <ecp_mul_comb_after_precomp.isra.9+0x224>
    mbedtls_mpi_free( &mm );
 800f788:	a80f      	add	r0, sp, #60	; 0x3c
 800f78a:	f7fb fe46 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800f78e:	a80c      	add	r0, sp, #48	; 0x30
 800f790:	f7fb fe43 	bl	800b41a <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800f794:	2c00      	cmp	r4, #0
 800f796:	d1bf      	bne.n	800f718 <ecp_mul_comb_after_precomp.isra.9+0x40>
    mbedtls_ecp_point_init( &Txi );
 800f798:	a80f      	add	r0, sp, #60	; 0x3c
 800f79a:	f7ff fcf3 	bl	800f184 <mbedtls_ecp_point_init>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800f79e:	ab18      	add	r3, sp, #96	; 0x60
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f7ae:	f7ff fc9f 	bl	800f0f0 <ecp_select_comb>
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	f040 80e4 	bne.w	800f982 <ecp_mul_comb_after_precomp.isra.9+0x2aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800f7ba:	f106 0918 	add.w	r9, r6, #24
 800f7be:	2101      	movs	r1, #1
 800f7c0:	4648      	mov	r0, r9
 800f7c2:	f7fb ff01 	bl	800b5c8 <mbedtls_mpi_lset>
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	f040 80da 	bne.w	800f982 <ecp_mul_comb_after_precomp.isra.9+0x2aa>
        if( f_rng != 0 )
 800f7ce:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 80d2 	beq.w	800f97a <ecp_mul_comb_after_precomp.isra.9+0x2a2>
    p_size = ( grp->pbits + 7 ) / 8;
 800f7d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f7d8:	af09      	add	r7, sp, #36	; 0x24
    p_size = ( grp->pbits + 7 ) / 8;
 800f7da:	3307      	adds	r3, #7
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f7dc:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
 800f7de:	ea4f 08d3 	mov.w	r8, r3, lsr #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f7e2:	f7fb fe14 	bl	800b40e <mbedtls_mpi_init>
 800f7e6:	a80c      	add	r0, sp, #48	; 0x30
 800f7e8:	f7fb fe11 	bl	800b40e <mbedtls_mpi_init>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f7ec:	1d2b      	adds	r3, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f7ee:	f04f 0a0c 	mov.w	sl, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f7f2:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800f7f4:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
 800f7f6:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800f7f8:	4641      	mov	r1, r8
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	f7fc ff9b 	bl	800c736 <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800f800:	4603      	mov	r3, r0
 800f802:	2800      	cmp	r0, #0
 800f804:	d153      	bne.n	800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f806:	9905      	ldr	r1, [sp, #20]
 800f808:	4638      	mov	r0, r7
 800f80a:	f7fc f8cf 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f280 8093 	bge.w	800f93a <ecp_mul_comb_after_precomp.isra.9+0x262>
        if( count++ > 10 )
 800f814:	f1ba 0a01 	subs.w	sl, sl, #1
 800f818:	f000 80c8 	beq.w	800f9ac <ecp_mul_comb_after_precomp.isra.9+0x2d4>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800f81c:	2101      	movs	r1, #1
 800f81e:	4638      	mov	r0, r7
 800f820:	f7fc f904 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800f824:	2800      	cmp	r0, #0
 800f826:	dde5      	ble.n	800f7f4 <ecp_mul_comb_after_precomp.isra.9+0x11c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800f828:	463a      	mov	r2, r7
 800f82a:	4649      	mov	r1, r9
 800f82c:	4648      	mov	r0, r9
 800f82e:	f7fc fa25 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f832:	4603      	mov	r3, r0
 800f834:	2800      	cmp	r0, #0
 800f836:	d13a      	bne.n	800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
 800f838:	4629      	mov	r1, r5
 800f83a:	4648      	mov	r0, r9
 800f83c:	f7ff f86c 	bl	800e918 <ecp_modp>
 800f840:	4603      	mov	r3, r0
 800f842:	bba0      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800f844:	463a      	mov	r2, r7
 800f846:	4639      	mov	r1, r7
 800f848:	a80c      	add	r0, sp, #48	; 0x30
 800f84a:	f7fc fa17 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f84e:	4603      	mov	r3, r0
 800f850:	bb68      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
 800f852:	4629      	mov	r1, r5
 800f854:	a80c      	add	r0, sp, #48	; 0x30
 800f856:	f7ff f85f 	bl	800e918 <ecp_modp>
 800f85a:	4603      	mov	r3, r0
 800f85c:	bb38      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800f85e:	aa0c      	add	r2, sp, #48	; 0x30
 800f860:	4631      	mov	r1, r6
 800f862:	4630      	mov	r0, r6
 800f864:	f7fc fa0a 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f868:	4603      	mov	r3, r0
 800f86a:	bb00      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
 800f86c:	4629      	mov	r1, r5
 800f86e:	4630      	mov	r0, r6
 800f870:	f7ff f852 	bl	800e918 <ecp_modp>
 800f874:	4603      	mov	r3, r0
 800f876:	b9d0      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800f878:	a90c      	add	r1, sp, #48	; 0x30
 800f87a:	463a      	mov	r2, r7
 800f87c:	4608      	mov	r0, r1
 800f87e:	f7fc f9fd 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f882:	4603      	mov	r3, r0
 800f884:	b998      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
 800f886:	4629      	mov	r1, r5
 800f888:	a80c      	add	r0, sp, #48	; 0x30
 800f88a:	f7ff f845 	bl	800e918 <ecp_modp>
 800f88e:	4603      	mov	r3, r0
 800f890:	b968      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800f892:	f106 080c 	add.w	r8, r6, #12
 800f896:	aa0c      	add	r2, sp, #48	; 0x30
 800f898:	4641      	mov	r1, r8
 800f89a:	4640      	mov	r0, r8
 800f89c:	f7fc f9ee 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	b920      	cbnz	r0, 800f8ae <ecp_mul_comb_after_precomp.isra.9+0x1d6>
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	f7ff f836 	bl	800e918 <ecp_modp>
 800f8ac:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	9305      	str	r3, [sp, #20]
 800f8b2:	f7fb fdb2 	bl	800b41a <mbedtls_mpi_free>
 800f8b6:	a80c      	add	r0, sp, #48	; 0x30
 800f8b8:	f7fb fdaf 	bl	800b41a <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800f8bc:	9b05      	ldr	r3, [sp, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d05b      	beq.n	800f97a <ecp_mul_comb_after_precomp.isra.9+0x2a2>
 800f8c2:	461c      	mov	r4, r3
 800f8c4:	e05d      	b.n	800f982 <ecp_mul_comb_after_precomp.isra.9+0x2aa>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	9806      	ldr	r0, [sp, #24]
 800f8ca:	9307      	str	r3, [sp, #28]
 800f8cc:	f7fb fe98 	bl	800b600 <mbedtls_mpi_get_bit>
 800f8d0:	f898 2000 	ldrb.w	r2, [r8]
 800f8d4:	9b07      	ldr	r3, [sp, #28]
 800f8d6:	fa00 f009 	lsl.w	r0, r0, r9
 800f8da:	4310      	orrs	r0, r2
 800f8dc:	f888 0000 	strb.w	r0, [r8]
        for( j = 0; j < w; j++ )
 800f8e0:	f109 0901 	add.w	r9, r9, #1
 800f8e4:	445b      	add	r3, fp
 800f8e6:	9a05      	ldr	r2, [sp, #20]
 800f8e8:	4591      	cmp	r9, r2
 800f8ea:	d3ec      	bcc.n	800f8c6 <ecp_mul_comb_after_precomp.isra.9+0x1ee>
    for( i = 0; i < d; i++ )
 800f8ec:	3701      	adds	r7, #1
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	e73d      	b.n	800f770 <ecp_mul_comb_after_precomp.isra.9+0x98>
 800f8f4:	463b      	mov	r3, r7
        for( j = 0; j < w; j++ )
 800f8f6:	f04f 0900 	mov.w	r9, #0
 800f8fa:	e7f4      	b.n	800f8e6 <ecp_mul_comb_after_precomp.isra.9+0x20e>
        cc   = x[i] & c;
 800f8fc:	f893 c000 	ldrb.w	ip, [r3]
        c   |= x[i] & ( x[i-1] * adjust );
 800f900:	f813 1c01 	ldrb.w	r1, [r3, #-1]
        x[i] = x[i] ^ c;
 800f904:	ea8c 020e 	eor.w	r2, ip, lr
 800f908:	43d0      	mvns	r0, r2
 800f90a:	f000 0001 	and.w	r0, r0, #1
        c   |= x[i] & ( x[i-1] * adjust );
 800f90e:	fb11 f100 	smulbb	r1, r1, r0
 800f912:	b252      	sxtb	r2, r2
 800f914:	b249      	sxtb	r1, r1
 800f916:	ea02 0801 	and.w	r8, r2, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800f91a:	404a      	eors	r2, r1
 800f91c:	f803 2b01 	strb.w	r2, [r3], #1
        x[i-1] |= adjust << 7;
 800f920:	f813 2c02 	ldrb.w	r2, [r3, #-2]
        cc   = x[i] & c;
 800f924:	ea0c 0c0e 	and.w	ip, ip, lr
        c   |= x[i] & ( x[i-1] * adjust );
 800f928:	ea48 0e0c 	orr.w	lr, r8, ip
        x[i-1] |= adjust << 7;
 800f92c:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 800f930:	fa5f fe8e 	uxtb.w	lr, lr
        x[i-1] |= adjust << 7;
 800f934:	f803 0c02 	strb.w	r0, [r3, #-2]
 800f938:	e721      	b.n	800f77e <ecp_mul_comb_after_precomp.isra.9+0xa6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800f93a:	2101      	movs	r1, #1
 800f93c:	4638      	mov	r0, r7
 800f93e:	f7fb ff65 	bl	800b80c <mbedtls_mpi_shift_r>
 800f942:	e75d      	b.n	800f800 <ecp_mul_comb_after_precomp.isra.9+0x128>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800f944:	4632      	mov	r2, r6
 800f946:	4631      	mov	r1, r6
 800f948:	4628      	mov	r0, r5
        --i;
 800f94a:	f10b 3bff 	add.w	fp, fp, #4294967295
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800f94e:	f7ff f829 	bl	800e9a4 <ecp_double_jac>
 800f952:	b980      	cbnz	r0, 800f976 <ecp_mul_comb_after_precomp.isra.9+0x29e>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800f954:	f81b 3007 	ldrb.w	r3, [fp, r7]
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	a90f      	add	r1, sp, #60	; 0x3c
 800f95c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f960:	4628      	mov	r0, r5
 800f962:	f7ff fbc5 	bl	800f0f0 <ecp_select_comb>
 800f966:	b930      	cbnz	r0, 800f976 <ecp_mul_comb_after_precomp.isra.9+0x29e>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800f968:	ab0f      	add	r3, sp, #60	; 0x3c
 800f96a:	4632      	mov	r2, r6
 800f96c:	4631      	mov	r1, r6
 800f96e:	4628      	mov	r0, r5
 800f970:	f7ff fcb8 	bl	800f2e4 <ecp_add_mixed>
 800f974:	b110      	cbz	r0, 800f97c <ecp_mul_comb_after_precomp.isra.9+0x2a4>
 800f976:	4604      	mov	r4, r0
 800f978:	e003      	b.n	800f982 <ecp_mul_comb_after_precomp.isra.9+0x2aa>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800f97a:	af18      	add	r7, sp, #96	; 0x60
    while( i != 0 )
 800f97c:	f1bb 0f00 	cmp.w	fp, #0
 800f980:	d1e0      	bne.n	800f944 <ecp_mul_comb_after_precomp.isra.9+0x26c>
 800f982:	a80f      	add	r0, sp, #60	; 0x3c
 800f984:	f7ff fbe6 	bl	800f154 <mbedtls_ecp_point_free.part.4>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800f988:	2c00      	cmp	r4, #0
 800f98a:	f47f aec5 	bne.w	800f718 <ecp_mul_comb_after_precomp.isra.9+0x40>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800f98e:	9a02      	ldr	r2, [sp, #8]
 800f990:	4631      	mov	r1, r6
 800f992:	4628      	mov	r0, r5
 800f994:	f7fe ff9d 	bl	800e8d2 <ecp_safe_invert_jac>
 800f998:	4604      	mov	r4, r0
 800f99a:	2800      	cmp	r0, #0
 800f99c:	f47f aebc 	bne.w	800f718 <ecp_mul_comb_after_precomp.isra.9+0x40>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800f9a0:	4631      	mov	r1, r6
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f7ff fa3b 	bl	800ee1e <ecp_normalize_jac>
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	e6b5      	b.n	800f718 <ecp_mul_comb_after_precomp.isra.9+0x40>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800f9ac:	4c01      	ldr	r4, [pc, #4]	; (800f9b4 <ecp_mul_comb_after_precomp.isra.9+0x2dc>)
 800f9ae:	e7e8      	b.n	800f982 <ecp_mul_comb_after_precomp.isra.9+0x2aa>
 800f9b0:	ffffb080 	.word	0xffffb080
 800f9b4:	ffffb300 	.word	0xffffb300

0800f9b8 <mbedtls_ecp_is_zero>:
{
 800f9b8:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	3018      	adds	r0, #24
 800f9be:	f7fc f835 	bl	800ba2c <mbedtls_mpi_cmp_int>
}
 800f9c2:	fab0 f080 	clz	r0, r0
 800f9c6:	0940      	lsrs	r0, r0, #5
 800f9c8:	bd08      	pop	{r3, pc}
	...

0800f9cc <mbedtls_ecp_point_write_binary>:
{
 800f9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d0:	4682      	mov	sl, r0
    plen = mbedtls_mpi_size( &grp->P );
 800f9d2:	3004      	adds	r0, #4
{
 800f9d4:	460e      	mov	r6, r1
 800f9d6:	4691      	mov	r9, r2
 800f9d8:	4698      	mov	r8, r3
 800f9da:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    plen = mbedtls_mpi_size( &grp->P );
 800f9de:	f7fb fe5a 	bl	800b696 <mbedtls_mpi_size>
 800f9e2:	4605      	mov	r5, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800f9e4:	4650      	mov	r0, sl
 800f9e6:	f7ff fbc3 	bl	800f170 <mbedtls_ecp_get_type>
 800f9ea:	2801      	cmp	r0, #1
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	d002      	beq.n	800f9f6 <mbedtls_ecp_point_write_binary+0x2a>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 800f9f0:	481f      	ldr	r0, [pc, #124]	; (800fa70 <mbedtls_ecp_point_write_binary+0xa4>)
}
 800f9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	f106 0018 	add.w	r0, r6, #24
 800f9fc:	f7fc f816 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800fa00:	b930      	cbnz	r0, 800fa10 <mbedtls_ecp_point_write_binary+0x44>
            if( buflen < 1 )
 800fa02:	b90f      	cbnz	r7, 800fa08 <mbedtls_ecp_point_write_binary+0x3c>
                return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 800fa04:	481b      	ldr	r0, [pc, #108]	; (800fa74 <mbedtls_ecp_point_write_binary+0xa8>)
 800fa06:	e7f4      	b.n	800f9f2 <mbedtls_ecp_point_write_binary+0x26>
            buf[0] = 0x00;
 800fa08:	7020      	strb	r0, [r4, #0]
            *olen = 1;
 800fa0a:	f8c8 a000 	str.w	sl, [r8]
            return( 0 );
 800fa0e:	e7f0      	b.n	800f9f2 <mbedtls_ecp_point_write_binary+0x26>
        if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 800fa10:	f1b9 0f00 	cmp.w	r9, #0
 800fa14:	d118      	bne.n	800fa48 <mbedtls_ecp_point_write_binary+0x7c>
            *olen = 2 * plen + 1;
 800fa16:	006a      	lsls	r2, r5, #1
 800fa18:	3201      	adds	r2, #1
            if( buflen < *olen )
 800fa1a:	42ba      	cmp	r2, r7
            *olen = 2 * plen + 1;
 800fa1c:	f8c8 2000 	str.w	r2, [r8]
            if( buflen < *olen )
 800fa20:	d8f0      	bhi.n	800fa04 <mbedtls_ecp_point_write_binary+0x38>
            buf[0] = 0x04;
 800fa22:	4621      	mov	r1, r4
 800fa24:	2304      	movs	r3, #4
 800fa26:	f801 3b01 	strb.w	r3, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800fa2a:	462a      	mov	r2, r5
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7fb fe70 	bl	800b712 <mbedtls_mpi_write_binary>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d1dd      	bne.n	800f9f2 <mbedtls_ecp_point_write_binary+0x26>
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 800fa36:	1c69      	adds	r1, r5, #1
 800fa38:	462a      	mov	r2, r5
 800fa3a:	4421      	add	r1, r4
 800fa3c:	f106 000c 	add.w	r0, r6, #12
}
 800fa40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800fa44:	f7fb be65 	b.w	800b712 <mbedtls_mpi_write_binary>
        else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 800fa48:	f1b9 0f01 	cmp.w	r9, #1
 800fa4c:	d1d0      	bne.n	800f9f0 <mbedtls_ecp_point_write_binary+0x24>
            *olen = plen + 1;
 800fa4e:	1c6b      	adds	r3, r5, #1
            if( buflen < *olen )
 800fa50:	42bb      	cmp	r3, r7
            *olen = plen + 1;
 800fa52:	f8c8 3000 	str.w	r3, [r8]
            if( buflen < *olen )
 800fa56:	d8d5      	bhi.n	800fa04 <mbedtls_ecp_point_write_binary+0x38>
            buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 800fa58:	2100      	movs	r1, #0
 800fa5a:	f106 000c 	add.w	r0, r6, #12
 800fa5e:	f7fb fdcf 	bl	800b600 <mbedtls_mpi_get_bit>
 800fa62:	4621      	mov	r1, r4
 800fa64:	3002      	adds	r0, #2
 800fa66:	f801 0b01 	strb.w	r0, [r1], #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 800fa6a:	462a      	mov	r2, r5
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	e7e7      	b.n	800fa40 <mbedtls_ecp_point_write_binary+0x74>
 800fa70:	ffffb180 	.word	0xffffb180
 800fa74:	ffffb100 	.word	0xffffb100

0800fa78 <mbedtls_ecp_point_read_binary>:
{
 800fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	4616      	mov	r6, r2
    if( ilen < 1 )
 800fa82:	461f      	mov	r7, r3
 800fa84:	b913      	cbnz	r3, 800fa8c <mbedtls_ecp_point_read_binary+0x14>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fa86:	481a      	ldr	r0, [pc, #104]	; (800faf0 <mbedtls_ecp_point_read_binary+0x78>)
}
 800fa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    plen = mbedtls_mpi_size( &grp->P );
 800fa8c:	3004      	adds	r0, #4
 800fa8e:	f7fb fe02 	bl	800b696 <mbedtls_mpi_size>
 800fa92:	4605      	mov	r5, r0
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800fa94:	4640      	mov	r0, r8
 800fa96:	f7ff fb6b 	bl	800f170 <mbedtls_ecp_get_type>
 800fa9a:	2801      	cmp	r0, #1
 800fa9c:	4680      	mov	r8, r0
 800fa9e:	d125      	bne.n	800faec <mbedtls_ecp_point_read_binary+0x74>
        if( buf[0] == 0x00 )
 800faa0:	7833      	ldrb	r3, [r6, #0]
 800faa2:	b933      	cbnz	r3, 800fab2 <mbedtls_ecp_point_read_binary+0x3a>
            if( ilen == 1 )
 800faa4:	2f01      	cmp	r7, #1
 800faa6:	d1ee      	bne.n	800fa86 <mbedtls_ecp_point_read_binary+0xe>
                return( mbedtls_ecp_set_zero( pt ) );
 800faa8:	4620      	mov	r0, r4
}
 800faaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                return( mbedtls_ecp_set_zero( pt ) );
 800faae:	f7ff bc04 	b.w	800f2ba <mbedtls_ecp_set_zero>
        if( buf[0] != 0x04 )
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d11a      	bne.n	800faec <mbedtls_ecp_point_read_binary+0x74>
        if( ilen != 2 * plen + 1 )
 800fab6:	006b      	lsls	r3, r5, #1
 800fab8:	3301      	adds	r3, #1
 800faba:	42bb      	cmp	r3, r7
 800fabc:	d1e3      	bne.n	800fa86 <mbedtls_ecp_point_read_binary+0xe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 800fabe:	462a      	mov	r2, r5
 800fac0:	1c71      	adds	r1, r6, #1
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7fb fded 	bl	800b6a2 <mbedtls_mpi_read_binary>
 800fac8:	2800      	cmp	r0, #0
 800faca:	d1dd      	bne.n	800fa88 <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y,
 800facc:	1c69      	adds	r1, r5, #1
 800face:	462a      	mov	r2, r5
 800fad0:	4431      	add	r1, r6
 800fad2:	f104 000c 	add.w	r0, r4, #12
 800fad6:	f7fb fde4 	bl	800b6a2 <mbedtls_mpi_read_binary>
 800fada:	2800      	cmp	r0, #0
 800fadc:	d1d4      	bne.n	800fa88 <mbedtls_ecp_point_read_binary+0x10>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800fade:	4641      	mov	r1, r8
 800fae0:	f104 0018 	add.w	r0, r4, #24
}
 800fae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800fae8:	f7fb bd6e 	b.w	800b5c8 <mbedtls_mpi_lset>
    int ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
 800faec:	4801      	ldr	r0, [pc, #4]	; (800faf4 <mbedtls_ecp_point_read_binary+0x7c>)
 800faee:	e7cb      	b.n	800fa88 <mbedtls_ecp_point_read_binary+0x10>
 800faf0:	ffffb080 	.word	0xffffb080
 800faf4:	ffffb180 	.word	0xffffb180

0800faf8 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 800faf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fafa:	460f      	mov	r7, r1
 800fafc:	b087      	sub	sp, #28
 800fafe:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 800fb00:	2101      	movs	r1, #1
 800fb02:	f107 0018 	add.w	r0, r7, #24
 800fb06:	f7fb ff91 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	b958      	cbnz	r0, 800fb26 <mbedtls_ecp_check_pubkey+0x2e>
#if defined(ECP_MONTGOMERY)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f7ff fb2e 	bl	800f170 <mbedtls_ecp_get_type>
 800fb14:	2801      	cmp	r0, #1
 800fb16:	f040 80a0 	bne.w	800fc5a <mbedtls_ecp_check_pubkey+0x162>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4638      	mov	r0, r7
 800fb1e:	f7fb ff85 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	da01      	bge.n	800fb2a <mbedtls_ecp_check_pubkey+0x32>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800fb26:	4c4e      	ldr	r4, [pc, #312]	; (800fc60 <mbedtls_ecp_check_pubkey+0x168>)
 800fb28:	e06d      	b.n	800fc06 <mbedtls_ecp_check_pubkey+0x10e>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800fb2a:	f107 040c 	add.w	r4, r7, #12
 800fb2e:	4631      	mov	r1, r6
 800fb30:	4620      	mov	r0, r4
 800fb32:	f7fb ff7b 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 800fb36:	2800      	cmp	r0, #0
 800fb38:	dbf5      	blt.n	800fb26 <mbedtls_ecp_check_pubkey+0x2e>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800fb3a:	1d2e      	adds	r6, r5, #4
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4638      	mov	r0, r7
 800fb40:	f7fb ff34 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 800fb44:	2800      	cmp	r0, #0
 800fb46:	daee      	bge.n	800fb26 <mbedtls_ecp_check_pubkey+0x2e>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 800fb48:	4631      	mov	r1, r6
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f7fb ff2e 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 800fb50:	2800      	cmp	r0, #0
 800fb52:	dae8      	bge.n	800fb26 <mbedtls_ecp_check_pubkey+0x2e>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 800fb54:	4668      	mov	r0, sp
 800fb56:	f7fb fc5a 	bl	800b40e <mbedtls_mpi_init>
 800fb5a:	a803      	add	r0, sp, #12
 800fb5c:	f7fb fc57 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 800fb60:	4622      	mov	r2, r4
 800fb62:	4621      	mov	r1, r4
 800fb64:	4668      	mov	r0, sp
 800fb66:	f7fc f889 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d144      	bne.n	800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4668      	mov	r0, sp
 800fb74:	f7fe fed0 	bl	800e918 <ecp_modp>
 800fb78:	4604      	mov	r4, r0
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d13d      	bne.n	800fbfa <mbedtls_ecp_check_pubkey+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 800fb7e:	463a      	mov	r2, r7
 800fb80:	4639      	mov	r1, r7
 800fb82:	a803      	add	r0, sp, #12
 800fb84:	f7fc f87a 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d135      	bne.n	800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fb8e:	4629      	mov	r1, r5
 800fb90:	a803      	add	r0, sp, #12
 800fb92:	f7fe fec1 	bl	800e918 <ecp_modp>
 800fb96:	4604      	mov	r4, r0
 800fb98:	bb78      	cbnz	r0, 800fbfa <mbedtls_ecp_check_pubkey+0x102>
    if( grp->A.p == NULL )
 800fb9a:	69ab      	ldr	r3, [r5, #24]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d141      	bne.n	800fc24 <mbedtls_ecp_check_pubkey+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800fba0:	a903      	add	r1, sp, #12
 800fba2:	2203      	movs	r2, #3
 800fba4:	4608      	mov	r0, r1
 800fba6:	f7fc f853 	bl	800bc50 <mbedtls_mpi_sub_int>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	bb28      	cbnz	r0, 800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	db2b      	blt.n	800fc0c <mbedtls_ecp_check_pubkey+0x114>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 800fbb4:	a903      	add	r1, sp, #12
 800fbb6:	463a      	mov	r2, r7
 800fbb8:	4608      	mov	r0, r1
 800fbba:	f7fc f85f 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	b9d8      	cbnz	r0, 800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	a803      	add	r0, sp, #12
 800fbc6:	f7fe fea7 	bl	800e918 <ecp_modp>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	b9a8      	cbnz	r0, 800fbfa <mbedtls_ecp_check_pubkey+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800fbce:	a903      	add	r1, sp, #12
 800fbd0:	f105 021c 	add.w	r2, r5, #28
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	f7fb ffe0 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800fbda:	4604      	mov	r4, r0
 800fbdc:	b968      	cbnz	r0, 800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fbde:	4631      	mov	r1, r6
 800fbe0:	a803      	add	r0, sp, #12
 800fbe2:	f7fb fee3 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	da31      	bge.n	800fc4e <mbedtls_ecp_check_pubkey+0x156>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 800fbea:	a903      	add	r1, sp, #12
 800fbec:	4668      	mov	r0, sp
 800fbee:	f7fb fedd 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 800fbf2:	4c1b      	ldr	r4, [pc, #108]	; (800fc60 <mbedtls_ecp_check_pubkey+0x168>)
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	bf08      	it	eq
 800fbf8:	2400      	moveq	r4, #0
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 800fbfa:	4668      	mov	r0, sp
 800fbfc:	f7fb fc0d 	bl	800b41a <mbedtls_mpi_free>
 800fc00:	a803      	add	r0, sp, #12
 800fc02:	f7fb fc0a 	bl	800b41a <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 800fc06:	4620      	mov	r0, r4
 800fc08:	b007      	add	sp, #28
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 800fc0c:	2100      	movs	r1, #0
 800fc0e:	a803      	add	r0, sp, #12
 800fc10:	f7fb ff0c 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d0cd      	beq.n	800fbb4 <mbedtls_ecp_check_pubkey+0xbc>
 800fc18:	a903      	add	r1, sp, #12
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	4608      	mov	r0, r1
 800fc1e:	f7fb ffbc 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800fc22:	e7c2      	b.n	800fbaa <mbedtls_ecp_check_pubkey+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 800fc24:	a903      	add	r1, sp, #12
 800fc26:	f105 0210 	add.w	r2, r5, #16
 800fc2a:	4608      	mov	r0, r1
 800fc2c:	f7fb ffb5 	bl	800bb9a <mbedtls_mpi_add_mpi>
 800fc30:	4604      	mov	r4, r0
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d1e1      	bne.n	800fbfa <mbedtls_ecp_check_pubkey+0x102>
 800fc36:	4631      	mov	r1, r6
 800fc38:	a803      	add	r0, sp, #12
 800fc3a:	f7fb feb7 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	dbb8      	blt.n	800fbb4 <mbedtls_ecp_check_pubkey+0xbc>
 800fc42:	a903      	add	r1, sp, #12
 800fc44:	4632      	mov	r2, r6
 800fc46:	4608      	mov	r0, r1
 800fc48:	f7fb ff69 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800fc4c:	e7f0      	b.n	800fc30 <mbedtls_ecp_check_pubkey+0x138>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 800fc4e:	a903      	add	r1, sp, #12
 800fc50:	4632      	mov	r2, r6
 800fc52:	4608      	mov	r0, r1
 800fc54:	f7fb ff63 	bl	800bb1e <mbedtls_mpi_sub_abs>
 800fc58:	e7bf      	b.n	800fbda <mbedtls_ecp_check_pubkey+0xe2>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fc5a:	4c02      	ldr	r4, [pc, #8]	; (800fc64 <mbedtls_ecp_check_pubkey+0x16c>)
 800fc5c:	e7d3      	b.n	800fc06 <mbedtls_ecp_check_pubkey+0x10e>
 800fc5e:	bf00      	nop
 800fc60:	ffffb380 	.word	0xffffb380
 800fc64:	ffffb080 	.word	0xffffb080

0800fc68 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800fc6e:	f7ff fa7f 	bl	800f170 <mbedtls_ecp_get_type>
 800fc72:	2801      	cmp	r0, #1
 800fc74:	4601      	mov	r1, r0
 800fc76:	d10d      	bne.n	800fc94 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7fb fed7 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	db06      	blt.n	800fc90 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 800fc82:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7fb fe90 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	db03      	blt.n	800fc98 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 800fc90:	4802      	ldr	r0, [pc, #8]	; (800fc9c <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fc94:	4802      	ldr	r0, [pc, #8]	; (800fca0 <mbedtls_ecp_check_privkey+0x38>)
 800fc96:	e7fc      	b.n	800fc92 <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 800fc98:	2000      	movs	r0, #0
 800fc9a:	e7fa      	b.n	800fc92 <mbedtls_ecp_check_privkey+0x2a>
 800fc9c:	ffffb380 	.word	0xffffb380
 800fca0:	ffffb080 	.word	0xffffb080

0800fca4 <mbedtls_ecp_mul_restartable>:
{
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	b097      	sub	sp, #92	; 0x5c
 800fcaa:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800fcae:	4611      	mov	r1, r2
{
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	461e      	mov	r6, r3
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 800fcb4:	f7ff ffd8 	bl	800fc68 <mbedtls_ecp_check_privkey>
 800fcb8:	4683      	mov	fp, r0
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	f040 80ea 	bne.w	800fe94 <mbedtls_ecp_mul_restartable+0x1f0>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f7ff ff18 	bl	800faf8 <mbedtls_ecp_check_pubkey>
 800fcc8:	4683      	mov	fp, r0
 800fcca:	2800      	cmp	r0, #0
 800fccc:	f040 80e2 	bne.w	800fe94 <mbedtls_ecp_mul_restartable+0x1f0>
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	f7ff fa4d 	bl	800f170 <mbedtls_ecp_get_type>
 800fcd6:	2801      	cmp	r0, #1
 800fcd8:	f040 8104 	bne.w	800fee4 <mbedtls_ecp_mul_restartable+0x240>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800fcdc:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800fce0:	f106 000c 	add.w	r0, r6, #12
 800fce4:	f7fb fe62 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	f040 80a6 	bne.w	800fe3a <mbedtls_ecp_mul_restartable+0x196>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 800fcee:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	f7fb fe5a 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800fcf8:	fab0 f380 	clz	r3, r0
 800fcfc:	095b      	lsrs	r3, r3, #5
 800fcfe:	9306      	str	r3, [sp, #24]
    w = ecp_pick_window_size( grp, p_eq_g );
 800fd00:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        w = 2;
 800fd02:	2b04      	cmp	r3, #4
 800fd04:	bf8c      	ite	hi
 800fd06:	2204      	movhi	r2, #4
 800fd08:	2202      	movls	r2, #2
 800fd0a:	9208      	str	r2, [sp, #32]
    T_size = 1U << ( w - 1 );
 800fd0c:	1e57      	subs	r7, r2, #1
 800fd0e:	2201      	movs	r2, #1
 800fd10:	40ba      	lsls	r2, r7
 800fd12:	9209      	str	r2, [sp, #36]	; 0x24
    d = ( grp->nbits + w - 1 ) / w;
 800fd14:	9a08      	ldr	r2, [sp, #32]
    T_size = 1U << ( w - 1 );
 800fd16:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d = ( grp->nbits + w - 1 ) / w;
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	4413      	add	r3, r2
 800fd1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd22:	9307      	str	r3, [sp, #28]
    if( p_eq_g && grp->T != NULL )
 800fd24:	9b06      	ldr	r3, [sp, #24]
 800fd26:	b113      	cbz	r3, 800fd2e <mbedtls_ecp_mul_restartable+0x8a>
 800fd28:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800fd2a:	2c00      	cmp	r4, #0
 800fd2c:	d174      	bne.n	800fe18 <mbedtls_ecp_mul_restartable+0x174>
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 800fd2e:	2124      	movs	r1, #36	; 0x24
 800fd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd32:	f006 fe95 	bl	8016a60 <calloc>
        if( T == NULL )
 800fd36:	4604      	mov	r4, r0
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	f000 80d0 	beq.w	800fede <mbedtls_ecp_mul_restartable+0x23a>
 800fd3e:	f04f 0800 	mov.w	r8, #0
            mbedtls_ecp_point_init( &T[i] );
 800fd42:	f04f 0a24 	mov.w	sl, #36	; 0x24
 800fd46:	fb0a 4008 	mla	r0, sl, r8, r4
 800fd4a:	f108 0801 	add.w	r8, r8, #1
 800fd4e:	f7ff fa19 	bl	800f184 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 800fd52:	fa5f f388 	uxtb.w	r3, r8
 800fd56:	4599      	cmp	r9, r3
 800fd58:	d8f5      	bhi.n	800fd46 <mbedtls_ecp_mul_restartable+0xa2>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800fd5a:	4631      	mov	r1, r6
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	f7ff fa93 	bl	800f288 <mbedtls_ecp_copy>
 800fd62:	4683      	mov	fp, r0
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d17e      	bne.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
    for( ; j < d * ( w - 1 ); j++ )
 800fd68:	9b07      	ldr	r3, [sp, #28]
 800fd6a:	437b      	muls	r3, r7
 800fd6c:	930c      	str	r3, [sp, #48]	; 0x30
        j = 0;
 800fd6e:	4606      	mov	r6, r0
 800fd70:	f04f 0a01 	mov.w	sl, #1
        cur = T + i;
 800fd74:	f04f 0824 	mov.w	r8, #36	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
 800fd78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd7a:	429e      	cmp	r6, r3
 800fd7c:	d160      	bne.n	800fe40 <mbedtls_ecp_mul_restartable+0x19c>
 800fd7e:	2200      	movs	r2, #0
    for( i = 1; i < T_size; i <<= 1 )
 800fd80:	2301      	movs	r3, #1
        TT[j++] = T + i;
 800fd82:	a90f      	add	r1, sp, #60	; 0x3c
 800fd84:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
    for( i = 1; i < T_size; i <<= 1 )
 800fd88:	005b      	lsls	r3, r3, #1
 800fd8a:	b2db      	uxtb	r3, r3
        TT[j++] = T + i;
 800fd8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    for( i = 1; i < T_size; i <<= 1 )
 800fd90:	4599      	cmp	r9, r3
        TT[j++] = T + i;
 800fd92:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800fd96:	f102 0201 	add.w	r2, r2, #1
    for( i = 1; i < T_size; i <<= 1 )
 800fd9a:	d8f3      	bhi.n	800fd84 <mbedtls_ecp_mul_restartable+0xe0>
    if( T_size < 2 )
 800fd9c:	2a01      	cmp	r2, #1
 800fd9e:	f040 808b 	bne.w	800feb8 <mbedtls_ecp_mul_restartable+0x214>
        return( ecp_normalize_jac( grp, *T ) );
 800fda2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fda4:	4628      	mov	r0, r5
 800fda6:	f7ff f83a 	bl	800ee1e <ecp_normalize_jac>
 800fdaa:	4683      	mov	fp, r0
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d15a      	bne.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
    for( i = 1; i < T_size; i <<= 1 )
 800fdb0:	2601      	movs	r6, #1
 800fdb2:	f06f 0a23 	mvn.w	sl, #35	; 0x23
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800fdb6:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800fdba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdbe:	930c      	str	r3, [sp, #48]	; 0x30
 800fdc0:	2348      	movs	r3, #72	; 0x48
 800fdc2:	fb13 a806 	smlabb	r8, r3, r6, sl
 800fdc6:	fb0a f306 	mul.w	r3, sl, r6
        j = i;
 800fdca:	4637      	mov	r7, r6
 800fdcc:	44a0      	add	r8, r4
 800fdce:	930d      	str	r3, [sp, #52]	; 0x34
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800fdd0:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800fdd4:	4641      	mov	r1, r8
 800fdd6:	4442      	add	r2, r8
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f7ff fa83 	bl	800f2e4 <ecp_add_mixed>
 800fdde:	3f01      	subs	r7, #1
 800fde0:	f1a8 0824 	sub.w	r8, r8, #36	; 0x24
 800fde4:	4683      	mov	fp, r0
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d13d      	bne.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
        while( j-- )
 800fdea:	2f00      	cmp	r7, #0
 800fdec:	d1f0      	bne.n	800fdd0 <mbedtls_ecp_mul_restartable+0x12c>
    for( i = 1; i < T_size; i <<= 1 )
 800fdee:	0076      	lsls	r6, r6, #1
 800fdf0:	b2f6      	uxtb	r6, r6
 800fdf2:	45b1      	cmp	r9, r6
 800fdf4:	d8df      	bhi.n	800fdb6 <mbedtls_ecp_mul_restartable+0x112>
        TT[j] = T + j + 1;
 800fdf6:	2324      	movs	r3, #36	; 0x24
    for( j = 0; j + 1 < T_size; j++ )
 800fdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdfa:	1c7e      	adds	r6, r7, #1
 800fdfc:	42b2      	cmp	r2, r6
 800fdfe:	d15f      	bne.n	800fec0 <mbedtls_ecp_mul_restartable+0x21c>
    if( T_size < 2 )
 800fe00:	2f01      	cmp	r7, #1
 800fe02:	d166      	bne.n	800fed2 <mbedtls_ecp_mul_restartable+0x22e>
        return( ecp_normalize_jac( grp, *T ) );
 800fe04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7ff f809 	bl	800ee1e <ecp_normalize_jac>
 800fe0c:	4683      	mov	fp, r0
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 800fe0e:	bb50      	cbnz	r0, 800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
        if( p_eq_g )
 800fe10:	9b06      	ldr	r3, [sp, #24]
 800fe12:	b10b      	cbz	r3, 800fe18 <mbedtls_ecp_mul_restartable+0x174>
            grp->T_size = T_size;
 800fe14:	e9c5 461d 	strd	r4, r6, [r5, #116]	; 0x74
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 800fe18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe1a:	9304      	str	r3, [sp, #16]
 800fe1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	9b07      	ldr	r3, [sp, #28]
 800fe22:	9302      	str	r3, [sp, #8]
 800fe24:	9b08      	ldr	r3, [sp, #32]
 800fe26:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800fe2a:	e9cd 9300 	strd	r9, r3, [sp]
 800fe2e:	4628      	mov	r0, r5
 800fe30:	4623      	mov	r3, r4
 800fe32:	f7ff fc51 	bl	800f6d8 <ecp_mul_comb_after_precomp.isra.9>
 800fe36:	4683      	mov	fp, r0
 800fe38:	e015      	b.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800fe3a:	f8cd b018 	str.w	fp, [sp, #24]
 800fe3e:	e75f      	b.n	800fd00 <mbedtls_ecp_mul_restartable+0x5c>
        if( j % d == 0 )
 800fe40:	9a07      	ldr	r2, [sp, #28]
        i = 1U << ( j / d );
 800fe42:	9b07      	ldr	r3, [sp, #28]
 800fe44:	fbb6 f3f3 	udiv	r3, r6, r3
 800fe48:	fa0a f103 	lsl.w	r1, sl, r3
        cur = T + i;
 800fe4c:	b2c9      	uxtb	r1, r1
        if( j % d == 0 )
 800fe4e:	fb02 6313 	mls	r3, r2, r3, r6
        cur = T + i;
 800fe52:	fb08 4701 	mla	r7, r8, r1, r4
        if( j % d == 0 )
 800fe56:	b30b      	cbz	r3, 800fe9c <mbedtls_ecp_mul_restartable+0x1f8>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800fe58:	463a      	mov	r2, r7
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	f7fe fda1 	bl	800e9a4 <ecp_double_jac>
 800fe62:	4683      	mov	fp, r0
 800fe64:	b330      	cbz	r0, 800feb4 <mbedtls_ecp_mul_restartable+0x210>
    if( T == grp->T )
 800fe66:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 800fe68:	42a2      	cmp	r2, r4
 800fe6a:	d00d      	beq.n	800fe88 <mbedtls_ecp_mul_restartable+0x1e4>
    if( T != NULL )
 800fe6c:	b164      	cbz	r4, 800fe88 <mbedtls_ecp_mul_restartable+0x1e4>
 800fe6e:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &T[i] );
 800fe70:	2624      	movs	r6, #36	; 0x24
 800fe72:	fb06 4005 	mla	r0, r6, r5, r4
 800fe76:	3501      	adds	r5, #1
 800fe78:	f7ff f9c1 	bl	800f1fe <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 800fe7c:	b2ea      	uxtb	r2, r5
 800fe7e:	4591      	cmp	r9, r2
 800fe80:	d8f7      	bhi.n	800fe72 <mbedtls_ecp_mul_restartable+0x1ce>
        mbedtls_free( T );
 800fe82:	4620      	mov	r0, r4
 800fe84:	f006 fe02 	bl	8016a8c <free>
    if( ret != 0 )
 800fe88:	f1bb 0f00 	cmp.w	fp, #0
 800fe8c:	d002      	beq.n	800fe94 <mbedtls_ecp_mul_restartable+0x1f0>
        mbedtls_ecp_point_free( R );
 800fe8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe90:	f7ff f9b5 	bl	800f1fe <mbedtls_ecp_point_free>
}
 800fe94:	4658      	mov	r0, fp
 800fe96:	b017      	add	sp, #92	; 0x5c
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800fe9c:	0849      	lsrs	r1, r1, #1
 800fe9e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800fea2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800fea6:	4638      	mov	r0, r7
 800fea8:	f7ff f9ee 	bl	800f288 <mbedtls_ecp_copy>
 800feac:	4683      	mov	fp, r0
 800feae:	2800      	cmp	r0, #0
 800feb0:	d0d2      	beq.n	800fe58 <mbedtls_ecp_mul_restartable+0x1b4>
 800feb2:	e7d8      	b.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
    for( ; j < d * ( w - 1 ); j++ )
 800feb4:	3601      	adds	r6, #1
 800feb6:	e75f      	b.n	800fd78 <mbedtls_ecp_mul_restartable+0xd4>
 800feb8:	4628      	mov	r0, r5
 800feba:	f7ff f80d 	bl	800eed8 <ecp_normalize_jac_many.part.2>
 800febe:	e774      	b.n	800fdaa <mbedtls_ecp_mul_restartable+0x106>
        TT[j] = T + j + 1;
 800fec0:	aa0f      	add	r2, sp, #60	; 0x3c
 800fec2:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fec6:	fb03 4106 	mla	r1, r3, r6, r4
 800feca:	f842 1c04 	str.w	r1, [r2, #-4]
 800fece:	4637      	mov	r7, r6
 800fed0:	e792      	b.n	800fdf8 <mbedtls_ecp_mul_restartable+0x154>
 800fed2:	463a      	mov	r2, r7
 800fed4:	a90f      	add	r1, sp, #60	; 0x3c
 800fed6:	4628      	mov	r0, r5
 800fed8:	f7fe fffe 	bl	800eed8 <ecp_normalize_jac_many.part.2>
 800fedc:	e796      	b.n	800fe0c <mbedtls_ecp_mul_restartable+0x168>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 800fede:	f8df b00c 	ldr.w	fp, [pc, #12]	; 800feec <mbedtls_ecp_mul_restartable+0x248>
 800fee2:	e7c0      	b.n	800fe66 <mbedtls_ecp_mul_restartable+0x1c2>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 800fee4:	f8df b008 	ldr.w	fp, [pc, #8]	; 800fef0 <mbedtls_ecp_mul_restartable+0x24c>
    return( ret );
 800fee8:	e7d4      	b.n	800fe94 <mbedtls_ecp_mul_restartable+0x1f0>
 800feea:	bf00      	nop
 800feec:	ffffb280 	.word	0xffffb280
 800fef0:	ffffb080 	.word	0xffffb080

0800fef4 <mbedtls_ecp_mul>:
{
 800fef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 800fef6:	2400      	movs	r4, #0
 800fef8:	9402      	str	r4, [sp, #8]
 800fefa:	9c07      	ldr	r4, [sp, #28]
 800fefc:	9401      	str	r4, [sp, #4]
 800fefe:	9c06      	ldr	r4, [sp, #24]
 800ff00:	9400      	str	r4, [sp, #0]
 800ff02:	f7ff fecf 	bl	800fca4 <mbedtls_ecp_mul_restartable>
}
 800ff06:	b004      	add	sp, #16
 800ff08:	bd10      	pop	{r4, pc}

0800ff0a <mbedtls_ecp_mul_shortcuts>:
{
 800ff0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ff0e:	4607      	mov	r7, r0
 800ff10:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 800ff12:	4610      	mov	r0, r2
 800ff14:	2101      	movs	r1, #1
{
 800ff16:	4615      	mov	r5, r2
 800ff18:	461e      	mov	r6, r3
 800ff1a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 800ff1e:	f7fb fd85 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ff22:	b930      	cbnz	r0, 800ff32 <mbedtls_ecp_mul_shortcuts+0x28>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800ff24:	4631      	mov	r1, r6
 800ff26:	4620      	mov	r0, r4
}
 800ff28:	b004      	add	sp, #16
 800ff2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800ff2e:	f7ff b9ab 	b.w	800f288 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 800ff32:	f04f 31ff 	mov.w	r1, #4294967295
 800ff36:	4628      	mov	r0, r5
 800ff38:	f7fb fd78 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ff3c:	b990      	cbnz	r0, 800ff64 <mbedtls_ecp_mul_shortcuts+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 800ff3e:	4631      	mov	r1, r6
 800ff40:	4620      	mov	r0, r4
 800ff42:	f7ff f9a1 	bl	800f288 <mbedtls_ecp_copy>
 800ff46:	b9c0      	cbnz	r0, 800ff7a <mbedtls_ecp_mul_shortcuts+0x70>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 800ff48:	340c      	adds	r4, #12
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f7fb fd6d 	bl	800ba2c <mbedtls_mpi_cmp_int>
 800ff52:	b190      	cbz	r0, 800ff7a <mbedtls_ecp_mul_shortcuts+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 800ff54:	4622      	mov	r2, r4
 800ff56:	1d39      	adds	r1, r7, #4
 800ff58:	4620      	mov	r0, r4
}
 800ff5a:	b004      	add	sp, #16
 800ff5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 800ff60:	f7fb be3d 	b.w	800bbde <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 800ff64:	2300      	movs	r3, #0
 800ff66:	e9cd 3300 	strd	r3, r3, [sp]
 800ff6a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ff6e:	4633      	mov	r3, r6
 800ff70:	462a      	mov	r2, r5
 800ff72:	4621      	mov	r1, r4
 800ff74:	4638      	mov	r0, r7
 800ff76:	f7ff fe95 	bl	800fca4 <mbedtls_ecp_mul_restartable>
}
 800ff7a:	b004      	add	sp, #16
 800ff7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff80 <mbedtls_ecp_muladd_restartable>:
{
 800ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff84:	b08c      	sub	sp, #48	; 0x30
 800ff86:	4605      	mov	r5, r0
 800ff88:	460e      	mov	r6, r1
 800ff8a:	4614      	mov	r4, r2
 800ff8c:	4698      	mov	r8, r3
    if( mbedtls_ecp_get_type( grp ) != MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800ff8e:	f7ff f8ef 	bl	800f170 <mbedtls_ecp_get_type>
 800ff92:	2801      	cmp	r0, #1
{
 800ff94:	9f14      	ldr	r7, [sp, #80]	; 0x50
    if( mbedtls_ecp_get_type( grp ) != MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 800ff96:	d128      	bne.n	800ffea <mbedtls_ecp_muladd_restartable+0x6a>
    mbedtls_ecp_point_init( &mP );
 800ff98:	a803      	add	r0, sp, #12
 800ff9a:	f7ff f8f3 	bl	800f184 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	9700      	str	r7, [sp, #0]
 800ffa2:	4643      	mov	r3, r8
 800ffa4:	a903      	add	r1, sp, #12
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f7ff ffaf 	bl	800ff0a <mbedtls_ecp_mul_shortcuts>
 800ffac:	4604      	mov	r4, r0
 800ffae:	b9a8      	cbnz	r0, 800ffdc <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 800ffb0:	9700      	str	r7, [sp, #0]
 800ffb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ffb6:	4631      	mov	r1, r6
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f7ff ffa6 	bl	800ff0a <mbedtls_ecp_mul_shortcuts>
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	b960      	cbnz	r0, 800ffdc <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 800ffc2:	4633      	mov	r3, r6
 800ffc4:	aa03      	add	r2, sp, #12
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f7ff f98b 	bl	800f2e4 <ecp_add_mixed>
 800ffce:	4604      	mov	r4, r0
 800ffd0:	b920      	cbnz	r0, 800ffdc <mbedtls_ecp_muladd_restartable+0x5c>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 800ffd2:	4631      	mov	r1, r6
 800ffd4:	4628      	mov	r0, r5
 800ffd6:	f7fe ff22 	bl	800ee1e <ecp_normalize_jac>
 800ffda:	4604      	mov	r4, r0
 800ffdc:	a803      	add	r0, sp, #12
 800ffde:	f7ff f8b9 	bl	800f154 <mbedtls_ecp_point_free.part.4>
}
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	b00c      	add	sp, #48	; 0x30
 800ffe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 800ffea:	4c01      	ldr	r4, [pc, #4]	; (800fff0 <mbedtls_ecp_muladd_restartable+0x70>)
 800ffec:	e7f9      	b.n	800ffe2 <mbedtls_ecp_muladd_restartable+0x62>
 800ffee:	bf00      	nop
 800fff0:	ffffb180 	.word	0xffffb180

0800fff4 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800fff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 800fff8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 800fffa:	4607      	mov	r7, r0
 800fffc:	460d      	mov	r5, r1
 800fffe:	4692      	mov	sl, r2
 8010000:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 8010002:	f7ff f8b5 	bl	800f170 <mbedtls_ecp_get_type>
    n_size = ( grp->nbits + 7 ) / 8;
 8010006:	3407      	adds	r4, #7
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 8010008:	2801      	cmp	r0, #1
    n_size = ( grp->nbits + 7 ) / 8;
 801000a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
    if( mbedtls_ecp_get_type( grp ) == MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS )
 801000e:	d004      	beq.n	801001a <mbedtls_ecp_gen_privkey+0x26>
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010010:	4c16      	ldr	r4, [pc, #88]	; (801006c <mbedtls_ecp_gen_privkey+0x78>)
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 8010012:	4620      	mov	r0, r4
 8010014:	b003      	add	sp, #12
 8010016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 801001a:	f024 0307 	bic.w	r3, r4, #7
 801001e:	261f      	movs	r6, #31
 8010020:	9301      	str	r3, [sp, #4]
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8010022:	f107 084c 	add.w	r8, r7, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 8010026:	465b      	mov	r3, fp
 8010028:	4652      	mov	r2, sl
 801002a:	4649      	mov	r1, r9
 801002c:	4628      	mov	r0, r5
 801002e:	f7fc fb82 	bl	800c736 <mbedtls_mpi_fill_random>
 8010032:	4604      	mov	r4, r0
 8010034:	2800      	cmp	r0, #0
 8010036:	d1ec      	bne.n	8010012 <mbedtls_ecp_gen_privkey+0x1e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8010038:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801003a:	9b01      	ldr	r3, [sp, #4]
 801003c:	4628      	mov	r0, r5
 801003e:	1a59      	subs	r1, r3, r1
 8010040:	f7fb fbe4 	bl	800b80c <mbedtls_mpi_shift_r>
 8010044:	4604      	mov	r4, r0
 8010046:	2800      	cmp	r0, #0
 8010048:	d1e3      	bne.n	8010012 <mbedtls_ecp_gen_privkey+0x1e>
            if( ++count > 30 )
 801004a:	3e01      	subs	r6, #1
 801004c:	d00c      	beq.n	8010068 <mbedtls_ecp_gen_privkey+0x74>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 801004e:	2101      	movs	r1, #1
 8010050:	4628      	mov	r0, r5
 8010052:	f7fb fceb 	bl	800ba2c <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8010056:	2800      	cmp	r0, #0
 8010058:	dbe5      	blt.n	8010026 <mbedtls_ecp_gen_privkey+0x32>
 801005a:	4641      	mov	r1, r8
 801005c:	4628      	mov	r0, r5
 801005e:	f7fb fca5 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010062:	2800      	cmp	r0, #0
 8010064:	dadf      	bge.n	8010026 <mbedtls_ecp_gen_privkey+0x32>
 8010066:	e7d4      	b.n	8010012 <mbedtls_ecp_gen_privkey+0x1e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8010068:	4c01      	ldr	r4, [pc, #4]	; (8010070 <mbedtls_ecp_gen_privkey+0x7c>)
 801006a:	e7d2      	b.n	8010012 <mbedtls_ecp_gen_privkey+0x1e>
 801006c:	ffffb080 	.word	0xffffb080
 8010070:	ffffb300 	.word	0xffffb300

08010074 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8010074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8010078:	7803      	ldrb	r3, [r0, #0]
{
 801007a:	b0aa      	sub	sp, #168	; 0xa8
 801007c:	4605      	mov	r5, r0
 801007e:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8010080:	b923      	cbnz	r3, 801008c <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010082:	4c28      	ldr	r4, [pc, #160]	; (8010124 <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 8010084:	4620      	mov	r0, r4
 8010086:	b02a      	add	sp, #168	; 0xa8
 8010088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 801008c:	780a      	ldrb	r2, [r1, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d1f7      	bne.n	8010082 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8010092:	f101 0888 	add.w	r8, r1, #136	; 0x88
 8010096:	4641      	mov	r1, r8
 8010098:	3088      	adds	r0, #136	; 0x88
 801009a:	f7fb fc87 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 801009e:	2800      	cmp	r0, #0
 80100a0:	d1ef      	bne.n	8010082 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80100a2:	f104 0794 	add.w	r7, r4, #148	; 0x94
 80100a6:	4639      	mov	r1, r7
 80100a8:	f105 0094 	add.w	r0, r5, #148	; 0x94
 80100ac:	f7fb fc7e 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d1e6      	bne.n	8010082 <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 80100b4:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 80100b8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80100bc:	4631      	mov	r1, r6
 80100be:	f7fb fc75 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80100c2:	4605      	mov	r5, r0
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d1dc      	bne.n	8010082 <mbedtls_ecp_check_pub_priv+0xe>
    mbedtls_ecp_point_init( &Q );
 80100c8:	a802      	add	r0, sp, #8
 80100ca:	f7ff f85b 	bl	800f184 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 80100ce:	a80b      	add	r0, sp, #44	; 0x2c
 80100d0:	f7ff f866 	bl	800f1a0 <mbedtls_ecp_group_init>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 80100d4:	4621      	mov	r1, r4
 80100d6:	a80b      	add	r0, sp, #44	; 0x2c
 80100d8:	f7ff f8ec 	bl	800f2b4 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 80100dc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80100e0:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 80100e4:	e9cd 5500 	strd	r5, r5, [sp]
 80100e8:	a902      	add	r1, sp, #8
 80100ea:	a80b      	add	r0, sp, #44	; 0x2c
 80100ec:	f7ff ff02 	bl	800fef4 <mbedtls_ecp_mul>
 80100f0:	4604      	mov	r4, r0
 80100f2:	b980      	cbnz	r0, 8010116 <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80100f4:	4641      	mov	r1, r8
 80100f6:	a802      	add	r0, sp, #8
 80100f8:	f7fb fc58 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 80100fc:	b950      	cbnz	r0, 8010114 <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80100fe:	4639      	mov	r1, r7
 8010100:	a805      	add	r0, sp, #20
 8010102:	f7fb fc53 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8010106:	b928      	cbnz	r0, 8010114 <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 8010108:	4631      	mov	r1, r6
 801010a:	a808      	add	r0, sp, #32
 801010c:	f7fb fc4e 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8010110:	4604      	mov	r4, r0
 8010112:	b100      	cbz	r0, 8010116 <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010114:	4c03      	ldr	r4, [pc, #12]	; (8010124 <mbedtls_ecp_check_pub_priv+0xb0>)
 8010116:	a802      	add	r0, sp, #8
 8010118:	f7ff f81c 	bl	800f154 <mbedtls_ecp_point_free.part.4>
    mbedtls_ecp_group_free( &grp );
 801011c:	a80b      	add	r0, sp, #44	; 0x2c
 801011e:	f7ff f872 	bl	800f206 <mbedtls_ecp_group_free>
    return( ret );
 8010122:	e7af      	b.n	8010084 <mbedtls_ecp_check_pub_priv+0x10>
 8010124:	ffffb080 	.word	0xffffb080

08010128 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8010128:	6803      	ldr	r3, [r0, #0]
 801012a:	b510      	push	{r4, lr}
 801012c:	1859      	adds	r1, r3, r1
    *dst += src;
 801012e:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
 8010130:	7813      	ldrb	r3, [r2, #0]
 8010132:	f04f 0400 	mov.w	r4, #0
 8010136:	bf28      	it	cs
 8010138:	2401      	movcs	r4, #1
 801013a:	441c      	add	r4, r3
 801013c:	7014      	strb	r4, [r2, #0]
}
 801013e:	bd10      	pop	{r4, pc}

08010140 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 8010140:	6803      	ldr	r3, [r0, #0]
{
 8010142:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 8010144:	7814      	ldrb	r4, [r2, #0]
 8010146:	428b      	cmp	r3, r1
 8010148:	bf38      	it	cc
 801014a:	3c01      	subcc	r4, #1
 801014c:	7014      	strb	r4, [r2, #0]
    *dst -= src;
 801014e:	6803      	ldr	r3, [r0, #0]
 8010150:	1a5b      	subs	r3, r3, r1
 8010152:	6003      	str	r3, [r0, #0]
}
 8010154:	bd10      	pop	{r4, pc}

08010156 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 8010156:	b570      	push	{r4, r5, r6, lr}
    INIT( 256 );
 8010158:	2309      	movs	r3, #9
{
 801015a:	b08e      	sub	sp, #56	; 0x38
    INIT( 256 );
 801015c:	2201      	movs	r2, #1
 801015e:	2100      	movs	r1, #0
 8010160:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
 8010164:	4604      	mov	r4, r0
    INIT( 256 );
 8010166:	2224      	movs	r2, #36	; 0x24
 8010168:	a805      	add	r0, sp, #20
 801016a:	f88d 1003 	strb.w	r1, [sp, #3]
 801016e:	9004      	str	r0, [sp, #16]
 8010170:	f006 fcc7 	bl	8016b02 <memset>
 8010174:	2110      	movs	r1, #16
 8010176:	4620      	mov	r0, r4
 8010178:	f7fb f961 	bl	800b43e <mbedtls_mpi_grow>
 801017c:	4605      	mov	r5, r0
 801017e:	2800      	cmp	r0, #0
 8010180:	f040 8228 	bne.w	80105d4 <ecp_mod_p256+0x47e>
 8010184:	68a3      	ldr	r3, [r4, #8]
 8010186:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
 8010188:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
 801018a:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
 801018c:	a801      	add	r0, sp, #4
 801018e:	f10d 0203 	add.w	r2, sp, #3
 8010192:	f7ff ffc9 	bl	8010128 <add32>
 8010196:	68a3      	ldr	r3, [r4, #8]
 8010198:	f10d 0203 	add.w	r2, sp, #3
 801019c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801019e:	a801      	add	r0, sp, #4
 80101a0:	f7ff ffc2 	bl	8010128 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 80101a4:	68a3      	ldr	r3, [r4, #8]
 80101a6:	f10d 0203 	add.w	r2, sp, #3
 80101aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80101ac:	a801      	add	r0, sp, #4
 80101ae:	f7ff ffc7 	bl	8010140 <sub32>
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	f10d 0203 	add.w	r2, sp, #3
 80101b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80101ba:	a801      	add	r0, sp, #4
 80101bc:	f7ff ffc0 	bl	8010140 <sub32>
 80101c0:	68a3      	ldr	r3, [r4, #8]
 80101c2:	f10d 0203 	add.w	r2, sp, #3
 80101c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80101c8:	a801      	add	r0, sp, #4
 80101ca:	f7ff ffb9 	bl	8010140 <sub32>
 80101ce:	68a3      	ldr	r3, [r4, #8]
 80101d0:	f10d 0203 	add.w	r2, sp, #3
 80101d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80101d6:	a801      	add	r0, sp, #4
 80101d8:	f7ff ffb2 	bl	8010140 <sub32>
 80101dc:	68a3      	ldr	r3, [r4, #8]
 80101de:	9a01      	ldr	r2, [sp, #4]
 80101e0:	601a      	str	r2, [r3, #0]
 80101e2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	9301      	str	r3, [sp, #4]
 80101ea:	2900      	cmp	r1, #0
 80101ec:	f88d 5003 	strb.w	r5, [sp, #3]
 80101f0:	f10d 0203 	add.w	r2, sp, #3
 80101f4:	f280 81f1 	bge.w	80105da <ecp_mod_p256+0x484>
 80101f8:	4249      	negs	r1, r1
 80101fa:	a801      	add	r0, sp, #4
 80101fc:	f7ff ffa0 	bl	8010140 <sub32>

    ADD(  9 ); ADD( 10 );
 8010200:	68a3      	ldr	r3, [r4, #8]
 8010202:	f10d 0203 	add.w	r2, sp, #3
 8010206:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010208:	a801      	add	r0, sp, #4
 801020a:	f7ff ff8d 	bl	8010128 <add32>
 801020e:	68a3      	ldr	r3, [r4, #8]
 8010210:	f10d 0203 	add.w	r2, sp, #3
 8010214:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010216:	a801      	add	r0, sp, #4
 8010218:	f7ff ff86 	bl	8010128 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801021c:	68a3      	ldr	r3, [r4, #8]
 801021e:	f10d 0203 	add.w	r2, sp, #3
 8010222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010224:	a801      	add	r0, sp, #4
 8010226:	f7ff ff8b 	bl	8010140 <sub32>
 801022a:	68a3      	ldr	r3, [r4, #8]
 801022c:	f10d 0203 	add.w	r2, sp, #3
 8010230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010232:	a801      	add	r0, sp, #4
 8010234:	f7ff ff84 	bl	8010140 <sub32>
 8010238:	68a3      	ldr	r3, [r4, #8]
 801023a:	f10d 0203 	add.w	r2, sp, #3
 801023e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010240:	a801      	add	r0, sp, #4
 8010242:	f7ff ff7d 	bl	8010140 <sub32>
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	f10d 0203 	add.w	r2, sp, #3
 801024c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801024e:	a801      	add	r0, sp, #4
 8010250:	f7ff ff76 	bl	8010140 <sub32>
 8010254:	68a3      	ldr	r3, [r4, #8]
 8010256:	9a01      	ldr	r2, [sp, #4]
 8010258:	605a      	str	r2, [r3, #4]
 801025a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801025e:	689b      	ldr	r3, [r3, #8]
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	2300      	movs	r3, #0
 8010264:	4299      	cmp	r1, r3
 8010266:	f88d 3003 	strb.w	r3, [sp, #3]
 801026a:	f10d 0203 	add.w	r2, sp, #3
 801026e:	f280 81b8 	bge.w	80105e2 <ecp_mod_p256+0x48c>
 8010272:	4249      	negs	r1, r1
 8010274:	a801      	add	r0, sp, #4
 8010276:	f7ff ff63 	bl	8010140 <sub32>

    ADD( 10 ); ADD( 11 );
 801027a:	68a3      	ldr	r3, [r4, #8]
 801027c:	f10d 0203 	add.w	r2, sp, #3
 8010280:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010282:	a801      	add	r0, sp, #4
 8010284:	f7ff ff50 	bl	8010128 <add32>
 8010288:	68a3      	ldr	r3, [r4, #8]
 801028a:	f10d 0203 	add.w	r2, sp, #3
 801028e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010290:	a801      	add	r0, sp, #4
 8010292:	f7ff ff49 	bl	8010128 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8010296:	68a3      	ldr	r3, [r4, #8]
 8010298:	f10d 0203 	add.w	r2, sp, #3
 801029c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801029e:	a801      	add	r0, sp, #4
 80102a0:	f7ff ff4e 	bl	8010140 <sub32>
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	f10d 0203 	add.w	r2, sp, #3
 80102aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80102ac:	a801      	add	r0, sp, #4
 80102ae:	f7ff ff47 	bl	8010140 <sub32>
 80102b2:	68a3      	ldr	r3, [r4, #8]
 80102b4:	f10d 0203 	add.w	r2, sp, #3
 80102b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80102ba:	a801      	add	r0, sp, #4
 80102bc:	f7ff ff40 	bl	8010140 <sub32>
 80102c0:	68a3      	ldr	r3, [r4, #8]
 80102c2:	9a01      	ldr	r2, [sp, #4]
 80102c4:	609a      	str	r2, [r3, #8]
 80102c6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	2300      	movs	r3, #0
 80102d0:	4299      	cmp	r1, r3
 80102d2:	f88d 3003 	strb.w	r3, [sp, #3]
 80102d6:	f10d 0203 	add.w	r2, sp, #3
 80102da:	f280 8186 	bge.w	80105ea <ecp_mod_p256+0x494>
 80102de:	4249      	negs	r1, r1
 80102e0:	a801      	add	r0, sp, #4
 80102e2:	f7ff ff2d 	bl	8010140 <sub32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	f10d 0203 	add.w	r2, sp, #3
 80102ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80102ee:	a801      	add	r0, sp, #4
 80102f0:	f7ff ff1a 	bl	8010128 <add32>
 80102f4:	68a3      	ldr	r3, [r4, #8]
 80102f6:	f10d 0203 	add.w	r2, sp, #3
 80102fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80102fc:	a801      	add	r0, sp, #4
 80102fe:	f7ff ff13 	bl	8010128 <add32>
 8010302:	68a3      	ldr	r3, [r4, #8]
 8010304:	f10d 0203 	add.w	r2, sp, #3
 8010308:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801030a:	a801      	add	r0, sp, #4
 801030c:	f7ff ff0c 	bl	8010128 <add32>
 8010310:	68a3      	ldr	r3, [r4, #8]
 8010312:	f10d 0203 	add.w	r2, sp, #3
 8010316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010318:	a801      	add	r0, sp, #4
 801031a:	f7ff ff05 	bl	8010128 <add32>
 801031e:	68a3      	ldr	r3, [r4, #8]
 8010320:	f10d 0203 	add.w	r2, sp, #3
 8010324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010326:	a801      	add	r0, sp, #4
 8010328:	f7ff fefe 	bl	8010128 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801032c:	68a3      	ldr	r3, [r4, #8]
 801032e:	f10d 0203 	add.w	r2, sp, #3
 8010332:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010334:	a801      	add	r0, sp, #4
 8010336:	f7ff ff03 	bl	8010140 <sub32>
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	f10d 0203 	add.w	r2, sp, #3
 8010340:	6a19      	ldr	r1, [r3, #32]
 8010342:	a801      	add	r0, sp, #4
 8010344:	f7ff fefc 	bl	8010140 <sub32>
 8010348:	68a3      	ldr	r3, [r4, #8]
 801034a:	f10d 0203 	add.w	r2, sp, #3
 801034e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010350:	a801      	add	r0, sp, #4
 8010352:	f7ff fef5 	bl	8010140 <sub32>
 8010356:	68a3      	ldr	r3, [r4, #8]
 8010358:	9a01      	ldr	r2, [sp, #4]
 801035a:	60da      	str	r2, [r3, #12]
 801035c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	9301      	str	r3, [sp, #4]
 8010364:	2300      	movs	r3, #0
 8010366:	4299      	cmp	r1, r3
 8010368:	f88d 3003 	strb.w	r3, [sp, #3]
 801036c:	f10d 0203 	add.w	r2, sp, #3
 8010370:	f280 813f 	bge.w	80105f2 <ecp_mod_p256+0x49c>
 8010374:	4249      	negs	r1, r1
 8010376:	a801      	add	r0, sp, #4
 8010378:	f7ff fee2 	bl	8010140 <sub32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 801037c:	68a3      	ldr	r3, [r4, #8]
 801037e:	f10d 0203 	add.w	r2, sp, #3
 8010382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010384:	a801      	add	r0, sp, #4
 8010386:	f7ff fecf 	bl	8010128 <add32>
 801038a:	68a3      	ldr	r3, [r4, #8]
 801038c:	f10d 0203 	add.w	r2, sp, #3
 8010390:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010392:	a801      	add	r0, sp, #4
 8010394:	f7ff fec8 	bl	8010128 <add32>
 8010398:	68a3      	ldr	r3, [r4, #8]
 801039a:	f10d 0203 	add.w	r2, sp, #3
 801039e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80103a0:	a801      	add	r0, sp, #4
 80103a2:	f7ff fec1 	bl	8010128 <add32>
 80103a6:	68a3      	ldr	r3, [r4, #8]
 80103a8:	f10d 0203 	add.w	r2, sp, #3
 80103ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80103ae:	a801      	add	r0, sp, #4
 80103b0:	f7ff feba 	bl	8010128 <add32>
 80103b4:	68a3      	ldr	r3, [r4, #8]
 80103b6:	f10d 0203 	add.w	r2, sp, #3
 80103ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80103bc:	a801      	add	r0, sp, #4
 80103be:	f7ff feb3 	bl	8010128 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80103c2:	68a3      	ldr	r3, [r4, #8]
 80103c4:	f10d 0203 	add.w	r2, sp, #3
 80103c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80103ca:	a801      	add	r0, sp, #4
 80103cc:	f7ff feb8 	bl	8010140 <sub32>
 80103d0:	68a3      	ldr	r3, [r4, #8]
 80103d2:	f10d 0203 	add.w	r2, sp, #3
 80103d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80103d8:	a801      	add	r0, sp, #4
 80103da:	f7ff feb1 	bl	8010140 <sub32>
 80103de:	68a3      	ldr	r3, [r4, #8]
 80103e0:	9a01      	ldr	r2, [sp, #4]
 80103e2:	611a      	str	r2, [r3, #16]
 80103e4:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	9301      	str	r3, [sp, #4]
 80103ec:	2300      	movs	r3, #0
 80103ee:	4299      	cmp	r1, r3
 80103f0:	f88d 3003 	strb.w	r3, [sp, #3]
 80103f4:	f10d 0203 	add.w	r2, sp, #3
 80103f8:	f280 80ff 	bge.w	80105fa <ecp_mod_p256+0x4a4>
 80103fc:	4249      	negs	r1, r1
 80103fe:	a801      	add	r0, sp, #4
 8010400:	f7ff fe9e 	bl	8010140 <sub32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 8010404:	68a3      	ldr	r3, [r4, #8]
 8010406:	f10d 0203 	add.w	r2, sp, #3
 801040a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801040c:	a801      	add	r0, sp, #4
 801040e:	f7ff fe8b 	bl	8010128 <add32>
 8010412:	68a3      	ldr	r3, [r4, #8]
 8010414:	f10d 0203 	add.w	r2, sp, #3
 8010418:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801041a:	a801      	add	r0, sp, #4
 801041c:	f7ff fe84 	bl	8010128 <add32>
 8010420:	68a3      	ldr	r3, [r4, #8]
 8010422:	f10d 0203 	add.w	r2, sp, #3
 8010426:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010428:	a801      	add	r0, sp, #4
 801042a:	f7ff fe7d 	bl	8010128 <add32>
 801042e:	68a3      	ldr	r3, [r4, #8]
 8010430:	f10d 0203 	add.w	r2, sp, #3
 8010434:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010436:	a801      	add	r0, sp, #4
 8010438:	f7ff fe76 	bl	8010128 <add32>
 801043c:	68a3      	ldr	r3, [r4, #8]
 801043e:	f10d 0203 	add.w	r2, sp, #3
 8010442:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010444:	a801      	add	r0, sp, #4
 8010446:	f7ff fe6f 	bl	8010128 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	f10d 0203 	add.w	r2, sp, #3
 8010450:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010452:	a801      	add	r0, sp, #4
 8010454:	f7ff fe74 	bl	8010140 <sub32>
 8010458:	68a3      	ldr	r3, [r4, #8]
 801045a:	f10d 0203 	add.w	r2, sp, #3
 801045e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010460:	a801      	add	r0, sp, #4
 8010462:	f7ff fe6d 	bl	8010140 <sub32>
 8010466:	68a3      	ldr	r3, [r4, #8]
 8010468:	9a01      	ldr	r2, [sp, #4]
 801046a:	615a      	str	r2, [r3, #20]
 801046c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8010470:	699b      	ldr	r3, [r3, #24]
 8010472:	9301      	str	r3, [sp, #4]
 8010474:	2300      	movs	r3, #0
 8010476:	4299      	cmp	r1, r3
 8010478:	f88d 3003 	strb.w	r3, [sp, #3]
 801047c:	f10d 0203 	add.w	r2, sp, #3
 8010480:	f280 80bf 	bge.w	8010602 <ecp_mod_p256+0x4ac>
 8010484:	4249      	negs	r1, r1
 8010486:	a801      	add	r0, sp, #4
 8010488:	f7ff fe5a 	bl	8010140 <sub32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 801048c:	68a3      	ldr	r3, [r4, #8]
 801048e:	f10d 0203 	add.w	r2, sp, #3
 8010492:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010494:	a801      	add	r0, sp, #4
 8010496:	f7ff fe47 	bl	8010128 <add32>
 801049a:	68a3      	ldr	r3, [r4, #8]
 801049c:	f10d 0203 	add.w	r2, sp, #3
 80104a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80104a2:	a801      	add	r0, sp, #4
 80104a4:	f7ff fe40 	bl	8010128 <add32>
 80104a8:	68a3      	ldr	r3, [r4, #8]
 80104aa:	f10d 0203 	add.w	r2, sp, #3
 80104ae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80104b0:	a801      	add	r0, sp, #4
 80104b2:	f7ff fe39 	bl	8010128 <add32>
 80104b6:	68a3      	ldr	r3, [r4, #8]
 80104b8:	f10d 0203 	add.w	r2, sp, #3
 80104bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80104be:	a801      	add	r0, sp, #4
 80104c0:	f7ff fe32 	bl	8010128 <add32>
 80104c4:	68a3      	ldr	r3, [r4, #8]
 80104c6:	f10d 0203 	add.w	r2, sp, #3
 80104ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80104cc:	a801      	add	r0, sp, #4
 80104ce:	f7ff fe2b 	bl	8010128 <add32>
 80104d2:	68a3      	ldr	r3, [r4, #8]
 80104d4:	f10d 0203 	add.w	r2, sp, #3
 80104d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80104da:	a801      	add	r0, sp, #4
 80104dc:	f7ff fe24 	bl	8010128 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80104e0:	68a3      	ldr	r3, [r4, #8]
 80104e2:	f10d 0203 	add.w	r2, sp, #3
 80104e6:	6a19      	ldr	r1, [r3, #32]
 80104e8:	a801      	add	r0, sp, #4
 80104ea:	f7ff fe29 	bl	8010140 <sub32>
 80104ee:	68a3      	ldr	r3, [r4, #8]
 80104f0:	f10d 0203 	add.w	r2, sp, #3
 80104f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80104f6:	a801      	add	r0, sp, #4
 80104f8:	f7ff fe22 	bl	8010140 <sub32>
 80104fc:	68a3      	ldr	r3, [r4, #8]
 80104fe:	9a01      	ldr	r2, [sp, #4]
 8010500:	619a      	str	r2, [r3, #24]
 8010502:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8010506:	69db      	ldr	r3, [r3, #28]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	2300      	movs	r3, #0
 801050c:	4299      	cmp	r1, r3
 801050e:	f88d 3003 	strb.w	r3, [sp, #3]
 8010512:	f10d 0203 	add.w	r2, sp, #3
 8010516:	da78      	bge.n	801060a <ecp_mod_p256+0x4b4>
 8010518:	4249      	negs	r1, r1
 801051a:	a801      	add	r0, sp, #4
 801051c:	f7ff fe10 	bl	8010140 <sub32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 8010520:	68a3      	ldr	r3, [r4, #8]
 8010522:	f10d 0203 	add.w	r2, sp, #3
 8010526:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010528:	a801      	add	r0, sp, #4
 801052a:	f7ff fdfd 	bl	8010128 <add32>
 801052e:	68a3      	ldr	r3, [r4, #8]
 8010530:	f10d 0203 	add.w	r2, sp, #3
 8010534:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010536:	a801      	add	r0, sp, #4
 8010538:	f7ff fdf6 	bl	8010128 <add32>
 801053c:	68a3      	ldr	r3, [r4, #8]
 801053e:	f10d 0203 	add.w	r2, sp, #3
 8010542:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010544:	a801      	add	r0, sp, #4
 8010546:	f7ff fdef 	bl	8010128 <add32>
 801054a:	68a3      	ldr	r3, [r4, #8]
 801054c:	f10d 0203 	add.w	r2, sp, #3
 8010550:	6a19      	ldr	r1, [r3, #32]
 8010552:	a801      	add	r0, sp, #4
 8010554:	f7ff fde8 	bl	8010128 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8010558:	68a3      	ldr	r3, [r4, #8]
 801055a:	f10d 0203 	add.w	r2, sp, #3
 801055e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010560:	a801      	add	r0, sp, #4
 8010562:	f7ff fded 	bl	8010140 <sub32>
 8010566:	68a3      	ldr	r3, [r4, #8]
 8010568:	f10d 0203 	add.w	r2, sp, #3
 801056c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801056e:	a801      	add	r0, sp, #4
 8010570:	f7ff fde6 	bl	8010140 <sub32>
 8010574:	68a3      	ldr	r3, [r4, #8]
 8010576:	f10d 0203 	add.w	r2, sp, #3
 801057a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801057c:	a801      	add	r0, sp, #4
 801057e:	f7ff fddf 	bl	8010140 <sub32>
 8010582:	68a3      	ldr	r3, [r4, #8]
 8010584:	f10d 0203 	add.w	r2, sp, #3
 8010588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801058a:	a801      	add	r0, sp, #4
 801058c:	f7ff fdd8 	bl	8010140 <sub32>
 8010590:	68a1      	ldr	r1, [r4, #8]
 8010592:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 8010596:	9b01      	ldr	r3, [sp, #4]
 8010598:	61cb      	str	r3, [r1, #28]
 801059a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801059e:	620b      	str	r3, [r1, #32]
 80105a0:	6860      	ldr	r0, [r4, #4]
 80105a2:	2300      	movs	r3, #0
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	2308      	movs	r3, #8
 80105a8:	3301      	adds	r3, #1
 80105aa:	4298      	cmp	r0, r3
 80105ac:	d831      	bhi.n	8010612 <ecp_mod_p256+0x4bc>
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	da10      	bge.n	80105d4 <ecp_mod_p256+0x47e>
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 80105b2:	9b03      	ldr	r3, [sp, #12]
 80105b4:	9904      	ldr	r1, [sp, #16]
 80105b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80105ba:	3b01      	subs	r3, #1
 80105bc:	4252      	negs	r2, r2
 80105be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80105c2:	4620      	mov	r0, r4
 80105c4:	4622      	mov	r2, r4
 80105c6:	a902      	add	r1, sp, #8
 80105c8:	f7fb faa9 	bl	800bb1e <mbedtls_mpi_sub_abs>
 80105cc:	b910      	cbnz	r0, 80105d4 <ecp_mod_p256+0x47e>
    N->s = -1;
 80105ce:	f04f 33ff 	mov.w	r3, #4294967295
 80105d2:	6023      	str	r3, [r4, #0]

cleanup:
    return( ret );
}
 80105d4:	4628      	mov	r0, r5
 80105d6:	b00e      	add	sp, #56	; 0x38
 80105d8:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 80105da:	a801      	add	r0, sp, #4
 80105dc:	f7ff fda4 	bl	8010128 <add32>
 80105e0:	e60e      	b.n	8010200 <ecp_mod_p256+0xaa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 80105e2:	a801      	add	r0, sp, #4
 80105e4:	f7ff fda0 	bl	8010128 <add32>
 80105e8:	e647      	b.n	801027a <ecp_mod_p256+0x124>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 80105ea:	a801      	add	r0, sp, #4
 80105ec:	f7ff fd9c 	bl	8010128 <add32>
 80105f0:	e679      	b.n	80102e6 <ecp_mod_p256+0x190>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80105f2:	a801      	add	r0, sp, #4
 80105f4:	f7ff fd98 	bl	8010128 <add32>
 80105f8:	e6c0      	b.n	801037c <ecp_mod_p256+0x226>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80105fa:	a801      	add	r0, sp, #4
 80105fc:	f7ff fd94 	bl	8010128 <add32>
 8010600:	e700      	b.n	8010404 <ecp_mod_p256+0x2ae>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8010602:	a801      	add	r0, sp, #4
 8010604:	f7ff fd90 	bl	8010128 <add32>
 8010608:	e740      	b.n	801048c <ecp_mod_p256+0x336>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 801060a:	a801      	add	r0, sp, #4
 801060c:	f7ff fd8c 	bl	8010128 <add32>
 8010610:	e786      	b.n	8010520 <ecp_mod_p256+0x3ca>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8010612:	9e01      	ldr	r6, [sp, #4]
 8010614:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
 8010618:	e7c6      	b.n	80105a8 <ecp_mod_p256+0x452>
	...

0801061c <mbedtls_ecp_group_load>:
{
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	460d      	mov	r5, r1
 8010620:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( grp );
 8010622:	f7fe fdf0 	bl	800f206 <mbedtls_ecp_group_free>
    switch( id )
 8010626:	2d03      	cmp	r5, #3
    grp->id = id;
 8010628:	7025      	strb	r5, [r4, #0]
    switch( id )
 801062a:	d12a      	bne.n	8010682 <mbedtls_ecp_group_load+0x66>
            NIST_MODP( p256 );
 801062c:	4b17      	ldr	r3, [pc, #92]	; (801068c <mbedtls_ecp_group_load+0x70>)
 801062e:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8010630:	4b17      	ldr	r3, [pc, #92]	; (8010690 <mbedtls_ecp_group_load+0x74>)
 8010632:	60e3      	str	r3, [r4, #12]
 8010634:	f103 0120 	add.w	r1, r3, #32
 8010638:	6261      	str	r1, [r4, #36]	; 0x24
 801063a:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 801063e:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8010640:	6561      	str	r1, [r4, #84]	; 0x54
 8010642:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8010646:	3380      	adds	r3, #128	; 0x80
    X->n = len / sizeof( mbedtls_mpi_uint );
 8010648:	2208      	movs	r2, #8
    X->s = 1;
 801064a:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 801064e:	4b11      	ldr	r3, [pc, #68]	; (8010694 <mbedtls_ecp_group_load+0x78>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8010650:	63a2      	str	r2, [r4, #56]	; 0x38
 8010652:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8010656:	e9c4 5207 	strd	r5, r2, [r4, #28]
 801065a:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 801065e:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8010662:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->p = one;
 8010666:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 8010668:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 801066a:	1d20      	adds	r0, r4, #4
 801066c:	f7fa fff3 	bl	800b656 <mbedtls_mpi_bitlen>
 8010670:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8010672:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8010676:	f7fa ffee 	bl	800b656 <mbedtls_mpi_bitlen>
    grp->h = 1;
 801067a:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP( secp256r1 ) );
 801067e:	2000      	movs	r0, #0
}
 8010680:	bd38      	pop	{r3, r4, r5, pc}
            mbedtls_ecp_group_free( grp );
 8010682:	4620      	mov	r0, r4
 8010684:	f7fe fdbf 	bl	800f206 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8010688:	4803      	ldr	r0, [pc, #12]	; (8010698 <mbedtls_ecp_group_load+0x7c>)
 801068a:	e7f9      	b.n	8010680 <mbedtls_ecp_group_load+0x64>
 801068c:	08010157 	.word	0x08010157
 8010690:	08018ed8 	.word	0x08018ed8
 8010694:	200020fc 	.word	0x200020fc
 8010698:	ffffb180 	.word	0xffffb180

0801069c <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 801069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80106a0:	2b20      	cmp	r3, #32
{
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	4680      	mov	r8, r0
 80106a6:	460e      	mov	r6, r1
 80106a8:	4617      	mov	r7, r2
 80106aa:	461d      	mov	r5, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80106ac:	d909      	bls.n	80106c2 <entropy_update+0x26>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
 80106ae:	2300      	movs	r3, #0
 80106b0:	aa02      	add	r2, sp, #8
 80106b2:	4629      	mov	r1, r5
 80106b4:	4638      	mov	r0, r7
 80106b6:	f006 f9b1 	bl	8016a1c <mbedtls_sha256_ret>
 80106ba:	4604      	mov	r4, r0
 80106bc:	bb08      	cbnz	r0, 8010702 <entropy_update+0x66>
            goto cleanup;
#endif
        p = tmp;
 80106be:	af02      	add	r7, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 80106c0:	2520      	movs	r5, #32
        ctx->accumulator_started = 1;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
#else
    if( ctx->accumulator_started == 0 &&
 80106c2:	f8d8 1000 	ldr.w	r1, [r8]
    header[0] = source_id;
 80106c6:	f88d 6004 	strb.w	r6, [sp, #4]
    header[1] = use_len & 0xFF;
 80106ca:	f88d 5005 	strb.w	r5, [sp, #5]
 80106ce:	f108 0604 	add.w	r6, r8, #4
    if( ctx->accumulator_started == 0 &&
 80106d2:	b181      	cbz	r1, 80106f6 <entropy_update+0x5a>
        ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 80106d4:	2301      	movs	r3, #1
 80106d6:	f8c8 3000 	str.w	r3, [r8]
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 80106da:	2202      	movs	r2, #2
 80106dc:	a901      	add	r1, sp, #4
 80106de:	4630      	mov	r0, r6
 80106e0:	f006 f8ca 	bl	8016878 <mbedtls_sha256_update_ret>
 80106e4:	4604      	mov	r4, r0
 80106e6:	b960      	cbnz	r0, 8010702 <entropy_update+0x66>
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
 80106e8:	462a      	mov	r2, r5
 80106ea:	4639      	mov	r1, r7
 80106ec:	4630      	mov	r0, r6
 80106ee:	f006 f8c3 	bl	8016878 <mbedtls_sha256_update_ret>
 80106f2:	4604      	mov	r4, r0
 80106f4:	e005      	b.n	8010702 <entropy_update+0x66>
    if( ctx->accumulator_started == 0 &&
 80106f6:	4630      	mov	r0, r6
 80106f8:	f005 fd08 	bl	801610c <mbedtls_sha256_starts_ret>
 80106fc:	4604      	mov	r4, r0
 80106fe:	2800      	cmp	r0, #0
 8010700:	d0e8      	beq.n	80106d4 <entropy_update+0x38>
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8010702:	a802      	add	r0, sp, #8
 8010704:	2120      	movs	r1, #32
 8010706:	f001 fdcb 	bl	80122a0 <mbedtls_platform_zeroize>

    return( ret );
}
 801070a:	4620      	mov	r0, r4
 801070c:	b00a      	add	sp, #40	; 0x28
 801070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010712 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 8010712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 8010716:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 8010718:	b0a3      	sub	sp, #140	; 0x8c
 801071a:	4680      	mov	r8, r0
    if( ctx->source_count == 0 )
 801071c:	2b00      	cmp	r3, #0
 801071e:	d036      	beq.n	801078e <entropy_gather_internal+0x7c>
    int ret, i, have_one_strong = 0;
 8010720:	2600      	movs	r6, #0
 8010722:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8010724:	4637      	mov	r7, r6
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8010726:	46b1      	mov	r9, r6
    for( i = 0; i < ctx->source_count; i++ )
 8010728:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801072c:	42bb      	cmp	r3, r7
 801072e:	dc0c      	bgt.n	801074a <entropy_gather_internal+0x38>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 8010730:	2e00      	cmp	r6, #0
 8010732:	bf14      	ite	ne
 8010734:	2500      	movne	r5, #0
 8010736:	f06f 053c 	mvneq.w	r5, #60	; 0x3c

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801073a:	2180      	movs	r1, #128	; 0x80
 801073c:	a802      	add	r0, sp, #8
 801073e:	f001 fdaf 	bl	80122a0 <mbedtls_platform_zeroize>

    return( ret );
}
 8010742:	4628      	mov	r0, r5
 8010744:	b023      	add	sp, #140	; 0x8c
 8010746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 801074a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 801074e:	6f65      	ldr	r5, [r4, #116]	; 0x74
        olen = 0;
 8010750:	f8cd 9004 	str.w	r9, [sp, #4]
            have_one_strong = 1;
 8010754:	2b01      	cmp	r3, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8010756:	f04f 0280 	mov.w	r2, #128	; 0x80
 801075a:	ab01      	add	r3, sp, #4
 801075c:	a902      	add	r1, sp, #8
 801075e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
            have_one_strong = 1;
 8010760:	bf08      	it	eq
 8010762:	2601      	moveq	r6, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8010764:	47a8      	blx	r5
 8010766:	4605      	mov	r5, r0
 8010768:	2800      	cmp	r0, #0
 801076a:	d1e6      	bne.n	801073a <entropy_gather_internal+0x28>
        if( olen > 0 )
 801076c:	9b01      	ldr	r3, [sp, #4]
 801076e:	b15b      	cbz	r3, 8010788 <entropy_gather_internal+0x76>
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 8010770:	aa02      	add	r2, sp, #8
 8010772:	b2f9      	uxtb	r1, r7
 8010774:	4640      	mov	r0, r8
 8010776:	f7ff ff91 	bl	801069c <entropy_update>
 801077a:	4605      	mov	r5, r0
 801077c:	2800      	cmp	r0, #0
 801077e:	d1e0      	bne.n	8010742 <entropy_gather_internal+0x30>
            ctx->source[i].size += olen;
 8010780:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8010782:	9a01      	ldr	r2, [sp, #4]
 8010784:	4413      	add	r3, r2
 8010786:	67e3      	str	r3, [r4, #124]	; 0x7c
    for( i = 0; i < ctx->source_count; i++ )
 8010788:	3701      	adds	r7, #1
 801078a:	3414      	adds	r4, #20
 801078c:	e7cc      	b.n	8010728 <entropy_gather_internal+0x16>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 801078e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 8010792:	e7d6      	b.n	8010742 <entropy_gather_internal+0x30>

08010794 <mbedtls_entropy_init>:
{
 8010794:	b538      	push	{r3, r4, r5, lr}
    ctx->source_count = 0;
 8010796:	2500      	movs	r5, #0
{
 8010798:	4604      	mov	r4, r0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 801079a:	f44f 72c8 	mov.w	r2, #400	; 0x190
    ctx->source_count = 0;
 801079e:	6705      	str	r5, [r0, #112]	; 0x70
    memset( ctx->source, 0, sizeof( ctx->source ) );
 80107a0:	4629      	mov	r1, r5
 80107a2:	3074      	adds	r0, #116	; 0x74
 80107a4:	f006 f9ad 	bl	8016b02 <memset>
    ctx->accumulator_started = 0;
 80107a8:	4620      	mov	r0, r4
 80107aa:	f840 5b04 	str.w	r5, [r0], #4
    mbedtls_sha256_init( &ctx->accumulator );
 80107ae:	f005 fc9e 	bl	80160ee <mbedtls_sha256_init>
    idx = ctx->source_count;
 80107b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 80107b4:	2a13      	cmp	r2, #19
 80107b6:	dc0a      	bgt.n	80107ce <mbedtls_entropy_init+0x3a>
    ctx->source[idx].f_source  = f_source;
 80107b8:	4905      	ldr	r1, [pc, #20]	; (80107d0 <mbedtls_entropy_init+0x3c>)
 80107ba:	2314      	movs	r3, #20
 80107bc:	fb03 4302 	mla	r3, r3, r2, r4
    ctx->source[idx].p_source  = p_source;
 80107c0:	e9c3 151d 	strd	r1, r5, [r3, #116]	; 0x74
    ctx->source[idx].threshold = threshold;
 80107c4:	2101      	movs	r1, #1
    ctx->source_count++;
 80107c6:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 80107c8:	e9c3 1120 	strd	r1, r1, [r3, #128]	; 0x80
    ctx->source_count++;
 80107cc:	6722      	str	r2, [r4, #112]	; 0x70
}
 80107ce:	bd38      	pop	{r3, r4, r5, pc}
 80107d0:	080108bd 	.word	0x080108bd

080107d4 <mbedtls_entropy_free>:
{
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4604      	mov	r4, r0
    ctx->source_count = 0;
 80107d8:	2500      	movs	r5, #0
    mbedtls_sha256_free( &ctx->accumulator );
 80107da:	3004      	adds	r0, #4
 80107dc:	f005 fc8b 	bl	80160f6 <mbedtls_sha256_free>
    ctx->source_count = 0;
 80107e0:	6725      	str	r5, [r4, #112]	; 0x70
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 80107e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80107e6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80107ea:	f001 fd59 	bl	80122a0 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 80107ee:	6025      	str	r5, [r4, #0]
}
 80107f0:	bd38      	pop	{r3, r4, r5, pc}

080107f2 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 80107f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80107f6:	2a20      	cmp	r2, #32
{
 80107f8:	b088      	sub	sp, #32
 80107fa:	4605      	mov	r5, r0
 80107fc:	4688      	mov	r8, r1
 80107fe:	4617      	mov	r7, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8010800:	d859      	bhi.n	80108b6 <mbedtls_entropy_func+0xc4>
 8010802:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 8010806:	3e01      	subs	r6, #1
 8010808:	d052      	beq.n	80108b0 <mbedtls_entropy_func+0xbe>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 801080a:	4628      	mov	r0, r5
 801080c:	f7ff ff81 	bl	8010712 <entropy_gather_internal>
 8010810:	4604      	mov	r4, r0
 8010812:	bbc0      	cbnz	r0, 8010886 <mbedtls_entropy_func+0x94>
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 8010814:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
 8010818:	462a      	mov	r2, r5
        done = 1;
 801081a:	2101      	movs	r1, #1
        for( i = 0; i < ctx->source_count; i++ )
 801081c:	45a4      	cmp	ip, r4
 801081e:	dc3a      	bgt.n	8010896 <mbedtls_entropy_func+0xa4>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 8010820:	2900      	cmp	r1, #0
 8010822:	d0f0      	beq.n	8010806 <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8010824:	2220      	movs	r2, #32
 8010826:	2100      	movs	r1, #0
 8010828:	4668      	mov	r0, sp
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#else /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */
    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 801082a:	1d2e      	adds	r6, r5, #4
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 801082c:	f006 f969 	bl	8016b02 <memset>
    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8010830:	4669      	mov	r1, sp
 8010832:	4630      	mov	r0, r6
 8010834:	f006 f85d 	bl	80168f2 <mbedtls_sha256_finish_ret>
 8010838:	4604      	mov	r4, r0
 801083a:	bb20      	cbnz	r0, 8010886 <mbedtls_entropy_func+0x94>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha256_free( &ctx->accumulator );
 801083c:	4630      	mov	r0, r6
 801083e:	f005 fc5a 	bl	80160f6 <mbedtls_sha256_free>
    mbedtls_sha256_init( &ctx->accumulator );
 8010842:	4630      	mov	r0, r6
 8010844:	f005 fc53 	bl	80160ee <mbedtls_sha256_init>
    if( ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8010848:	4621      	mov	r1, r4
 801084a:	4630      	mov	r0, r6
 801084c:	f005 fc5e 	bl	801610c <mbedtls_sha256_starts_ret>
 8010850:	4604      	mov	r4, r0
 8010852:	b9c0      	cbnz	r0, 8010886 <mbedtls_entropy_func+0x94>
        goto exit;
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, buf,
 8010854:	2220      	movs	r2, #32
 8010856:	4669      	mov	r1, sp
 8010858:	4630      	mov	r0, r6
 801085a:	f006 f80d 	bl	8016878 <mbedtls_sha256_update_ret>
 801085e:	4604      	mov	r4, r0
 8010860:	b988      	cbnz	r0, 8010886 <mbedtls_entropy_func+0x94>
        goto exit;

    /*
     * Perform second SHA-256 on entropy
     */
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 8010862:	4603      	mov	r3, r0
 8010864:	466a      	mov	r2, sp
 8010866:	2120      	movs	r1, #32
 8010868:	4668      	mov	r0, sp
 801086a:	f006 f8d7 	bl	8016a1c <mbedtls_sha256_ret>
 801086e:	4604      	mov	r4, r0
 8010870:	b948      	cbnz	r0, 8010886 <mbedtls_entropy_func+0x94>
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 8010872:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8010874:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 8010876:	2114      	movs	r1, #20
    for( i = 0; i < ctx->source_count; i++ )
 8010878:	429a      	cmp	r2, r3
 801087a:	dc14      	bgt.n	80108a6 <mbedtls_entropy_func+0xb4>

    memcpy( output, buf, len );
 801087c:	463a      	mov	r2, r7
 801087e:	4669      	mov	r1, sp
 8010880:	4640      	mov	r0, r8
 8010882:	f006 f91a 	bl	8016aba <memcpy>

    ret = 0;

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8010886:	2120      	movs	r1, #32
 8010888:	4668      	mov	r0, sp
 801088a:	f001 fd09 	bl	80122a0 <mbedtls_platform_zeroize>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 801088e:	4620      	mov	r0, r4
 8010890:	b008      	add	sp, #32
 8010892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                done = 0;
 8010896:	e9d2 031f 	ldrd	r0, r3, [r2, #124]	; 0x7c
        for( i = 0; i < ctx->source_count; i++ )
 801089a:	3401      	adds	r4, #1
                done = 0;
 801089c:	4298      	cmp	r0, r3
 801089e:	bf38      	it	cc
 80108a0:	2100      	movcc	r1, #0
 80108a2:	3214      	adds	r2, #20
 80108a4:	e7ba      	b.n	801081c <mbedtls_entropy_func+0x2a>
        ctx->source[i].size = 0;
 80108a6:	fb01 5603 	mla	r6, r1, r3, r5
    for( i = 0; i < ctx->source_count; i++ )
 80108aa:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 80108ac:	67f0      	str	r0, [r6, #124]	; 0x7c
 80108ae:	e7e3      	b.n	8010878 <mbedtls_entropy_func+0x86>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 80108b0:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 80108b4:	e7e7      	b.n	8010886 <mbedtls_entropy_func+0x94>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 80108b6:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 80108ba:	e7e8      	b.n	801088e <mbedtls_entropy_func+0x9c>

080108bc <mbedtls_null_entropy_poll>:
{
    ((void) data);
    ((void) output);
    *olen = 0;

    if( len < sizeof(unsigned char) )
 80108bc:	3200      	adds	r2, #0
 80108be:	bf18      	it	ne
 80108c0:	2201      	movne	r2, #1
 80108c2:	601a      	str	r2, [r3, #0]
        return( 0 );

    *olen = sizeof(unsigned char);

    return( 0 );
}
 80108c4:	2000      	movs	r0, #0
 80108c6:	4770      	bx	lr

080108c8 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	460b      	mov	r3, r1
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 80108ce:	7bc9      	ldrb	r1, [r1, #15]
{
 80108d0:	b087      	sub	sp, #28
 80108d2:	f001 010f 	and.w	r1, r1, #15
 80108d6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80108da:	9005      	str	r0, [sp, #20]

    zh = ctx->HH[lo];
 80108dc:	e9d1 4532 	ldrd	r4, r5, [r1, #200]	; 0xc8
    zl = ctx->HL[lo];
 80108e0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80108e4:	e9cd 0100 	strd	r0, r1, [sp]
 80108e8:	f103 0e10 	add.w	lr, r3, #16
 80108ec:	9900      	ldr	r1, [sp, #0]
 80108ee:	4852      	ldr	r0, [pc, #328]	; (8010a38 <gcm_mult+0x170>)

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 80108f0:	f81e cd01 	ldrb.w	ip, [lr, #-1]!
 80108f4:	f001 010f 	and.w	r1, r1, #15
 80108f8:	0727      	lsls	r7, r4, #28
 80108fa:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80108fe:	9801      	ldr	r0, [sp, #4]
 8010900:	0409      	lsls	r1, r1, #16
 8010902:	468b      	mov	fp, r1
 8010904:	2100      	movs	r1, #0
 8010906:	460e      	mov	r6, r1
 8010908:	468a      	mov	sl, r1
 801090a:	9900      	ldr	r1, [sp, #0]
 801090c:	0909      	lsrs	r1, r1, #4
 801090e:	ea41 7100 	orr.w	r1, r1, r0, lsl #28
 8010912:	9102      	str	r1, [sp, #8]
 8010914:	0901      	lsrs	r1, r0, #4
 8010916:	9103      	str	r1, [sp, #12]
 8010918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        hi = x[i] >> 4;

        if( i != 15 )
 801091c:	ebae 0903 	sub.w	r9, lr, r3
 8010920:	4330      	orrs	r0, r6
 8010922:	4339      	orrs	r1, r7
 8010924:	0926      	lsrs	r6, r4, #4
 8010926:	f1b9 0f0f 	cmp.w	r9, #15
        lo = x[i] & 0xf;
 801092a:	f00c 080f 	and.w	r8, ip, #15
 801092e:	e9cd 0102 	strd	r0, r1, [sp, #8]
        hi = x[i] >> 4;
 8010932:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8010936:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 801093a:	ea4f 1715 	mov.w	r7, r5, lsr #4
        if( i != 15 )
 801093e:	d01c      	beq.n	801097a <gcm_mult+0xb2>
 8010940:	9c05      	ldr	r4, [sp, #20]
 8010942:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 8010946:	e9d8 4532 	ldrd	r4, r5, [r8, #200]	; 0xc8
 801094a:	ea84 0006 	eor.w	r0, r4, r6
 801094e:	ea85 0107 	eor.w	r1, r5, r7
 8010952:	4654      	mov	r4, sl
 8010954:	465d      	mov	r5, fp
 8010956:	4606      	mov	r6, r0
 8010958:	460f      	mov	r7, r1
            zl ^= ctx->HL[lo];
 801095a:	e9d8 ab12 	ldrd	sl, fp, [r8, #72]	; 0x48
 801095e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
            zh ^= ctx->HH[lo];
 8010962:	4066      	eors	r6, r4
 8010964:	406f      	eors	r7, r5
            zl ^= ctx->HL[lo];
 8010966:	ea80 000a 	eor.w	r0, r0, sl
 801096a:	ea81 010b 	eor.w	r1, r1, fp
            zh ^= ctx->HH[lo];
 801096e:	4634      	mov	r4, r6
 8010970:	463d      	mov	r5, r7
            zl ^= ctx->HL[lo];
 8010972:	4606      	mov	r6, r0
 8010974:	460f      	mov	r7, r1
 8010976:	e9cd 6700 	strd	r6, r7, [sp]

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 801097a:	9900      	ldr	r1, [sp, #0]
 801097c:	090e      	lsrs	r6, r1, #4
 801097e:	9901      	ldr	r1, [sp, #4]
 8010980:	f04f 0800 	mov.w	r8, #0
 8010984:	ea46 7601 	orr.w	r6, r6, r1, lsl #28
 8010988:	ea46 0008 	orr.w	r0, r6, r8
 801098c:	9e05      	ldr	r6, [sp, #20]
 801098e:	090f      	lsrs	r7, r1, #4
 8010990:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
 8010994:	ea4f 7904 	mov.w	r9, r4, lsl #28
        zh = ( zh >> 4 );
 8010998:	0926      	lsrs	r6, r4, #4
 801099a:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
        zl = ( zh << 60 ) | ( zl >> 4 );
 801099e:	ea47 0109 	orr.w	r1, r7, r9
        zh = ( zh >> 4 );
 80109a2:	092f      	lsrs	r7, r5, #4
 80109a4:	e9dc 4532 	ldrd	r4, r5, [ip, #200]	; 0xc8
 80109a8:	ea84 0a06 	eor.w	sl, r4, r6
        zh ^= (uint64_t) last4[rem] << 48;
 80109ac:	9c00      	ldr	r4, [sp, #0]
 80109ae:	ea85 0b07 	eor.w	fp, r5, r7
 80109b2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80109b6:	f004 0a0f 	and.w	sl, r4, #15
 80109ba:	4c1f      	ldr	r4, [pc, #124]	; (8010a38 <gcm_mult+0x170>)
 80109bc:	f854 603a 	ldr.w	r6, [r4, sl, lsl #3]
        zh ^= ctx->HH[hi];
 80109c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
        zh ^= (uint64_t) last4[rem] << 48;
 80109c4:	ea4f 4b06 	mov.w	fp, r6, lsl #16
        zh ^= ctx->HH[hi];
 80109c8:	ea85 050b 	eor.w	r5, r5, fp
        zl ^= ctx->HL[hi];
 80109cc:	e9dc ab12 	ldrd	sl, fp, [ip, #72]	; 0x48
    for( i = 15; i >= 0; i-- )
 80109d0:	4573      	cmp	r3, lr
        zl ^= ctx->HL[hi];
 80109d2:	ea8a 0600 	eor.w	r6, sl, r0
 80109d6:	ea8b 0701 	eor.w	r7, fp, r1
        zh ^= ctx->HH[hi];
 80109da:	ea84 0408 	eor.w	r4, r4, r8
        zl ^= ctx->HL[hi];
 80109de:	e9cd 6700 	strd	r6, r7, [sp]
    for( i = 15; i >= 0; i-- )
 80109e2:	d183      	bne.n	80108ec <gcm_mult+0x24>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80109e4:	0e2b      	lsrs	r3, r5, #24
 80109e6:	7013      	strb	r3, [r2, #0]
 80109e8:	0c2b      	lsrs	r3, r5, #16
 80109ea:	7053      	strb	r3, [r2, #1]
 80109ec:	0a2b      	lsrs	r3, r5, #8
 80109ee:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 80109f0:	0e23      	lsrs	r3, r4, #24
 80109f2:	7113      	strb	r3, [r2, #4]
 80109f4:	0c23      	lsrs	r3, r4, #16
 80109f6:	7153      	strb	r3, [r2, #5]
 80109f8:	0a23      	lsrs	r3, r4, #8
 80109fa:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80109fc:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh >> 32, output, 0 );
 80109fe:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8010a00:	0e1b      	lsrs	r3, r3, #24
 8010a02:	7213      	strb	r3, [r2, #8]
 8010a04:	9b01      	ldr	r3, [sp, #4]
    PUT_UINT32_BE( zh, output, 4 );
 8010a06:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8010a08:	0c1b      	lsrs	r3, r3, #16
 8010a0a:	7253      	strb	r3, [r2, #9]
 8010a0c:	9b01      	ldr	r3, [sp, #4]
 8010a0e:	0a1b      	lsrs	r3, r3, #8
 8010a10:	7293      	strb	r3, [r2, #10]
 8010a12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010a16:	72d3      	strb	r3, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8010a18:	9b00      	ldr	r3, [sp, #0]
 8010a1a:	0e1b      	lsrs	r3, r3, #24
 8010a1c:	7313      	strb	r3, [r2, #12]
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	0c1b      	lsrs	r3, r3, #16
 8010a22:	7353      	strb	r3, [r2, #13]
 8010a24:	9b00      	ldr	r3, [sp, #0]
 8010a26:	0a1b      	lsrs	r3, r3, #8
 8010a28:	7393      	strb	r3, [r2, #14]
 8010a2a:	f89d 3000 	ldrb.w	r3, [sp]
 8010a2e:	73d3      	strb	r3, [r2, #15]
}
 8010a30:	b007      	add	sp, #28
 8010a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a36:	bf00      	nop
 8010a38:	08018f78 	.word	0x08018f78

08010a3c <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8010a3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010a40:	2100      	movs	r1, #0
 8010a42:	f006 b85e 	b.w	8016b02 <memset>

08010a46 <mbedtls_gcm_setkey>:
{
 8010a46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4a:	4682      	mov	sl, r0
 8010a4c:	b08f      	sub	sp, #60	; 0x3c
 8010a4e:	4608      	mov	r0, r1
 8010a50:	4617      	mov	r7, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8010a52:	4619      	mov	r1, r3
 8010a54:	2201      	movs	r2, #1
{
 8010a56:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8010a58:	f7fc fedc 	bl	800d814 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	f000 80b5 	beq.w	8010bce <mbedtls_gcm_setkey+0x188>
    if( cipher_info->block_size != 16 )
 8010a64:	6944      	ldr	r4, [r0, #20]
 8010a66:	2c10      	cmp	r4, #16
 8010a68:	f040 80b1 	bne.w	8010bce <mbedtls_gcm_setkey+0x188>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8010a6c:	4650      	mov	r0, sl
 8010a6e:	f7fc fee9 	bl	800d844 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8010a72:	4629      	mov	r1, r5
 8010a74:	4650      	mov	r0, sl
 8010a76:	f7fd f88b 	bl	800db90 <mbedtls_cipher_setup>
 8010a7a:	4683      	mov	fp, r0
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	f040 80a2 	bne.w	8010bc6 <mbedtls_gcm_setkey+0x180>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8010a82:	2301      	movs	r3, #1
 8010a84:	4632      	mov	r2, r6
 8010a86:	4639      	mov	r1, r7
 8010a88:	4650      	mov	r0, sl
 8010a8a:	f7fc fef3 	bl	800d874 <mbedtls_cipher_setkey>
 8010a8e:	4683      	mov	fp, r0
 8010a90:	2800      	cmp	r0, #0
 8010a92:	f040 8098 	bne.w	8010bc6 <mbedtls_gcm_setkey+0x180>
    memset( h, 0, 16 );
 8010a96:	4601      	mov	r1, r0
    size_t olen = 0;
 8010a98:	9009      	str	r0, [sp, #36]	; 0x24
    memset( h, 0, 16 );
 8010a9a:	4622      	mov	r2, r4
 8010a9c:	a80a      	add	r0, sp, #40	; 0x28
 8010a9e:	f006 f830 	bl	8016b02 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8010aa2:	ab09      	add	r3, sp, #36	; 0x24
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	ab0a      	add	r3, sp, #40	; 0x28
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4619      	mov	r1, r3
 8010aac:	4650      	mov	r0, sl
 8010aae:	f7fc ff23 	bl	800d8f8 <mbedtls_cipher_update>
 8010ab2:	4683      	mov	fp, r0
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	f040 8086 	bne.w	8010bc6 <mbedtls_gcm_setkey+0x180>
 8010aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010abc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010abe:	ba0b      	rev	r3, r1
 8010ac0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010ac2:	4698      	mov	r8, r3
 8010ac4:	ba0b      	rev	r3, r1
 8010ac6:	4699      	mov	r9, r3
 8010ac8:	ba23      	rev	r3, r4
 8010aca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010acc:	9302      	str	r3, [sp, #8]
 8010ace:	ba23      	rev	r3, r4
 8010ad0:	9303      	str	r3, [sp, #12]
    ctx->HL[8] = vl;
 8010ad2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    ctx->HH[8] = vh;
 8010ad6:	4642      	mov	r2, r8
    ctx->HL[8] = vl;
 8010ad8:	e9ca 3422 	strd	r3, r4, [sl, #136]	; 0x88
    ctx->HH[8] = vh;
 8010adc:	f50a 7484 	add.w	r4, sl, #264	; 0x108
 8010ae0:	464b      	mov	r3, r9
 8010ae2:	e9c4 2300 	strd	r2, r3, [r4]
    ctx->HH[0] = 0;
 8010ae6:	2500      	movs	r5, #0
 8010ae8:	2400      	movs	r4, #0
 8010aea:	e9ca 4532 	strd	r4, r5, [sl, #200]	; 0xc8
    ctx->HL[0] = 0;
 8010aee:	e9ca 4512 	strd	r4, r5, [sl, #72]	; 0x48
 8010af2:	2603      	movs	r6, #3
    for( i = 4; i > 0; i >>= 1 )
 8010af4:	2704      	movs	r7, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8010af6:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8010afa:	9b02      	ldr	r3, [sp, #8]
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8010afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8010b00:	f003 0e01 	and.w	lr, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8010b04:	4643      	mov	r3, r8
 8010b06:	0849      	lsrs	r1, r1, #1
 8010b08:	ea4f 0030 	mov.w	r0, r0, rrx
 8010b0c:	2400      	movs	r4, #0
 8010b0e:	07dd      	lsls	r5, r3, #31
 8010b10:	ea40 0204 	orr.w	r2, r0, r4
 8010b14:	ea41 0305 	orr.w	r3, r1, r5
 8010b18:	e9cd 2302 	strd	r2, r3, [sp, #8]
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8010b1c:	4642      	mov	r2, r8
 8010b1e:	464b      	mov	r3, r9
 8010b20:	085b      	lsrs	r3, r3, #1
 8010b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8010b26:	fb0c f90e 	mul.w	r9, ip, lr
 8010b2a:	ea82 0004 	eor.w	r0, r2, r4
 8010b2e:	ea83 0109 	eor.w	r1, r3, r9
        ctx->HL[i] = vl;
 8010b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b36:	eb0a 04c7 	add.w	r4, sl, r7, lsl #3
 8010b3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    for( i = 4; i > 0; i >>= 1 )
 8010b3e:	3e01      	subs	r6, #1
        ctx->HH[i] = vh;
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
        ctx->HH[i] = vh;
 8010b48:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
    for( i = 4; i > 0; i >>= 1 )
 8010b4c:	ea4f 0767 	mov.w	r7, r7, asr #1
 8010b50:	d1d3      	bne.n	8010afa <mbedtls_gcm_setkey+0xb4>
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8010b52:	f10a 0348 	add.w	r3, sl, #72	; 0x48
    for( i = 4; i > 0; i >>= 1 )
 8010b56:	2603      	movs	r6, #3
    for( i = 2; i <= 8; i *= 2 )
 8010b58:	2402      	movs	r4, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8010b5a:	9307      	str	r3, [sp, #28]
 8010b5c:	f10a 0cc8 	add.w	ip, sl, #200	; 0xc8
 8010b60:	9b07      	ldr	r3, [sp, #28]
 8010b62:	00e7      	lsls	r7, r4, #3
 8010b64:	19d9      	adds	r1, r3, r7
 8010b66:	eb0c 0307 	add.w	r3, ip, r7
        vh = *HiH;
 8010b6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
        vl = *HiL;
 8010b72:	e9d1 8900 	ldrd	r8, r9, [r1]
 8010b76:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010b7a:	f10a 0050 	add.w	r0, sl, #80	; 0x50
 8010b7e:	f103 0508 	add.w	r5, r3, #8
 8010b82:	441f      	add	r7, r3
            HiH[j] = vh ^ ctx->HH[j];
 8010b84:	e9d0 2320 	ldrd	r2, r3, [r0, #128]	; 0x80
 8010b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b8c:	ea88 0802 	eor.w	r8, r8, r2
 8010b90:	ea89 0903 	eor.w	r9, r9, r3
 8010b94:	4642      	mov	r2, r8
 8010b96:	464b      	mov	r3, r9
 8010b98:	e8e5 2302 	strd	r2, r3, [r5], #8
            HiL[j] = vl ^ ctx->HL[j];
 8010b9c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010ba0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010ba4:	ea88 0802 	eor.w	r8, r8, r2
 8010ba8:	ea89 0903 	eor.w	r9, r9, r3
 8010bac:	4642      	mov	r2, r8
 8010bae:	464b      	mov	r3, r9
        for( j = 1; j < i; j++ )
 8010bb0:	42bd      	cmp	r5, r7
 8010bb2:	4686      	mov	lr, r0
            HiL[j] = vl ^ ctx->HL[j];
 8010bb4:	e9e1 2302 	strd	r2, r3, [r1, #8]!
 8010bb8:	f100 0008 	add.w	r0, r0, #8
        for( j = 1; j < i; j++ )
 8010bbc:	d1e2      	bne.n	8010b84 <mbedtls_gcm_setkey+0x13e>
    for( i = 2; i <= 8; i *= 2 )
 8010bbe:	3e01      	subs	r6, #1
 8010bc0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010bc4:	d1cc      	bne.n	8010b60 <mbedtls_gcm_setkey+0x11a>
}
 8010bc6:	4658      	mov	r0, fp
 8010bc8:	b00f      	add	sp, #60	; 0x3c
 8010bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8010bce:	f06f 0b13 	mvn.w	fp, #19
 8010bd2:	e7f8      	b.n	8010bc6 <mbedtls_gcm_setkey+0x180>

08010bd4 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8010bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd8:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8010bda:	f04f 0800 	mov.w	r8, #0
{
 8010bde:	4604      	mov	r4, r0
 8010be0:	468b      	mov	fp, r1
 8010be2:	4617      	mov	r7, r2
 8010be4:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    size_t use_len, olen = 0;
 8010be8:	f8cd 8014 	str.w	r8, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8010bec:	461d      	mov	r5, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 8095 	beq.w	8010d1e <mbedtls_gcm_starts+0x14a>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8010bf4:	f500 76b4 	add.w	r6, r0, #360	; 0x168
 8010bf8:	2210      	movs	r2, #16
 8010bfa:	4641      	mov	r1, r8
 8010bfc:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8010bfe:	f504 7abc 	add.w	sl, r4, #376	; 0x178
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8010c02:	f005 ff7e 	bl	8016b02 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8010c06:	4641      	mov	r1, r8
 8010c08:	2210      	movs	r2, #16
 8010c0a:	4650      	mov	r0, sl
 8010c0c:	f005 ff79 	bl	8016b02 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 8010c10:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8010c14:	2000      	movs	r0, #0
 8010c16:	2100      	movs	r1, #0
    ctx->mode = mode;
 8010c18:	f8c4 b188 	str.w	fp, [r4, #392]	; 0x188
    ctx->add_len = 0;

    if( iv_len == 12 )
 8010c1c:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 8010c1e:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8010c22:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8010c26:	e9c3 0100 	strd	r0, r1, [r3]
    if( iv_len == 12 )
 8010c2a:	d11f      	bne.n	8010c6c <mbedtls_gcm_starts+0x98>
    {
        memcpy( ctx->y, iv, iv_len );
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6073      	str	r3, [r6, #4]
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 8010c40:	ab05      	add	r3, sp, #20
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	4631      	mov	r1, r6
 8010c46:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 8010c4a:	2210      	movs	r2, #16
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7fc fe53 	bl	800d8f8 <mbedtls_cipher_update>
 8010c52:	4606      	mov	r6, r0
 8010c54:	b930      	cbnz	r0, 8010c64 <mbedtls_gcm_starts+0x90>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8010c56:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
 8010c5a:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8010c5e:	f1b9 0f00 	cmp.w	r9, #0
 8010c62:	d142      	bne.n	8010cea <mbedtls_gcm_starts+0x116>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 8010c64:	4630      	mov	r0, r6
 8010c66:	b00b      	add	sp, #44	; 0x2c
 8010c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8010c6c:	00eb      	lsls	r3, r5, #3
 8010c6e:	0e1a      	lsrs	r2, r3, #24
        memset( work_buf, 0x00, 16 );
 8010c70:	f10d 0b18 	add.w	fp, sp, #24
 8010c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c78:	e9cb 8801 	strd	r8, r8, [fp, #4]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8010c7c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8010c80:	0c1a      	lsrs	r2, r3, #16
 8010c82:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8010c86:	0a1a      	lsrs	r2, r3, #8
 8010c88:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8010c8c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8010c90:	46b0      	mov	r8, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8010c92:	2d10      	cmp	r5, #16
 8010c94:	462b      	mov	r3, r5
 8010c96:	bf28      	it	cs
 8010c98:	2310      	movcs	r3, #16
 8010c9a:	f204 1167 	addw	r1, r4, #359	; 0x167
 8010c9e:	463a      	mov	r2, r7
 8010ca0:	eb03 0c07 	add.w	ip, r3, r7
                ctx->y[i] ^= p[i];
 8010ca4:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010ca8:	f811 ef01 	ldrb.w	lr, [r1, #1]!
            for( i = 0; i < use_len; i++ )
 8010cac:	4594      	cmp	ip, r2
                ctx->y[i] ^= p[i];
 8010cae:	ea80 000e 	eor.w	r0, r0, lr
 8010cb2:	7008      	strb	r0, [r1, #0]
            for( i = 0; i < use_len; i++ )
 8010cb4:	d1f6      	bne.n	8010ca4 <mbedtls_gcm_starts+0xd0>
            gcm_mult( ctx, ctx->y, ctx->y );
 8010cb6:	4632      	mov	r2, r6
 8010cb8:	4631      	mov	r1, r6
 8010cba:	4620      	mov	r0, r4
 8010cbc:	9303      	str	r3, [sp, #12]
 8010cbe:	f7ff fe03 	bl	80108c8 <gcm_mult>
            p += use_len;
 8010cc2:	9b03      	ldr	r3, [sp, #12]
        while( iv_len > 0 )
 8010cc4:	1aed      	subs	r5, r5, r3
            p += use_len;
 8010cc6:	441f      	add	r7, r3
        while( iv_len > 0 )
 8010cc8:	d1e3      	bne.n	8010c92 <mbedtls_gcm_starts+0xbe>
 8010cca:	4643      	mov	r3, r8
            ctx->y[i] ^= work_buf[i];
 8010ccc:	781a      	ldrb	r2, [r3, #0]
 8010cce:	f81b 1005 	ldrb.w	r1, [fp, r5]
        for( i = 0; i < 16; i++ )
 8010cd2:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8010cd4:	404a      	eors	r2, r1
        for( i = 0; i < 16; i++ )
 8010cd6:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8010cd8:	f803 2b01 	strb.w	r2, [r3], #1
        for( i = 0; i < 16; i++ )
 8010cdc:	d1f6      	bne.n	8010ccc <mbedtls_gcm_starts+0xf8>
        gcm_mult( ctx, ctx->y, ctx->y );
 8010cde:	4632      	mov	r2, r6
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f7ff fdf0 	bl	80108c8 <gcm_mult>
 8010ce8:	e7aa      	b.n	8010c40 <mbedtls_gcm_starts+0x6c>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8010cea:	464f      	mov	r7, r9
 8010cec:	2f10      	cmp	r7, #16
 8010cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010cf0:	bf28      	it	cs
 8010cf2:	2710      	movcs	r7, #16
 8010cf4:	f204 1277 	addw	r2, r4, #375	; 0x177
 8010cf8:	19dd      	adds	r5, r3, r7
            ctx->buf[i] ^= p[i];
 8010cfa:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010cfe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
        for( i = 0; i < use_len; i++ )
 8010d02:	429d      	cmp	r5, r3
            ctx->buf[i] ^= p[i];
 8010d04:	ea81 0100 	eor.w	r1, r1, r0
 8010d08:	7011      	strb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 8010d0a:	d1f6      	bne.n	8010cfa <mbedtls_gcm_starts+0x126>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8010d0c:	4652      	mov	r2, sl
 8010d0e:	4651      	mov	r1, sl
 8010d10:	4620      	mov	r0, r4
 8010d12:	f7ff fdd9 	bl	80108c8 <gcm_mult>
        add_len -= use_len;
 8010d16:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 8010d1a:	9514      	str	r5, [sp, #80]	; 0x50
 8010d1c:	e79f      	b.n	8010c5e <mbedtls_gcm_starts+0x8a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8010d1e:	f06f 0613 	mvn.w	r6, #19
 8010d22:	e79f      	b.n	8010c64 <mbedtls_gcm_starts+0x90>

08010d24 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8010d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d28:	461f      	mov	r7, r3
 8010d2a:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8010d2c:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 8010d2e:	4297      	cmp	r7, r2
{
 8010d30:	4604      	mov	r4, r0
 8010d32:	460d      	mov	r5, r1
 8010d34:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 8010d36:	9305      	str	r3, [sp, #20]
    if( output > input && (size_t) ( output - input ) < length )
 8010d38:	d902      	bls.n	8010d40 <mbedtls_gcm_update+0x1c>
 8010d3a:	1abb      	subs	r3, r7, r2
 8010d3c:	428b      	cmp	r3, r1
 8010d3e:	d371      	bcc.n	8010e24 <mbedtls_gcm_update+0x100>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8010d40:	f504 7ca4 	add.w	ip, r4, #328	; 0x148
 8010d44:	e9dc ab00 	ldrd	sl, fp, [ip]
 8010d48:	2300      	movs	r3, #0
 8010d4a:	eb1a 0805 	adds.w	r8, sl, r5
 8010d4e:	eb5b 0903 	adcs.w	r9, fp, r3
 8010d52:	f04f 0000 	mov.w	r0, #0
 8010d56:	f04f 0100 	mov.w	r1, #0
 8010d5a:	bf24      	itt	cs
 8010d5c:	2001      	movcs	r0, #1
 8010d5e:	2100      	movcs	r1, #0
 8010d60:	ea50 0301 	orrs.w	r3, r0, r1
 8010d64:	d15e      	bne.n	8010e24 <mbedtls_gcm_update+0x100>
 8010d66:	230f      	movs	r3, #15
 8010d68:	f06f 021f 	mvn.w	r2, #31
 8010d6c:	454b      	cmp	r3, r9
 8010d6e:	bf08      	it	eq
 8010d70:	4542      	cmpeq	r2, r8
 8010d72:	d357      	bcc.n	8010e24 <mbedtls_gcm_update+0x100>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8010d74:	e9cc 8900 	strd	r8, r9, [ip]
 8010d78:	f204 1a73 	addw	sl, r4, #371	; 0x173

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8010d7c:	f10d 0918 	add.w	r9, sp, #24
 8010d80:	f504 7bb4 	add.w	fp, r4, #360	; 0x168
    while( length > 0 )
 8010d84:	b91d      	cbnz	r5, 8010d8e <mbedtls_gcm_update+0x6a>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8010d86:	4628      	mov	r0, r5
}
 8010d88:	b00b      	add	sp, #44	; 0x2c
 8010d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 8010d8e:	2d10      	cmp	r5, #16
 8010d90:	46a8      	mov	r8, r5
 8010d92:	f204 1277 	addw	r2, r4, #375	; 0x177
 8010d96:	bf28      	it	cs
 8010d98:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 8010d9c:	7813      	ldrb	r3, [r2, #0]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	f802 3901 	strb.w	r3, [r2], #-1
 8010da6:	b90b      	cbnz	r3, 8010dac <mbedtls_gcm_update+0x88>
        for( i = 16; i > 12; i-- )
 8010da8:	4552      	cmp	r2, sl
 8010daa:	d1f7      	bne.n	8010d9c <mbedtls_gcm_update+0x78>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8010dac:	ab05      	add	r3, sp, #20
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	2210      	movs	r2, #16
 8010db2:	464b      	mov	r3, r9
 8010db4:	4659      	mov	r1, fp
 8010db6:	4620      	mov	r0, r4
 8010db8:	f7fc fd9e 	bl	800d8f8 <mbedtls_cipher_update>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d1e3      	bne.n	8010d88 <mbedtls_gcm_update+0x64>
 8010dc0:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 8010dc4:	4631      	mov	r1, r6
 8010dc6:	9303      	str	r3, [sp, #12]
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8010dc8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8010dcc:	b93a      	cbnz	r2, 8010dde <mbedtls_gcm_update+0xba>
                ctx->buf[i] ^= p[i];
 8010dce:	f893 c000 	ldrb.w	ip, [r3]
 8010dd2:	f891 e000 	ldrb.w	lr, [r1]
 8010dd6:	ea8c 0c0e 	eor.w	ip, ip, lr
 8010dda:	f883 c000 	strb.w	ip, [r3]
            out_p[i] = ectr[i] ^ p[i];
 8010dde:	f811 eb01 	ldrb.w	lr, [r1], #1
 8010de2:	f819 c000 	ldrb.w	ip, [r9, r0]
 8010de6:	ea8e 0c0c 	eor.w	ip, lr, ip
 8010dea:	f807 c000 	strb.w	ip, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8010dee:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8010df2:	2a01      	cmp	r2, #1
                ctx->buf[i] ^= out_p[i];
 8010df4:	bf08      	it	eq
 8010df6:	f893 e000 	ldrbeq.w	lr, [r3]
        for( i = 0; i < use_len; i++ )
 8010dfa:	f100 0001 	add.w	r0, r0, #1
                ctx->buf[i] ^= out_p[i];
 8010dfe:	bf04      	itt	eq
 8010e00:	ea8c 0c0e 	eoreq.w	ip, ip, lr
 8010e04:	f883 c000 	strbeq.w	ip, [r3]
        for( i = 0; i < use_len; i++ )
 8010e08:	4580      	cmp	r8, r0
 8010e0a:	f103 0301 	add.w	r3, r3, #1
 8010e0e:	d1db      	bne.n	8010dc8 <mbedtls_gcm_update+0xa4>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8010e10:	9a03      	ldr	r2, [sp, #12]
 8010e12:	4620      	mov	r0, r4
 8010e14:	4611      	mov	r1, r2
 8010e16:	f7ff fd57 	bl	80108c8 <gcm_mult>
        length -= use_len;
 8010e1a:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
 8010e1e:	4446      	add	r6, r8
        out_p += use_len;
 8010e20:	4447      	add	r7, r8
 8010e22:	e7af      	b.n	8010d84 <mbedtls_gcm_update+0x60>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8010e24:	f06f 0013 	mvn.w	r0, #19
 8010e28:	e7ae      	b.n	8010d88 <mbedtls_gcm_update+0x64>

08010e2a <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8010e2a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e2e:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 8010e30:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 8010e34:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8010e38:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
 8010e3a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    orig_len = ctx->len * 8;
 8010e3e:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8010e42:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
 8010e44:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 8010e48:	00cf      	lsls	r7, r1, #3
 8010e4a:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 8010e4e:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 8010e50:	1f13      	subs	r3, r2, #4
 8010e52:	2b0c      	cmp	r3, #12
{
 8010e54:	4681      	mov	r9, r0
 8010e56:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 8010e58:	d857      	bhi.n	8010f0a <mbedtls_gcm_finish+0xe0>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8010e5a:	f500 71ac 	add.w	r1, r0, #344	; 0x158
 8010e5e:	4640      	mov	r0, r8
 8010e60:	f005 fe2b 	bl	8016aba <memcpy>

    if( orig_len || orig_add_len )
 8010e64:	ea54 0305 	orrs.w	r3, r4, r5
 8010e68:	d106      	bne.n	8010e78 <mbedtls_gcm_finish+0x4e>
 8010e6a:	ea56 0307 	orrs.w	r3, r6, r7
 8010e6e:	d103      	bne.n	8010e78 <mbedtls_gcm_finish+0x4e>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 8010e70:	2000      	movs	r0, #0
}
 8010e72:	b004      	add	sp, #16
 8010e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8010e78:	0e3b      	lsrs	r3, r7, #24
 8010e7a:	f88d 3000 	strb.w	r3, [sp]
 8010e7e:	0c3b      	lsrs	r3, r7, #16
 8010e80:	f88d 3001 	strb.w	r3, [sp, #1]
 8010e84:	0a3b      	lsrs	r3, r7, #8
 8010e86:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8010e8a:	0e33      	lsrs	r3, r6, #24
 8010e8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8010e90:	0c33      	lsrs	r3, r6, #16
 8010e92:	f88d 3005 	strb.w	r3, [sp, #5]
 8010e96:	0a33      	lsrs	r3, r6, #8
 8010e98:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8010e9c:	0e2b      	lsrs	r3, r5, #24
 8010e9e:	f88d 3008 	strb.w	r3, [sp, #8]
 8010ea2:	0c2b      	lsrs	r3, r5, #16
 8010ea4:	f88d 3009 	strb.w	r3, [sp, #9]
 8010ea8:	0a2b      	lsrs	r3, r5, #8
 8010eaa:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8010eae:	0e23      	lsrs	r3, r4, #24
 8010eb0:	f88d 300c 	strb.w	r3, [sp, #12]
 8010eb4:	0c23      	lsrs	r3, r4, #16
 8010eb6:	f88d 300d 	strb.w	r3, [sp, #13]
 8010eba:	f88d 400f 	strb.w	r4, [sp, #15]
 8010ebe:	0a23      	lsrs	r3, r4, #8
 8010ec0:	f509 74bc 	add.w	r4, r9, #376	; 0x178
 8010ec4:	f88d 300e 	strb.w	r3, [sp, #14]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8010ec8:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8010ecc:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8010ed0:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8010ed4:	4622      	mov	r2, r4
        for( i = 0; i < 16; i++ )
 8010ed6:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 8010ed8:	7811      	ldrb	r1, [r2, #0]
 8010eda:	f81d 0003 	ldrb.w	r0, [sp, r3]
        for( i = 0; i < 16; i++ )
 8010ede:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8010ee0:	4041      	eors	r1, r0
        for( i = 0; i < 16; i++ )
 8010ee2:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 8010ee4:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < 16; i++ )
 8010ee8:	d1f6      	bne.n	8010ed8 <mbedtls_gcm_finish+0xae>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8010eea:	4621      	mov	r1, r4
 8010eec:	4622      	mov	r2, r4
 8010eee:	4648      	mov	r0, r9
 8010ef0:	f7ff fcea 	bl	80108c8 <gcm_mult>
 8010ef4:	44c2      	add	sl, r8
 8010ef6:	4641      	mov	r1, r8
            tag[i] ^= ctx->buf[i];
 8010ef8:	780b      	ldrb	r3, [r1, #0]
 8010efa:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010efe:	4053      	eors	r3, r2
 8010f00:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < tag_len; i++ )
 8010f04:	458a      	cmp	sl, r1
 8010f06:	d1f7      	bne.n	8010ef8 <mbedtls_gcm_finish+0xce>
 8010f08:	e7b2      	b.n	8010e70 <mbedtls_gcm_finish+0x46>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8010f0a:	f06f 0013 	mvn.w	r0, #19
 8010f0e:	e7b0      	b.n	8010e72 <mbedtls_gcm_finish+0x48>

08010f10 <mbedtls_gcm_free>:

    return( 0 );
}

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8010f10:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8010f12:	4604      	mov	r4, r0
 8010f14:	b140      	cbz	r0, 8010f28 <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8010f16:	f7fc fc95 	bl	800d844 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
}
 8010f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8010f24:	f001 b9bc 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 8010f28:	bd10      	pop	{r4, pc}

08010f2a <mbedtls_hmac_drbg_init>:
/*
 * HMAC_DRBG context initialization
 */
void mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 8010f2a:	2244      	movs	r2, #68	; 0x44
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	f005 bde8 	b.w	8016b02 <memset>

08010f32 <mbedtls_hmac_drbg_update_ret>:
 * HMAC_DRBG update, using optional additional data (10.1.2.2)
 */
int mbedtls_hmac_drbg_update_ret( mbedtls_hmac_drbg_context *ctx,
                                  const unsigned char *additional,
                                  size_t add_len )
{
 8010f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f36:	4605      	mov	r5, r0
 8010f38:	b08a      	sub	sp, #40	; 0x28
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8010f3a:	6800      	ldr	r0, [r0, #0]
{
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	4692      	mov	sl, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8010f40:	f000 fa34 	bl	80113ac <mbedtls_md_get_size>
 8010f44:	4607      	mov	r7, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 8010f46:	f1b9 0f00 	cmp.w	r9, #0
 8010f4a:	d00f      	beq.n	8010f6c <mbedtls_hmac_drbg_update_ret+0x3a>
 8010f4c:	f1ba 0f00 	cmp.w	sl, #0
 8010f50:	bf14      	ite	ne
 8010f52:	2602      	movne	r6, #2
 8010f54:	2601      	moveq	r6, #1
    unsigned char sep[1];
    unsigned char K[MBEDTLS_MD_MAX_SIZE];
    int ret;

    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8010f56:	2300      	movs	r3, #0
 8010f58:	f88d 3004 	strb.w	r3, [sp, #4]
    {
        /* Step 1 or 4 */
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 8010f5c:	f105 080c 	add.w	r8, r5, #12
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8010f60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f64:	42b3      	cmp	r3, r6
 8010f66:	d303      	bcc.n	8010f70 <mbedtls_hmac_drbg_update_ret+0x3e>
            goto exit;
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
            goto exit;
    }

exit:
 8010f68:	2400      	movs	r4, #0
 8010f6a:	e01c      	b.n	8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 8010f6c:	2601      	movs	r6, #1
 8010f6e:	e7f2      	b.n	8010f56 <mbedtls_hmac_drbg_update_ret+0x24>
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 8010f70:	4628      	mov	r0, r5
 8010f72:	f000 fa03 	bl	801137c <mbedtls_md_hmac_reset>
 8010f76:	4604      	mov	r4, r0
 8010f78:	b9a8      	cbnz	r0, 8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 8010f7a:	463a      	mov	r2, r7
 8010f7c:	4641      	mov	r1, r8
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f000 f9bc 	bl	80112fc <mbedtls_md_hmac_update>
 8010f84:	4604      	mov	r4, r0
 8010f86:	b970      	cbnz	r0, 8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 8010f88:	2201      	movs	r2, #1
 8010f8a:	a901      	add	r1, sp, #4
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	f000 f9b5 	bl	80112fc <mbedtls_md_hmac_update>
 8010f92:	4604      	mov	r4, r0
 8010f94:	b938      	cbnz	r0, 8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( rounds == 2 )
 8010f96:	2e02      	cmp	r6, #2
 8010f98:	d00d      	beq.n	8010fb6 <mbedtls_hmac_drbg_update_ret+0x84>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, K ) ) != 0 )
 8010f9a:	a902      	add	r1, sp, #8
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f000 f9bf 	bl	8011320 <mbedtls_md_hmac_finish>
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	b180      	cbz	r0, 8010fc8 <mbedtls_hmac_drbg_update_ret+0x96>
    mbedtls_platform_zeroize( K, sizeof( K ) );
 8010fa6:	a802      	add	r0, sp, #8
 8010fa8:	2120      	movs	r1, #32
 8010faa:	f001 f979 	bl	80122a0 <mbedtls_platform_zeroize>
    return( ret );
}
 8010fae:	4620      	mov	r0, r4
 8010fb0:	b00a      	add	sp, #40	; 0x28
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 8010fb6:	4652      	mov	r2, sl
 8010fb8:	4649      	mov	r1, r9
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f000 f99e 	bl	80112fc <mbedtls_md_hmac_update>
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	d0e9      	beq.n	8010f9a <mbedtls_hmac_drbg_update_ret+0x68>
 8010fc6:	e7ee      	b.n	8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len ) ) != 0 )
 8010fc8:	463a      	mov	r2, r7
 8010fca:	a902      	add	r1, sp, #8
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f000 f931 	bl	8011234 <mbedtls_md_hmac_starts>
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	d1e6      	bne.n	8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 8010fd8:	463a      	mov	r2, r7
 8010fda:	4641      	mov	r1, r8
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f000 f98d 	bl	80112fc <mbedtls_md_hmac_update>
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d1de      	bne.n	8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 8010fe8:	4641      	mov	r1, r8
 8010fea:	4628      	mov	r0, r5
 8010fec:	f000 f998 	bl	8011320 <mbedtls_md_hmac_finish>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d1d7      	bne.n	8010fa6 <mbedtls_hmac_drbg_update_ret+0x74>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8010ff6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	f88d 3004 	strb.w	r3, [sp, #4]
 8011000:	e7ae      	b.n	8010f60 <mbedtls_hmac_drbg_update_ret+0x2e>

08011002 <mbedtls_hmac_drbg_seed_buf>:
 * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)
 */
int mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,
                        const mbedtls_md_info_t * md_info,
                        const unsigned char *data, size_t data_len )
{
 8011002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011006:	4617      	mov	r7, r2
    int ret;

    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 8011008:	2201      	movs	r2, #1
{
 801100a:	4604      	mov	r4, r0
 801100c:	460e      	mov	r6, r1
 801100e:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 8011010:	f000 f8f0 	bl	80111f4 <mbedtls_md_setup>
 8011014:	b9c8      	cbnz	r0, 801104a <mbedtls_hmac_drbg_seed_buf+0x48>
     * Set initial working state.
     * Use the V memory location, which is currently all 0, to initialize the
     * MD context with an all-zero key. Then set V to its initial value.
     */
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
                                        mbedtls_md_get_size( md_info ) ) ) != 0 )
 8011016:	4630      	mov	r0, r6
 8011018:	f000 f9c8 	bl	80113ac <mbedtls_md_get_size>
    if( ( ret = mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V,
 801101c:	f104 050c 	add.w	r5, r4, #12
 8011020:	4602      	mov	r2, r0
 8011022:	4629      	mov	r1, r5
 8011024:	4620      	mov	r0, r4
 8011026:	f000 f905 	bl	8011234 <mbedtls_md_hmac_starts>
 801102a:	b970      	cbnz	r0, 801104a <mbedtls_hmac_drbg_seed_buf+0x48>
        return( ret );
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 801102c:	4630      	mov	r0, r6
 801102e:	f000 f9bd 	bl	80113ac <mbedtls_md_get_size>
 8011032:	2101      	movs	r1, #1
 8011034:	4602      	mov	r2, r0
 8011036:	4628      	mov	r0, r5
 8011038:	f005 fd63 	bl	8016b02 <memset>

    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 801103c:	4642      	mov	r2, r8
 801103e:	4639      	mov	r1, r7
 8011040:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8011042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, data, data_len ) ) != 0 )
 8011046:	f7ff bf74 	b.w	8010f32 <mbedtls_hmac_drbg_update_ret>
}
 801104a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801104e <mbedtls_hmac_drbg_reseed>:
/*
 * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)
 */
int mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,
                      const unsigned char *additional, size_t len )
{
 801104e:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];
    size_t seedlen;
    int ret;

    /* III. Check input length */
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8011050:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8011054:	b0e1      	sub	sp, #388	; 0x184
 8011056:	4604      	mov	r4, r0
 8011058:	460f      	mov	r7, r1
 801105a:	4615      	mov	r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801105c:	d82a      	bhi.n	80110b4 <mbedtls_hmac_drbg_reseed+0x66>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 801105e:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011060:	18b3      	adds	r3, r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8011062:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8011066:	d825      	bhi.n	80110b4 <mbedtls_hmac_drbg_reseed+0x66>
    {
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
    }

    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 8011068:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801106c:	2100      	movs	r1, #0
 801106e:	4668      	mov	r0, sp
 8011070:	f005 fd47 	bl	8016b02 <memset>

    /* IV. Gather entropy_len bytes of entropy for the seed */
    if( ( ret = ctx->f_entropy( ctx->p_entropy,
 8011074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011076:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011078:	4632      	mov	r2, r6
 801107a:	4669      	mov	r1, sp
 801107c:	4798      	blx	r3
 801107e:	b9e0      	cbnz	r0, 80110ba <mbedtls_hmac_drbg_reseed+0x6c>
                                seed, ctx->entropy_len ) ) != 0 )
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );

    seedlen = ctx->entropy_len;
 8011080:	6b26      	ldr	r6, [r4, #48]	; 0x30

    /* 1. Concatenate entropy and additional data if any */
    if( additional != NULL && len != 0 )
 8011082:	b13f      	cbz	r7, 8011094 <mbedtls_hmac_drbg_reseed+0x46>
 8011084:	b135      	cbz	r5, 8011094 <mbedtls_hmac_drbg_reseed+0x46>
    {
        memcpy( seed + seedlen, additional, len );
 8011086:	eb0d 0006 	add.w	r0, sp, r6
 801108a:	462a      	mov	r2, r5
 801108c:	4639      	mov	r1, r7
 801108e:	f005 fd14 	bl	8016aba <memcpy>
        seedlen += len;
 8011092:	442e      	add	r6, r5
    }

    /* 2. Update state */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx, seed, seedlen ) ) != 0 )
 8011094:	4632      	mov	r2, r6
 8011096:	4669      	mov	r1, sp
 8011098:	4620      	mov	r0, r4
 801109a:	f7ff ff4a 	bl	8010f32 <mbedtls_hmac_drbg_update_ret>
 801109e:	4605      	mov	r5, r0
 80110a0:	b908      	cbnz	r0, 80110a6 <mbedtls_hmac_drbg_reseed+0x58>
        goto exit;

    /* 3. Reset reseed_counter */
    ctx->reseed_counter = 1;
 80110a2:	2301      	movs	r3, #1
 80110a4:	62e3      	str	r3, [r4, #44]	; 0x2c

exit:
    /* 4. Done */
    mbedtls_platform_zeroize( seed, seedlen );
 80110a6:	4631      	mov	r1, r6
 80110a8:	4668      	mov	r0, sp
 80110aa:	f001 f8f9 	bl	80122a0 <mbedtls_platform_zeroize>
    return( ret );
}
 80110ae:	4628      	mov	r0, r5
 80110b0:	b061      	add	sp, #388	; 0x184
 80110b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 80110b4:	f06f 0504 	mvn.w	r5, #4
 80110b8:	e7f9      	b.n	80110ae <mbedtls_hmac_drbg_reseed+0x60>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 80110ba:	f06f 0508 	mvn.w	r5, #8
 80110be:	e7f6      	b.n	80110ae <mbedtls_hmac_drbg_reseed+0x60>

080110c0 <mbedtls_hmac_drbg_random_with_add>:
 * 10.1.2.5 (arabic) + 9.3 (Roman)
 */
int mbedtls_hmac_drbg_random_with_add( void *p_rng,
                               unsigned char *output, size_t out_len,
                               const unsigned char *additional, size_t add_len )
{
 80110c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c4:	4604      	mov	r4, r0
    int ret;
    mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80110c6:	6800      	ldr	r0, [r0, #0]
{
 80110c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80110ca:	4616      	mov	r6, r2
 80110cc:	4688      	mov	r8, r1
 80110ce:	461f      	mov	r7, r3
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80110d0:	f000 f96c 	bl	80113ac <mbedtls_md_get_size>
    size_t left = out_len;
    unsigned char *out = output;

    /* II. Check request length */
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80110d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80110d8:	4683      	mov	fp, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80110da:	d84b      	bhi.n	8011174 <mbedtls_hmac_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );

    /* III. Check input length */
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 80110dc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80110e0:	d84b      	bhi.n	801117a <mbedtls_hmac_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );

    /* 1. (aka VII and IX) Check reseed counter and PR */
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 80110e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110e4:	b1d3      	cbz	r3, 801111c <mbedtls_hmac_drbg_random_with_add+0x5c>
 80110e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d003      	beq.n	80110f4 <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 80110ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80110ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110f0:	429a      	cmp	r2, r3
 80110f2:	dd13      	ble.n	801111c <mbedtls_hmac_drbg_random_with_add+0x5c>
          ctx->reseed_counter > ctx->reseed_interval ) )
    {
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 80110f4:	462a      	mov	r2, r5
 80110f6:	4639      	mov	r1, r7
 80110f8:	4620      	mov	r0, r4
 80110fa:	f7ff ffa8 	bl	801104e <mbedtls_hmac_drbg_reseed>
 80110fe:	b9c0      	cbnz	r0, 8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
            return( ret );

        add_len = 0; /* VII.4 */
 8011100:	2500      	movs	r5, #0
        size_t use_len = left > md_len ? md_len : left;

        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
                                            ctx->V, md_len ) ) != 0 )
 8011102:	f104 090c 	add.w	r9, r4, #12
    while( left != 0 )
 8011106:	b9b6      	cbnz	r6, 8011136 <mbedtls_hmac_drbg_random_with_add+0x76>
        out += use_len;
        left -= use_len;
    }

    /* 6. Update */
    if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 8011108:	462a      	mov	r2, r5
 801110a:	4639      	mov	r1, r7
 801110c:	4620      	mov	r0, r4
 801110e:	f7ff ff10 	bl	8010f32 <mbedtls_hmac_drbg_update_ret>
 8011112:	b970      	cbnz	r0, 8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
                                              additional, add_len ) ) != 0 )
        goto exit;

    /* 7. Update reseed counter */
    ctx->reseed_counter++;
 8011114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011116:	3301      	adds	r3, #1
 8011118:	62e3      	str	r3, [r4, #44]	; 0x2c
 801111a:	e00a      	b.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
    if( additional != NULL && add_len != 0 )
 801111c:	2f00      	cmp	r7, #0
 801111e:	d0f0      	beq.n	8011102 <mbedtls_hmac_drbg_random_with_add+0x42>
 8011120:	2d00      	cmp	r5, #0
 8011122:	d0ed      	beq.n	8011100 <mbedtls_hmac_drbg_random_with_add+0x40>
        if( ( ret = mbedtls_hmac_drbg_update_ret( ctx,
 8011124:	462a      	mov	r2, r5
 8011126:	4639      	mov	r1, r7
 8011128:	4620      	mov	r0, r4
 801112a:	f7ff ff02 	bl	8010f32 <mbedtls_hmac_drbg_update_ret>
 801112e:	2800      	cmp	r0, #0
 8011130:	d0e7      	beq.n	8011102 <mbedtls_hmac_drbg_random_with_add+0x42>

exit:
    /* 8. Done */
    return( ret );
}
 8011132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_t use_len = left > md_len ? md_len : left;
 8011136:	455e      	cmp	r6, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 8011138:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 801113a:	46b2      	mov	sl, r6
 801113c:	bf28      	it	cs
 801113e:	46da      	movcs	sl, fp
        if( ( ret = mbedtls_md_hmac_reset( &ctx->md_ctx ) ) != 0 )
 8011140:	f000 f91c 	bl	801137c <mbedtls_md_hmac_reset>
 8011144:	2800      	cmp	r0, #0
 8011146:	d1f4      	bne.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_update( &ctx->md_ctx,
 8011148:	465a      	mov	r2, fp
 801114a:	4649      	mov	r1, r9
 801114c:	4620      	mov	r0, r4
 801114e:	f000 f8d5 	bl	80112fc <mbedtls_md_hmac_update>
 8011152:	2800      	cmp	r0, #0
 8011154:	d1ed      	bne.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
        if( ( ret = mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V ) ) != 0 )
 8011156:	4649      	mov	r1, r9
 8011158:	4620      	mov	r0, r4
 801115a:	f000 f8e1 	bl	8011320 <mbedtls_md_hmac_finish>
 801115e:	2800      	cmp	r0, #0
 8011160:	d1e7      	bne.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
        memcpy( out, ctx->V, use_len );
 8011162:	4640      	mov	r0, r8
 8011164:	4652      	mov	r2, sl
 8011166:	4649      	mov	r1, r9
 8011168:	f005 fca7 	bl	8016aba <memcpy>
        out += use_len;
 801116c:	44d0      	add	r8, sl
        left -= use_len;
 801116e:	eba6 060a 	sub.w	r6, r6, sl
 8011172:	e7c8      	b.n	8011106 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 8011174:	f06f 0002 	mvn.w	r0, #2
 8011178:	e7db      	b.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 801117a:	f06f 0004 	mvn.w	r0, #4
 801117e:	e7d8      	b.n	8011132 <mbedtls_hmac_drbg_random_with_add+0x72>

08011180 <mbedtls_hmac_drbg_random>:

/*
 * HMAC_DRBG random function
 */
int mbedtls_hmac_drbg_random( void *p_rng, unsigned char *output, size_t out_len )
{
 8011180:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 8011182:	2300      	movs	r3, #0
 8011184:	9300      	str	r3, [sp, #0]
 8011186:	f7ff ff9b 	bl	80110c0 <mbedtls_hmac_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 801118a:	b003      	add	sp, #12
 801118c:	f85d fb04 	ldr.w	pc, [sp], #4

08011190 <mbedtls_hmac_drbg_free>:

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
{
 8011190:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8011192:	4604      	mov	r4, r0
 8011194:	b138      	cbz	r0, 80111a6 <mbedtls_hmac_drbg_free+0x16>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 8011196:	f000 f813 	bl	80111c0 <mbedtls_md_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 801119a:	4620      	mov	r0, r4
 801119c:	2144      	movs	r1, #68	; 0x44
}
 801119e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
 80111a2:	f001 b87d 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80111a8:	3804      	subs	r0, #4
 80111aa:	b2c0      	uxtb	r0, r0
 80111ac:	2802      	cmp	r0, #2
 80111ae:	bf9d      	ittte	ls
 80111b0:	4b02      	ldrls	r3, [pc, #8]	; (80111bc <mbedtls_md_info_from_type+0x14>)
 80111b2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 80111b6:	6900      	ldrls	r0, [r0, #16]
 80111b8:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80111ba:	4770      	bx	lr
 80111bc:	08018ff8 	.word	0x08018ff8

080111c0 <mbedtls_md_free>:
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80111c0:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80111c2:	4604      	mov	r4, r0
 80111c4:	b1a8      	cbz	r0, 80111f2 <mbedtls_md_free+0x32>
 80111c6:	6803      	ldr	r3, [r0, #0]
 80111c8:	b19b      	cbz	r3, 80111f2 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 80111ca:	6840      	ldr	r0, [r0, #4]
 80111cc:	b108      	cbz	r0, 80111d2 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80111ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d0:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80111d2:	68a0      	ldr	r0, [r4, #8]
 80111d4:	b138      	cbz	r0, 80111e6 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 80111da:	0049      	lsls	r1, r1, #1
 80111dc:	f001 f860 	bl	80122a0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 80111e0:	68a0      	ldr	r0, [r4, #8]
 80111e2:	f005 fc53 	bl	8016a8c <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 80111e6:	4620      	mov	r0, r4
 80111e8:	210c      	movs	r1, #12
}
 80111ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 80111ee:	f001 b857 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 80111f2:	bd10      	pop	{r4, pc}

080111f4 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80111f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f6:	4605      	mov	r5, r0
 80111f8:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80111fa:	460c      	mov	r4, r1
 80111fc:	b1a1      	cbz	r1, 8011228 <mbedtls_md_setup+0x34>
 80111fe:	b198      	cbz	r0, 8011228 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8011200:	6a0b      	ldr	r3, [r1, #32]
 8011202:	4798      	blx	r3
 8011204:	4606      	mov	r6, r0
 8011206:	6068      	str	r0, [r5, #4]
 8011208:	b148      	cbz	r0, 801121e <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 801120a:	b157      	cbz	r7, 8011222 <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 801120c:	68e1      	ldr	r1, [r4, #12]
 801120e:	2002      	movs	r0, #2
 8011210:	f005 fc26 	bl	8016a60 <calloc>
 8011214:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8011216:	b920      	cbnz	r0, 8011222 <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8011218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801121a:	4630      	mov	r0, r6
 801121c:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 801121e:	4803      	ldr	r0, [pc, #12]	; (801122c <mbedtls_md_setup+0x38>)
 8011220:	e001      	b.n	8011226 <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8011222:	602c      	str	r4, [r5, #0]

    return( 0 );
 8011224:	2000      	movs	r0, #0
}
 8011226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8011228:	4801      	ldr	r0, [pc, #4]	; (8011230 <mbedtls_md_setup+0x3c>)
 801122a:	e7fc      	b.n	8011226 <mbedtls_md_setup+0x32>
 801122c:	ffffae80 	.word	0xffffae80
 8011230:	ffffaf00 	.word	0xffffaf00

08011234 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8011234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011238:	460e      	mov	r6, r1
 801123a:	b088      	sub	sp, #32
 801123c:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801123e:	4604      	mov	r4, r0
 8011240:	2800      	cmp	r0, #0
 8011242:	d057      	beq.n	80112f4 <mbedtls_md_hmac_starts+0xc0>
 8011244:	6803      	ldr	r3, [r0, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d054      	beq.n	80112f4 <mbedtls_md_hmac_starts+0xc0>
 801124a:	6882      	ldr	r2, [r0, #8]
 801124c:	2a00      	cmp	r2, #0
 801124e:	d051      	beq.n	80112f4 <mbedtls_md_hmac_starts+0xc0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	42ba      	cmp	r2, r7
 8011254:	d217      	bcs.n	8011286 <mbedtls_md_hmac_starts+0x52>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	6840      	ldr	r0, [r0, #4]
 801125a:	4798      	blx	r3
 801125c:	4605      	mov	r5, r0
 801125e:	2800      	cmp	r0, #0
 8011260:	d134      	bne.n	80112cc <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	6860      	ldr	r0, [r4, #4]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	463a      	mov	r2, r7
 801126a:	4631      	mov	r1, r6
 801126c:	4798      	blx	r3
 801126e:	4605      	mov	r5, r0
 8011270:	bb60      	cbnz	r0, 80112cc <mbedtls_md_hmac_starts+0x98>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	6860      	ldr	r0, [r4, #4]
 8011276:	699b      	ldr	r3, [r3, #24]
 8011278:	4669      	mov	r1, sp
 801127a:	4798      	blx	r3
 801127c:	4605      	mov	r5, r0
 801127e:	bb28      	cbnz	r0, 80112cc <mbedtls_md_hmac_starts+0x98>
            goto cleanup;

        keylen = ctx->md_info->size;
 8011280:	6823      	ldr	r3, [r4, #0]
 8011282:	689f      	ldr	r7, [r3, #8]
        key = sum;
 8011284:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8011286:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 8011288:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 801128c:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 801128e:	2136      	movs	r1, #54	; 0x36
 8011290:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8011292:	eb08 0502 	add.w	r5, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 8011296:	f005 fc34 	bl	8016b02 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	215c      	movs	r1, #92	; 0x5c
 801129e:	68da      	ldr	r2, [r3, #12]
 80112a0:	4628      	mov	r0, r5
 80112a2:	f005 fc2e 	bl	8016b02 <memset>
 80112a6:	3e01      	subs	r6, #1
 80112a8:	4643      	mov	r3, r8
 80112aa:	1e68      	subs	r0, r5, #1
 80112ac:	4447      	add	r7, r8

    for( i = 0; i < keylen; i++ )
 80112ae:	429f      	cmp	r7, r3
 80112b0:	d114      	bne.n	80112dc <mbedtls_md_hmac_starts+0xa8>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80112b2:	6823      	ldr	r3, [r4, #0]
 80112b4:	6860      	ldr	r0, [r4, #4]
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	4798      	blx	r3
 80112ba:	4605      	mov	r5, r0
 80112bc:	b930      	cbnz	r0, 80112cc <mbedtls_md_hmac_starts+0x98>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	6860      	ldr	r0, [r4, #4]
 80112c2:	695d      	ldr	r5, [r3, #20]
 80112c4:	68da      	ldr	r2, [r3, #12]
 80112c6:	4641      	mov	r1, r8
 80112c8:	47a8      	blx	r5
 80112ca:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 80112cc:	2120      	movs	r1, #32
 80112ce:	4668      	mov	r0, sp
 80112d0:	f000 ffe6 	bl	80122a0 <mbedtls_platform_zeroize>

    return( ret );
}
 80112d4:	4628      	mov	r0, r5
 80112d6:	b008      	add	sp, #32
 80112d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80112dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80112e0:	781a      	ldrb	r2, [r3, #0]
 80112e2:	404a      	eors	r2, r1
 80112e4:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80112e8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80112ec:	7831      	ldrb	r1, [r6, #0]
 80112ee:	404a      	eors	r2, r1
 80112f0:	7002      	strb	r2, [r0, #0]
 80112f2:	e7dc      	b.n	80112ae <mbedtls_md_hmac_starts+0x7a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80112f4:	4d00      	ldr	r5, [pc, #0]	; (80112f8 <mbedtls_md_hmac_starts+0xc4>)
 80112f6:	e7ed      	b.n	80112d4 <mbedtls_md_hmac_starts+0xa0>
 80112f8:	ffffaf00 	.word	0xffffaf00

080112fc <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80112fc:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80112fe:	b140      	cbz	r0, 8011312 <mbedtls_md_hmac_update+0x16>
 8011300:	6803      	ldr	r3, [r0, #0]
 8011302:	b133      	cbz	r3, 8011312 <mbedtls_md_hmac_update+0x16>
 8011304:	6884      	ldr	r4, [r0, #8]
 8011306:	b124      	cbz	r4, 8011312 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	6840      	ldr	r0, [r0, #4]
}
 801130c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8011310:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8011312:	4802      	ldr	r0, [pc, #8]	; (801131c <mbedtls_md_hmac_update+0x20>)
}
 8011314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	ffffaf00 	.word	0xffffaf00

08011320 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8011320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011322:	460e      	mov	r6, r1
 8011324:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8011326:	4604      	mov	r4, r0
 8011328:	b320      	cbz	r0, 8011374 <mbedtls_md_hmac_finish+0x54>
 801132a:	6803      	ldr	r3, [r0, #0]
 801132c:	b313      	cbz	r3, 8011374 <mbedtls_md_hmac_finish+0x54>
 801132e:	6882      	ldr	r2, [r0, #8]
 8011330:	b302      	cbz	r2, 8011374 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8011332:	68dd      	ldr	r5, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 8011334:	6840      	ldr	r0, [r0, #4]
 8011336:	699b      	ldr	r3, [r3, #24]
 8011338:	4669      	mov	r1, sp
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 801133a:	4415      	add	r5, r2
    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 801133c:	4798      	blx	r3
 801133e:	b9b8      	cbnz	r0, 8011370 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	6860      	ldr	r0, [r4, #4]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	4798      	blx	r3
 8011348:	b990      	cbnz	r0, 8011370 <mbedtls_md_hmac_finish+0x50>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	6860      	ldr	r0, [r4, #4]
 801134e:	695f      	ldr	r7, [r3, #20]
 8011350:	68da      	ldr	r2, [r3, #12]
 8011352:	4629      	mov	r1, r5
 8011354:	47b8      	blx	r7
 8011356:	b958      	cbnz	r0, 8011370 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 8011358:	6823      	ldr	r3, [r4, #0]
 801135a:	6860      	ldr	r0, [r4, #4]
 801135c:	695d      	ldr	r5, [r3, #20]
 801135e:	689a      	ldr	r2, [r3, #8]
 8011360:	4669      	mov	r1, sp
 8011362:	47a8      	blx	r5
 8011364:	b920      	cbnz	r0, 8011370 <mbedtls_md_hmac_finish+0x50>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	6860      	ldr	r0, [r4, #4]
 801136a:	699b      	ldr	r3, [r3, #24]
 801136c:	4631      	mov	r1, r6
 801136e:	4798      	blx	r3
}
 8011370:	b009      	add	sp, #36	; 0x24
 8011372:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8011374:	4800      	ldr	r0, [pc, #0]	; (8011378 <mbedtls_md_hmac_finish+0x58>)
 8011376:	e7fb      	b.n	8011370 <mbedtls_md_hmac_finish+0x50>
 8011378:	ffffaf00 	.word	0xffffaf00

0801137c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 801137c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801137e:	4604      	mov	r4, r0
 8011380:	b180      	cbz	r0, 80113a4 <mbedtls_md_hmac_reset+0x28>
 8011382:	6803      	ldr	r3, [r0, #0]
 8011384:	b173      	cbz	r3, 80113a4 <mbedtls_md_hmac_reset+0x28>
 8011386:	6885      	ldr	r5, [r0, #8]
 8011388:	b165      	cbz	r5, 80113a4 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 801138a:	691b      	ldr	r3, [r3, #16]
 801138c:	6840      	ldr	r0, [r0, #4]
 801138e:	4798      	blx	r3
 8011390:	b948      	cbnz	r0, 80113a6 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8011392:	6823      	ldr	r3, [r4, #0]
 8011394:	6860      	ldr	r0, [r4, #4]
 8011396:	695e      	ldr	r6, [r3, #20]
 8011398:	68da      	ldr	r2, [r3, #12]
 801139a:	4629      	mov	r1, r5
 801139c:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
 801139e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 80113a2:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80113a4:	4800      	ldr	r0, [pc, #0]	; (80113a8 <mbedtls_md_hmac_reset+0x2c>)
}
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	ffffaf00 	.word	0xffffaf00

080113ac <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80113ac:	b100      	cbz	r0, 80113b0 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80113ae:	7a00      	ldrb	r0, [r0, #8]
}
 80113b0:	4770      	bx	lr

080113b2 <mbedtls_md_get_type>:

mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80113b2:	b100      	cbz	r0, 80113b6 <mbedtls_md_get_type+0x4>
        return( MBEDTLS_MD_NONE );

    return md_info->type;
 80113b4:	7800      	ldrb	r0, [r0, #0]
}
 80113b6:	4770      	bx	lr

080113b8 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
 80113b8:	f003 bec6 	b.w	8015148 <mbedtls_internal_sha1_process>

080113bc <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 80113bc:	f003 bea5 	b.w	801510a <mbedtls_sha1_clone>

080113c0 <sha1_ctx_free>:
{
 80113c0:	b510      	push	{r4, lr}
 80113c2:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80113c4:	f003 fe9c 	bl	8015100 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80113c8:	4620      	mov	r0, r4
}
 80113ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80113ce:	f005 bb5d 	b.w	8016a8c <free>

080113d2 <sha1_ctx_alloc>:
{
 80113d2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80113d4:	215c      	movs	r1, #92	; 0x5c
 80113d6:	2001      	movs	r0, #1
 80113d8:	f005 fb42 	bl	8016a60 <calloc>
    if( ctx != NULL )
 80113dc:	4604      	mov	r4, r0
 80113de:	b108      	cbz	r0, 80113e4 <sha1_ctx_alloc+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80113e0:	f003 fe8a 	bl	80150f8 <mbedtls_sha1_init>
}
 80113e4:	4620      	mov	r0, r4
 80113e6:	bd10      	pop	{r4, pc}

080113e8 <sha1_finish_wrap>:
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 80113e8:	f004 bded 	b.w	8015fc6 <mbedtls_sha1_finish_ret>

080113ec <sha1_update_wrap>:
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
 80113ec:	f004 bdae 	b.w	8015f4c <mbedtls_sha1_update_ret>

080113f0 <sha1_starts_wrap>:
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 80113f0:	f003 be90 	b.w	8015114 <mbedtls_sha1_starts_ret>

080113f4 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 80113f4:	f004 bedc 	b.w	80161b0 <mbedtls_internal_sha256_process>

080113f8 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 80113f8:	f004 be82 	b.w	8016100 <mbedtls_sha256_clone>

080113fc <sha224_ctx_free>:
{
 80113fc:	b510      	push	{r4, lr}
 80113fe:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8011400:	f004 fe79 	bl	80160f6 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8011404:	4620      	mov	r0, r4
}
 8011406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801140a:	f005 bb3f 	b.w	8016a8c <free>

0801140e <sha224_ctx_alloc>:
{
 801140e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8011410:	216c      	movs	r1, #108	; 0x6c
 8011412:	2001      	movs	r0, #1
 8011414:	f005 fb24 	bl	8016a60 <calloc>
    if( ctx != NULL )
 8011418:	4604      	mov	r4, r0
 801141a:	b108      	cbz	r0, 8011420 <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 801141c:	f004 fe67 	bl	80160ee <mbedtls_sha256_init>
}
 8011420:	4620      	mov	r0, r4
 8011422:	bd10      	pop	{r4, pc}

08011424 <sha224_wrap>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8011424:	2301      	movs	r3, #1
 8011426:	f005 baf9 	b.w	8016a1c <mbedtls_sha256_ret>

0801142a <sha256_wrap>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 801142a:	2300      	movs	r3, #0
 801142c:	f005 baf6 	b.w	8016a1c <mbedtls_sha256_ret>

08011430 <sha224_finish_wrap>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 8011430:	f005 ba5f 	b.w	80168f2 <mbedtls_sha256_finish_ret>

08011434 <sha224_update_wrap>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 8011434:	f005 ba20 	b.w	8016878 <mbedtls_sha256_update_ret>

08011438 <sha224_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8011438:	2101      	movs	r1, #1
 801143a:	f004 be67 	b.w	801610c <mbedtls_sha256_starts_ret>

0801143e <sha256_starts_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 801143e:	2100      	movs	r1, #0
 8011440:	f004 be64 	b.w	801610c <mbedtls_sha256_starts_ret>

08011444 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8011448:	4605      	mov	r5, r0
 801144a:	b110      	cbz	r0, 8011452 <mbedtls_oid_get_pk_alg+0xe>
 801144c:	4c09      	ldr	r4, [pc, #36]	; (8011474 <mbedtls_oid_get_pk_alg+0x30>)
 801144e:	6820      	ldr	r0, [r4, #0]
 8011450:	b910      	cbnz	r0, 8011458 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8011452:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8011456:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8011458:	6862      	ldr	r2, [r4, #4]
 801145a:	686b      	ldr	r3, [r5, #4]
 801145c:	429a      	cmp	r2, r3
 801145e:	d103      	bne.n	8011468 <mbedtls_oid_get_pk_alg+0x24>
 8011460:	68a9      	ldr	r1, [r5, #8]
 8011462:	f005 fb1b 	bl	8016a9c <memcmp>
 8011466:	b108      	cbz	r0, 801146c <mbedtls_oid_get_pk_alg+0x28>
 8011468:	3414      	adds	r4, #20
 801146a:	e7f0      	b.n	801144e <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 801146c:	7c23      	ldrb	r3, [r4, #16]
 801146e:	7033      	strb	r3, [r6, #0]
 8011470:	e7f1      	b.n	8011456 <mbedtls_oid_get_pk_alg+0x12>
 8011472:	bf00      	nop
 8011474:	08019414 	.word	0x08019414

08011478 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 801147c:	4605      	mov	r5, r0
 801147e:	b110      	cbz	r0, 8011486 <mbedtls_oid_get_ec_grp+0xe>
 8011480:	4c09      	ldr	r4, [pc, #36]	; (80114a8 <mbedtls_oid_get_ec_grp+0x30>)
 8011482:	6820      	ldr	r0, [r4, #0]
 8011484:	b910      	cbnz	r0, 801148c <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8011486:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801148a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 801148c:	6862      	ldr	r2, [r4, #4]
 801148e:	686b      	ldr	r3, [r5, #4]
 8011490:	429a      	cmp	r2, r3
 8011492:	d103      	bne.n	801149c <mbedtls_oid_get_ec_grp+0x24>
 8011494:	68a9      	ldr	r1, [r5, #8]
 8011496:	f005 fb01 	bl	8016a9c <memcmp>
 801149a:	b108      	cbz	r0, 80114a0 <mbedtls_oid_get_ec_grp+0x28>
 801149c:	3414      	adds	r4, #20
 801149e:	e7f0      	b.n	8011482 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80114a0:	7c23      	ldrb	r3, [r4, #16]
 80114a2:	7033      	strb	r3, [r6, #0]
 80114a4:	e7f1      	b.n	801148a <mbedtls_oid_get_ec_grp+0x12>
 80114a6:	bf00      	nop
 80114a8:	08019464 	.word	0x08019464

080114ac <mbedtls_oid_get_oid_by_ec_grp>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_ec_grp, oid_ecp_grp_t, oid_ecp_grp, mbedtls_ecp_group_id, grp_id)
 80114ac:	b530      	push	{r4, r5, lr}
 80114ae:	4b08      	ldr	r3, [pc, #32]	; (80114d0 <mbedtls_oid_get_oid_by_ec_grp+0x24>)
 80114b0:	681c      	ldr	r4, [r3, #0]
 80114b2:	b914      	cbnz	r4, 80114ba <mbedtls_oid_get_oid_by_ec_grp+0xe>
 80114b4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80114b8:	e006      	b.n	80114c8 <mbedtls_oid_get_oid_by_ec_grp+0x1c>
 80114ba:	7c1d      	ldrb	r5, [r3, #16]
 80114bc:	4285      	cmp	r5, r0
 80114be:	d104      	bne.n	80114ca <mbedtls_oid_get_oid_by_ec_grp+0x1e>
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	600c      	str	r4, [r1, #0]
 80114c4:	2000      	movs	r0, #0
 80114c6:	6013      	str	r3, [r2, #0]
 80114c8:	bd30      	pop	{r4, r5, pc}
 80114ca:	3314      	adds	r3, #20
 80114cc:	e7f0      	b.n	80114b0 <mbedtls_oid_get_oid_by_ec_grp+0x4>
 80114ce:	bf00      	nop
 80114d0:	08019464 	.word	0x08019464

080114d4 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 80114d4:	b530      	push	{r4, r5, lr}
 80114d6:	4b08      	ldr	r3, [pc, #32]	; (80114f8 <mbedtls_oid_get_oid_by_md+0x24>)
 80114d8:	681c      	ldr	r4, [r3, #0]
 80114da:	b914      	cbnz	r4, 80114e2 <mbedtls_oid_get_oid_by_md+0xe>
 80114dc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80114e0:	e006      	b.n	80114f0 <mbedtls_oid_get_oid_by_md+0x1c>
 80114e2:	7c1d      	ldrb	r5, [r3, #16]
 80114e4:	4285      	cmp	r5, r0
 80114e6:	d104      	bne.n	80114f2 <mbedtls_oid_get_oid_by_md+0x1e>
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	600c      	str	r4, [r1, #0]
 80114ec:	2000      	movs	r0, #0
 80114ee:	6013      	str	r3, [r2, #0]
 80114f0:	bd30      	pop	{r4, r5, pc}
 80114f2:	3314      	adds	r3, #20
 80114f4:	e7f0      	b.n	80114d8 <mbedtls_oid_get_oid_by_md+0x4>
 80114f6:	bf00      	nop
 80114f8:	080194c8 	.word	0x080194c8

080114fc <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 80114fc:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 80114fe:	e9c0 3300 	strd	r3, r3, [r0]
}
 8011502:	4770      	bx	lr

08011504 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8011504:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8011506:	4604      	mov	r4, r0
 8011508:	b150      	cbz	r0, 8011520 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 801150a:	6803      	ldr	r3, [r0, #0]
 801150c:	b113      	cbz	r3, 8011514 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 801150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011510:	6840      	ldr	r0, [r0, #4]
 8011512:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 8011514:	4620      	mov	r0, r4
 8011516:	2108      	movs	r1, #8
}
 8011518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 801151c:	f000 bec0 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 8011520:	bd10      	pop	{r4, pc}
	...

08011524 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 8011524:	3801      	subs	r0, #1
 8011526:	b2c0      	uxtb	r0, r0
 8011528:	2803      	cmp	r0, #3
 801152a:	bf9a      	itte	ls
 801152c:	4b02      	ldrls	r3, [pc, #8]	; (8011538 <mbedtls_pk_info_from_type+0x14>)
 801152e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011532:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	08019570 	.word	0x08019570

0801153c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 8011540:	460e      	mov	r6, r1
 8011542:	b141      	cbz	r1, 8011556 <mbedtls_pk_setup+0x1a>
 8011544:	6804      	ldr	r4, [r0, #0]
 8011546:	b934      	cbnz	r4, 8011556 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 8011548:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801154a:	4798      	blx	r3
 801154c:	6068      	str	r0, [r5, #4]
 801154e:	b120      	cbz	r0, 801155a <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8011550:	602e      	str	r6, [r5, #0]

    return( 0 );
 8011552:	4620      	mov	r0, r4
}
 8011554:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8011556:	4802      	ldr	r0, [pc, #8]	; (8011560 <mbedtls_pk_setup+0x24>)
 8011558:	e7fc      	b.n	8011554 <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 801155a:	4802      	ldr	r0, [pc, #8]	; (8011564 <mbedtls_pk_setup+0x28>)
 801155c:	e7fa      	b.n	8011554 <mbedtls_pk_setup+0x18>
 801155e:	bf00      	nop
 8011560:	ffffc180 	.word	0xffffc180
 8011564:	ffffc080 	.word	0xffffc080

08011568 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8011568:	b110      	cbz	r0, 8011570 <mbedtls_pk_get_type+0x8>
 801156a:	6800      	ldr	r0, [r0, #0]
 801156c:	b100      	cbz	r0, 8011570 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 801156e:	7800      	ldrb	r0, [r0, #0]
}
 8011570:	4770      	bx	lr

08011572 <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8011572:	2801      	cmp	r0, #1
 8011574:	d002      	beq.n	801157c <rsa_can_do+0xa>
 8011576:	1f83      	subs	r3, r0, #6
 8011578:	4258      	negs	r0, r3
 801157a:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 801157c:	4770      	bx	lr
	...

08011580 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8011580:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8011582:	4a06      	ldr	r2, [pc, #24]	; (801159c <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8011584:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 8011586:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8011588:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 801158a:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 801158e:	4b04      	ldr	r3, [pc, #16]	; (80115a0 <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8011590:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8011592:	3014      	adds	r0, #20
    items->name = "rsa.E";
 8011594:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8011596:	6148      	str	r0, [r1, #20]
}
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	0801a2ae 	.word	0x0801a2ae
 80115a0:	0801a2b4 	.word	0x0801a2b4

080115a4 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 80115a4:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 80115a6:	2802      	cmp	r0, #2
 80115a8:	bf8c      	ite	hi
 80115aa:	2000      	movhi	r0, #0
 80115ac:	2001      	movls	r0, #1
 80115ae:	4770      	bx	lr

080115b0 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 80115b0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80115b2:	4770      	bx	lr

080115b4 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 80115b4:	2302      	movs	r3, #2
 80115b6:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 80115b8:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 80115ba:	4b02      	ldr	r3, [pc, #8]	; (80115c4 <eckey_debug+0x10>)
 80115bc:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 80115be:	6088      	str	r0, [r1, #8]
}
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop
 80115c4:	0801a2ba 	.word	0x0801a2ba

080115c8 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 80115c8:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 80115ca:	2801      	cmp	r0, #1
 80115cc:	bf8c      	ite	hi
 80115ce:	2000      	movhi	r0, #0
 80115d0:	2001      	movls	r0, #1
 80115d2:	4770      	bx	lr

080115d4 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 80115d4:	1f03      	subs	r3, r0, #4
 80115d6:	4258      	negs	r0, r3
 80115d8:	4158      	adcs	r0, r3
 80115da:	4770      	bx	lr

080115dc <rsa_free_wrap>:
{
 80115dc:	b510      	push	{r4, lr}
 80115de:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 80115e0:	f003 fa56 	bl	8014a90 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 80115e4:	4620      	mov	r0, r4
}
 80115e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80115ea:	f005 ba4f 	b.w	8016a8c <free>

080115ee <rsa_alloc_wrap>:
{
 80115ee:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80115f0:	21ac      	movs	r1, #172	; 0xac
 80115f2:	2001      	movs	r0, #1
 80115f4:	f005 fa34 	bl	8016a60 <calloc>
    if( ctx != NULL )
 80115f8:	4604      	mov	r4, r0
 80115fa:	b118      	cbz	r0, 8011604 <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80115fc:	2200      	movs	r2, #0
 80115fe:	4611      	mov	r1, r2
 8011600:	f002 fd7a 	bl	80140f8 <mbedtls_rsa_init>
}
 8011604:	4620      	mov	r0, r4
 8011606:	bd10      	pop	{r4, pc}

08011608 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8011608:	f002 bde0 	b.w	80141cc <mbedtls_rsa_check_pub_priv>

0801160c <rsa_get_bitlen>:
{
 801160c:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 801160e:	f002 fd80 	bl	8014112 <mbedtls_rsa_get_len>
}
 8011612:	00c0      	lsls	r0, r0, #3
 8011614:	bd08      	pop	{r3, pc}
	...

08011618 <rsa_encrypt_wrap>:
{
 8011618:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	4604      	mov	r4, r0
 801161e:	e9dd ba0a 	ldrd	fp, sl, [sp, #40]	; 0x28
 8011622:	4688      	mov	r8, r1
 8011624:	4617      	mov	r7, r2
 8011626:	4699      	mov	r9, r3
 8011628:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    *olen = mbedtls_rsa_get_len( rsa );
 801162c:	f002 fd71 	bl	8014112 <mbedtls_rsa_get_len>
    if( *olen > osize )
 8011630:	4550      	cmp	r0, sl
    *olen = mbedtls_rsa_get_len( rsa );
 8011632:	f8cb 0000 	str.w	r0, [fp]
    if( *olen > osize )
 8011636:	d80b      	bhi.n	8011650 <rsa_encrypt_wrap+0x38>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 8011638:	2300      	movs	r3, #0
 801163a:	4632      	mov	r2, r6
 801163c:	4629      	mov	r1, r5
 801163e:	4620      	mov	r0, r4
 8011640:	e9cd 890b 	strd	r8, r9, [sp, #44]	; 0x2c
 8011644:	970a      	str	r7, [sp, #40]	; 0x28
}
 8011646:	b001      	add	sp, #4
 8011648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 801164c:	f003 b840 	b.w	80146d0 <mbedtls_rsa_pkcs1_encrypt>
}
 8011650:	4801      	ldr	r0, [pc, #4]	; (8011658 <rsa_encrypt_wrap+0x40>)
 8011652:	b001      	add	sp, #4
 8011654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011658:	ffffbc00 	.word	0xffffbc00

0801165c <rsa_decrypt_wrap>:
{
 801165c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011660:	4693      	mov	fp, r2
 8011662:	4604      	mov	r4, r0
 8011664:	4688      	mov	r8, r1
 8011666:	4699      	mov	r9, r3
 8011668:	e9dd 7a0a 	ldrd	r7, sl, [sp, #40]	; 0x28
 801166c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8011670:	f002 fd4f 	bl	8014112 <mbedtls_rsa_get_len>
 8011674:	4558      	cmp	r0, fp
 8011676:	d10c      	bne.n	8011692 <rsa_decrypt_wrap+0x36>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 8011678:	2301      	movs	r3, #1
 801167a:	4632      	mov	r2, r6
 801167c:	4629      	mov	r1, r5
 801167e:	4620      	mov	r0, r4
 8011680:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 8011684:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 8011688:	b001      	add	sp, #4
 801168a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 801168e:	f003 b907 	b.w	80148a0 <mbedtls_rsa_pkcs1_decrypt>
}
 8011692:	4802      	ldr	r0, [pc, #8]	; (801169c <rsa_decrypt_wrap+0x40>)
 8011694:	b001      	add	sp, #4
 8011696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169a:	bf00      	nop
 801169c:	ffffbf80 	.word	0xffffbf80

080116a0 <rsa_sign_wrap>:
{
 80116a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	460f      	mov	r7, r1
 80116a6:	4691      	mov	r9, r2
 80116a8:	4698      	mov	r8, r3
 80116aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80116ae:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80116b2:	4604      	mov	r4, r0
    *sig_len = mbedtls_rsa_get_len( rsa );
 80116b4:	f002 fd2d 	bl	8014112 <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80116b8:	2301      	movs	r3, #1
    *sig_len = mbedtls_rsa_get_len( rsa );
 80116ba:	f8cb 0000 	str.w	r0, [fp]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80116be:	4632      	mov	r2, r6
 80116c0:	4629      	mov	r1, r5
 80116c2:	4620      	mov	r0, r4
 80116c4:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
 80116c8:	e9cd 780a 	strd	r7, r8, [sp, #40]	; 0x28
}
 80116cc:	b001      	add	sp, #4
 80116ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 80116d2:	f003 b959 	b.w	8014988 <mbedtls_rsa_pkcs1_sign>
	...

080116d8 <rsa_verify_wrap>:
{
 80116d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116dc:	b085      	sub	sp, #20
 80116de:	4606      	mov	r6, r0
 80116e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80116e2:	460f      	mov	r7, r1
 80116e4:	4691      	mov	r9, r2
 80116e6:	4698      	mov	r8, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80116e8:	f002 fd13 	bl	8014112 <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 80116ec:	42a0      	cmp	r0, r4
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80116ee:	4605      	mov	r5, r0
    if( sig_len < rsa_len )
 80116f0:	d812      	bhi.n	8011718 <rsa_verify_wrap+0x40>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80116f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116f4:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80116f8:	2300      	movs	r3, #0
 80116fa:	e9cd 7800 	strd	r7, r8, [sp]
 80116fe:	461a      	mov	r2, r3
 8011700:	4619      	mov	r1, r3
 8011702:	4630      	mov	r0, r6
 8011704:	f003 f9b4 	bl	8014a70 <mbedtls_rsa_pkcs1_verify>
 8011708:	b918      	cbnz	r0, 8011712 <rsa_verify_wrap+0x3a>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 801170a:	4b04      	ldr	r3, [pc, #16]	; (801171c <rsa_verify_wrap+0x44>)
 801170c:	42a5      	cmp	r5, r4
 801170e:	bf38      	it	cc
 8011710:	4618      	movcc	r0, r3
}
 8011712:	b005      	add	sp, #20
 8011714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8011718:	4801      	ldr	r0, [pc, #4]	; (8011720 <rsa_verify_wrap+0x48>)
 801171a:	e7fa      	b.n	8011712 <rsa_verify_wrap+0x3a>
 801171c:	ffffc700 	.word	0xffffc700
 8011720:	ffffbc80 	.word	0xffffbc80

08011724 <eckey_free_wrap>:
{
 8011724:	b510      	push	{r4, lr}
 8011726:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8011728:	f7fd fd9e 	bl	800f268 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 801172c:	4620      	mov	r0, r4
}
 801172e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8011732:	f005 b9ab 	b.w	8016a8c <free>

08011736 <eckey_alloc_wrap>:
{
 8011736:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8011738:	21ac      	movs	r1, #172	; 0xac
 801173a:	2001      	movs	r0, #1
 801173c:	f005 f990 	bl	8016a60 <calloc>
    if( ctx != NULL )
 8011740:	4604      	mov	r4, r0
 8011742:	b108      	cbz	r0, 8011748 <eckey_alloc_wrap+0x12>
        mbedtls_ecp_keypair_init( ctx );
 8011744:	f7fd fd4d 	bl	800f1e2 <mbedtls_ecp_keypair_init>
}
 8011748:	4620      	mov	r0, r4
 801174a:	bd10      	pop	{r4, pc}

0801174c <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 801174c:	f7fe bc92 	b.w	8010074 <mbedtls_ecp_check_pub_priv>

08011750 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 8011750:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8011752:	21ac      	movs	r1, #172	; 0xac
 8011754:	2001      	movs	r0, #1
 8011756:	f005 f983 	bl	8016a60 <calloc>

    if( ctx != NULL )
 801175a:	4604      	mov	r4, r0
 801175c:	b108      	cbz	r0, 8011762 <ecdsa_alloc_wrap+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 801175e:	f7fd f896 	bl	800e88e <mbedtls_ecdsa_init>

    return( ctx );
}
 8011762:	4620      	mov	r0, r4
 8011764:	bd10      	pop	{r4, pc}

08011766 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8011766:	b510      	push	{r4, lr}
 8011768:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 801176a:	f7fd f892 	bl	800e892 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 801176e:	4620      	mov	r0, r4
}
 8011770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8011774:	f005 b98a 	b.w	8016a8c <free>

08011778 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8011778:	f7fd b820 	b.w	800e7bc <mbedtls_ecdsa_write_signature>

0801177c <eckey_sign_wrap>:
{
 801177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801177e:	b0b1      	sub	sp, #196	; 0xc4
 8011780:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8011782:	a805      	add	r0, sp, #20
{
 8011784:	460d      	mov	r5, r1
 8011786:	4616      	mov	r6, r2
 8011788:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 801178a:	f7fd f880 	bl	800e88e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 801178e:	4621      	mov	r1, r4
 8011790:	a805      	add	r0, sp, #20
 8011792:	f7fd f882 	bl	800e89a <mbedtls_ecdsa_from_keypair>
 8011796:	4604      	mov	r4, r0
 8011798:	b970      	cbnz	r0, 80117b8 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 801179a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801179c:	9303      	str	r3, [sp, #12]
 801179e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80117a0:	9302      	str	r3, [sp, #8]
 80117a2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	4632      	mov	r2, r6
 80117ac:	463b      	mov	r3, r7
 80117ae:	4629      	mov	r1, r5
 80117b0:	a805      	add	r0, sp, #20
 80117b2:	f7fd f803 	bl	800e7bc <mbedtls_ecdsa_write_signature>
 80117b6:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 80117b8:	a805      	add	r0, sp, #20
 80117ba:	f7fd f86a 	bl	800e892 <mbedtls_ecdsa_free>
}
 80117be:	4620      	mov	r0, r4
 80117c0:	b031      	add	sp, #196	; 0xc4
 80117c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117c4 <ecdsa_verify_wrap>:
{
 80117c4:	b507      	push	{r0, r1, r2, lr}
 80117c6:	4611      	mov	r1, r2
 80117c8:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 80117ca:	9b05      	ldr	r3, [sp, #20]
 80117cc:	9300      	str	r3, [sp, #0]
 80117ce:	9b04      	ldr	r3, [sp, #16]
 80117d0:	f7fd f854 	bl	800e87c <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 80117d4:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 80117d8:	bf08      	it	eq
 80117da:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 80117de:	b003      	add	sp, #12
 80117e0:	f85d fb04 	ldr.w	pc, [sp], #4

080117e4 <eckey_verify_wrap>:
{
 80117e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117e6:	b0af      	sub	sp, #188	; 0xbc
 80117e8:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 80117ea:	a803      	add	r0, sp, #12
{
 80117ec:	460d      	mov	r5, r1
 80117ee:	4616      	mov	r6, r2
 80117f0:	461f      	mov	r7, r3
    mbedtls_ecdsa_init( &ecdsa );
 80117f2:	f7fd f84c 	bl	800e88e <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 80117f6:	4621      	mov	r1, r4
 80117f8:	a803      	add	r0, sp, #12
 80117fa:	f7fd f84e 	bl	800e89a <mbedtls_ecdsa_from_keypair>
 80117fe:	4604      	mov	r4, r0
 8011800:	b950      	cbnz	r0, 8011818 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8011802:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8011808:	9300      	str	r3, [sp, #0]
 801180a:	4632      	mov	r2, r6
 801180c:	463b      	mov	r3, r7
 801180e:	4629      	mov	r1, r5
 8011810:	a803      	add	r0, sp, #12
 8011812:	f7ff ffd7 	bl	80117c4 <ecdsa_verify_wrap>
 8011816:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8011818:	a803      	add	r0, sp, #12
 801181a:	f7fd f83a 	bl	800e892 <mbedtls_ecdsa_free>
}
 801181e:	4620      	mov	r0, r4
 8011820:	b02f      	add	sp, #188	; 0xbc
 8011822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011824 <pk_get_rsapubkey>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	b08a      	sub	sp, #40	; 0x28
 8011828:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801182a:	2330      	movs	r3, #48	; 0x30
 801182c:	aa09      	add	r2, sp, #36	; 0x24
{
 801182e:	4604      	mov	r4, r0
 8011830:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011832:	f7f9 faef 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011836:	b110      	cbz	r0, 801183e <pk_get_rsapubkey+0x1a>

    *p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8011838:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 801183c:	e005      	b.n	801184a <pk_get_rsapubkey+0x26>
    if( *p + len != end )
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011842:	4413      	add	r3, r2
 8011844:	429d      	cmp	r5, r3
 8011846:	d002      	beq.n	801184e <pk_get_rsapubkey+0x2a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8011848:	4824      	ldr	r0, [pc, #144]	; (80118dc <pk_get_rsapubkey+0xb8>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 801184a:	b00a      	add	sp, #40	; 0x28
 801184c:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 801184e:	2302      	movs	r3, #2
 8011850:	aa09      	add	r2, sp, #36	; 0x24
 8011852:	4629      	mov	r1, r5
 8011854:	4620      	mov	r0, r4
 8011856:	f7f9 fadd 	bl	800ae14 <mbedtls_asn1_get_tag>
 801185a:	2800      	cmp	r0, #0
 801185c:	d1ec      	bne.n	8011838 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 801185e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8011862:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8011866:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801186a:	9000      	str	r0, [sp, #0]
 801186c:	4603      	mov	r3, r0
 801186e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011870:	6821      	ldr	r1, [r4, #0]
 8011872:	4630      	mov	r0, r6
 8011874:	f002 fab2 	bl	8013ddc <mbedtls_rsa_import_raw>
 8011878:	b108      	cbz	r0, 801187e <pk_get_rsapubkey+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 801187a:	4819      	ldr	r0, [pc, #100]	; (80118e0 <pk_get_rsapubkey+0xbc>)
 801187c:	e7e5      	b.n	801184a <pk_get_rsapubkey+0x26>
    *p += len;
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011882:	4413      	add	r3, r2
 8011884:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8011886:	aa09      	add	r2, sp, #36	; 0x24
 8011888:	2302      	movs	r3, #2
 801188a:	4629      	mov	r1, r5
 801188c:	4620      	mov	r0, r4
 801188e:	f7f9 fac1 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011892:	2800      	cmp	r0, #0
 8011894:	d1d0      	bne.n	8011838 <pk_get_rsapubkey+0x14>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8011896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011898:	9306      	str	r3, [sp, #24]
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80118a0:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80118a4:	e9cd 0000 	strd	r0, r0, [sp]
 80118a8:	4603      	mov	r3, r0
 80118aa:	4602      	mov	r2, r0
 80118ac:	4601      	mov	r1, r0
 80118ae:	4630      	mov	r0, r6
 80118b0:	f002 fa94 	bl	8013ddc <mbedtls_rsa_import_raw>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d1e0      	bne.n	801187a <pk_get_rsapubkey+0x56>
    *p += len;
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118bc:	4413      	add	r3, r2
 80118be:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80118c0:	4630      	mov	r0, r6
 80118c2:	f002 facd 	bl	8013e60 <mbedtls_rsa_complete>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d1d7      	bne.n	801187a <pk_get_rsapubkey+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 80118ca:	4630      	mov	r0, r6
 80118cc:	f002 fc24 	bl	8014118 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d1d2      	bne.n	801187a <pk_get_rsapubkey+0x56>
    if( *p != end )
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	42ab      	cmp	r3, r5
 80118d8:	d0b7      	beq.n	801184a <pk_get_rsapubkey+0x26>
 80118da:	e7b5      	b.n	8011848 <pk_get_rsapubkey+0x24>
 80118dc:	ffffc49a 	.word	0xffffc49a
 80118e0:	ffffc500 	.word	0xffffc500

080118e4 <pk_use_ecparams>:
    if( params->tag == MBEDTLS_ASN1_OID )
 80118e4:	6803      	ldr	r3, [r0, #0]
 80118e6:	2b06      	cmp	r3, #6
{
 80118e8:	b513      	push	{r0, r1, r4, lr}
 80118ea:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 80118ec:	d002      	beq.n	80118f4 <pk_use_ecparams+0x10>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80118ee:	480a      	ldr	r0, [pc, #40]	; (8011918 <pk_use_ecparams+0x34>)
}
 80118f0:	b002      	add	sp, #8
 80118f2:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 80118f4:	f10d 0107 	add.w	r1, sp, #7
 80118f8:	f7ff fdbe 	bl	8011478 <mbedtls_oid_get_ec_grp>
 80118fc:	b948      	cbnz	r0, 8011912 <pk_use_ecparams+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 80118fe:	7823      	ldrb	r3, [r4, #0]
 8011900:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011904:	b10b      	cbz	r3, 801190a <pk_use_ecparams+0x26>
 8011906:	428b      	cmp	r3, r1
 8011908:	d1f1      	bne.n	80118ee <pk_use_ecparams+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 801190a:	4620      	mov	r0, r4
 801190c:	f7fe fe86 	bl	801061c <mbedtls_ecp_group_load>
 8011910:	e7ee      	b.n	80118f0 <pk_use_ecparams+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8011912:	4802      	ldr	r0, [pc, #8]	; (801191c <pk_use_ecparams+0x38>)
 8011914:	e7ec      	b.n	80118f0 <pk_use_ecparams+0xc>
 8011916:	bf00      	nop
 8011918:	ffffc300 	.word	0xffffc300
 801191c:	ffffc600 	.word	0xffffc600

08011920 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	b08e      	sub	sp, #56	; 0x38
 8011924:	460c      	mov	r4, r1
 8011926:	4615      	mov	r5, r2
 8011928:	4606      	mov	r6, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 801192a:	a80b      	add	r0, sp, #44	; 0x2c
 801192c:	f7f9 fd6f 	bl	800b40e <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011930:	2330      	movs	r3, #48	; 0x30
 8011932:	aa09      	add	r2, sp, #36	; 0x24
 8011934:	1961      	adds	r1, r4, r5
 8011936:	a80a      	add	r0, sp, #40	; 0x28
    p = (unsigned char *) key;
 8011938:	940a      	str	r4, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801193a:	f7f9 fa6b 	bl	800ae14 <mbedtls_asn1_get_tag>
 801193e:	b120      	cbz	r0, 801194a <pk_parse_key_pkcs1_der+0x2a>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8011940:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 8011944:	4620      	mov	r0, r4
 8011946:	b00e      	add	sp, #56	; 0x38
 8011948:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 801194a:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
 801194e:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8011950:	aa08      	add	r2, sp, #32
 8011952:	4629      	mov	r1, r5
 8011954:	a80a      	add	r0, sp, #40	; 0x28
 8011956:	f7f9 fa71 	bl	800ae3c <mbedtls_asn1_get_int>
 801195a:	2800      	cmp	r0, #0
 801195c:	d1f0      	bne.n	8011940 <pk_parse_key_pkcs1_der+0x20>
    if( version != 0 )
 801195e:	9b08      	ldr	r3, [sp, #32]
 8011960:	2b00      	cmp	r3, #0
 8011962:	f040 80ca 	bne.w	8011afa <pk_parse_key_pkcs1_der+0x1da>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011966:	2302      	movs	r3, #2
 8011968:	aa09      	add	r2, sp, #36	; 0x24
 801196a:	4629      	mov	r1, r5
 801196c:	a80a      	add	r0, sp, #40	; 0x28
 801196e:	f7f9 fa51 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011972:	4604      	mov	r4, r0
 8011974:	2800      	cmp	r0, #0
 8011976:	f040 80af 	bne.w	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801197a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 801197e:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8011982:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8011986:	9000      	str	r0, [sp, #0]
 8011988:	4603      	mov	r3, r0
 801198a:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 801198e:	4630      	mov	r0, r6
 8011990:	f002 fa24 	bl	8013ddc <mbedtls_rsa_import_raw>
 8011994:	4604      	mov	r4, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	f040 809e 	bne.w	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 801199c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119a0:	4413      	add	r3, r2
 80119a2:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80119a4:	aa09      	add	r2, sp, #36	; 0x24
 80119a6:	2302      	movs	r3, #2
 80119a8:	4629      	mov	r1, r5
 80119aa:	a80a      	add	r0, sp, #40	; 0x28
 80119ac:	f7f9 fa32 	bl	800ae14 <mbedtls_asn1_get_tag>
 80119b0:	4604      	mov	r4, r0
 80119b2:	2800      	cmp	r0, #0
 80119b4:	f040 8090 	bne.w	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80119b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119ba:	9306      	str	r3, [sp, #24]
 80119bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119be:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80119c2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80119c6:	e9cd 0000 	strd	r0, r0, [sp]
 80119ca:	4603      	mov	r3, r0
 80119cc:	4602      	mov	r2, r0
 80119ce:	4601      	mov	r1, r0
 80119d0:	4630      	mov	r0, r6
 80119d2:	f002 fa03 	bl	8013ddc <mbedtls_rsa_import_raw>
 80119d6:	4604      	mov	r4, r0
 80119d8:	2800      	cmp	r0, #0
 80119da:	d17d      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 80119dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119e0:	4413      	add	r3, r2
 80119e2:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80119e4:	aa09      	add	r2, sp, #36	; 0x24
 80119e6:	2302      	movs	r3, #2
 80119e8:	4629      	mov	r1, r5
 80119ea:	a80a      	add	r0, sp, #40	; 0x28
 80119ec:	f7f9 fa12 	bl	800ae14 <mbedtls_asn1_get_tag>
 80119f0:	4604      	mov	r4, r0
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d170      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f8:	9304      	str	r3, [sp, #16]
 80119fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119fc:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8011a00:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011a04:	e9cd 0000 	strd	r0, r0, [sp]
 8011a08:	4603      	mov	r3, r0
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	4601      	mov	r1, r0
 8011a0e:	4630      	mov	r0, r6
 8011a10:	f002 f9e4 	bl	8013ddc <mbedtls_rsa_import_raw>
 8011a14:	4604      	mov	r4, r0
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d15e      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 8011a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a1e:	4413      	add	r3, r2
 8011a20:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011a22:	aa09      	add	r2, sp, #36	; 0x24
 8011a24:	2302      	movs	r3, #2
 8011a26:	4629      	mov	r1, r5
 8011a28:	a80a      	add	r0, sp, #40	; 0x28
 8011a2a:	f7f9 f9f3 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d151      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8011a34:	2200      	movs	r2, #0
 8011a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a38:	9300      	str	r3, [sp, #0]
 8011a3a:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8011a3e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011a42:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f002 f9c6 	bl	8013ddc <mbedtls_rsa_import_raw>
 8011a50:	4604      	mov	r4, r0
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d140      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 8011a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a5a:	4413      	add	r3, r2
 8011a5c:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011a5e:	aa09      	add	r2, sp, #36	; 0x24
 8011a60:	2302      	movs	r3, #2
 8011a62:	4629      	mov	r1, r5
 8011a64:	a80a      	add	r0, sp, #40	; 0x28
 8011a66:	f7f9 f9d5 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d133      	bne.n	8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8011a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a72:	9302      	str	r3, [sp, #8]
 8011a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a76:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8011a7a:	e9cd 0300 	strd	r0, r3, [sp]
 8011a7e:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8011a82:	4603      	mov	r3, r0
 8011a84:	4602      	mov	r2, r0
 8011a86:	4601      	mov	r1, r0
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f002 f9a7 	bl	8013ddc <mbedtls_rsa_import_raw>
 8011a8e:	4604      	mov	r4, r0
 8011a90:	bb10      	cbnz	r0, 8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    p += len;
 8011a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8011a96:	4630      	mov	r0, r6
    p += len;
 8011a98:	4413      	add	r3, r2
 8011a9a:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8011a9c:	f002 f9e0 	bl	8013e60 <mbedtls_rsa_complete>
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	b9c8      	cbnz	r0, 8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 8011aa4:	aa0b      	add	r2, sp, #44	; 0x2c
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	a80a      	add	r0, sp, #40	; 0x28
 8011aaa:	f7f9 f9eb 	bl	800ae84 <mbedtls_asn1_get_mpi>
 8011aae:	4604      	mov	r4, r0
 8011ab0:	b990      	cbnz	r0, 8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
 8011ab2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	a80a      	add	r0, sp, #40	; 0x28
 8011ab8:	f7f9 f9e4 	bl	800ae84 <mbedtls_asn1_get_mpi>
 8011abc:	4604      	mov	r4, r0
 8011abe:	b958      	cbnz	r0, 8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 8011ac0:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	a80a      	add	r0, sp, #40	; 0x28
 8011ac6:	f7f9 f9dd 	bl	800ae84 <mbedtls_asn1_get_mpi>
 8011aca:	4604      	mov	r4, r0
 8011acc:	b920      	cbnz	r0, 8011ad8 <pk_parse_key_pkcs1_der+0x1b8>
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8011ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ad0:	4b0b      	ldr	r3, [pc, #44]	; (8011b00 <pk_parse_key_pkcs1_der+0x1e0>)
 8011ad2:	42aa      	cmp	r2, r5
 8011ad4:	bf18      	it	ne
 8011ad6:	461c      	movne	r4, r3
    mbedtls_mpi_free( &T );
 8011ad8:	a80b      	add	r0, sp, #44	; 0x2c
 8011ada:	f7f9 fc9e 	bl	800b41a <mbedtls_mpi_free>
    if( ret != 0 )
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	f43f af30 	beq.w	8011944 <pk_parse_key_pkcs1_der+0x24>
        if( ( ret & 0xff80 ) == 0 )
 8011ae4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011ae8:	421c      	tst	r4, r3
        mbedtls_rsa_free( rsa );
 8011aea:	4630      	mov	r0, r6
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 8011aec:	bf0c      	ite	eq
 8011aee:	f5a4 5474 	subeq.w	r4, r4, #15616	; 0x3d00
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 8011af2:	4c04      	ldrne	r4, [pc, #16]	; (8011b04 <pk_parse_key_pkcs1_der+0x1e4>)
        mbedtls_rsa_free( rsa );
 8011af4:	f002 ffcc 	bl	8014a90 <mbedtls_rsa_free>
 8011af8:	e724      	b.n	8011944 <pk_parse_key_pkcs1_der+0x24>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8011afa:	4c03      	ldr	r4, [pc, #12]	; (8011b08 <pk_parse_key_pkcs1_der+0x1e8>)
 8011afc:	e722      	b.n	8011944 <pk_parse_key_pkcs1_der+0x24>
 8011afe:	bf00      	nop
 8011b00:	ffffc29a 	.word	0xffffc29a
 8011b04:	ffffc300 	.word	0xffffc300
 8011b08:	ffffc280 	.word	0xffffc280

08011b0c <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 8011b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b0e:	b089      	sub	sp, #36	; 0x24
 8011b10:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8011b12:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011b14:	2330      	movs	r3, #48	; 0x30
    unsigned char *end = p + keylen;
 8011b16:	4411      	add	r1, r2
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011b18:	a804      	add	r0, sp, #16
 8011b1a:	aa03      	add	r2, sp, #12
 8011b1c:	f7f9 f97a 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011b20:	b120      	cbz	r0, 8011b2c <pk_parse_key_sec1_der+0x20>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8011b22:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 8011b26:	4620      	mov	r0, r4
 8011b28:	b009      	add	sp, #36	; 0x24
 8011b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8011b2c:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 8011b30:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8011b32:	aa02      	add	r2, sp, #8
 8011b34:	4639      	mov	r1, r7
 8011b36:	a804      	add	r0, sp, #16
 8011b38:	f7f9 f980 	bl	800ae3c <mbedtls_asn1_get_int>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d1f0      	bne.n	8011b22 <pk_parse_key_sec1_der+0x16>
    if( version != 1 )
 8011b40:	9b02      	ldr	r3, [sp, #8]
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	f040 8098 	bne.w	8011c78 <pk_parse_key_sec1_der+0x16c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8011b48:	2304      	movs	r3, #4
 8011b4a:	aa03      	add	r2, sp, #12
 8011b4c:	4639      	mov	r1, r7
 8011b4e:	a804      	add	r0, sp, #16
 8011b50:	f7f9 f960 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d1e4      	bne.n	8011b22 <pk_parse_key_sec1_der+0x16>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 8011b58:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8011b5c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7f9 fd9e 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8011b66:	4604      	mov	r4, r0
 8011b68:	b128      	cbz	r0, 8011b76 <pk_parse_key_sec1_der+0x6a>
        mbedtls_ecp_keypair_free( eck );
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	f7fd fb7c 	bl	800f268 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8011b70:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 8011b74:	e7d7      	b.n	8011b26 <pk_parse_key_sec1_der+0x1a>
    p += len;
 8011b76:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8011b7a:	4413      	add	r3, r2
    if( p != end )
 8011b7c:	42bb      	cmp	r3, r7
    p += len;
 8011b7e:	9304      	str	r3, [sp, #16]
    if( p != end )
 8011b80:	d034      	beq.n	8011bec <pk_parse_key_sec1_der+0xe0>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011b82:	23a0      	movs	r3, #160	; 0xa0
 8011b84:	aa03      	add	r2, sp, #12
 8011b86:	4639      	mov	r1, r7
 8011b88:	a804      	add	r0, sp, #16
 8011b8a:	f7f9 f943 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011b8e:	4604      	mov	r4, r0
 8011b90:	bb48      	cbnz	r0, 8011be6 <pk_parse_key_sec1_der+0xda>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8011b92:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    if ( end - *p < 1 )
 8011b96:	2a00      	cmp	r2, #0
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8011b98:	eb03 0402 	add.w	r4, r3, r2
    if ( end - *p < 1 )
 8011b9c:	dd1f      	ble.n	8011bde <pk_parse_key_sec1_der+0xd2>
    params->tag = **p;
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
 8011ba2:	2b06      	cmp	r3, #6
 8011ba4:	d11d      	bne.n	8011be2 <pk_parse_key_sec1_der+0xd6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 8011ba6:	aa06      	add	r2, sp, #24
 8011ba8:	4621      	mov	r1, r4
 8011baa:	a804      	add	r0, sp, #16
 8011bac:	f7f9 f932 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011bb0:	b160      	cbz	r0, 8011bcc <pk_parse_key_sec1_der+0xc0>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8011bb2:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 8011bb6:	d105      	bne.n	8011bc4 <pk_parse_key_sec1_der+0xb8>
 8011bb8:	4629      	mov	r1, r5
 8011bba:	a805      	add	r0, sp, #20
 8011bbc:	f7ff fe92 	bl	80118e4 <pk_use_ecparams>
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	b198      	cbz	r0, 8011bec <pk_parse_key_sec1_der+0xe0>
        mbedtls_ecp_keypair_free( eck );
 8011bc4:	4628      	mov	r0, r5
 8011bc6:	f7fd fb4f 	bl	800f268 <mbedtls_ecp_keypair_free>
        return( ret );
 8011bca:	e7ac      	b.n	8011b26 <pk_parse_key_sec1_der+0x1a>
    params->p = *p;
 8011bcc:	9b04      	ldr	r3, [sp, #16]
    *p += params->len;
 8011bce:	9a06      	ldr	r2, [sp, #24]
    params->p = *p;
 8011bd0:	9307      	str	r3, [sp, #28]
    *p += params->len;
 8011bd2:	4413      	add	r3, r2
    if( *p != end )
 8011bd4:	429c      	cmp	r4, r3
    *p += params->len;
 8011bd6:	9304      	str	r3, [sp, #16]
    if( *p != end )
 8011bd8:	d0ee      	beq.n	8011bb8 <pk_parse_key_sec1_der+0xac>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8011bda:	4c29      	ldr	r4, [pc, #164]	; (8011c80 <pk_parse_key_sec1_der+0x174>)
 8011bdc:	e7f2      	b.n	8011bc4 <pk_parse_key_sec1_der+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8011bde:	4c29      	ldr	r4, [pc, #164]	; (8011c84 <pk_parse_key_sec1_der+0x178>)
 8011be0:	e7f0      	b.n	8011bc4 <pk_parse_key_sec1_der+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8011be2:	4c29      	ldr	r4, [pc, #164]	; (8011c88 <pk_parse_key_sec1_der+0x17c>)
 8011be4:	e7ee      	b.n	8011bc4 <pk_parse_key_sec1_der+0xb8>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8011be6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8011bea:	d1be      	bne.n	8011b6a <pk_parse_key_sec1_der+0x5e>
    if( p != end )
 8011bec:	9b04      	ldr	r3, [sp, #16]
 8011bee:	42bb      	cmp	r3, r7
 8011bf0:	d02b      	beq.n	8011c4a <pk_parse_key_sec1_der+0x13e>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011bf2:	23a1      	movs	r3, #161	; 0xa1
 8011bf4:	aa03      	add	r2, sp, #12
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	a804      	add	r0, sp, #16
 8011bfa:	f7f9 f90b 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011bfe:	4604      	mov	r4, r0
 8011c00:	bb00      	cbnz	r0, 8011c44 <pk_parse_key_sec1_der+0x138>
            end2 = p + len;
 8011c02:	e9dd 3403 	ldrd	r3, r4, [sp, #12]
 8011c06:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 8011c08:	aa03      	add	r2, sp, #12
 8011c0a:	4621      	mov	r1, r4
 8011c0c:	a804      	add	r0, sp, #16
 8011c0e:	f7f9 f94c 	bl	800aeaa <mbedtls_asn1_get_bitstring_null>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d185      	bne.n	8011b22 <pk_parse_key_sec1_der+0x16>
            if( p + len != end2 )
 8011c16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011c1a:	18d1      	adds	r1, r2, r3
 8011c1c:	428c      	cmp	r4, r1
 8011c1e:	d12d      	bne.n	8011c7c <pk_parse_key_sec1_der+0x170>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8011c20:	f105 0788 	add.w	r7, r5, #136	; 0x88
 8011c24:	4639      	mov	r1, r7
 8011c26:	4628      	mov	r0, r5
 8011c28:	f7fd ff26 	bl	800fa78 <mbedtls_ecp_point_read_binary>
 8011c2c:	b918      	cbnz	r0, 8011c36 <pk_parse_key_sec1_der+0x12a>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8011c2e:	4639      	mov	r1, r7
 8011c30:	4628      	mov	r0, r5
 8011c32:	f7fd ff61 	bl	800faf8 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 8011c36:	9404      	str	r4, [sp, #16]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 8011c38:	b1a8      	cbz	r0, 8011c66 <pk_parse_key_sec1_der+0x15a>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 8011c3a:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 8011c3e:	d004      	beq.n	8011c4a <pk_parse_key_sec1_der+0x13e>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8011c40:	4c12      	ldr	r4, [pc, #72]	; (8011c8c <pk_parse_key_sec1_der+0x180>)
 8011c42:	e770      	b.n	8011b26 <pk_parse_key_sec1_der+0x1a>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8011c44:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8011c48:	d18f      	bne.n	8011b6a <pk_parse_key_sec1_der+0x5e>
    if( ! pubkey_done &&
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	e9cd 3300 	strd	r3, r3, [sp]
 8011c50:	4632      	mov	r2, r6
 8011c52:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011c56:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7fe f94a 	bl	800fef4 <mbedtls_ecp_mul>
 8011c60:	4604      	mov	r4, r0
 8011c62:	2800      	cmp	r0, #0
 8011c64:	d181      	bne.n	8011b6a <pk_parse_key_sec1_der+0x5e>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 8011c66:	4631      	mov	r1, r6
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7fd fffd 	bl	800fc68 <mbedtls_ecp_check_privkey>
 8011c6e:	4604      	mov	r4, r0
 8011c70:	2800      	cmp	r0, #0
 8011c72:	f43f af58 	beq.w	8011b26 <pk_parse_key_sec1_der+0x1a>
 8011c76:	e7a5      	b.n	8011bc4 <pk_parse_key_sec1_der+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8011c78:	4c05      	ldr	r4, [pc, #20]	; (8011c90 <pk_parse_key_sec1_der+0x184>)
 8011c7a:	e754      	b.n	8011b26 <pk_parse_key_sec1_der+0x1a>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8011c7c:	4c00      	ldr	r4, [pc, #0]	; (8011c80 <pk_parse_key_sec1_der+0x174>)
 8011c7e:	e752      	b.n	8011b26 <pk_parse_key_sec1_der+0x1a>
 8011c80:	ffffc29a 	.word	0xffffc29a
 8011c84:	ffffc2a0 	.word	0xffffc2a0
 8011c88:	ffffc29e 	.word	0xffffc29e
 8011c8c:	ffffc300 	.word	0xffffc300
 8011c90:	ffffc280 	.word	0xffffc280

08011c94 <pk_get_pk_alg>:
{
 8011c94:	b530      	push	{r4, r5, lr}
 8011c96:	4615      	mov	r5, r2
 8011c98:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	e9c3 2200 	strd	r2, r2, [r3]
 8011ca0:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8011ca2:	aa01      	add	r2, sp, #4
{
 8011ca4:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8011ca6:	f7f9 f914 	bl	800aed2 <mbedtls_asn1_get_alg>
 8011caa:	b118      	cbz	r0, 8011cb4 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8011cac:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 8011cb0:	b005      	add	sp, #20
 8011cb2:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	a801      	add	r0, sp, #4
 8011cb8:	f7ff fbc4 	bl	8011444 <mbedtls_oid_get_pk_alg>
 8011cbc:	b960      	cbnz	r0, 8011cd8 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8011cbe:	782b      	ldrb	r3, [r5, #0]
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d1f5      	bne.n	8011cb0 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8011cc4:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8011cc6:	2b05      	cmp	r3, #5
 8011cc8:	d000      	beq.n	8011ccc <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8011cca:	b93b      	cbnz	r3, 8011cdc <pk_get_pk_alg+0x48>
 8011ccc:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8011cce:	4b04      	ldr	r3, [pc, #16]	; (8011ce0 <pk_get_pk_alg+0x4c>)
 8011cd0:	2a00      	cmp	r2, #0
 8011cd2:	bf18      	it	ne
 8011cd4:	4618      	movne	r0, r3
 8011cd6:	e7eb      	b.n	8011cb0 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8011cd8:	4802      	ldr	r0, [pc, #8]	; (8011ce4 <pk_get_pk_alg+0x50>)
 8011cda:	e7e9      	b.n	8011cb0 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8011cdc:	4800      	ldr	r0, [pc, #0]	; (8011ce0 <pk_get_pk_alg+0x4c>)
 8011cde:	e7e7      	b.n	8011cb0 <pk_get_pk_alg+0x1c>
 8011ce0:	ffffc580 	.word	0xffffc580
 8011ce4:	ffffc380 	.word	0xffffc380

08011ce8 <mbedtls_pk_parse_subpubkey>:
{
 8011ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cec:	b086      	sub	sp, #24
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8011cee:	2300      	movs	r3, #0
{
 8011cf0:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8011cf2:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011cf6:	aa02      	add	r2, sp, #8
 8011cf8:	2330      	movs	r3, #48	; 0x30
{
 8011cfa:	4607      	mov	r7, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011cfc:	f7f9 f88a 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011d00:	b128      	cbz	r0, 8011d0e <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8011d02:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
 8011d06:	4620      	mov	r0, r4
 8011d08:	b006      	add	sp, #24
 8011d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 8011d0e:	9b02      	ldr	r3, [sp, #8]
 8011d10:	683e      	ldr	r6, [r7, #0]
 8011d12:	441e      	add	r6, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8011d14:	f10d 0207 	add.w	r2, sp, #7
 8011d18:	ab03      	add	r3, sp, #12
 8011d1a:	4631      	mov	r1, r6
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7ff ffb9 	bl	8011c94 <pk_get_pk_alg>
 8011d22:	4604      	mov	r4, r0
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d1ee      	bne.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8011d28:	aa02      	add	r2, sp, #8
 8011d2a:	4631      	mov	r1, r6
 8011d2c:	4638      	mov	r0, r7
 8011d2e:	f7f9 f8bc 	bl	800aeaa <mbedtls_asn1_get_bitstring_null>
 8011d32:	b110      	cbz	r0, 8011d3a <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8011d34:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
 8011d38:	e7e5      	b.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	9a02      	ldr	r2, [sp, #8]
 8011d3e:	4413      	add	r3, r2
 8011d40:	429e      	cmp	r6, r3
 8011d42:	d144      	bne.n	8011dce <mbedtls_pk_parse_subpubkey+0xe6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8011d44:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011d48:	f7ff fbec 	bl	8011524 <mbedtls_pk_info_from_type>
 8011d4c:	4601      	mov	r1, r0
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	d03f      	beq.n	8011dd2 <mbedtls_pk_parse_subpubkey+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8011d52:	4640      	mov	r0, r8
 8011d54:	f7ff fbf2 	bl	801153c <mbedtls_pk_setup>
 8011d58:	4604      	mov	r4, r0
 8011d5a:	2800      	cmp	r0, #0
 8011d5c:	d1d3      	bne.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 8011d5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d10c      	bne.n	8011d80 <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 8011d66:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4638      	mov	r0, r7
 8011d6e:	f7ff fd59 	bl	8011824 <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 8011d72:	4605      	mov	r5, r0
 8011d74:	b320      	cbz	r0, 8011dc0 <mbedtls_pk_parse_subpubkey+0xd8>
        mbedtls_pk_free( pk );
 8011d76:	4640      	mov	r0, r8
 8011d78:	f7ff fbc4 	bl	8011504 <mbedtls_pk_free>
 8011d7c:	462c      	mov	r4, r5
 8011d7e:	e7c2      	b.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 8011d80:	3b02      	subs	r3, #2
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d821      	bhi.n	8011dca <mbedtls_pk_parse_subpubkey+0xe2>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 8011d86:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011d8a:	a803      	add	r0, sp, #12
 8011d8c:	f7ff fdaa 	bl	80118e4 <pk_use_ecparams>
        if( ret == 0 )
 8011d90:	4605      	mov	r5, r0
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d1ef      	bne.n	8011d76 <mbedtls_pk_parse_subpubkey+0x8e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 8011d96:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	f109 0a88 	add.w	sl, r9, #136	; 0x88
 8011da0:	1ab3      	subs	r3, r6, r2
 8011da2:	4651      	mov	r1, sl
 8011da4:	4648      	mov	r0, r9
 8011da6:	f7fd fe67 	bl	800fa78 <mbedtls_ecp_point_read_binary>
 8011daa:	4605      	mov	r5, r0
 8011dac:	b920      	cbnz	r0, 8011db8 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8011dae:	4651      	mov	r1, sl
 8011db0:	4648      	mov	r0, r9
 8011db2:	f7fd fea1 	bl	800faf8 <mbedtls_ecp_check_pubkey>
 8011db6:	4605      	mov	r5, r0
    *p = (unsigned char *) end;
 8011db8:	603e      	str	r6, [r7, #0]
    if( ret == 0 && *p != end )
 8011dba:	2d00      	cmp	r5, #0
 8011dbc:	d0a3      	beq.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
 8011dbe:	e7da      	b.n	8011d76 <mbedtls_pk_parse_subpubkey+0x8e>
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	42b3      	cmp	r3, r6
 8011dc4:	d09f      	beq.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 8011dc6:	4d04      	ldr	r5, [pc, #16]	; (8011dd8 <mbedtls_pk_parse_subpubkey+0xf0>)
 8011dc8:	e7d5      	b.n	8011d76 <mbedtls_pk_parse_subpubkey+0x8e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8011dca:	4d04      	ldr	r5, [pc, #16]	; (8011ddc <mbedtls_pk_parse_subpubkey+0xf4>)
 8011dcc:	e7d3      	b.n	8011d76 <mbedtls_pk_parse_subpubkey+0x8e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 8011dce:	4c02      	ldr	r4, [pc, #8]	; (8011dd8 <mbedtls_pk_parse_subpubkey+0xf0>)
 8011dd0:	e799      	b.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8011dd2:	4c02      	ldr	r4, [pc, #8]	; (8011ddc <mbedtls_pk_parse_subpubkey+0xf4>)
 8011dd4:	e797      	b.n	8011d06 <mbedtls_pk_parse_subpubkey+0x1e>
 8011dd6:	bf00      	nop
 8011dd8:	ffffc49a 	.word	0xffffc49a
 8011ddc:	ffffc380 	.word	0xffffc380

08011de0 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8011de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	b089      	sub	sp, #36	; 0x24
 8011de6:	460d      	mov	r5, r1
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 8011de8:	4616      	mov	r6, r2
 8011dea:	2a00      	cmp	r2, #0
 8011dec:	d069      	beq.n	8011ec2 <mbedtls_pk_parse_key+0xe2>
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8011dee:	2300      	movs	r3, #0
    unsigned char *p = (unsigned char *) key;
 8011df0:	9104      	str	r1, [sp, #16]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8011df2:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8011df6:	aa03      	add	r2, sp, #12
 8011df8:	2330      	movs	r3, #48	; 0x30
 8011dfa:	4431      	add	r1, r6
 8011dfc:	a804      	add	r0, sp, #16
 8011dfe:	f7f9 f809 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011e02:	b138      	cbz	r0, 8011e14 <mbedtls_pk_parse_key+0x34>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8011e04:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d13b      	bne.n	8011e84 <mbedtls_pk_parse_key+0xa4>
        return( 0 );
 8011e0c:	2700      	movs	r7, #0
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
 8011e0e:	4638      	mov	r0, r7
 8011e10:	b009      	add	sp, #36	; 0x24
 8011e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8011e14:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 8011e18:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8011e1a:	aa02      	add	r2, sp, #8
 8011e1c:	4639      	mov	r1, r7
 8011e1e:	a804      	add	r0, sp, #16
 8011e20:	f7f9 f80c 	bl	800ae3c <mbedtls_asn1_get_int>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d1ed      	bne.n	8011e04 <mbedtls_pk_parse_key+0x24>
    if( version != 0 )
 8011e28:	9b02      	ldr	r3, [sp, #8]
 8011e2a:	bb5b      	cbnz	r3, 8011e84 <mbedtls_pk_parse_key+0xa4>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8011e2c:	ab05      	add	r3, sp, #20
 8011e2e:	f10d 0207 	add.w	r2, sp, #7
 8011e32:	4639      	mov	r1, r7
 8011e34:	a804      	add	r0, sp, #16
 8011e36:	f7ff ff2d 	bl	8011c94 <pk_get_pk_alg>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	d1e2      	bne.n	8011e04 <mbedtls_pk_parse_key+0x24>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8011e3e:	2304      	movs	r3, #4
 8011e40:	aa03      	add	r2, sp, #12
 8011e42:	4639      	mov	r1, r7
 8011e44:	a804      	add	r0, sp, #16
 8011e46:	f7f8 ffe5 	bl	800ae14 <mbedtls_asn1_get_tag>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d1da      	bne.n	8011e04 <mbedtls_pk_parse_key+0x24>
    if( len < 1 )
 8011e4e:	9b03      	ldr	r3, [sp, #12]
 8011e50:	b1c3      	cbz	r3, 8011e84 <mbedtls_pk_parse_key+0xa4>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8011e52:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011e56:	f7ff fb65 	bl	8011524 <mbedtls_pk_info_from_type>
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	b190      	cbz	r0, 8011e84 <mbedtls_pk_parse_key+0xa4>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f7ff fb6c 	bl	801153c <mbedtls_pk_setup>
 8011e64:	4607      	mov	r7, r0
 8011e66:	b968      	cbnz	r0, 8011e84 <mbedtls_pk_parse_key+0xa4>
    if( pk_alg == MBEDTLS_PK_RSA )
 8011e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d12a      	bne.n	8011ec6 <mbedtls_pk_parse_key+0xe6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 8011e70:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011e74:	6860      	ldr	r0, [r4, #4]
 8011e76:	f7ff fd53 	bl	8011920 <pk_parse_key_pkcs1_der>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d0c7      	beq.n	8011e0e <mbedtls_pk_parse_key+0x2e>
            mbedtls_pk_free( pk );
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f7ff fb40 	bl	8011504 <mbedtls_pk_free>
    mbedtls_pk_free( pk );
 8011e84:	4620      	mov	r0, r4
 8011e86:	f7ff fb3d 	bl	8011504 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f7ff fb36 	bl	80114fc <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8011e90:	2001      	movs	r0, #1
 8011e92:	f7ff fb47 	bl	8011524 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8011e96:	4601      	mov	r1, r0
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f7ff fb4f 	bl	801153c <mbedtls_pk_setup>
 8011e9e:	b308      	cbz	r0, 8011ee4 <mbedtls_pk_parse_key+0x104>
    mbedtls_pk_free( pk );
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f7ff fb2f 	bl	8011504 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f7ff fb28 	bl	80114fc <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 8011eac:	2002      	movs	r0, #2
 8011eae:	f7ff fb39 	bl	8011524 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8011eb2:	4601      	mov	r1, r0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f7ff fb41 	bl	801153c <mbedtls_pk_setup>
 8011eba:	b1d8      	cbz	r0, 8011ef4 <mbedtls_pk_parse_key+0x114>
    mbedtls_pk_free( pk );
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f7ff fb21 	bl	8011504 <mbedtls_pk_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8011ec2:	4f10      	ldr	r7, [pc, #64]	; (8011f04 <mbedtls_pk_parse_key+0x124>)
 8011ec4:	e7a3      	b.n	8011e0e <mbedtls_pk_parse_key+0x2e>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 8011ec6:	3b02      	subs	r3, #2
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d8db      	bhi.n	8011e84 <mbedtls_pk_parse_key+0xa4>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8011ecc:	6861      	ldr	r1, [r4, #4]
 8011ece:	a805      	add	r0, sp, #20
 8011ed0:	f7ff fd08 	bl	80118e4 <pk_use_ecparams>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d1d2      	bne.n	8011e7e <mbedtls_pk_parse_key+0x9e>
 8011ed8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011edc:	6860      	ldr	r0, [r4, #4]
 8011ede:	f7ff fe15 	bl	8011b0c <pk_parse_key_sec1_der>
 8011ee2:	e7ca      	b.n	8011e7a <mbedtls_pk_parse_key+0x9a>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	6860      	ldr	r0, [r4, #4]
 8011eea:	f7ff fd19 	bl	8011920 <pk_parse_key_pkcs1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	d1d6      	bne.n	8011ea0 <mbedtls_pk_parse_key+0xc0>
 8011ef2:	e78b      	b.n	8011e0c <mbedtls_pk_parse_key+0x2c>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 8011ef4:	4632      	mov	r2, r6
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	6860      	ldr	r0, [r4, #4]
 8011efa:	f7ff fe07 	bl	8011b0c <pk_parse_key_sec1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d084      	beq.n	8011e0c <mbedtls_pk_parse_key+0x2c>
 8011f02:	e7db      	b.n	8011ebc <mbedtls_pk_parse_key+0xdc>
 8011f04:	ffffc300 	.word	0xffffc300

08011f08 <mbedtls_pk_parse_public_key>:
/*
 * Parse a public key
 */
int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                         const unsigned char *key, size_t keylen )
{
 8011f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011f0c:	4607      	mov	r7, r0
 8011f0e:	4688      	mov	r8, r1
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( ctx != NULL );
    if( keylen == 0 )
 8011f10:	4615      	mov	r5, r2
 8011f12:	b332      	cbz	r2, 8011f62 <mbedtls_pk_parse_public_key+0x5a>
    }
    mbedtls_pem_free( &pem );
#endif /* MBEDTLS_PEM_PARSE_C */

#if defined(MBEDTLS_RSA_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 8011f14:	2001      	movs	r0, #1
 8011f16:	f7ff fb05 	bl	8011524 <mbedtls_pk_info_from_type>
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	b318      	cbz	r0, 8011f66 <mbedtls_pk_parse_public_key+0x5e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
 8011f1e:	4638      	mov	r0, r7
 8011f20:	f7ff fb0c 	bl	801153c <mbedtls_pk_setup>
 8011f24:	4604      	mov	r4, r0
 8011f26:	b9c0      	cbnz	r0, 8011f5a <mbedtls_pk_parse_public_key+0x52>
        return( ret );

    p = (unsigned char *)key;
 8011f28:	ae02      	add	r6, sp, #8
    ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );
 8011f2a:	4445      	add	r5, r8
    p = (unsigned char *)key;
 8011f2c:	f846 8d04 	str.w	r8, [r6, #-4]!
    ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	4629      	mov	r1, r5
 8011f34:	4630      	mov	r0, r6
 8011f36:	f7ff fc75 	bl	8011824 <pk_get_rsapubkey>
    if( ret == 0 )
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	b168      	cbz	r0, 8011f5a <mbedtls_pk_parse_public_key+0x52>
    {
        return( ret );
    }
    mbedtls_pk_free( ctx );
 8011f3e:	4638      	mov	r0, r7
 8011f40:	f7ff fae0 	bl	8011504 <mbedtls_pk_free>
    if( ret != ( MBEDTLS_ERR_PK_INVALID_PUBKEY + MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
 8011f44:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <mbedtls_pk_parse_public_key+0x64>)
 8011f46:	429c      	cmp	r4, r3
 8011f48:	d107      	bne.n	8011f5a <mbedtls_pk_parse_public_key+0x52>
        return( ret );
    }
#endif /* MBEDTLS_RSA_C */
    p = (unsigned char *) key;

    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 8011f4a:	463a      	mov	r2, r7
 8011f4c:	4629      	mov	r1, r5
 8011f4e:	4630      	mov	r0, r6
    p = (unsigned char *) key;
 8011f50:	f8cd 8004 	str.w	r8, [sp, #4]
    ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
 8011f54:	f7ff fec8 	bl	8011ce8 <mbedtls_pk_parse_subpubkey>
 8011f58:	4604      	mov	r4, r0

    return( ret );
}
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	b002      	add	sp, #8
 8011f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8011f62:	4c03      	ldr	r4, [pc, #12]	; (8011f70 <mbedtls_pk_parse_public_key+0x68>)
 8011f64:	e7f9      	b.n	8011f5a <mbedtls_pk_parse_public_key+0x52>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8011f66:	4c03      	ldr	r4, [pc, #12]	; (8011f74 <mbedtls_pk_parse_public_key+0x6c>)
 8011f68:	e7f7      	b.n	8011f5a <mbedtls_pk_parse_public_key+0x52>
 8011f6a:	bf00      	nop
 8011f6c:	ffffc49e 	.word	0xffffc49e
 8011f70:	ffffc300 	.word	0xffffc300
 8011f74:	ffffc380 	.word	0xffffc380

08011f78 <pk_write_ec_pubkey>:
/*
 * EC public key is an EC point
 */
static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
                               mbedtls_ecp_keypair *ec )
{
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	b0a6      	sub	sp, #152	; 0x98
    int ret;
    size_t len = 0;
 8011f7c:	ab26      	add	r3, sp, #152	; 0x98
{
 8011f7e:	4606      	mov	r6, r0
 8011f80:	460c      	mov	r4, r1
 8011f82:	4610      	mov	r0, r2
    unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];

    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 8011f84:	2185      	movs	r1, #133	; 0x85
    size_t len = 0;
 8011f86:	2200      	movs	r2, #0
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 8011f88:	ad04      	add	r5, sp, #16
    size_t len = 0;
 8011f8a:	f843 2d8c 	str.w	r2, [r3, #-140]!
    if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
 8011f8e:	9101      	str	r1, [sp, #4]
 8011f90:	9500      	str	r5, [sp, #0]
 8011f92:	f100 0188 	add.w	r1, r0, #136	; 0x88
 8011f96:	f7fd fd19 	bl	800f9cc <mbedtls_ecp_point_write_binary>
 8011f9a:	b960      	cbnz	r0, 8011fb6 <pk_write_ec_pubkey+0x3e>
                                        &len, buf, sizeof( buf ) ) ) != 0 )
    {
        return( ret );
    }

    if( *p < start || (size_t)( *p - start ) < len )
 8011f9c:	6830      	ldr	r0, [r6, #0]
 8011f9e:	42a0      	cmp	r0, r4
 8011fa0:	d30b      	bcc.n	8011fba <pk_write_ec_pubkey+0x42>
 8011fa2:	9a03      	ldr	r2, [sp, #12]
 8011fa4:	1b04      	subs	r4, r0, r4
 8011fa6:	4294      	cmp	r4, r2
 8011fa8:	d307      	bcc.n	8011fba <pk_write_ec_pubkey+0x42>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *p -= len;
 8011faa:	1a80      	subs	r0, r0, r2
 8011fac:	6030      	str	r0, [r6, #0]
    memcpy( *p, buf, len );
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f004 fd83 	bl	8016aba <memcpy>

    return( (int) len );
 8011fb4:	9803      	ldr	r0, [sp, #12]
}
 8011fb6:	b026      	add	sp, #152	; 0x98
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8011fba:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 8011fbe:	e7fa      	b.n	8011fb6 <pk_write_ec_pubkey+0x3e>

08011fc0 <pk_write_ec_param.isra.2>:
/*
 * ECParameters ::= CHOICE {
 *   namedCurve         OBJECT IDENTIFIER
 * }
 */
static int pk_write_ec_param( unsigned char **p, unsigned char *start,
 8011fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	460d      	mov	r5, r1
 8011fc6:	4610      	mov	r0, r2
    int ret;
    size_t len = 0;
    const char *oid;
    size_t oid_len;

    if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
 8011fc8:	4669      	mov	r1, sp
 8011fca:	aa01      	add	r2, sp, #4
 8011fcc:	f7ff fa6e 	bl	80114ac <mbedtls_oid_get_oid_by_ec_grp>
 8011fd0:	b928      	cbnz	r0, 8011fde <pk_write_ec_param.isra.2+0x1e>
        return( ret );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
 8011fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fd6:	4629      	mov	r1, r5
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f7f9 f89e 	bl	800b11a <mbedtls_asn1_write_oid>

    return( (int) len );
}
 8011fde:	b003      	add	sp, #12
 8011fe0:	bd30      	pop	{r4, r5, pc}
	...

08011fe4 <mbedtls_pk_write_key_der>:

    return( (int) len );
}

int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
{
 8011fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe8:	4604      	mov	r4, r0
 8011fea:	b087      	sub	sp, #28
 8011fec:	460e      	mov	r6, r1
    int ret;
    unsigned char *c;
    size_t len = 0;

    PK_VALIDATE_RET( key != NULL );
    if( size == 0 )
 8011fee:	b92a      	cbnz	r2, 8011ffc <mbedtls_pk_write_key_der+0x18>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8011ff0:	f06f 046b 	mvn.w	r4, #107	; 0x6b
    else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( (int) len );
}
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	b007      	add	sp, #28
 8011ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c = buf + size;
 8011ffc:	440a      	add	r2, r1
 8011ffe:	9202      	str	r2, [sp, #8]
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
 8012000:	f7ff fab2 	bl	8011568 <mbedtls_pk_get_type>
 8012004:	2801      	cmp	r0, #1
 8012006:	f040 80bd 	bne.w	8012184 <mbedtls_pk_write_key_der+0x1a0>
        mbedtls_mpi_init( &T );
 801200a:	af03      	add	r7, sp, #12
        mbedtls_rsa_context *rsa = mbedtls_pk_rsa( *key );
 801200c:	f8d4 9004 	ldr.w	r9, [r4, #4]
        mbedtls_mpi_init( &T );
 8012010:	4638      	mov	r0, r7
 8012012:	f7f9 f9fc 	bl	800b40e <mbedtls_mpi_init>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, NULL, &T ) ) != 0 ||
 8012016:	2200      	movs	r2, #0
 8012018:	463b      	mov	r3, r7
 801201a:	4611      	mov	r1, r2
 801201c:	4648      	mov	r0, r9
 801201e:	f002 f821 	bl	8014064 <mbedtls_rsa_export_crt>
 8012022:	4604      	mov	r4, r0
 8012024:	2800      	cmp	r0, #0
 8012026:	f040 80ab 	bne.w	8012180 <mbedtls_pk_write_key_der+0x19c>
 801202a:	463a      	mov	r2, r7
 801202c:	4631      	mov	r1, r6
 801202e:	a802      	add	r0, sp, #8
 8012030:	f7f9 f833 	bl	800b09a <mbedtls_asn1_write_mpi>
 8012034:	1e04      	subs	r4, r0, #0
 8012036:	f2c0 80a3 	blt.w	8012180 <mbedtls_pk_write_key_der+0x19c>
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 801203a:	2300      	movs	r3, #0
 801203c:	463a      	mov	r2, r7
 801203e:	4619      	mov	r1, r3
 8012040:	4648      	mov	r0, r9
 8012042:	f002 f80f 	bl	8014064 <mbedtls_rsa_export_crt>
        len += ret;
 8012046:	4625      	mov	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
 8012048:	4604      	mov	r4, r0
 801204a:	2800      	cmp	r0, #0
 801204c:	d176      	bne.n	801213c <mbedtls_pk_write_key_der+0x158>
 801204e:	463a      	mov	r2, r7
 8012050:	4631      	mov	r1, r6
 8012052:	a802      	add	r0, sp, #8
 8012054:	f7f9 f821 	bl	800b09a <mbedtls_asn1_write_mpi>
 8012058:	1e04      	subs	r4, r0, #0
 801205a:	db6f      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 801205c:	2300      	movs	r3, #0
 801205e:	461a      	mov	r2, r3
 8012060:	4639      	mov	r1, r7
 8012062:	4648      	mov	r0, r9
 8012064:	f001 fffe 	bl	8014064 <mbedtls_rsa_export_crt>
        len += ret;
 8012068:	4425      	add	r5, r4
        if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
 801206a:	4604      	mov	r4, r0
 801206c:	2800      	cmp	r0, #0
 801206e:	d165      	bne.n	801213c <mbedtls_pk_write_key_der+0x158>
 8012070:	463a      	mov	r2, r7
 8012072:	4631      	mov	r1, r6
 8012074:	a802      	add	r0, sp, #8
 8012076:	f7f9 f810 	bl	800b09a <mbedtls_asn1_write_mpi>
 801207a:	1e04      	subs	r4, r0, #0
 801207c:	db5e      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 801207e:	2200      	movs	r2, #0
 8012080:	e9cd 2200 	strd	r2, r2, [sp]
 8012084:	463b      	mov	r3, r7
 8012086:	4611      	mov	r1, r2
 8012088:	4648      	mov	r0, r9
 801208a:	f001 ff81 	bl	8013f90 <mbedtls_rsa_export>
        len += ret;
 801208e:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 8012090:	4604      	mov	r4, r0
 8012092:	2800      	cmp	r0, #0
 8012094:	d152      	bne.n	801213c <mbedtls_pk_write_key_der+0x158>
                                         &T, NULL, NULL ) ) != 0 ||
 8012096:	463a      	mov	r2, r7
 8012098:	4631      	mov	r1, r6
 801209a:	a802      	add	r0, sp, #8
 801209c:	f7f8 fffd 	bl	800b09a <mbedtls_asn1_write_mpi>
 80120a0:	1e04      	subs	r4, r0, #0
 80120a2:	db4b      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 80120a4:	f04f 0800 	mov.w	r8, #0
 80120a8:	e9cd 8800 	strd	r8, r8, [sp]
 80120ac:	4643      	mov	r3, r8
 80120ae:	463a      	mov	r2, r7
 80120b0:	4641      	mov	r1, r8
 80120b2:	4648      	mov	r0, r9
 80120b4:	f001 ff6c 	bl	8013f90 <mbedtls_rsa_export>
        len += ret;
 80120b8:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
 80120ba:	4604      	mov	r4, r0
 80120bc:	2800      	cmp	r0, #0
 80120be:	d13d      	bne.n	801213c <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 80120c0:	463a      	mov	r2, r7
 80120c2:	4631      	mov	r1, r6
 80120c4:	a802      	add	r0, sp, #8
 80120c6:	f7f8 ffe8 	bl	800b09a <mbedtls_asn1_write_mpi>
 80120ca:	1e04      	subs	r4, r0, #0
 80120cc:	db36      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 80120ce:	e9cd 7800 	strd	r7, r8, [sp]
 80120d2:	4643      	mov	r3, r8
 80120d4:	4642      	mov	r2, r8
 80120d6:	4641      	mov	r1, r8
 80120d8:	4648      	mov	r0, r9
 80120da:	f001 ff59 	bl	8013f90 <mbedtls_rsa_export>
        len += ret;
 80120de:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 80120e0:	4604      	mov	r4, r0
 80120e2:	bb58      	cbnz	r0, 801213c <mbedtls_pk_write_key_der+0x158>
                                         NULL, &T, NULL ) ) != 0 ||
 80120e4:	463a      	mov	r2, r7
 80120e6:	4631      	mov	r1, r6
 80120e8:	a802      	add	r0, sp, #8
 80120ea:	f7f8 ffd6 	bl	800b09a <mbedtls_asn1_write_mpi>
 80120ee:	1e04      	subs	r4, r0, #0
 80120f0:	db24      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 80120f2:	e9cd 8700 	strd	r8, r7, [sp]
 80120f6:	4643      	mov	r3, r8
 80120f8:	4642      	mov	r2, r8
 80120fa:	4641      	mov	r1, r8
 80120fc:	4648      	mov	r0, r9
 80120fe:	f001 ff47 	bl	8013f90 <mbedtls_rsa_export>
        len += ret;
 8012102:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
 8012104:	4604      	mov	r4, r0
 8012106:	b9c8      	cbnz	r0, 801213c <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, &T ) ) != 0 ||
 8012108:	463a      	mov	r2, r7
 801210a:	4631      	mov	r1, r6
 801210c:	a802      	add	r0, sp, #8
 801210e:	f7f8 ffc4 	bl	800b09a <mbedtls_asn1_write_mpi>
 8012112:	1e04      	subs	r4, r0, #0
 8012114:	db12      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 8012116:	e9cd 8800 	strd	r8, r8, [sp]
 801211a:	4643      	mov	r3, r8
 801211c:	4642      	mov	r2, r8
 801211e:	4639      	mov	r1, r7
 8012120:	4648      	mov	r0, r9
 8012122:	f001 ff35 	bl	8013f90 <mbedtls_rsa_export>
        len += ret;
 8012126:	4425      	add	r5, r4
        if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
 8012128:	4604      	mov	r4, r0
 801212a:	b938      	cbnz	r0, 801213c <mbedtls_pk_write_key_der+0x158>
                                         NULL, NULL, NULL ) ) != 0 ||
 801212c:	463a      	mov	r2, r7
 801212e:	4631      	mov	r1, r6
 8012130:	a802      	add	r0, sp, #8
 8012132:	f7f8 ffb2 	bl	800b09a <mbedtls_asn1_write_mpi>
 8012136:	1e04      	subs	r4, r0, #0
 8012138:	db00      	blt.n	801213c <mbedtls_pk_write_key_der+0x158>
        len += ret;
 801213a:	4425      	add	r5, r4
        mbedtls_mpi_free( &T );
 801213c:	4638      	mov	r0, r7
 801213e:	f7f9 f96c 	bl	800b41a <mbedtls_mpi_free>
        if( ret < 0 )
 8012142:	2c00      	cmp	r4, #0
 8012144:	f6ff af56 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 0 ) );
 8012148:	2200      	movs	r2, #0
 801214a:	4631      	mov	r1, r6
 801214c:	a802      	add	r0, sp, #8
 801214e:	f7f8 ffff 	bl	800b150 <mbedtls_asn1_write_int>
 8012152:	1e04      	subs	r4, r0, #0
 8012154:	f6ff af4e 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
 8012158:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 801215a:	462a      	mov	r2, r5
 801215c:	4631      	mov	r1, r6
 801215e:	a802      	add	r0, sp, #8
 8012160:	f7f8 ff04 	bl	800af6c <mbedtls_asn1_write_len>
 8012164:	1e04      	subs	r4, r0, #0
 8012166:	f6ff af45 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 801216a:	2230      	movs	r2, #48	; 0x30
 801216c:	4631      	mov	r1, r6
 801216e:	a802      	add	r0, sp, #8
 8012170:	f7f8 ff70 	bl	800b054 <mbedtls_asn1_write_tag>
 8012174:	2800      	cmp	r0, #0
 8012176:	f2c0 808e 	blt.w	8012296 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 801217a:	442c      	add	r4, r5
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
 801217c:	4404      	add	r4, r0
 801217e:	e739      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
    size_t len = 0;
 8012180:	2500      	movs	r5, #0
 8012182:	e7db      	b.n	801213c <mbedtls_pk_write_key_der+0x158>
    if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
 8012184:	4620      	mov	r0, r4
 8012186:	f7ff f9ef 	bl	8011568 <mbedtls_pk_get_type>
 801218a:	2802      	cmp	r0, #2
 801218c:	d179      	bne.n	8012282 <mbedtls_pk_write_key_der+0x29e>
        mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
 801218e:	6867      	ldr	r7, [r4, #4]
        MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
 8012190:	4631      	mov	r1, r6
 8012192:	463a      	mov	r2, r7
 8012194:	a802      	add	r0, sp, #8
 8012196:	f7ff feef 	bl	8011f78 <pk_write_ec_pubkey>
 801219a:	1e04      	subs	r4, r0, #0
 801219c:	f6ff af2a 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        if( c - buf < 1 )
 80121a0:	9b02      	ldr	r3, [sp, #8]
 80121a2:	1b9a      	subs	r2, r3, r6
 80121a4:	2a00      	cmp	r2, #0
 80121a6:	f77f af23 	ble.w	8011ff0 <mbedtls_pk_write_key_der+0xc>
        *--c = 0;
 80121aa:	1e5a      	subs	r2, r3, #1
 80121ac:	9202      	str	r2, [sp, #8]
        pub_len += 1;
 80121ae:	1c65      	adds	r5, r4, #1
        *--c = 0;
 80121b0:	2200      	movs	r2, #0
 80121b2:	f803 2c01 	strb.w	r2, [r3, #-1]
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 80121b6:	4631      	mov	r1, r6
 80121b8:	462a      	mov	r2, r5
 80121ba:	a802      	add	r0, sp, #8
 80121bc:	f7f8 fed6 	bl	800af6c <mbedtls_asn1_write_len>
 80121c0:	1e04      	subs	r4, r0, #0
 80121c2:	f6ff af17 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 80121c6:	2203      	movs	r2, #3
 80121c8:	4631      	mov	r1, r6
 80121ca:	a802      	add	r0, sp, #8
 80121cc:	f7f8 ff42 	bl	800b054 <mbedtls_asn1_write_tag>
 80121d0:	2800      	cmp	r0, #0
 80121d2:	db60      	blt.n	8012296 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 80121d4:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
 80121d6:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 80121d8:	462a      	mov	r2, r5
 80121da:	4631      	mov	r1, r6
 80121dc:	a802      	add	r0, sp, #8
 80121de:	f7f8 fec5 	bl	800af6c <mbedtls_asn1_write_len>
 80121e2:	f1b0 0a00 	subs.w	sl, r0, #0
 80121e6:	db4e      	blt.n	8012286 <mbedtls_pk_write_key_der+0x2a2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 80121e8:	22a1      	movs	r2, #161	; 0xa1
 80121ea:	4631      	mov	r1, r6
 80121ec:	a802      	add	r0, sp, #8
 80121ee:	f7f8 ff31 	bl	800b054 <mbedtls_asn1_write_tag>
 80121f2:	f1b0 0900 	subs.w	r9, r0, #0
 80121f6:	db48      	blt.n	801228a <mbedtls_pk_write_key_der+0x2a6>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 80121f8:	783a      	ldrb	r2, [r7, #0]
 80121fa:	4631      	mov	r1, r6
 80121fc:	a802      	add	r0, sp, #8
 80121fe:	f7ff fedf 	bl	8011fc0 <pk_write_ec_param.isra.2>
 8012202:	1e04      	subs	r4, r0, #0
 8012204:	f6ff aef6 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 8012208:	4622      	mov	r2, r4
 801220a:	4631      	mov	r1, r6
 801220c:	a802      	add	r0, sp, #8
 801220e:	f7f8 fead 	bl	800af6c <mbedtls_asn1_write_len>
        MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
 8012212:	46a3      	mov	fp, r4
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
 8012214:	1e04      	subs	r4, r0, #0
 8012216:	f6ff aeed 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
 801221a:	22a0      	movs	r2, #160	; 0xa0
 801221c:	4631      	mov	r1, r6
 801221e:	a802      	add	r0, sp, #8
 8012220:	f7f8 ff18 	bl	800b054 <mbedtls_asn1_write_tag>
 8012224:	f1b0 0800 	subs.w	r8, r0, #0
 8012228:	db31      	blt.n	801228e <mbedtls_pk_write_key_der+0x2aa>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 801222a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801222e:	4631      	mov	r1, r6
 8012230:	a802      	add	r0, sp, #8
 8012232:	f7f8 ff32 	bl	800b09a <mbedtls_asn1_write_mpi>
 8012236:	1e07      	subs	r7, r0, #0
 8012238:	db2b      	blt.n	8012292 <mbedtls_pk_write_key_der+0x2ae>
        *c = MBEDTLS_ASN1_OCTET_STRING;
 801223a:	9b02      	ldr	r3, [sp, #8]
 801223c:	2204      	movs	r2, #4
 801223e:	701a      	strb	r2, [r3, #0]
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 8012240:	4631      	mov	r1, r6
 8012242:	2201      	movs	r2, #1
 8012244:	a802      	add	r0, sp, #8
 8012246:	f7f8 ff83 	bl	800b150 <mbedtls_asn1_write_int>
 801224a:	2800      	cmp	r0, #0
 801224c:	db23      	blt.n	8012296 <mbedtls_pk_write_key_der+0x2b2>
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
 801224e:	4455      	add	r5, sl
        MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
 8012250:	444d      	add	r5, r9
        len += par_len;
 8012252:	445d      	add	r5, fp
 8012254:	4425      	add	r5, r4
 8012256:	4445      	add	r5, r8
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
 8012258:	443d      	add	r5, r7
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
 801225a:	4405      	add	r5, r0
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 801225c:	462a      	mov	r2, r5
 801225e:	4631      	mov	r1, r6
 8012260:	a802      	add	r0, sp, #8
 8012262:	f7f8 fe83 	bl	800af6c <mbedtls_asn1_write_len>
 8012266:	1e04      	subs	r4, r0, #0
 8012268:	f6ff aec4 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 801226c:	2230      	movs	r2, #48	; 0x30
 801226e:	4631      	mov	r1, r6
 8012270:	a802      	add	r0, sp, #8
 8012272:	f7f8 feef 	bl	800b054 <mbedtls_asn1_write_tag>
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
 8012276:	4425      	add	r5, r4
        MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
 8012278:	1e04      	subs	r4, r0, #0
 801227a:	f6ff aebb 	blt.w	8011ff4 <mbedtls_pk_write_key_der+0x10>
 801227e:	442c      	add	r4, r5
    return( (int) len );
 8012280:	e6b8      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8012282:	4c06      	ldr	r4, [pc, #24]	; (801229c <mbedtls_pk_write_key_der+0x2b8>)
 8012284:	e6b6      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 8012286:	4654      	mov	r4, sl
 8012288:	e6b4      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 801228a:	464c      	mov	r4, r9
 801228c:	e6b2      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 801228e:	4644      	mov	r4, r8
 8012290:	e6b0      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 8012292:	463c      	mov	r4, r7
 8012294:	e6ae      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 8012296:	4604      	mov	r4, r0
 8012298:	e6ac      	b.n	8011ff4 <mbedtls_pk_write_key_der+0x10>
 801229a:	bf00      	nop
 801229c:	ffffc680 	.word	0xffffc680

080122a0 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
 80122a0:	4b02      	ldr	r3, [pc, #8]	; (80122ac <mbedtls_platform_zeroize+0xc>)
 80122a2:	460a      	mov	r2, r1
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2100      	movs	r1, #0
 80122a8:	4718      	bx	r3
 80122aa:	bf00      	nop
 80122ac:	20002100 	.word	0x20002100

080122b0 <mbedtls_to_psa_error>:

static psa_status_t mbedtls_to_psa_error( int ret )
{
    /* If there's both a high-level code and low-level code, dispatch on
     * the high-level code. */
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 80122b0:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
 80122b4:	bfbe      	ittt	lt
 80122b6:	4240      	neglt	r0, r0
 80122b8:	f400 40ff 	andlt.w	r0, r0, #32640	; 0x7f80
 80122bc:	4240      	neglt	r0, r0
 80122be:	f110 0f6c 	cmn.w	r0, #108	; 0x6c
 80122c2:	f000 8166 	beq.w	8012592 <mbedtls_to_psa_error+0x2e2>
 80122c6:	f300 80c4 	bgt.w	8012452 <mbedtls_to_psa_error+0x1a2>
 80122ca:	f510 4f89 	cmn.w	r0, #17536	; 0x4480
 80122ce:	d036      	beq.n	801233e <mbedtls_to_psa_error+0x8e>
 80122d0:	dc65      	bgt.n	801239e <mbedtls_to_psa_error+0xee>
 80122d2:	f510 4fa2 	cmn.w	r0, #20736	; 0x5100
 80122d6:	d044      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 80122d8:	dc34      	bgt.n	8012344 <mbedtls_to_psa_error+0x94>
 80122da:	f510 4fc3 	cmn.w	r0, #24960	; 0x6180
 80122de:	d02e      	beq.n	801233e <mbedtls_to_psa_error+0x8e>
 80122e0:	dc18      	bgt.n	8012314 <mbedtls_to_psa_error+0x64>
 80122e2:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 80122e6:	d045      	beq.n	8012374 <mbedtls_to_psa_error+0xc4>
 80122e8:	dc0a      	bgt.n	8012300 <mbedtls_to_psa_error+0x50>
 80122ea:	f510 4fc8 	cmn.w	r0, #25600	; 0x6400
 80122ee:	f000 80e1 	beq.w	80124b4 <mbedtls_to_psa_error+0x204>
 80122f2:	f510 4fc7 	cmn.w	r0, #25472	; 0x6380
 80122f6:	f000 815c 	beq.w	80125b2 <mbedtls_to_psa_error+0x302>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
        case MBEDTLS_ERR_ECP_HW_ACCEL_FAILED:
            return( PSA_ERROR_HARDWARE_FAILURE );

        default:
            return( PSA_ERROR_GENERIC_ERROR );
 80122fa:	f06f 0083 	mvn.w	r0, #131	; 0x83
    }
}
 80122fe:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012300:	f510 4fc5 	cmn.w	r0, #25216	; 0x6280
 8012304:	f000 814f 	beq.w	80125a6 <mbedtls_to_psa_error+0x2f6>
 8012308:	f510 4fc4 	cmn.w	r0, #25088	; 0x6200
 801230c:	d1f5      	bne.n	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_PADDING );
 801230e:	f06f 0095 	mvn.w	r0, #149	; 0x95
 8012312:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012314:	f510 4fa5 	cmn.w	r0, #21120	; 0x5280
 8012318:	f000 80cc 	beq.w	80124b4 <mbedtls_to_psa_error+0x204>
 801231c:	dc08      	bgt.n	8012330 <mbedtls_to_psa_error+0x80>
 801231e:	f510 4fc2 	cmn.w	r0, #24832	; 0x6100
 8012322:	d01e      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 8012324:	f510 4fc1 	cmn.w	r0, #24704	; 0x6080
 8012328:	d1e7      	bne.n	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_SUPPORTED );
 801232a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801232e:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012330:	f510 4fa4 	cmn.w	r0, #20992	; 0x5200
 8012334:	f000 813a 	beq.w	80125ac <mbedtls_to_psa_error+0x2fc>
 8012338:	f510 4fa3 	cmn.w	r0, #20864	; 0x5180
 801233c:	d1dd      	bne.n	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 801233e:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 8012342:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012344:	f510 4f9b 	cmn.w	r0, #19840	; 0x4d80
 8012348:	d0f9      	beq.n	801233e <mbedtls_to_psa_error+0x8e>
 801234a:	dc16      	bgt.n	801237a <mbedtls_to_psa_error+0xca>
 801234c:	f510 4f9e 	cmn.w	r0, #20224	; 0x4f00
 8012350:	f000 811f 	beq.w	8012592 <mbedtls_to_psa_error+0x2e2>
 8012354:	dc08      	bgt.n	8012368 <mbedtls_to_psa_error+0xb8>
 8012356:	f510 4fa1 	cmn.w	r0, #20608	; 0x5080
 801235a:	d0e6      	beq.n	801232a <mbedtls_to_psa_error+0x7a>
 801235c:	f510 4f9f 	cmn.w	r0, #20352	; 0x4f80
 8012360:	d1cb      	bne.n	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 8012362:	f06f 0086 	mvn.w	r0, #134	; 0x86
 8012366:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012368:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 801236c:	d0dd      	beq.n	801232a <mbedtls_to_psa_error+0x7a>
 801236e:	f510 4f9c 	cmn.w	r0, #19968	; 0x4e00
 8012372:	d1c2      	bne.n	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INVALID_SIGNATURE );
 8012374:	f06f 0094 	mvn.w	r0, #148	; 0x94
 8012378:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 801237a:	f510 4f97 	cmn.w	r0, #19328	; 0x4b80
 801237e:	f000 8099 	beq.w	80124b4 <mbedtls_to_psa_error+0x204>
 8012382:	dc05      	bgt.n	8012390 <mbedtls_to_psa_error+0xe0>
 8012384:	f510 4f99 	cmn.w	r0, #19584	; 0x4c80
 8012388:	d0eb      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 801238a:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
 801238e:	e7f0      	b.n	8012372 <mbedtls_to_psa_error+0xc2>
 8012390:	f510 4f8b 	cmn.w	r0, #17792	; 0x4580
 8012394:	f000 808e 	beq.w	80124b4 <mbedtls_to_psa_error+0x204>
 8012398:	f510 4f8a 	cmn.w	r0, #17664	; 0x4500
 801239c:	e7c4      	b.n	8012328 <mbedtls_to_psa_error+0x78>
 801239e:	f510 5f78 	cmn.w	r0, #15872	; 0x3e00
 80123a2:	f000 8103 	beq.w	80125ac <mbedtls_to_psa_error+0x2fc>
 80123a6:	dc27      	bgt.n	80123f8 <mbedtls_to_psa_error+0x148>
 80123a8:	f510 4f83 	cmn.w	r0, #16768	; 0x4180
 80123ac:	f000 8082 	beq.w	80124b4 <mbedtls_to_psa_error+0x204>
 80123b0:	dc12      	bgt.n	80123d8 <mbedtls_to_psa_error+0x128>
 80123b2:	f510 4f86 	cmn.w	r0, #17152	; 0x4300
 80123b6:	f000 80fc 	beq.w	80125b2 <mbedtls_to_psa_error+0x302>
 80123ba:	dc06      	bgt.n	80123ca <mbedtls_to_psa_error+0x11a>
 80123bc:	f510 4f88 	cmn.w	r0, #17408	; 0x4400
 80123c0:	f000 80e7 	beq.w	8012592 <mbedtls_to_psa_error+0x2e2>
 80123c4:	f510 4f87 	cmn.w	r0, #17280	; 0x4380
 80123c8:	e7d3      	b.n	8012372 <mbedtls_to_psa_error+0xc2>
 80123ca:	f510 4f85 	cmn.w	r0, #17024	; 0x4280
 80123ce:	f000 80f0 	beq.w	80125b2 <mbedtls_to_psa_error+0x302>
 80123d2:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 80123d6:	e7c3      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 80123d8:	f510 5f7e 	cmn.w	r0, #16256	; 0x3f80
 80123dc:	d0af      	beq.n	801233e <mbedtls_to_psa_error+0x8e>
 80123de:	dc05      	bgt.n	80123ec <mbedtls_to_psa_error+0x13c>
 80123e0:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 80123e4:	d093      	beq.n	801230e <mbedtls_to_psa_error+0x5e>
 80123e6:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 80123ea:	e7b9      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 80123ec:	f510 5f7c 	cmn.w	r0, #16128	; 0x3f00
 80123f0:	d0b7      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 80123f2:	f510 5f7a 	cmn.w	r0, #16000	; 0x3e80
 80123f6:	e7b3      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 80123f8:	f510 5f6c 	cmn.w	r0, #15104	; 0x3b00
 80123fc:	d0b1      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 80123fe:	dc13      	bgt.n	8012428 <mbedtls_to_psa_error+0x178>
 8012400:	f510 5f72 	cmn.w	r0, #15488	; 0x3c80
 8012404:	d091      	beq.n	801232a <mbedtls_to_psa_error+0x7a>
 8012406:	dc05      	bgt.n	8012414 <mbedtls_to_psa_error+0x164>
 8012408:	f510 5f76 	cmn.w	r0, #15744	; 0x3d80
 801240c:	d0a9      	beq.n	8012362 <mbedtls_to_psa_error+0xb2>
 801240e:	f510 5f74 	cmn.w	r0, #15616	; 0x3d00
 8012412:	e7a5      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 8012414:	f510 5f70 	cmn.w	r0, #15360	; 0x3c00
 8012418:	d003      	beq.n	8012422 <mbedtls_to_psa_error+0x172>
 801241a:	f510 5f6e 	cmn.w	r0, #15232	; 0x3b80
 801241e:	f47f af6c 	bne.w	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_NOT_PERMITTED );
 8012422:	f06f 0084 	mvn.w	r0, #132	; 0x84
 8012426:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012428:	f510 5f66 	cmn.w	r0, #14720	; 0x3980
 801242c:	f43f af7d 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 8012430:	dc06      	bgt.n	8012440 <mbedtls_to_psa_error+0x190>
 8012432:	f510 5f6a 	cmn.w	r0, #14976	; 0x3a80
 8012436:	f43f af78 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 801243a:	f510 5f68 	cmn.w	r0, #14848	; 0x3a00
 801243e:	e773      	b.n	8012328 <mbedtls_to_psa_error+0x78>
 8012440:	f510 5f62 	cmn.w	r0, #14464	; 0x3880
 8012444:	d036      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 8012446:	f110 0f7a 	cmn.w	r0, #122	; 0x7a
 801244a:	d033      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 801244c:	f510 5f64 	cmn.w	r0, #14592	; 0x3900
 8012450:	e78f      	b.n	8012372 <mbedtls_to_psa_error+0xc2>
 8012452:	f110 0f27 	cmn.w	r0, #39	; 0x27
 8012456:	d02d      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 8012458:	dc52      	bgt.n	8012500 <mbedtls_to_psa_error+0x250>
 801245a:	f110 0f38 	cmn.w	r0, #56	; 0x38
 801245e:	f43f af64 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 8012462:	dc2a      	bgt.n	80124ba <mbedtls_to_psa_error+0x20a>
 8012464:	f110 0f60 	cmn.w	r0, #96	; 0x60
 8012468:	f43f af7b 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 801246c:	dc10      	bgt.n	8012490 <mbedtls_to_psa_error+0x1e0>
 801246e:	f110 0f66 	cmn.w	r0, #102	; 0x66
 8012472:	f43f af76 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 8012476:	dc05      	bgt.n	8012484 <mbedtls_to_psa_error+0x1d4>
 8012478:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
 801247c:	f43f af5f 	beq.w	801233e <mbedtls_to_psa_error+0x8e>
 8012480:	3068      	adds	r0, #104	; 0x68
 8012482:	e76d      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 8012484:	f110 0f64 	cmn.w	r0, #100	; 0x64
 8012488:	f43f af6b 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 801248c:	3062      	adds	r0, #98	; 0x62
 801248e:	e767      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 8012490:	f110 0f3c 	cmn.w	r0, #60	; 0x3c
 8012494:	dc08      	bgt.n	80124a8 <mbedtls_to_psa_error+0x1f8>
 8012496:	f110 0f3d 	cmn.w	r0, #61	; 0x3d
 801249a:	da02      	bge.n	80124a2 <mbedtls_to_psa_error+0x1f2>
 801249c:	3040      	adds	r0, #64	; 0x40
 801249e:	f47f af2c 	bne.w	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 80124a2:	f06f 0093 	mvn.w	r0, #147	; 0x93
 80124a6:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 80124a8:	f110 0f3a 	cmn.w	r0, #58	; 0x3a
 80124ac:	d0f9      	beq.n	80124a2 <mbedtls_to_psa_error+0x1f2>
 80124ae:	3039      	adds	r0, #57	; 0x39
 80124b0:	f47f af23 	bne.w	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_HARDWARE_FAILURE );
 80124b4:	f06f 0092 	mvn.w	r0, #146	; 0x92
 80124b8:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 80124ba:	f110 0f32 	cmn.w	r0, #50	; 0x32
 80124be:	f43f af34 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 80124c2:	dc0d      	bgt.n	80124e0 <mbedtls_to_psa_error+0x230>
 80124c4:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80124c8:	d0f4      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 80124ca:	dc04      	bgt.n	80124d6 <mbedtls_to_psa_error+0x226>
 80124cc:	f110 0f37 	cmn.w	r0, #55	; 0x37
 80124d0:	d0f0      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 80124d2:	3036      	adds	r0, #54	; 0x36
 80124d4:	e728      	b.n	8012328 <mbedtls_to_psa_error+0x78>
 80124d6:	f110 0f34 	cmn.w	r0, #52	; 0x34
 80124da:	d0e2      	beq.n	80124a2 <mbedtls_to_psa_error+0x1f2>
 80124dc:	3033      	adds	r0, #51	; 0x33
 80124de:	e7e7      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 80124e0:	f110 0f2d 	cmn.w	r0, #45	; 0x2d
 80124e4:	d0e6      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 80124e6:	dc04      	bgt.n	80124f2 <mbedtls_to_psa_error+0x242>
 80124e8:	f110 0f31 	cmn.w	r0, #49	; 0x31
 80124ec:	d0e2      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 80124ee:	302f      	adds	r0, #47	; 0x2f
 80124f0:	e7de      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 80124f2:	f110 0f29 	cmn.w	r0, #41	; 0x29
 80124f6:	d0dd      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 80124f8:	f73f af33 	bgt.w	8012362 <mbedtls_to_psa_error+0xb2>
 80124fc:	302b      	adds	r0, #43	; 0x2b
 80124fe:	e7d7      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 8012500:	f110 0f12 	cmn.w	r0, #18
 8012504:	f43f af36 	beq.w	8012374 <mbedtls_to_psa_error+0xc4>
 8012508:	dc23      	bgt.n	8012552 <mbedtls_to_psa_error+0x2a2>
 801250a:	f110 0f19 	cmn.w	r0, #25
 801250e:	d0d1      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 8012510:	dc0e      	bgt.n	8012530 <mbedtls_to_psa_error+0x280>
 8012512:	f110 0f22 	cmn.w	r0, #34	; 0x22
 8012516:	dc09      	bgt.n	801252c <mbedtls_to_psa_error+0x27c>
 8012518:	f110 0f24 	cmn.w	r0, #36	; 0x24
 801251c:	f6bf af05 	bge.w	801232a <mbedtls_to_psa_error+0x7a>
 8012520:	f110 0f26 	cmn.w	r0, #38	; 0x26
 8012524:	f43f af01 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 8012528:	3025      	adds	r0, #37	; 0x25
 801252a:	e7c1      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 801252c:	3020      	adds	r0, #32
 801252e:	e6fb      	b.n	8012328 <mbedtls_to_psa_error+0x78>
 8012530:	f110 0f16 	cmn.w	r0, #22
 8012534:	f43f aef9 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 8012538:	dc05      	bgt.n	8012546 <mbedtls_to_psa_error+0x296>
 801253a:	f110 0f18 	cmn.w	r0, #24
 801253e:	f43f aef4 	beq.w	801232a <mbedtls_to_psa_error+0x7a>
 8012542:	3017      	adds	r0, #23
 8012544:	e7b4      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 8012546:	f110 0f14 	cmn.w	r0, #20
 801254a:	f43f af0a 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 801254e:	3013      	adds	r0, #19
 8012550:	e7ae      	b.n	80124b0 <mbedtls_to_psa_error+0x200>
 8012552:	f110 0f0c 	cmn.w	r0, #12
 8012556:	f43f af04 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 801255a:	dc0f      	bgt.n	801257c <mbedtls_to_psa_error+0x2cc>
 801255c:	f110 0f0f 	cmn.w	r0, #15
 8012560:	f43f af08 	beq.w	8012374 <mbedtls_to_psa_error+0xc4>
 8012564:	dc04      	bgt.n	8012570 <mbedtls_to_psa_error+0x2c0>
 8012566:	f110 0f11 	cmn.w	r0, #17
 801256a:	d0a3      	beq.n	80124b4 <mbedtls_to_psa_error+0x204>
 801256c:	3010      	adds	r0, #16
 801256e:	e6e5      	b.n	801233c <mbedtls_to_psa_error+0x8c>
 8012570:	f110 0f0e 	cmn.w	r0, #14
 8012574:	f43f aef5 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 8012578:	300d      	adds	r0, #13
 801257a:	e6f1      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
 801257c:	1d82      	adds	r2, r0, #6
 801257e:	f43f aef0 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 8012582:	dc09      	bgt.n	8012598 <mbedtls_to_psa_error+0x2e8>
 8012584:	f110 0f0a 	cmn.w	r0, #10
 8012588:	f43f aeeb 	beq.w	8012362 <mbedtls_to_psa_error+0xb2>
 801258c:	3008      	adds	r0, #8
 801258e:	f47f aeb4 	bne.w	80122fa <mbedtls_to_psa_error+0x4a>
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 8012592:	f06f 0089 	mvn.w	r0, #137	; 0x89
 8012596:	4770      	bx	lr
    switch( ret < -0x7f ? - ( -ret & 0x7f80 ) : ret )
 8012598:	1c83      	adds	r3, r0, #2
 801259a:	d007      	beq.n	80125ac <mbedtls_to_psa_error+0x2fc>
 801259c:	2800      	cmp	r0, #0
 801259e:	f43f aeae 	beq.w	80122fe <mbedtls_to_psa_error+0x4e>
 80125a2:	3004      	adds	r0, #4
 80125a4:	e6dc      	b.n	8012360 <mbedtls_to_psa_error+0xb0>
            return( PSA_ERROR_BAD_STATE );
 80125a6:	f06f 0088 	mvn.w	r0, #136	; 0x88
 80125aa:	4770      	bx	lr
            return( PSA_ERROR_STORAGE_FAILURE );
 80125ac:	f06f 0091 	mvn.w	r0, #145	; 0x91
 80125b0:	4770      	bx	lr
            return( PSA_ERROR_TAMPERING_DETECTED );
 80125b2:	f06f 0096 	mvn.w	r0, #150	; 0x96
 80125b6:	4770      	bx	lr

080125b8 <psa_get_empty_key_slot>:

/* Retrieve an empty key slot (slot with no key data, but possibly
 * with some metadata such as a policy). */
static psa_status_t psa_get_empty_key_slot( psa_key_handle_t handle,
                                            psa_key_slot_t **p_slot )
{
 80125b8:	b513      	push	{r0, r1, r4, lr}
 80125ba:	460c      	mov	r4, r1
    psa_status_t status;
    psa_key_slot_t *slot = NULL;
 80125bc:	a902      	add	r1, sp, #8
 80125be:	2300      	movs	r3, #0
 80125c0:	f841 3d04 	str.w	r3, [r1, #-4]!

    *p_slot = NULL;
 80125c4:	6023      	str	r3, [r4, #0]

    status = psa_get_key_slot( handle, &slot );
 80125c6:	f001 fa9f 	bl	8013b08 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 80125ca:	b918      	cbnz	r0, 80125d4 <psa_get_empty_key_slot+0x1c>
        return( status );

    if( slot->type != PSA_KEY_TYPE_NONE )
 80125cc:	9b01      	ldr	r3, [sp, #4]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	b912      	cbnz	r2, 80125d8 <psa_get_empty_key_slot+0x20>
        return( PSA_ERROR_ALREADY_EXISTS );

    *p_slot = slot;
 80125d2:	6023      	str	r3, [r4, #0]
    return( status );
}
 80125d4:	b002      	add	sp, #8
 80125d6:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_ALREADY_EXISTS );
 80125d8:	f06f 008a 	mvn.w	r0, #138	; 0x8a
 80125dc:	e7fa      	b.n	80125d4 <psa_get_empty_key_slot+0x1c>
	...

080125e0 <mbedtls_cipher_info_from_psa>:
static const mbedtls_cipher_info_t *mbedtls_cipher_info_from_psa(
    psa_algorithm_t alg,
    psa_key_type_t key_type,
    size_t key_bits,
    mbedtls_cipher_id_t* cipher_id )
{
 80125e0:	b410      	push	{r4}
 80125e2:	4614      	mov	r4, r2
    mbedtls_cipher_mode_t mode;
    mbedtls_cipher_id_t cipher_id_tmp;

    if( PSA_ALG_IS_AEAD( alg ) )
 80125e4:	f000 42fe 	and.w	r2, r0, #2130706432	; 0x7f000000
 80125e8:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
        alg = PSA_ALG_AEAD_WITH_TAG_LENGTH( alg, 0 );
 80125ec:	bf08      	it	eq
 80125ee:	f420 507c 	biceq.w	r0, r0, #16128	; 0x3f00

    if( PSA_ALG_IS_CIPHER( alg ) || PSA_ALG_IS_AEAD( alg ) )
 80125f2:	f000 42fa 	and.w	r2, r0, #2097152000	; 0x7d000000
 80125f6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80125fa:	d12e      	bne.n	801265a <mbedtls_cipher_info_from_psa+0x7a>
    {
        switch( alg )
 80125fc:	4a25      	ldr	r2, [pc, #148]	; (8012694 <mbedtls_cipher_info_from_psa+0xb4>)
 80125fe:	4290      	cmp	r0, r2
 8012600:	d019      	beq.n	8012636 <mbedtls_cipher_info_from_psa+0x56>
 8012602:	d80c      	bhi.n	801261e <mbedtls_cipher_info_from_psa+0x3e>
 8012604:	4a24      	ldr	r2, [pc, #144]	; (8012698 <mbedtls_cipher_info_from_psa+0xb8>)
 8012606:	4290      	cmp	r0, r2
 8012608:	d305      	bcc.n	8012616 <mbedtls_cipher_info_from_psa+0x36>
 801260a:	3201      	adds	r2, #1
 801260c:	4290      	cmp	r0, r2
 801260e:	d920      	bls.n	8012652 <mbedtls_cipher_info_from_psa+0x72>
 8012610:	4a22      	ldr	r2, [pc, #136]	; (801269c <mbedtls_cipher_info_from_psa+0xbc>)
 8012612:	4290      	cmp	r0, r2
 8012614:	d026      	beq.n	8012664 <mbedtls_cipher_info_from_psa+0x84>
    if( cipher_id != NULL )
        *cipher_id = cipher_id_tmp;

    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
                                             (int) key_bits, mode ) );
}
 8012616:	2000      	movs	r0, #0
 8012618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801261c:	4770      	bx	lr
        switch( alg )
 801261e:	4a20      	ldr	r2, [pc, #128]	; (80126a0 <mbedtls_cipher_info_from_psa+0xc0>)
 8012620:	4290      	cmp	r0, r2
 8012622:	d014      	beq.n	801264e <mbedtls_cipher_info_from_psa+0x6e>
 8012624:	d311      	bcc.n	801264a <mbedtls_cipher_info_from_psa+0x6a>
 8012626:	4a1f      	ldr	r2, [pc, #124]	; (80126a4 <mbedtls_cipher_info_from_psa+0xc4>)
 8012628:	4290      	cmp	r0, r2
 801262a:	d014      	beq.n	8012656 <mbedtls_cipher_info_from_psa+0x76>
    else if( alg == PSA_ALG_GMAC )
 801262c:	3201      	adds	r2, #1
 801262e:	4290      	cmp	r0, r2
 8012630:	d1f1      	bne.n	8012616 <mbedtls_cipher_info_from_psa+0x36>
        mode = MBEDTLS_MODE_GCM;
 8012632:	2206      	movs	r2, #6
 8012634:	e000      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CTR;
 8012636:	2205      	movs	r2, #5
    switch( key_type )
 8012638:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 801263c:	3801      	subs	r0, #1
 801263e:	2803      	cmp	r0, #3
 8012640:	d8e9      	bhi.n	8012616 <mbedtls_cipher_info_from_psa+0x36>
 8012642:	e8df f000 	tbb	[pc, r0]
 8012646:	1923      	.short	0x1923
 8012648:	2111      	.short	0x2111
                mode = MBEDTLS_MODE_CFB;
 801264a:	2203      	movs	r2, #3
                break;
 801264c:	e7f4      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_OFB;
 801264e:	2204      	movs	r2, #4
                break;
 8012650:	e7f2      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CBC;
 8012652:	2202      	movs	r2, #2
                break;
 8012654:	e7f0      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_CCM;
 8012656:	2208      	movs	r2, #8
                break;
 8012658:	e7ee      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
    else if( alg == PSA_ALG_CMAC )
 801265a:	4a13      	ldr	r2, [pc, #76]	; (80126a8 <mbedtls_cipher_info_from_psa+0xc8>)
 801265c:	4290      	cmp	r0, r2
 801265e:	d1e5      	bne.n	801262c <mbedtls_cipher_info_from_psa+0x4c>
        mode = MBEDTLS_MODE_ECB;
 8012660:	2201      	movs	r2, #1
 8012662:	e7e9      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
                mode = MBEDTLS_MODE_STREAM;
 8012664:	2207      	movs	r2, #7
 8012666:	e7e7      	b.n	8012638 <mbedtls_cipher_info_from_psa+0x58>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_CAMELLIA;
 8012668:	2005      	movs	r0, #5
    if( cipher_id != NULL )
 801266a:	b103      	cbz	r3, 801266e <mbedtls_cipher_info_from_psa+0x8e>
        *cipher_id = cipher_id_tmp;
 801266c:	7018      	strb	r0, [r3, #0]
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 801266e:	4621      	mov	r1, r4
}
 8012670:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 8012674:	f7fb b8ce 	b.w	800d814 <mbedtls_cipher_info_from_values>
            if( key_bits == 64 )
 8012678:	2c40      	cmp	r4, #64	; 0x40
 801267a:	d009      	beq.n	8012690 <mbedtls_cipher_info_from_psa+0xb0>
            if( key_bits == 128 )
 801267c:	2c80      	cmp	r4, #128	; 0x80
                cipher_id_tmp = MBEDTLS_CIPHER_ID_3DES;
 801267e:	f04f 0004 	mov.w	r0, #4
            if( key_bits == 128 )
 8012682:	d1f2      	bne.n	801266a <mbedtls_cipher_info_from_psa+0x8a>
                key_bits = 192;
 8012684:	24c0      	movs	r4, #192	; 0xc0
 8012686:	e7f0      	b.n	801266a <mbedtls_cipher_info_from_psa+0x8a>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_ARC4;
 8012688:	2007      	movs	r0, #7
            break;
 801268a:	e7ee      	b.n	801266a <mbedtls_cipher_info_from_psa+0x8a>
            cipher_id_tmp = MBEDTLS_CIPHER_ID_AES;
 801268c:	2002      	movs	r0, #2
 801268e:	e7ec      	b.n	801266a <mbedtls_cipher_info_from_psa+0x8a>
                cipher_id_tmp = MBEDTLS_CIPHER_ID_DES;
 8012690:	2003      	movs	r0, #3
 8012692:	e7ea      	b.n	801266a <mbedtls_cipher_info_from_psa+0x8a>
 8012694:	04c00001 	.word	0x04c00001
 8012698:	04600100 	.word	0x04600100
 801269c:	04800001 	.word	0x04800001
 80126a0:	04c00003 	.word	0x04c00003
 80126a4:	06000001 	.word	0x06000001
 80126a8:	02c00002 	.word	0x02c00002

080126ac <psa_key_algorithm_permits>:
    if( requested_alg == policy_alg )
 80126ac:	4281      	cmp	r1, r0
{
 80126ae:	b530      	push	{r4, r5, lr}
    if( requested_alg == policy_alg )
 80126b0:	d025      	beq.n	80126fe <psa_key_algorithm_permits+0x52>
    if( PSA_ALG_IS_HASH_AND_SIGN( requested_alg ) &&
 80126b2:	4b15      	ldr	r3, [pc, #84]	; (8012708 <psa_key_algorithm_permits+0x5c>)
 80126b4:	4a15      	ldr	r2, [pc, #84]	; (801270c <psa_key_algorithm_permits+0x60>)
 80126b6:	ea01 0403 	and.w	r4, r1, r3
 80126ba:	4294      	cmp	r4, r2
 80126bc:	d006      	beq.n	80126cc <psa_key_algorithm_permits+0x20>
 80126be:	f421 3440 	bic.w	r4, r1, #196608	; 0x30000
 80126c2:	4d13      	ldr	r5, [pc, #76]	; (8012710 <psa_key_algorithm_permits+0x64>)
 80126c4:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 80126c8:	42ac      	cmp	r4, r5
 80126ca:	d11a      	bne.n	8012702 <psa_key_algorithm_permits+0x56>
        PSA_ALG_SIGN_GET_HASH( policy_alg ) == PSA_ALG_ANY_HASH )
 80126cc:	4003      	ands	r3, r0
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d006      	beq.n	80126e0 <psa_key_algorithm_permits+0x34>
 80126d2:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 80126d6:	4a0e      	ldr	r2, [pc, #56]	; (8012710 <psa_key_algorithm_permits+0x64>)
 80126d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80126dc:	4293      	cmp	r3, r2
 80126de:	d110      	bne.n	8012702 <psa_key_algorithm_permits+0x56>
 80126e0:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 80126e4:	d00d      	beq.n	8012702 <psa_key_algorithm_permits+0x56>
 80126e6:	4a0b      	ldr	r2, [pc, #44]	; (8012714 <psa_key_algorithm_permits+0x68>)
 80126e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80126ec:	4293      	cmp	r3, r2
 80126ee:	d108      	bne.n	8012702 <psa_key_algorithm_permits+0x56>
        return( ( policy_alg & ~PSA_ALG_HASH_MASK ) ==
 80126f0:	4041      	eors	r1, r0
 80126f2:	f031 03ff 	bics.w	r3, r1, #255	; 0xff
 80126f6:	bf0c      	ite	eq
 80126f8:	2001      	moveq	r0, #1
 80126fa:	2000      	movne	r0, #0
}
 80126fc:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 80126fe:	2001      	movs	r0, #1
 8012700:	e7fc      	b.n	80126fc <psa_key_algorithm_permits+0x50>
    return( 0 );
 8012702:	2000      	movs	r0, #0
 8012704:	e7fa      	b.n	80126fc <psa_key_algorithm_permits+0x50>
 8012706:	bf00      	nop
 8012708:	fffeff00 	.word	0xfffeff00
 801270c:	10020000 	.word	0x10020000
 8012710:	10040000 	.word	0x10040000
 8012714:	010000ff 	.word	0x010000ff

08012718 <psa_get_key_from_slot>:
{
 8012718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801271c:	4688      	mov	r8, r1
    psa_key_slot_t *slot = NULL;
 801271e:	a902      	add	r1, sp, #8
{
 8012720:	461e      	mov	r6, r3
    psa_key_slot_t *slot = NULL;
 8012722:	2300      	movs	r3, #0
 8012724:	f841 3d04 	str.w	r3, [r1, #-4]!
    *p_slot = NULL;
 8012728:	f8c8 3000 	str.w	r3, [r8]
{
 801272c:	4617      	mov	r7, r2
    status = psa_get_key_slot( handle, &slot );
 801272e:	f001 f9eb 	bl	8013b08 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 8012732:	4604      	mov	r4, r0
 8012734:	b9d0      	cbnz	r0, 801276c <psa_get_key_from_slot+0x54>
    if( slot->type == PSA_KEY_TYPE_NONE )
 8012736:	9d01      	ldr	r5, [sp, #4]
 8012738:	6829      	ldr	r1, [r5, #0]
 801273a:	b1d9      	cbz	r1, 8012774 <psa_get_key_from_slot+0x5c>
    if( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->type ) )
 801273c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8012740:	f1b1 4fc0 	cmp.w	r1, #1610612736	; 0x60000000
    if( ( slot->policy.usage & usage ) != usage )
 8012744:	686b      	ldr	r3, [r5, #4]
        usage &= ~PSA_KEY_USAGE_EXPORT;
 8012746:	bf08      	it	eq
 8012748:	f027 0701 	biceq.w	r7, r7, #1
    if( ( slot->policy.usage & usage ) != usage )
 801274c:	ea37 0303 	bics.w	r3, r7, r3
 8012750:	d113      	bne.n	801277a <psa_get_key_from_slot+0x62>
    if( alg != 0 && ! psa_key_policy_permits( &slot->policy, alg ) )
 8012752:	b14e      	cbz	r6, 8012768 <psa_get_key_from_slot+0x50>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 8012754:	4631      	mov	r1, r6
 8012756:	68a8      	ldr	r0, [r5, #8]
 8012758:	f7ff ffa8 	bl	80126ac <psa_key_algorithm_permits>
 801275c:	b920      	cbnz	r0, 8012768 <psa_get_key_from_slot+0x50>
            psa_key_algorithm_permits( policy->alg2, alg ) );
 801275e:	4631      	mov	r1, r6
 8012760:	68e8      	ldr	r0, [r5, #12]
 8012762:	f7ff ffa3 	bl	80126ac <psa_key_algorithm_permits>
    return( psa_key_algorithm_permits( policy->alg, alg ) ||
 8012766:	b140      	cbz	r0, 801277a <psa_get_key_from_slot+0x62>
    *p_slot = slot;
 8012768:	f8c8 5000 	str.w	r5, [r8]
}
 801276c:	4620      	mov	r0, r4
 801276e:	b002      	add	sp, #8
 8012770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( PSA_ERROR_DOES_NOT_EXIST );
 8012774:	f06f 048b 	mvn.w	r4, #139	; 0x8b
 8012778:	e7f8      	b.n	801276c <psa_get_key_from_slot+0x54>
        return( PSA_ERROR_NOT_PERMITTED );
 801277a:	f06f 0484 	mvn.w	r4, #132	; 0x84
 801277e:	e7f5      	b.n	801276c <psa_get_key_from_slot+0x54>

08012780 <prepare_raw_data_slot>:
{
 8012780:	b538      	push	{r3, r4, r5, lr}
    switch( type )
 8012782:	4b1b      	ldr	r3, [pc, #108]	; (80127f0 <prepare_raw_data_slot+0x70>)
 8012784:	4298      	cmp	r0, r3
{
 8012786:	4615      	mov	r5, r2
    switch( type )
 8012788:	d01f      	beq.n	80127ca <prepare_raw_data_slot+0x4a>
 801278a:	d809      	bhi.n	80127a0 <prepare_raw_data_slot+0x20>
 801278c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8012790:	4298      	cmp	r0, r3
 8012792:	d020      	beq.n	80127d6 <prepare_raw_data_slot+0x56>
 8012794:	3302      	adds	r3, #2
 8012796:	4298      	cmp	r0, r3
 8012798:	d01d      	beq.n	80127d6 <prepare_raw_data_slot+0x56>
            return( PSA_ERROR_NOT_SUPPORTED );
 801279a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 801279e:	e019      	b.n	80127d4 <prepare_raw_data_slot+0x54>
    switch( type )
 80127a0:	f1b0 4fa2 	cmp.w	r0, #1358954496	; 0x51000000
 80127a4:	d002      	beq.n	80127ac <prepare_raw_data_slot+0x2c>
 80127a6:	f1b0 4fa4 	cmp.w	r0, #1375731712	; 0x52000000
 80127aa:	d1f6      	bne.n	801279a <prepare_raw_data_slot+0x1a>
    if( bits % 8 != 0 )
 80127ac:	f011 0407 	ands.w	r4, r1, #7
 80127b0:	d118      	bne.n	80127e4 <prepare_raw_data_slot+0x64>
    raw->bytes = PSA_BITS_TO_BYTES( bits );
 80127b2:	3107      	adds	r1, #7
 80127b4:	08c9      	lsrs	r1, r1, #3
 80127b6:	6069      	str	r1, [r5, #4]
    raw->data = mbedtls_calloc( 1, raw->bytes );
 80127b8:	2001      	movs	r0, #1
 80127ba:	f004 f951 	bl	8016a60 <calloc>
 80127be:	6028      	str	r0, [r5, #0]
    if( raw->data == NULL )
 80127c0:	b998      	cbnz	r0, 80127ea <prepare_raw_data_slot+0x6a>
        raw->bytes = 0;
 80127c2:	6068      	str	r0, [r5, #4]
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 80127c4:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 80127c8:	e004      	b.n	80127d4 <prepare_raw_data_slot+0x54>
            if( bits == 0 )
 80127ca:	2900      	cmp	r1, #0
 80127cc:	d1ee      	bne.n	80127ac <prepare_raw_data_slot+0x2c>
                raw->data = NULL;
 80127ce:	e9c2 1100 	strd	r1, r1, [r2]
                return( PSA_SUCCESS );
 80127d2:	4608      	mov	r0, r1
}
 80127d4:	bd38      	pop	{r3, r4, r5, pc}
            if( bits != 128 && bits != 192 && bits != 256 )
 80127d6:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 80127da:	2b80      	cmp	r3, #128	; 0x80
 80127dc:	d0e6      	beq.n	80127ac <prepare_raw_data_slot+0x2c>
 80127de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80127e2:	d0e3      	beq.n	80127ac <prepare_raw_data_slot+0x2c>
                return( PSA_ERROR_INVALID_ARGUMENT );
 80127e4:	f06f 0086 	mvn.w	r0, #134	; 0x86
 80127e8:	e7f4      	b.n	80127d4 <prepare_raw_data_slot+0x54>
    return( PSA_SUCCESS );
 80127ea:	4620      	mov	r0, r4
 80127ec:	e7f2      	b.n	80127d4 <prepare_raw_data_slot+0x54>
 80127ee:	bf00      	nop
 80127f0:	50000001 	.word	0x50000001

080127f4 <psa_get_key_bits>:
    if( key_type_is_raw_bytes( slot->type ) )
 80127f4:	6802      	ldr	r2, [r0, #0]
{
 80127f6:	b508      	push	{r3, lr}
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 80127f8:	f002 43c0 	and.w	r3, r2, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 80127fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012800:	d102      	bne.n	8012808 <psa_get_key_bits+0x14>
        return( slot->data.raw.bytes * 8 );
 8012802:	6a00      	ldr	r0, [r0, #32]
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 8012804:	00c0      	lsls	r0, r0, #3
}
 8012806:	bd08      	pop	{r3, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 8012808:	4b08      	ldr	r3, [pc, #32]	; (801282c <psa_get_key_bits+0x38>)
 801280a:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 801280e:	4299      	cmp	r1, r3
 8012810:	d103      	bne.n	801281a <psa_get_key_bits+0x26>
        return( PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( slot->data.rsa ) ) );
 8012812:	69c0      	ldr	r0, [r0, #28]
 8012814:	f001 fc7d 	bl	8014112 <mbedtls_rsa_get_len>
 8012818:	e7f4      	b.n	8012804 <psa_get_key_bits+0x10>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 801281a:	4b05      	ldr	r3, [pc, #20]	; (8012830 <psa_get_key_bits+0x3c>)
 801281c:	4013      	ands	r3, r2
 801281e:	4a05      	ldr	r2, [pc, #20]	; (8012834 <psa_get_key_bits+0x40>)
 8012820:	4293      	cmp	r3, r2
        return( slot->data.ecp->grp.pbits );
 8012822:	bf0a      	itet	eq
 8012824:	69c3      	ldreq	r3, [r0, #28]
    return( 0 );
 8012826:	2000      	movne	r0, #0
        return( slot->data.ecp->grp.pbits );
 8012828:	6d98      	ldreq	r0, [r3, #88]	; 0x58
 801282a:	e7ec      	b.n	8012806 <psa_get_key_bits+0x12>
 801282c:	60010000 	.word	0x60010000
 8012830:	efff0000 	.word	0xefff0000
 8012834:	60030000 	.word	0x60030000

08012838 <psa_rsa_decode_md_type>:
/* Decode the hash algorithm from alg and store the mbedtls encoding in
 * md_alg. Verify that the hash length is acceptable. */
static psa_status_t psa_rsa_decode_md_type( psa_algorithm_t alg,
                                            size_t hash_length,
                                            mbedtls_md_type_t *md_alg )
{
 8012838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 801283c:	f420 3380 	bic.w	r3, r0, #65536	; 0x10000
{
 8012840:	4690      	mov	r8, r2
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 8012842:	4a1d      	ldr	r2, [pc, #116]	; (80128b8 <psa_rsa_decode_md_type+0x80>)
 8012844:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012848:	4293      	cmp	r3, r2
{
 801284a:	4604      	mov	r4, r0
 801284c:	460f      	mov	r7, r1
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 801284e:	f020 06ff 	bic.w	r6, r0, #255	; 0xff
 8012852:	d007      	beq.n	8012864 <psa_rsa_decode_md_type+0x2c>
 8012854:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
 8012858:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801285c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8012860:	4293      	cmp	r3, r2
 8012862:	d120      	bne.n	80128a6 <psa_rsa_decode_md_type+0x6e>
 8012864:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
 8012868:	d001      	beq.n	801286e <psa_rsa_decode_md_type+0x36>
 801286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801286e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8012872:	3b05      	subs	r3, #5
 8012874:	2b04      	cmp	r3, #4
 8012876:	bf9a      	itte	ls
 8012878:	4a10      	ldrls	r2, [pc, #64]	; (80128bc <psa_rsa_decode_md_type+0x84>)
 801287a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
 801287e:	2500      	movhi	r5, #0
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_psa( hash_alg );
    *md_alg = mbedtls_md_get_type( md_info );
 8012880:	4628      	mov	r0, r5
 8012882:	f7fe fd96 	bl	80113b2 <mbedtls_md_get_type>
#endif

#if defined(MBEDTLS_PKCS1_V15)
    /* For PKCS#1 v1.5 signature, if using a hash, the hash length
     * must be correct. */
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 8012886:	4b0c      	ldr	r3, [pc, #48]	; (80128b8 <psa_rsa_decode_md_type+0x80>)
    *md_alg = mbedtls_md_get_type( md_info );
 8012888:	f888 0000 	strb.w	r0, [r8]
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) &&
 801288c:	429e      	cmp	r6, r3
 801288e:	d107      	bne.n	80128a0 <psa_rsa_decode_md_type+0x68>
 8012890:	42b4      	cmp	r4, r6
 8012892:	d005      	beq.n	80128a0 <psa_rsa_decode_md_type+0x68>
        alg != PSA_ALG_RSA_PKCS1V15_SIGN_RAW )
    {
        if( md_info == NULL )
 8012894:	b14d      	cbz	r5, 80128aa <psa_rsa_decode_md_type+0x72>
            return( PSA_ERROR_NOT_SUPPORTED );
        if( mbedtls_md_get_size( md_info ) != hash_length )
 8012896:	4628      	mov	r0, r5
 8012898:	f7fe fd88 	bl	80113ac <mbedtls_md_get_size>
 801289c:	42b8      	cmp	r0, r7
 801289e:	d107      	bne.n	80128b0 <psa_rsa_decode_md_type+0x78>
        if( md_info == NULL )
            return( PSA_ERROR_NOT_SUPPORTED );
    }
#endif /* MBEDTLS_PKCS1_V21 */

    return( PSA_SUCCESS );
 80128a0:	2000      	movs	r0, #0
}
 80128a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 80128a6:	2300      	movs	r3, #0
 80128a8:	e7e1      	b.n	801286e <psa_rsa_decode_md_type+0x36>
            return( PSA_ERROR_NOT_SUPPORTED );
 80128aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80128ae:	e7f8      	b.n	80128a2 <psa_rsa_decode_md_type+0x6a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 80128b0:	f06f 0086 	mvn.w	r0, #134	; 0x86
 80128b4:	e7f5      	b.n	80128a2 <psa_rsa_decode_md_type+0x6a>
 80128b6:	bf00      	nop
 80128b8:	10020000 	.word	0x10020000
 80128bc:	08019640 	.word	0x08019640

080128c0 <psa_import_key_into_slot>:
{
 80128c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( key_type_is_raw_bytes( slot->type ) )
 80128c4:	6804      	ldr	r4, [r0, #0]
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 80128c6:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    if( key_type_is_raw_bytes( slot->type ) )
 80128ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80128ce:	b089      	sub	sp, #36	; 0x24
 80128d0:	4606      	mov	r6, r0
 80128d2:	460f      	mov	r7, r1
 80128d4:	4615      	mov	r5, r2
    if( key_type_is_raw_bytes( slot->type ) )
 80128d6:	d115      	bne.n	8012904 <psa_import_key_into_slot+0x44>
        if( data_length > SIZE_MAX / 8 )
 80128d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80128dc:	f080 8144 	bcs.w	8012b68 <psa_import_key_into_slot+0x2a8>
        status = prepare_raw_data_slot( slot->type,
 80128e0:	f100 021c 	add.w	r2, r0, #28
 80128e4:	00e9      	lsls	r1, r5, #3
 80128e6:	4620      	mov	r0, r4
 80128e8:	f7ff ff4a 	bl	8012780 <prepare_raw_data_slot>
        if( status != PSA_SUCCESS )
 80128ec:	4604      	mov	r4, r0
 80128ee:	b928      	cbnz	r0, 80128fc <psa_import_key_into_slot+0x3c>
        if( data_length != 0 )
 80128f0:	b125      	cbz	r5, 80128fc <psa_import_key_into_slot+0x3c>
            memcpy( slot->data.raw.data, data, data_length );
 80128f2:	462a      	mov	r2, r5
 80128f4:	4639      	mov	r1, r7
 80128f6:	69f0      	ldr	r0, [r6, #28]
 80128f8:	f004 f8df 	bl	8016aba <memcpy>
}
 80128fc:	4620      	mov	r0, r4
 80128fe:	b009      	add	sp, #36	; 0x24
 8012900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( PSA_KEY_TYPE_IS_ECC_KEYPAIR( slot->type ) )
 8012904:	0c23      	lsrs	r3, r4, #16
 8012906:	4a9a      	ldr	r2, [pc, #616]	; (8012b70 <psa_import_key_into_slot+0x2b0>)
 8012908:	041b      	lsls	r3, r3, #16
 801290a:	4293      	cmp	r3, r2
 801290c:	f040 809b 	bne.w	8012a46 <psa_import_key_into_slot+0x186>
        status = psa_import_ec_private_key( PSA_KEY_TYPE_GET_CURVE( slot->type ),
 8012910:	b2a0      	uxth	r0, r4
 8012912:	f1a0 0312 	sub.w	r3, r0, #18
 8012916:	b29b      	uxth	r3, r3
 8012918:	2b0c      	cmp	r3, #12
 801291a:	d843      	bhi.n	80129a4 <psa_import_key_into_slot+0xe4>
 801291c:	4a95      	ldr	r2, [pc, #596]	; (8012b74 <psa_import_key_into_slot+0x2b4>)
 801291e:	441a      	add	r2, r3
 8012920:	7d14      	ldrb	r4, [r2, #20]
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 8012922:	1e82      	subs	r2, r0, #2
 8012924:	2a01      	cmp	r2, #1
 8012926:	d941      	bls.n	80129ac <psa_import_key_into_slot+0xec>
 8012928:	1f02      	subs	r2, r0, #4
 801292a:	2a01      	cmp	r2, #1
 801292c:	d940      	bls.n	80129b0 <psa_import_key_into_slot+0xf0>
 801292e:	1f82      	subs	r2, r0, #6
 8012930:	2a02      	cmp	r2, #2
 8012932:	d93f      	bls.n	80129b4 <psa_import_key_into_slot+0xf4>
 8012934:	f1a0 0209 	sub.w	r2, r0, #9
 8012938:	2a01      	cmp	r2, #1
 801293a:	d93d      	bls.n	80129b8 <psa_import_key_into_slot+0xf8>
 801293c:	f1a0 020b 	sub.w	r2, r0, #11
 8012940:	2a01      	cmp	r2, #1
 8012942:	d93b      	bls.n	80129bc <psa_import_key_into_slot+0xfc>
 8012944:	f1a0 020d 	sub.w	r2, r0, #13
 8012948:	2a01      	cmp	r2, #1
 801294a:	d939      	bls.n	80129c0 <psa_import_key_into_slot+0x100>
 801294c:	f1a0 020f 	sub.w	r2, r0, #15
 8012950:	2a02      	cmp	r2, #2
 8012952:	d937      	bls.n	80129c4 <psa_import_key_into_slot+0x104>
 8012954:	2b01      	cmp	r3, #1
 8012956:	d937      	bls.n	80129c8 <psa_import_key_into_slot+0x108>
 8012958:	f1a0 0314 	sub.w	r3, r0, #20
 801295c:	2b01      	cmp	r3, #1
 801295e:	d935      	bls.n	80129cc <psa_import_key_into_slot+0x10c>
 8012960:	f1a0 0316 	sub.w	r3, r0, #22
 8012964:	2b01      	cmp	r3, #1
 8012966:	d939      	bls.n	80129dc <psa_import_key_into_slot+0x11c>
 8012968:	2818      	cmp	r0, #24
 801296a:	d033      	beq.n	80129d4 <psa_import_key_into_slot+0x114>
 801296c:	2819      	cmp	r0, #25
 801296e:	d02f      	beq.n	80129d0 <psa_import_key_into_slot+0x110>
 8012970:	281a      	cmp	r0, #26
 8012972:	d033      	beq.n	80129dc <psa_import_key_into_slot+0x11c>
 8012974:	281b      	cmp	r0, #27
 8012976:	d02d      	beq.n	80129d4 <psa_import_key_into_slot+0x114>
 8012978:	281c      	cmp	r0, #28
 801297a:	d02d      	beq.n	80129d8 <psa_import_key_into_slot+0x118>
 801297c:	281d      	cmp	r0, #29
 801297e:	d02d      	beq.n	80129dc <psa_import_key_into_slot+0x11c>
 8012980:	281e      	cmp	r0, #30
 8012982:	bf14      	ite	ne
 8012984:	2300      	movne	r3, #0
 8012986:	2338      	moveq	r3, #56	; 0x38
 8012988:	429d      	cmp	r5, r3
 801298a:	f040 80ea 	bne.w	8012b62 <psa_import_key_into_slot+0x2a2>
    *p_ecp = NULL;
 801298e:	2300      	movs	r3, #0
 8012990:	61f3      	str	r3, [r6, #28]
    ecp = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8012992:	21ac      	movs	r1, #172	; 0xac
 8012994:	2001      	movs	r0, #1
 8012996:	f004 f863 	bl	8016a60 <calloc>
    if( ecp == NULL )
 801299a:	4680      	mov	r8, r0
 801299c:	bb00      	cbnz	r0, 80129e0 <psa_import_key_into_slot+0x120>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 801299e:	f06f 048c 	mvn.w	r4, #140	; 0x8c
 80129a2:	e7ab      	b.n	80128fc <psa_import_key_into_slot+0x3c>
    if( PSA_BITS_TO_BYTES( PSA_ECC_CURVE_BITS( curve ) ) != data_length )
 80129a4:	2801      	cmp	r0, #1
 80129a6:	f04f 0400 	mov.w	r4, #0
 80129aa:	d1ba      	bne.n	8012922 <psa_import_key_into_slot+0x62>
 80129ac:	2315      	movs	r3, #21
 80129ae:	e7eb      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129b0:	2319      	movs	r3, #25
 80129b2:	e7e9      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129b4:	231e      	movs	r3, #30
 80129b6:	e7e7      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129b8:	2324      	movs	r3, #36	; 0x24
 80129ba:	e7e5      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129bc:	2334      	movs	r3, #52	; 0x34
 80129be:	e7e3      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129c0:	2348      	movs	r3, #72	; 0x48
 80129c2:	e7e1      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129c4:	2314      	movs	r3, #20
 80129c6:	e7df      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129c8:	2318      	movs	r3, #24
 80129ca:	e7dd      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129cc:	231c      	movs	r3, #28
 80129ce:	e7db      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129d0:	2342      	movs	r3, #66	; 0x42
 80129d2:	e7d9      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129d4:	2330      	movs	r3, #48	; 0x30
 80129d6:	e7d7      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129d8:	2340      	movs	r3, #64	; 0x40
 80129da:	e7d5      	b.n	8012988 <psa_import_key_into_slot+0xc8>
 80129dc:	2320      	movs	r3, #32
 80129de:	e7d3      	b.n	8012988 <psa_import_key_into_slot+0xc8>
    mbedtls_ecp_keypair_init( ecp );
 80129e0:	f7fc fbff 	bl	800f1e2 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 80129e4:	4621      	mov	r1, r4
 80129e6:	4640      	mov	r0, r8
 80129e8:	f7fd fe18 	bl	801061c <mbedtls_ecp_group_load>
 80129ec:	f7ff fc60 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 80129f0:	4604      	mov	r4, r0
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d15c      	bne.n	8012ab0 <psa_import_key_into_slot+0x1f0>
    status = mbedtls_to_psa_error(
 80129f6:	f108 097c 	add.w	r9, r8, #124	; 0x7c
 80129fa:	462a      	mov	r2, r5
 80129fc:	4639      	mov	r1, r7
 80129fe:	4648      	mov	r0, r9
 8012a00:	f7f8 fe4f 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8012a04:	f7ff fc54 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 8012a08:	4604      	mov	r4, r0
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d150      	bne.n	8012ab0 <psa_import_key_into_slot+0x1f0>
    status = mbedtls_to_psa_error(
 8012a0e:	4649      	mov	r1, r9
 8012a10:	4640      	mov	r0, r8
 8012a12:	f7fd f929 	bl	800fc68 <mbedtls_ecp_check_privkey>
 8012a16:	f7ff fc4b 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	2800      	cmp	r0, #0
 8012a1e:	d147      	bne.n	8012ab0 <psa_import_key_into_slot+0x1f0>
    status = mbedtls_to_psa_error(
 8012a20:	4b55      	ldr	r3, [pc, #340]	; (8012b78 <psa_import_key_into_slot+0x2b8>)
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	4b55      	ldr	r3, [pc, #340]	; (8012b7c <psa_import_key_into_slot+0x2bc>)
 8012a26:	9300      	str	r3, [sp, #0]
 8012a28:	464a      	mov	r2, r9
 8012a2a:	f108 0328 	add.w	r3, r8, #40	; 0x28
 8012a2e:	f108 0188 	add.w	r1, r8, #136	; 0x88
 8012a32:	4640      	mov	r0, r8
 8012a34:	f7fd fa5e 	bl	800fef4 <mbedtls_ecp_mul>
    status = mbedtls_to_psa_error(
 8012a38:	f7ff fc3a 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	bbb8      	cbnz	r0, 8012ab0 <psa_import_key_into_slot+0x1f0>
    *p_ecp = ecp;
 8012a40:	f8c6 801c 	str.w	r8, [r6, #28]
 8012a44:	e75a      	b.n	80128fc <psa_import_key_into_slot+0x3c>
    else if( PSA_KEY_TYPE_IS_ECC_PUBLIC_KEY( slot->type ) )
 8012a46:	4a4e      	ldr	r2, [pc, #312]	; (8012b80 <psa_import_key_into_slot+0x2c0>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d138      	bne.n	8012abe <psa_import_key_into_slot+0x1fe>
 8012a4c:	f1a4 0012 	sub.w	r0, r4, #18
 8012a50:	b280      	uxth	r0, r0
 8012a52:	280c      	cmp	r0, #12
 8012a54:	bf9c      	itt	ls
 8012a56:	4c47      	ldrls	r4, [pc, #284]	; (8012b74 <psa_import_key_into_slot+0x2b4>)
 8012a58:	1900      	addls	r0, r0, r4
 8012a5a:	f04f 0300 	mov.w	r3, #0
 8012a5e:	bf98      	it	ls
 8012a60:	7d04      	ldrbls	r4, [r0, #20]
    *p_ecp = NULL;
 8012a62:	61f3      	str	r3, [r6, #28]
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 8012a64:	f04f 01ac 	mov.w	r1, #172	; 0xac
 8012a68:	f04f 0001 	mov.w	r0, #1
        status = psa_import_ec_public_key(
 8012a6c:	bf88      	it	hi
 8012a6e:	461c      	movhi	r4, r3
    ecp = mbedtls_calloc( 1, sizeof( *ecp ) );
 8012a70:	f003 fff6 	bl	8016a60 <calloc>
    if( ecp == NULL )
 8012a74:	4680      	mov	r8, r0
 8012a76:	2800      	cmp	r0, #0
 8012a78:	d091      	beq.n	801299e <psa_import_key_into_slot+0xde>
    mbedtls_ecp_keypair_init( ecp );
 8012a7a:	f7fc fbb2 	bl	800f1e2 <mbedtls_ecp_keypair_init>
    status = mbedtls_to_psa_error(
 8012a7e:	4621      	mov	r1, r4
 8012a80:	4640      	mov	r0, r8
 8012a82:	f7fd fdcb 	bl	801061c <mbedtls_ecp_group_load>
 8012a86:	f7ff fc13 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	b980      	cbnz	r0, 8012ab0 <psa_import_key_into_slot+0x1f0>
    status = mbedtls_to_psa_error(
 8012a8e:	f108 0988 	add.w	r9, r8, #136	; 0x88
 8012a92:	462b      	mov	r3, r5
 8012a94:	463a      	mov	r2, r7
 8012a96:	4649      	mov	r1, r9
 8012a98:	4640      	mov	r0, r8
 8012a9a:	f7fc ffed 	bl	800fa78 <mbedtls_ecp_point_read_binary>
 8012a9e:	f7ff fc07 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 8012aa2:	4604      	mov	r4, r0
 8012aa4:	b920      	cbnz	r0, 8012ab0 <psa_import_key_into_slot+0x1f0>
    status = mbedtls_to_psa_error(
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	f7fd f825 	bl	800faf8 <mbedtls_ecp_check_pubkey>
 8012aae:	e7c3      	b.n	8012a38 <psa_import_key_into_slot+0x178>
        mbedtls_ecp_keypair_free( ecp );
 8012ab0:	4640      	mov	r0, r8
 8012ab2:	f7fc fbd9 	bl	800f268 <mbedtls_ecp_keypair_free>
        mbedtls_free( ecp );
 8012ab6:	4640      	mov	r0, r8
 8012ab8:	f003 ffe8 	bl	8016a8c <free>
 8012abc:	e71e      	b.n	80128fc <psa_import_key_into_slot+0x3c>
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 8012abe:	4b31      	ldr	r3, [pc, #196]	; (8012b84 <psa_import_key_into_slot+0x2c4>)
 8012ac0:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d14f      	bne.n	8012b68 <psa_import_key_into_slot+0x2a8>
    mbedtls_pk_init( &pk );
 8012ac8:	a803      	add	r0, sp, #12
 8012aca:	f7fe fd17 	bl	80114fc <mbedtls_pk_init>
    if( PSA_KEY_TYPE_IS_KEYPAIR( type ) )
 8012ace:	f004 40e0 	and.w	r0, r4, #1879048192	; 0x70000000
 8012ad2:	f1b0 4fe0 	cmp.w	r0, #1879048192	; 0x70000000
 8012ad6:	d136      	bne.n	8012b46 <psa_import_key_into_slot+0x286>
        status = mbedtls_to_psa_error(
 8012ad8:	2300      	movs	r3, #0
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	462a      	mov	r2, r5
 8012ade:	4639      	mov	r1, r7
 8012ae0:	a803      	add	r0, sp, #12
 8012ae2:	f7ff f97d 	bl	8011de0 <mbedtls_pk_parse_key>
        status = mbedtls_to_psa_error(
 8012ae6:	f7ff fbe3 	bl	80122b0 <mbedtls_to_psa_error>
 8012aea:	4604      	mov	r4, r0
    if( status != PSA_SUCCESS )
 8012aec:	bb38      	cbnz	r0, 8012b3e <psa_import_key_into_slot+0x27e>
    if( mbedtls_pk_get_type( &pk ) != MBEDTLS_PK_RSA )
 8012aee:	a803      	add	r0, sp, #12
 8012af0:	f7fe fd3a 	bl	8011568 <mbedtls_pk_get_type>
 8012af4:	2801      	cmp	r0, #1
 8012af6:	d12c      	bne.n	8012b52 <psa_import_key_into_slot+0x292>
    rsa = mbedtls_pk_rsa( pk );
 8012af8:	9d04      	ldr	r5, [sp, #16]
    bits = PSA_BYTES_TO_BITS( mbedtls_rsa_get_len( rsa ) );
 8012afa:	4628      	mov	r0, r5
 8012afc:	f001 fb09 	bl	8014112 <mbedtls_rsa_get_len>
 8012b00:	00c0      	lsls	r0, r0, #3
    if( bits > PSA_VENDOR_RSA_MAX_KEY_BITS )
 8012b02:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8012b06:	d827      	bhi.n	8012b58 <psa_import_key_into_slot+0x298>
    mbedtls_mpi_init( &n );
 8012b08:	a805      	add	r0, sp, #20
 8012b0a:	f7f8 fc80 	bl	800b40e <mbedtls_mpi_init>
    status = mbedtls_to_psa_error(
 8012b0e:	4623      	mov	r3, r4
 8012b10:	4622      	mov	r2, r4
 8012b12:	e9cd 4400 	strd	r4, r4, [sp]
 8012b16:	a905      	add	r1, sp, #20
 8012b18:	4628      	mov	r0, r5
 8012b1a:	f001 fa39 	bl	8013f90 <mbedtls_rsa_export>
 8012b1e:	f7ff fbc7 	bl	80122b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 8012b22:	4604      	mov	r4, r0
 8012b24:	b938      	cbnz	r0, 8012b36 <psa_import_key_into_slot+0x276>
        if( mbedtls_mpi_bitlen( &n ) % 8 != 0 )
 8012b26:	a805      	add	r0, sp, #20
 8012b28:	f7f8 fd95 	bl	800b656 <mbedtls_mpi_bitlen>
            status = PSA_ERROR_NOT_SUPPORTED;
 8012b2c:	f010 0f07 	tst.w	r0, #7
 8012b30:	bf18      	it	ne
 8012b32:	f06f 0485 	mvnne.w	r4, #133	; 0x85
    mbedtls_mpi_free( &n );
 8012b36:	a805      	add	r0, sp, #20
 8012b38:	f7f8 fc6f 	bl	800b41a <mbedtls_mpi_free>
    if( status != PSA_SUCCESS )
 8012b3c:	b17c      	cbz	r4, 8012b5e <psa_import_key_into_slot+0x29e>
        mbedtls_pk_free( &pk );
 8012b3e:	a803      	add	r0, sp, #12
 8012b40:	f7fe fce0 	bl	8011504 <mbedtls_pk_free>
 8012b44:	e6da      	b.n	80128fc <psa_import_key_into_slot+0x3c>
        status = mbedtls_to_psa_error(
 8012b46:	462a      	mov	r2, r5
 8012b48:	4639      	mov	r1, r7
 8012b4a:	a803      	add	r0, sp, #12
 8012b4c:	f7ff f9dc 	bl	8011f08 <mbedtls_pk_parse_public_key>
 8012b50:	e7c9      	b.n	8012ae6 <psa_import_key_into_slot+0x226>
        status = PSA_ERROR_INVALID_ARGUMENT;
 8012b52:	f06f 0486 	mvn.w	r4, #134	; 0x86
 8012b56:	e7f2      	b.n	8012b3e <psa_import_key_into_slot+0x27e>
        status = PSA_ERROR_NOT_SUPPORTED;
 8012b58:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8012b5c:	e7ef      	b.n	8012b3e <psa_import_key_into_slot+0x27e>
    *p_rsa = rsa;
 8012b5e:	61f5      	str	r5, [r6, #28]
 8012b60:	e6cc      	b.n	80128fc <psa_import_key_into_slot+0x3c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 8012b62:	f06f 0486 	mvn.w	r4, #134	; 0x86
 8012b66:	e6c9      	b.n	80128fc <psa_import_key_into_slot+0x3c>
            return( PSA_ERROR_NOT_SUPPORTED );
 8012b68:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8012b6c:	e6c6      	b.n	80128fc <psa_import_key_into_slot+0x3c>
 8012b6e:	bf00      	nop
 8012b70:	70030000 	.word	0x70030000
 8012b74:	08019640 	.word	0x08019640
 8012b78:	200070d4 	.word	0x200070d4
 8012b7c:	0800e32d 	.word	0x0800e32d
 8012b80:	60030000 	.word	0x60030000
 8012b84:	60010000 	.word	0x60010000

08012b88 <psa_wipe_key_slot>:
{
 8012b88:	b538      	push	{r3, r4, r5, lr}
    if( slot->type == PSA_KEY_TYPE_NONE )
 8012b8a:	6804      	ldr	r4, [r0, #0]
{
 8012b8c:	4605      	mov	r5, r0
    if( slot->type == PSA_KEY_TYPE_NONE )
 8012b8e:	b144      	cbz	r4, 8012ba2 <psa_wipe_key_slot+0x1a>
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 8012b90:	f004 43c0 	and.w	r3, r4, #1610612736	; 0x60000000
    else if( key_type_is_raw_bytes( slot->type ) )
 8012b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b98:	d10a      	bne.n	8012bb0 <psa_wipe_key_slot+0x28>
        mbedtls_free( slot->data.ecp );
 8012b9a:	69e8      	ldr	r0, [r5, #28]
 8012b9c:	f003 ff76 	bl	8016a8c <free>
    return( PSA_SUCCESS );
 8012ba0:	2400      	movs	r4, #0
    memset( slot, 0, sizeof( *slot ) );
 8012ba2:	2224      	movs	r2, #36	; 0x24
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	f003 ffab 	bl	8016b02 <memset>
}
 8012bac:	4620      	mov	r0, r4
 8012bae:	bd38      	pop	{r3, r4, r5, pc}
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 8012bb0:	4b0a      	ldr	r3, [pc, #40]	; (8012bdc <psa_wipe_key_slot+0x54>)
 8012bb2:	f024 5280 	bic.w	r2, r4, #268435456	; 0x10000000
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d103      	bne.n	8012bc2 <psa_wipe_key_slot+0x3a>
        mbedtls_rsa_free( slot->data.rsa );
 8012bba:	69c0      	ldr	r0, [r0, #28]
 8012bbc:	f001 ff68 	bl	8014a90 <mbedtls_rsa_free>
 8012bc0:	e7eb      	b.n	8012b9a <psa_wipe_key_slot+0x12>
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 8012bc2:	4b07      	ldr	r3, [pc, #28]	; (8012be0 <psa_wipe_key_slot+0x58>)
 8012bc4:	4a07      	ldr	r2, [pc, #28]	; (8012be4 <psa_wipe_key_slot+0x5c>)
 8012bc6:	4023      	ands	r3, r4
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d103      	bne.n	8012bd4 <psa_wipe_key_slot+0x4c>
        mbedtls_ecp_keypair_free( slot->data.ecp );
 8012bcc:	69c0      	ldr	r0, [r0, #28]
 8012bce:	f7fc fb4b 	bl	800f268 <mbedtls_ecp_keypair_free>
 8012bd2:	e7e2      	b.n	8012b9a <psa_wipe_key_slot+0x12>
        return( PSA_ERROR_TAMPERING_DETECTED );
 8012bd4:	f06f 0496 	mvn.w	r4, #150	; 0x96
 8012bd8:	e7e3      	b.n	8012ba2 <psa_wipe_key_slot+0x1a>
 8012bda:	bf00      	nop
 8012bdc:	60010000 	.word	0x60010000
 8012be0:	efff0000 	.word	0xefff0000
 8012be4:	60030000 	.word	0x60030000

08012be8 <psa_import_key>:
{
 8012be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bea:	460e      	mov	r6, r1
    status = psa_get_empty_key_slot( handle, &slot );
 8012bec:	a901      	add	r1, sp, #4
{
 8012bee:	4614      	mov	r4, r2
 8012bf0:	461d      	mov	r5, r3
    status = psa_get_empty_key_slot( handle, &slot );
 8012bf2:	f7ff fce1 	bl	80125b8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 8012bf6:	b948      	cbnz	r0, 8012c0c <psa_import_key+0x24>
    slot->type = type;
 8012bf8:	9801      	ldr	r0, [sp, #4]
    status = psa_import_key_into_slot( slot, data, data_length );
 8012bfa:	462a      	mov	r2, r5
    slot->type = type;
 8012bfc:	6006      	str	r6, [r0, #0]
    status = psa_import_key_into_slot( slot, data, data_length );
 8012bfe:	4621      	mov	r1, r4
 8012c00:	f7ff fe5e 	bl	80128c0 <psa_import_key_into_slot>
    if( status != PSA_SUCCESS )
 8012c04:	b110      	cbz	r0, 8012c0c <psa_import_key+0x24>
        slot->type = PSA_KEY_TYPE_NONE;
 8012c06:	9b01      	ldr	r3, [sp, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	601a      	str	r2, [r3, #0]
}
 8012c0c:	b002      	add	sp, #8
 8012c0e:	bd70      	pop	{r4, r5, r6, pc}

08012c10 <psa_destroy_key>:
{
 8012c10:	b507      	push	{r0, r1, r2, lr}
    status = psa_get_key_slot( handle, &slot );
 8012c12:	a901      	add	r1, sp, #4
 8012c14:	f000 ff78 	bl	8013b08 <psa_get_key_slot>
    if( status != PSA_SUCCESS )
 8012c18:	b910      	cbnz	r0, 8012c20 <psa_destroy_key+0x10>
    status = psa_wipe_key_slot( slot );
 8012c1a:	9801      	ldr	r0, [sp, #4]
 8012c1c:	f7ff ffb4 	bl	8012b88 <psa_wipe_key_slot>
}
 8012c20:	b003      	add	sp, #12
 8012c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012c28 <psa_hash_abort>:
    switch( operation->alg )
 8012c28:	6803      	ldr	r3, [r0, #0]
 8012c2a:	4a0c      	ldr	r2, [pc, #48]	; (8012c5c <psa_hash_abort+0x34>)
 8012c2c:	4293      	cmp	r3, r2
{
 8012c2e:	b510      	push	{r4, lr}
 8012c30:	4604      	mov	r4, r0
    switch( operation->alg )
 8012c32:	d00d      	beq.n	8012c50 <psa_hash_abort+0x28>
 8012c34:	d803      	bhi.n	8012c3e <psa_hash_abort+0x16>
 8012c36:	b173      	cbz	r3, 8012c56 <psa_hash_abort+0x2e>
            return( PSA_ERROR_BAD_STATE );
 8012c38:	f06f 0088 	mvn.w	r0, #136	; 0x88
 8012c3c:	e00d      	b.n	8012c5a <psa_hash_abort+0x32>
    switch( operation->alg )
 8012c3e:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8012c42:	3b08      	subs	r3, #8
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d8f7      	bhi.n	8012c38 <psa_hash_abort+0x10>
            mbedtls_sha256_free( &operation->ctx.sha256 );
 8012c48:	3004      	adds	r0, #4
 8012c4a:	f003 fa54 	bl	80160f6 <mbedtls_sha256_free>
            break;
 8012c4e:	e002      	b.n	8012c56 <psa_hash_abort+0x2e>
            mbedtls_sha1_free( &operation->ctx.sha1 );
 8012c50:	3004      	adds	r0, #4
 8012c52:	f002 fa55 	bl	8015100 <mbedtls_sha1_free>
    operation->alg = 0;
 8012c56:	2000      	movs	r0, #0
 8012c58:	6020      	str	r0, [r4, #0]
}
 8012c5a:	bd10      	pop	{r4, pc}
 8012c5c:	01000005 	.word	0x01000005

08012c60 <psa_hmac_abort_internal>:
{
 8012c60:	b510      	push	{r4, lr}
    mbedtls_platform_zeroize( hmac->opad, sizeof( hmac->opad ) );
 8012c62:	2140      	movs	r1, #64	; 0x40
{
 8012c64:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( hmac->opad, sizeof( hmac->opad ) );
 8012c66:	3070      	adds	r0, #112	; 0x70
 8012c68:	f7ff fb1a 	bl	80122a0 <mbedtls_platform_zeroize>
    return( psa_hash_abort( &hmac->hash_ctx ) );
 8012c6c:	4620      	mov	r0, r4
}
 8012c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return( psa_hash_abort( &hmac->hash_ctx ) );
 8012c72:	f7ff bfd9 	b.w	8012c28 <psa_hash_abort>
	...

08012c78 <psa_hash_update.part.8>:
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 8012c78:	b538      	push	{r3, r4, r5, lr}
    switch( operation->alg )
 8012c7a:	6803      	ldr	r3, [r0, #0]
psa_status_t psa_hash_update( psa_hash_operation_t *operation,
 8012c7c:	4604      	mov	r4, r0
    switch( operation->alg )
 8012c7e:	480e      	ldr	r0, [pc, #56]	; (8012cb8 <psa_hash_update.part.8+0x40>)
 8012c80:	4283      	cmp	r3, r0
 8012c82:	d008      	beq.n	8012c96 <psa_hash_update.part.8+0x1e>
 8012c84:	d304      	bcc.n	8012c90 <psa_hash_update.part.8+0x18>
 8012c86:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8012c8a:	3b08      	subs	r3, #8
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d90f      	bls.n	8012cb0 <psa_hash_update.part.8+0x38>
}
 8012c90:	f06f 0088 	mvn.w	r0, #136	; 0x88
 8012c94:	bd38      	pop	{r3, r4, r5, pc}
            ret = mbedtls_sha1_update_ret( &operation->ctx.sha1,
 8012c96:	1d20      	adds	r0, r4, #4
 8012c98:	f003 f958 	bl	8015f4c <mbedtls_sha1_update_ret>
            ret = mbedtls_sha256_update_ret( &operation->ctx.sha256,
 8012c9c:	4605      	mov	r5, r0
    if( ret != 0 )
 8012c9e:	b110      	cbz	r0, 8012ca6 <psa_hash_update.part.8+0x2e>
        psa_hash_abort( operation );
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f7ff ffc1 	bl	8012c28 <psa_hash_abort>
    return( mbedtls_to_psa_error( ret ) );
 8012ca6:	4628      	mov	r0, r5
}
 8012ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return( mbedtls_to_psa_error( ret ) );
 8012cac:	f7ff bb00 	b.w	80122b0 <mbedtls_to_psa_error>
            ret = mbedtls_sha256_update_ret( &operation->ctx.sha256,
 8012cb0:	1d20      	adds	r0, r4, #4
 8012cb2:	f003 fde1 	bl	8016878 <mbedtls_sha256_update_ret>
 8012cb6:	e7f1      	b.n	8012c9c <psa_hash_update.part.8+0x24>
 8012cb8:	01000005 	.word	0x01000005

08012cbc <psa_hash_setup>:
{
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( operation->alg != 0 )
 8012cbe:	6807      	ldr	r7, [r0, #0]
{
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	460c      	mov	r4, r1
    if( operation->alg != 0 )
 8012cc4:	bba7      	cbnz	r7, 8012d30 <psa_hash_setup+0x74>
    switch( alg )
 8012cc6:	4b1c      	ldr	r3, [pc, #112]	; (8012d38 <psa_hash_setup+0x7c>)
 8012cc8:	4299      	cmp	r1, r3
 8012cca:	d014      	beq.n	8012cf6 <psa_hash_setup+0x3a>
 8012ccc:	3301      	adds	r3, #1
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	d01a      	beq.n	8012d08 <psa_hash_setup+0x4c>
 8012cd2:	3b04      	subs	r3, #4
 8012cd4:	4299      	cmp	r1, r3
 8012cd6:	d11d      	bne.n	8012d14 <psa_hash_setup+0x58>
            mbedtls_sha1_init( &operation->ctx.sha1 );
 8012cd8:	1d06      	adds	r6, r0, #4
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f002 fa0c 	bl	80150f8 <mbedtls_sha1_init>
            ret = mbedtls_sha1_starts_ret( &operation->ctx.sha1 );
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f002 fa17 	bl	8015114 <mbedtls_sha1_starts_ret>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 8012ce6:	4606      	mov	r6, r0
    if( ret == 0 )
 8012ce8:	b9f0      	cbnz	r0, 8012d28 <psa_hash_setup+0x6c>
        operation->alg = alg;
 8012cea:	602c      	str	r4, [r5, #0]
    return( mbedtls_to_psa_error( ret ) );
 8012cec:	4630      	mov	r0, r6
}
 8012cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return( mbedtls_to_psa_error( ret ) );
 8012cf2:	f7ff badd 	b.w	80122b0 <mbedtls_to_psa_error>
            mbedtls_sha256_init( &operation->ctx.sha256 );
 8012cf6:	1d06      	adds	r6, r0, #4
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	f003 f9f8 	bl	80160ee <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 1 );
 8012cfe:	2101      	movs	r1, #1
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 8012d00:	4630      	mov	r0, r6
 8012d02:	f003 fa03 	bl	801610c <mbedtls_sha256_starts_ret>
 8012d06:	e7ee      	b.n	8012ce6 <psa_hash_setup+0x2a>
            mbedtls_sha256_init( &operation->ctx.sha256 );
 8012d08:	1d06      	adds	r6, r0, #4
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f003 f9ef 	bl	80160ee <mbedtls_sha256_init>
            ret = mbedtls_sha256_starts_ret( &operation->ctx.sha256, 0 );
 8012d10:	4639      	mov	r1, r7
 8012d12:	e7f5      	b.n	8012d00 <psa_hash_setup+0x44>
            return( PSA_ALG_IS_HASH( alg ) ?
 8012d14:	f001 44fe 	and.w	r4, r1, #2130706432	; 0x7f000000
                    PSA_ERROR_NOT_SUPPORTED :
 8012d18:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8012d1c:	bf0c      	ite	eq
 8012d1e:	f06f 0085 	mvneq.w	r0, #133	; 0x85
 8012d22:	f06f 0086 	mvnne.w	r0, #134	; 0x86
}
 8012d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        psa_hash_abort( operation );
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f7ff ff7d 	bl	8012c28 <psa_hash_abort>
 8012d2e:	e7dd      	b.n	8012cec <psa_hash_setup+0x30>
        return( PSA_ERROR_BAD_STATE );
 8012d30:	f06f 0088 	mvn.w	r0, #136	; 0x88
 8012d34:	e7f7      	b.n	8012d26 <psa_hash_setup+0x6a>
 8012d36:	bf00      	nop
 8012d38:	01000008 	.word	0x01000008

08012d3c <psa_hash_update>:
    if( input_length == 0 )
 8012d3c:	b10a      	cbz	r2, 8012d42 <psa_hash_update+0x6>
 8012d3e:	f7ff bf9b 	b.w	8012c78 <psa_hash_update.part.8>
}
 8012d42:	4610      	mov	r0, r2
 8012d44:	4770      	bx	lr
	...

08012d48 <psa_hash_finish>:
{
 8012d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 8012d4c:	7804      	ldrb	r4, [r0, #0]
 8012d4e:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
{
 8012d52:	461f      	mov	r7, r3
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 8012d54:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	2b02      	cmp	r3, #2
{
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	4688      	mov	r8, r1
 8012d60:	4616      	mov	r6, r2
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 8012d62:	d93a      	bls.n	8012dda <psa_hash_finish+0x92>
 8012d64:	f104 437f 	add.w	r3, r4, #4278190080	; 0xff000000
 8012d68:	3b04      	subs	r3, #4
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d937      	bls.n	8012dde <psa_hash_finish+0x96>
 8012d6e:	4b2e      	ldr	r3, [pc, #184]	; (8012e28 <psa_hash_finish+0xe0>)
 8012d70:	429c      	cmp	r4, r3
 8012d72:	d038      	beq.n	8012de6 <psa_hash_finish+0x9e>
 8012d74:	3301      	adds	r3, #1
 8012d76:	429c      	cmp	r4, r3
 8012d78:	d037      	beq.n	8012dea <psa_hash_finish+0xa2>
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	429c      	cmp	r4, r3
 8012d7e:	d036      	beq.n	8012dee <psa_hash_finish+0xa6>
 8012d80:	3301      	adds	r3, #1
 8012d82:	429c      	cmp	r4, r3
 8012d84:	d02d      	beq.n	8012de2 <psa_hash_finish+0x9a>
 8012d86:	3301      	adds	r3, #1
 8012d88:	429c      	cmp	r4, r3
 8012d8a:	d02c      	beq.n	8012de6 <psa_hash_finish+0x9e>
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	429c      	cmp	r4, r3
 8012d90:	d02b      	beq.n	8012dea <psa_hash_finish+0xa2>
 8012d92:	3303      	adds	r3, #3
 8012d94:	429c      	cmp	r4, r3
 8012d96:	d026      	beq.n	8012de6 <psa_hash_finish+0x9e>
 8012d98:	3301      	adds	r3, #1
 8012d9a:	429c      	cmp	r4, r3
 8012d9c:	d025      	beq.n	8012dea <psa_hash_finish+0xa2>
 8012d9e:	3301      	adds	r3, #1
 8012da0:	429c      	cmp	r4, r3
 8012da2:	d024      	beq.n	8012dee <psa_hash_finish+0xa6>
 8012da4:	3301      	adds	r3, #1
 8012da6:	429c      	cmp	r4, r3
 8012da8:	bf0c      	ite	eq
 8012daa:	2440      	moveq	r4, #64	; 0x40
 8012dac:	2400      	movne	r4, #0
    *hash_length = hash_size;
 8012dae:	603e      	str	r6, [r7, #0]
    if( hash_size != 0 )
 8012db0:	b126      	cbz	r6, 8012dbc <psa_hash_finish+0x74>
        memset( hash, '!', hash_size );
 8012db2:	4632      	mov	r2, r6
 8012db4:	2121      	movs	r1, #33	; 0x21
 8012db6:	4640      	mov	r0, r8
 8012db8:	f003 fea3 	bl	8016b02 <memset>
    if( hash_size < actual_hash_length )
 8012dbc:	42b4      	cmp	r4, r6
 8012dbe:	d82b      	bhi.n	8012e18 <psa_hash_finish+0xd0>
    switch( operation->alg )
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	4a1a      	ldr	r2, [pc, #104]	; (8012e2c <psa_hash_finish+0xe4>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d014      	beq.n	8012df2 <psa_hash_finish+0xaa>
 8012dc8:	d304      	bcc.n	8012dd4 <psa_hash_finish+0x8c>
 8012dca:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8012dce:	3b08      	subs	r3, #8
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d91c      	bls.n	8012e0e <psa_hash_finish+0xc6>
            return( PSA_ERROR_BAD_STATE );
 8012dd4:	f06f 0688 	mvn.w	r6, #136	; 0x88
 8012dd8:	e023      	b.n	8012e22 <psa_hash_finish+0xda>
    size_t actual_hash_length = PSA_HASH_SIZE( operation->alg );
 8012dda:	2410      	movs	r4, #16
 8012ddc:	e7e7      	b.n	8012dae <psa_hash_finish+0x66>
 8012dde:	2414      	movs	r4, #20
 8012de0:	e7e5      	b.n	8012dae <psa_hash_finish+0x66>
 8012de2:	2440      	movs	r4, #64	; 0x40
 8012de4:	e7e3      	b.n	8012dae <psa_hash_finish+0x66>
 8012de6:	241c      	movs	r4, #28
 8012de8:	e7e1      	b.n	8012dae <psa_hash_finish+0x66>
 8012dea:	2420      	movs	r4, #32
 8012dec:	e7df      	b.n	8012dae <psa_hash_finish+0x66>
 8012dee:	2430      	movs	r4, #48	; 0x30
 8012df0:	e7dd      	b.n	8012dae <psa_hash_finish+0x66>
            ret = mbedtls_sha1_finish_ret( &operation->ctx.sha1, hash );
 8012df2:	4641      	mov	r1, r8
 8012df4:	1d28      	adds	r0, r5, #4
 8012df6:	f003 f8e6 	bl	8015fc6 <mbedtls_sha1_finish_ret>
    status = mbedtls_to_psa_error( ret );
 8012dfa:	f7ff fa59 	bl	80122b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 8012dfe:	4606      	mov	r6, r0
 8012e00:	b960      	cbnz	r0, 8012e1c <psa_hash_finish+0xd4>
        *hash_length = actual_hash_length;
 8012e02:	603c      	str	r4, [r7, #0]
        return( psa_hash_abort( operation ) );
 8012e04:	4628      	mov	r0, r5
}
 8012e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( psa_hash_abort( operation ) );
 8012e0a:	f7ff bf0d 	b.w	8012c28 <psa_hash_abort>
            ret = mbedtls_sha256_finish_ret( &operation->ctx.sha256, hash );
 8012e0e:	4641      	mov	r1, r8
 8012e10:	1d28      	adds	r0, r5, #4
 8012e12:	f003 fd6e 	bl	80168f2 <mbedtls_sha256_finish_ret>
            break;
 8012e16:	e7f0      	b.n	8012dfa <psa_hash_finish+0xb2>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 8012e18:	f06f 0689 	mvn.w	r6, #137	; 0x89
        psa_hash_abort( operation );
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	f7ff ff03 	bl	8012c28 <psa_hash_abort>
}
 8012e22:	4630      	mov	r0, r6
 8012e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e28:	01000008 	.word	0x01000008
 8012e2c:	01000005 	.word	0x01000005

08012e30 <psa_hmac_setup_internal>:
{
 8012e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e34:	461f      	mov	r7, r3
 8012e36:	b093      	sub	sp, #76	; 0x4c
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
{
 8012e3e:	9201      	str	r2, [sp, #4]
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 8012e40:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 8012e44:	3a01      	subs	r2, #1
 8012e46:	2a02      	cmp	r2, #2
{
 8012e48:	4606      	mov	r6, r0
 8012e4a:	4688      	mov	r8, r1
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 8012e4c:	d933      	bls.n	8012eb6 <psa_hmac_setup_internal+0x86>
 8012e4e:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 8012e52:	3a04      	subs	r2, #4
 8012e54:	2a01      	cmp	r2, #1
 8012e56:	d930      	bls.n	8012eba <psa_hmac_setup_internal+0x8a>
 8012e58:	4a4b      	ldr	r2, [pc, #300]	; (8012f88 <psa_hmac_setup_internal+0x158>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d031      	beq.n	8012ec2 <psa_hmac_setup_internal+0x92>
 8012e5e:	3201      	adds	r2, #1
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d030      	beq.n	8012ec6 <psa_hmac_setup_internal+0x96>
 8012e64:	3201      	adds	r2, #1
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d02f      	beq.n	8012eca <psa_hmac_setup_internal+0x9a>
 8012e6a:	3201      	adds	r2, #1
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d026      	beq.n	8012ebe <psa_hmac_setup_internal+0x8e>
 8012e70:	3201      	adds	r2, #1
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d025      	beq.n	8012ec2 <psa_hmac_setup_internal+0x92>
 8012e76:	3201      	adds	r2, #1
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d024      	beq.n	8012ec6 <psa_hmac_setup_internal+0x96>
 8012e7c:	3203      	adds	r2, #3
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	d01f      	beq.n	8012ec2 <psa_hmac_setup_internal+0x92>
 8012e82:	3201      	adds	r2, #1
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d01e      	beq.n	8012ec6 <psa_hmac_setup_internal+0x96>
 8012e88:	3201      	adds	r2, #1
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d01d      	beq.n	8012eca <psa_hmac_setup_internal+0x9a>
 8012e8e:	3201      	adds	r2, #1
 8012e90:	4293      	cmp	r3, r2
 8012e92:	bf0c      	ite	eq
 8012e94:	2340      	moveq	r3, #64	; 0x40
 8012e96:	2300      	movne	r3, #0
 8012e98:	f107 427f 	add.w	r2, r7, #4278190080	; 0xff000000
 8012e9c:	3a01      	subs	r2, #1
 8012e9e:	2a0a      	cmp	r2, #10
 8012ea0:	d815      	bhi.n	8012ece <psa_hmac_setup_internal+0x9e>
 8012ea2:	493a      	ldr	r1, [pc, #232]	; (8012f8c <psa_hmac_setup_internal+0x15c>)
 8012ea4:	440a      	add	r2, r1
 8012ea6:	f892 9021 	ldrb.w	r9, [r2, #33]	; 0x21
    if( block_size > sizeof( ipad ) )
 8012eaa:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8012eae:	d910      	bls.n	8012ed2 <psa_hmac_setup_internal+0xa2>
        return( PSA_ERROR_NOT_SUPPORTED );
 8012eb0:	f06f 0485 	mvn.w	r4, #133	; 0x85
 8012eb4:	e04e      	b.n	8012f54 <psa_hmac_setup_internal+0x124>
    size_t hash_size = PSA_HASH_SIZE( hash_alg );
 8012eb6:	2310      	movs	r3, #16
 8012eb8:	e7ee      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012eba:	2314      	movs	r3, #20
 8012ebc:	e7ec      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012ebe:	2340      	movs	r3, #64	; 0x40
 8012ec0:	e7ea      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012ec2:	231c      	movs	r3, #28
 8012ec4:	e7e8      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012ec6:	2320      	movs	r3, #32
 8012ec8:	e7e6      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012eca:	2330      	movs	r3, #48	; 0x30
 8012ecc:	e7e4      	b.n	8012e98 <psa_hmac_setup_internal+0x68>
 8012ece:	f04f 0900 	mov.w	r9, #0
    if( block_size < hash_size )
 8012ed2:	454b      	cmp	r3, r9
 8012ed4:	d8ec      	bhi.n	8012eb0 <psa_hmac_setup_internal+0x80>
    if( key_length > block_size )
 8012ed6:	9c01      	ldr	r4, [sp, #4]
 8012ed8:	454c      	cmp	r4, r9
 8012eda:	ad02      	add	r5, sp, #8
 8012edc:	d93e      	bls.n	8012f5c <psa_hmac_setup_internal+0x12c>
        status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 8012ede:	4639      	mov	r1, r7
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f7ff feeb 	bl	8012cbc <psa_hash_setup>
        if( status != PSA_SUCCESS )
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	bb80      	cbnz	r0, 8012f4c <psa_hmac_setup_internal+0x11c>
        status = psa_hash_update( &hmac->hash_ctx, key, key_length );
 8012eea:	9a01      	ldr	r2, [sp, #4]
 8012eec:	4641      	mov	r1, r8
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f7ff ff24 	bl	8012d3c <psa_hash_update>
        if( status != PSA_SUCCESS )
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	bb48      	cbnz	r0, 8012f4c <psa_hmac_setup_internal+0x11c>
        status = psa_hash_finish( &hmac->hash_ctx,
 8012ef8:	ab01      	add	r3, sp, #4
 8012efa:	2240      	movs	r2, #64	; 0x40
 8012efc:	4629      	mov	r1, r5
 8012efe:	4630      	mov	r0, r6
 8012f00:	f7ff ff22 	bl	8012d48 <psa_hash_finish>
        if( status != PSA_SUCCESS )
 8012f04:	4604      	mov	r4, r0
 8012f06:	bb08      	cbnz	r0, 8012f4c <psa_hmac_setup_internal+0x11c>
    for( i = 0; i < key_length; i++ )
 8012f08:	9c01      	ldr	r4, [sp, #4]
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	429c      	cmp	r4, r3
 8012f0e:	d12d      	bne.n	8012f6c <psa_hmac_setup_internal+0x13c>
    memset( ipad + key_length, 0x36, block_size - key_length );
 8012f10:	eba9 0804 	sub.w	r8, r9, r4
 8012f14:	4642      	mov	r2, r8
 8012f16:	2136      	movs	r1, #54	; 0x36
 8012f18:	1928      	adds	r0, r5, r4
 8012f1a:	f003 fdf2 	bl	8016b02 <memset>
 8012f1e:	f106 0270 	add.w	r2, r6, #112	; 0x70
    for( i = 0; i < key_length; i++ )
 8012f22:	2300      	movs	r3, #0
 8012f24:	4610      	mov	r0, r2
 8012f26:	42a3      	cmp	r3, r4
 8012f28:	d126      	bne.n	8012f78 <psa_hmac_setup_internal+0x148>
    memset( hmac->opad + key_length, 0x5C, block_size - key_length );
 8012f2a:	4642      	mov	r2, r8
 8012f2c:	215c      	movs	r1, #92	; 0x5c
 8012f2e:	4418      	add	r0, r3
 8012f30:	f003 fde7 	bl	8016b02 <memset>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 8012f34:	4639      	mov	r1, r7
 8012f36:	4630      	mov	r0, r6
 8012f38:	f7ff fec0 	bl	8012cbc <psa_hash_setup>
    if( status != PSA_SUCCESS )
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	b928      	cbnz	r0, 8012f4c <psa_hmac_setup_internal+0x11c>
    status = psa_hash_update( &hmac->hash_ctx, ipad, block_size );
 8012f40:	464a      	mov	r2, r9
 8012f42:	4629      	mov	r1, r5
 8012f44:	4630      	mov	r0, r6
 8012f46:	f7ff fef9 	bl	8012d3c <psa_hash_update>
 8012f4a:	4604      	mov	r4, r0
    mbedtls_platform_zeroize( ipad, key_length );
 8012f4c:	9901      	ldr	r1, [sp, #4]
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7ff f9a6 	bl	80122a0 <mbedtls_platform_zeroize>
}
 8012f54:	4620      	mov	r0, r4
 8012f56:	b013      	add	sp, #76	; 0x4c
 8012f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if( key_length != 0 )
 8012f5c:	2c00      	cmp	r4, #0
 8012f5e:	d0d7      	beq.n	8012f10 <psa_hmac_setup_internal+0xe0>
        memcpy( ipad, key, key_length );
 8012f60:	4622      	mov	r2, r4
 8012f62:	4641      	mov	r1, r8
 8012f64:	4628      	mov	r0, r5
 8012f66:	f003 fda8 	bl	8016aba <memcpy>
 8012f6a:	e7cd      	b.n	8012f08 <psa_hmac_setup_internal+0xd8>
        ipad[i] ^= 0x36;
 8012f6c:	5cea      	ldrb	r2, [r5, r3]
 8012f6e:	f082 0236 	eor.w	r2, r2, #54	; 0x36
 8012f72:	54ea      	strb	r2, [r5, r3]
    for( i = 0; i < key_length; i++ )
 8012f74:	3301      	adds	r3, #1
 8012f76:	e7c9      	b.n	8012f0c <psa_hmac_setup_internal+0xdc>
        hmac->opad[i] = ipad[i] ^ 0x36 ^ 0x5C;
 8012f78:	5ce9      	ldrb	r1, [r5, r3]
 8012f7a:	f081 016a 	eor.w	r1, r1, #106	; 0x6a
 8012f7e:	f802 1b01 	strb.w	r1, [r2], #1
    for( i = 0; i < key_length; i++ )
 8012f82:	3301      	adds	r3, #1
 8012f84:	e7cf      	b.n	8012f26 <psa_hmac_setup_internal+0xf6>
 8012f86:	bf00      	nop
 8012f88:	01000008 	.word	0x01000008
 8012f8c:	08019640 	.word	0x08019640

08012f90 <psa_hmac_finish_internal>:
{
 8012f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    psa_algorithm_t hash_alg = hmac->hash_ctx.alg;
 8012f94:	6807      	ldr	r7, [r0, #0]
 8012f96:	f107 437f 	add.w	r3, r7, #4278190080	; 0xff000000
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	2b0a      	cmp	r3, #10
{
 8012f9e:	4691      	mov	r9, r2
 8012fa0:	bf98      	it	ls
 8012fa2:	4a1e      	ldrls	r2, [pc, #120]	; (801301c <psa_hmac_finish_internal+0x8c>)
 8012fa4:	b08b      	sub	sp, #44	; 0x2c
 8012fa6:	bf98      	it	ls
 8012fa8:	189b      	addls	r3, r3, r2
    size_t hash_size = 0;
 8012faa:	f04f 0600 	mov.w	r6, #0
 8012fae:	9601      	str	r6, [sp, #4]
{
 8012fb0:	4688      	mov	r8, r1
 8012fb2:	bf98      	it	ls
 8012fb4:	f893 6021 	ldrbls.w	r6, [r3, #33]	; 0x21
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 8012fb8:	2220      	movs	r2, #32
 8012fba:	ab01      	add	r3, sp, #4
 8012fbc:	a902      	add	r1, sp, #8
{
 8012fbe:	4605      	mov	r5, r0
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 8012fc0:	f7ff fec2 	bl	8012d48 <psa_hash_finish>
    if( status != PSA_SUCCESS )
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	bb28      	cbnz	r0, 8013014 <psa_hmac_finish_internal+0x84>
    status = psa_hash_setup( &hmac->hash_ctx, hash_alg );
 8012fc8:	4639      	mov	r1, r7
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f7ff fe76 	bl	8012cbc <psa_hash_setup>
    if( status != PSA_SUCCESS )
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	b9d8      	cbnz	r0, 801300c <psa_hmac_finish_internal+0x7c>
    status = psa_hash_update( &hmac->hash_ctx, hmac->opad, block_size );
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f7ff feae 	bl	8012d3c <psa_hash_update>
    if( status != PSA_SUCCESS )
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	b998      	cbnz	r0, 801300c <psa_hmac_finish_internal+0x7c>
    status = psa_hash_update( &hmac->hash_ctx, tmp, hash_size );
 8012fe4:	9a01      	ldr	r2, [sp, #4]
 8012fe6:	a902      	add	r1, sp, #8
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7ff fea7 	bl	8012d3c <psa_hash_update>
    if( status != PSA_SUCCESS )
 8012fee:	4604      	mov	r4, r0
 8012ff0:	b960      	cbnz	r0, 801300c <psa_hmac_finish_internal+0x7c>
    status = psa_hash_finish( &hmac->hash_ctx, tmp, sizeof( tmp ), &hash_size );
 8012ff2:	ab01      	add	r3, sp, #4
 8012ff4:	2220      	movs	r2, #32
 8012ff6:	a902      	add	r1, sp, #8
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f7ff fea5 	bl	8012d48 <psa_hash_finish>
    if( status != PSA_SUCCESS )
 8012ffe:	4604      	mov	r4, r0
 8013000:	b920      	cbnz	r0, 801300c <psa_hmac_finish_internal+0x7c>
    memcpy( mac, tmp, mac_size );
 8013002:	464a      	mov	r2, r9
 8013004:	a902      	add	r1, sp, #8
 8013006:	4640      	mov	r0, r8
 8013008:	f003 fd57 	bl	8016aba <memcpy>
    mbedtls_platform_zeroize( tmp, hash_size );
 801300c:	9901      	ldr	r1, [sp, #4]
 801300e:	a802      	add	r0, sp, #8
 8013010:	f7ff f946 	bl	80122a0 <mbedtls_platform_zeroize>
}
 8013014:	4620      	mov	r0, r4
 8013016:	b00b      	add	sp, #44	; 0x2c
 8013018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801301c:	08019640 	.word	0x08019640

08013020 <psa_mac_finish_internal>:
{
 8013020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013022:	4604      	mov	r4, r0
 8013024:	4610      	mov	r0, r2
    if( ! operation->key_set )
 8013026:	7923      	ldrb	r3, [r4, #4]
 8013028:	07da      	lsls	r2, r3, #31
{
 801302a:	460e      	mov	r6, r1
    if( ! operation->key_set )
 801302c:	d52e      	bpl.n	801308c <psa_mac_finish_internal+0x6c>
    if( operation->iv_required && ! operation->iv_set )
 801302e:	f003 0306 	and.w	r3, r3, #6
 8013032:	2b02      	cmp	r3, #2
 8013034:	d02a      	beq.n	801308c <psa_mac_finish_internal+0x6c>
    if( mac_size < operation->mac_size )
 8013036:	7962      	ldrb	r2, [r4, #5]
 8013038:	4282      	cmp	r2, r0
 801303a:	d824      	bhi.n	8013086 <psa_mac_finish_internal+0x66>
    if( operation->alg == PSA_ALG_CMAC )
 801303c:	6820      	ldr	r0, [r4, #0]
 801303e:	4b15      	ldr	r3, [pc, #84]	; (8013094 <psa_mac_finish_internal+0x74>)
 8013040:	4298      	cmp	r0, r3
 8013042:	d115      	bne.n	8013070 <psa_mac_finish_internal+0x50>
        int ret = mbedtls_cipher_cmac_finish( &operation->ctx.cmac, tmp );
 8013044:	4669      	mov	r1, sp
 8013046:	f104 0008 	add.w	r0, r4, #8
 801304a:	f7fa fef5 	bl	800de38 <mbedtls_cipher_cmac_finish>
        if( ret == 0 )
 801304e:	4605      	mov	r5, r0
 8013050:	b920      	cbnz	r0, 801305c <psa_mac_finish_internal+0x3c>
            memcpy( mac, tmp, operation->mac_size );
 8013052:	7962      	ldrb	r2, [r4, #5]
 8013054:	4669      	mov	r1, sp
 8013056:	4630      	mov	r0, r6
 8013058:	f003 fd2f 	bl	8016aba <memcpy>
        mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 801305c:	4668      	mov	r0, sp
 801305e:	2110      	movs	r1, #16
 8013060:	f7ff f91e 	bl	80122a0 <mbedtls_platform_zeroize>
        return( mbedtls_to_psa_error( ret ) );
 8013064:	4628      	mov	r0, r5
}
 8013066:	b004      	add	sp, #16
 8013068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_to_psa_error( ret ) );
 801306c:	f7ff b920 	b.w	80122b0 <mbedtls_to_psa_error>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 8013070:	4b09      	ldr	r3, [pc, #36]	; (8013098 <psa_mac_finish_internal+0x78>)
 8013072:	4003      	ands	r3, r0
 8013074:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 8013078:	d108      	bne.n	801308c <psa_mac_finish_internal+0x6c>
        return( psa_hmac_finish_internal( &operation->ctx.hmac,
 801307a:	f104 0008 	add.w	r0, r4, #8
 801307e:	f7ff ff87 	bl	8012f90 <psa_hmac_finish_internal>
}
 8013082:	b004      	add	sp, #16
 8013084:	bd70      	pop	{r4, r5, r6, pc}
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 8013086:	f06f 0089 	mvn.w	r0, #137	; 0x89
 801308a:	e7fa      	b.n	8013082 <psa_mac_finish_internal+0x62>
        return( PSA_ERROR_BAD_STATE );
 801308c:	f06f 0088 	mvn.w	r0, #136	; 0x88
 8013090:	e7f7      	b.n	8013082 <psa_mac_finish_internal+0x62>
 8013092:	bf00      	nop
 8013094:	02c00002 	.word	0x02c00002
 8013098:	7fc00000 	.word	0x7fc00000

0801309c <psa_mac_abort>:
    if( operation->alg == 0 )
 801309c:	6803      	ldr	r3, [r0, #0]
{
 801309e:	b510      	push	{r4, lr}
 80130a0:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 80130a2:	b1f3      	cbz	r3, 80130e2 <psa_mac_abort+0x46>
    if( operation->alg == PSA_ALG_CMAC )
 80130a4:	4a10      	ldr	r2, [pc, #64]	; (80130e8 <psa_mac_abort+0x4c>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d10b      	bne.n	80130c2 <psa_mac_abort+0x26>
        mbedtls_cipher_free( &operation->ctx.cmac );
 80130aa:	3008      	adds	r0, #8
 80130ac:	f7fa fbca 	bl	800d844 <mbedtls_cipher_free>
    operation->key_set = 0;
 80130b0:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 80130b2:	2000      	movs	r0, #0
    operation->is_sign = 0;
 80130b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130b8:	f360 1304 	bfi	r3, r0, #4, #1
    operation->alg = 0;
 80130bc:	6020      	str	r0, [r4, #0]
    operation->is_sign = 0;
 80130be:	7123      	strb	r3, [r4, #4]
}
 80130c0:	bd10      	pop	{r4, pc}
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 80130c2:	4a0a      	ldr	r2, [pc, #40]	; (80130ec <psa_mac_abort+0x50>)
 80130c4:	401a      	ands	r2, r3
 80130c6:	f1b2 7f20 	cmp.w	r2, #41943040	; 0x2800000
 80130ca:	d103      	bne.n	80130d4 <psa_mac_abort+0x38>
        psa_hmac_abort_internal( &operation->ctx.hmac );
 80130cc:	3008      	adds	r0, #8
 80130ce:	f7ff fdc7 	bl	8012c60 <psa_hmac_abort_internal>
 80130d2:	e7ed      	b.n	80130b0 <psa_mac_abort+0x14>
    memset( operation, 0, sizeof( *operation ) );
 80130d4:	22b8      	movs	r2, #184	; 0xb8
 80130d6:	2100      	movs	r1, #0
 80130d8:	f003 fd13 	bl	8016b02 <memset>
 80130dc:	f06f 0088 	mvn.w	r0, #136	; 0x88
 80130e0:	e7ee      	b.n	80130c0 <psa_mac_abort+0x24>
        return( PSA_SUCCESS );
 80130e2:	4618      	mov	r0, r3
 80130e4:	e7ec      	b.n	80130c0 <psa_mac_abort+0x24>
 80130e6:	bf00      	nop
 80130e8:	02c00002 	.word	0x02c00002
 80130ec:	7fc00000 	.word	0x7fc00000

080130f0 <psa_mac_setup>:
{
 80130f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80130f4:	4688      	mov	r8, r1
    if( operation->alg != 0 )
 80130f6:	6801      	ldr	r1, [r0, #0]
{
 80130f8:	4605      	mov	r5, r0
 80130fa:	4614      	mov	r4, r2
        is_sign ? PSA_KEY_USAGE_SIGN : PSA_KEY_USAGE_VERIFY;
 80130fc:	469a      	mov	sl, r3
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bf14      	ite	ne
 8013102:	f44f 6980 	movne.w	r9, #1024	; 0x400
 8013106:	f44f 6900 	moveq.w	r9, #2048	; 0x800
    psa_algorithm_t full_length_alg = PSA_ALG_FULL_LENGTH_MAC( alg );
 801310a:	f422 577c 	bic.w	r7, r2, #16128	; 0x3f00
    if( operation->alg != 0 )
 801310e:	2900      	cmp	r1, #0
 8013110:	f040 80c3 	bne.w	801329a <psa_mac_setup+0x1aa>
    operation->key_set = 0;
 8013114:	7906      	ldrb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 8013116:	4b65      	ldr	r3, [pc, #404]	; (80132ac <psa_mac_setup+0x1bc>)
    operation->alg = alg;
 8013118:	6007      	str	r7, [r0, #0]
    operation->key_set = 0;
 801311a:	f361 0600 	bfi	r6, r1, #0, #1
    operation->iv_set = 0;
 801311e:	f361 0682 	bfi	r6, r1, #2, #1
    operation->iv_required = 0;
 8013122:	f361 0641 	bfi	r6, r1, #1, #1
    operation->has_input = 0;
 8013126:	f361 06c3 	bfi	r6, r1, #3, #1
    operation->is_sign = 0;
 801312a:	f361 1604 	bfi	r6, r1, #4, #1
    if( alg == PSA_ALG_CMAC )
 801312e:	429f      	cmp	r7, r3
    operation->is_sign = 0;
 8013130:	7106      	strb	r6, [r0, #4]
    if( alg == PSA_ALG_CMAC )
 8013132:	d129      	bne.n	8013188 <psa_mac_setup+0x98>
        mbedtls_cipher_init( &operation->ctx.cmac );
 8013134:	3008      	adds	r0, #8
 8013136:	f7fa fb81 	bl	800d83c <mbedtls_cipher_init>
    if( is_sign )
 801313a:	f1ba 0f00 	cmp.w	sl, #0
 801313e:	d003      	beq.n	8013148 <psa_mac_setup+0x58>
        operation->is_sign = 1;
 8013140:	792b      	ldrb	r3, [r5, #4]
 8013142:	f043 0310 	orr.w	r3, r3, #16
 8013146:	712b      	strb	r3, [r5, #4]
    status = psa_get_key_from_slot( handle, &slot, usage, alg );
 8013148:	4640      	mov	r0, r8
 801314a:	4623      	mov	r3, r4
 801314c:	464a      	mov	r2, r9
 801314e:	a901      	add	r1, sp, #4
 8013150:	f7ff fae2 	bl	8012718 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 8013154:	4680      	mov	r8, r0
 8013156:	b998      	cbnz	r0, 8013180 <psa_mac_setup+0x90>
    key_bits = psa_get_key_bits( slot );
 8013158:	9801      	ldr	r0, [sp, #4]
 801315a:	f7ff fb4b 	bl	80127f4 <psa_get_key_bits>
    if( full_length_alg == PSA_ALG_CMAC )
 801315e:	4b53      	ldr	r3, [pc, #332]	; (80132ac <psa_mac_setup+0x1bc>)
 8013160:	429f      	cmp	r7, r3
    unsigned char truncated = PSA_MAC_TRUNCATED_LENGTH( alg );
 8013162:	f3c4 2605 	ubfx	r6, r4, #8, #6
    key_bits = psa_get_key_bits( slot );
 8013166:	4681      	mov	r9, r0
    if( full_length_alg == PSA_ALG_CMAC )
 8013168:	d146      	bne.n	80131f8 <psa_mac_setup+0x108>
        const mbedtls_cipher_info_t *cipher_info =
 801316a:	9901      	ldr	r1, [sp, #4]
 801316c:	4602      	mov	r2, r0
 801316e:	6809      	ldr	r1, [r1, #0]
 8013170:	4643      	mov	r3, r8
 8013172:	4638      	mov	r0, r7
 8013174:	f7ff fa34 	bl	80125e0 <mbedtls_cipher_info_from_psa>
        if( cipher_info == NULL )
 8013178:	4601      	mov	r1, r0
 801317a:	b9e8      	cbnz	r0, 80131b8 <psa_mac_setup+0xc8>
            status = PSA_ERROR_NOT_SUPPORTED;
 801317c:	f06f 0885 	mvn.w	r8, #133	; 0x85
        psa_mac_abort( operation );
 8013180:	4628      	mov	r0, r5
 8013182:	f7ff ff8b 	bl	801309c <psa_mac_abort>
 8013186:	e013      	b.n	80131b0 <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 8013188:	4b49      	ldr	r3, [pc, #292]	; (80132b0 <psa_mac_setup+0x1c0>)
 801318a:	4013      	ands	r3, r2
 801318c:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 8013190:	d101      	bne.n	8013196 <psa_mac_setup+0xa6>
        operation->ctx.hmac.hash_ctx.alg = 0;
 8013192:	6081      	str	r1, [r0, #8]
 8013194:	e7d1      	b.n	801313a <psa_mac_setup+0x4a>
        if( ! PSA_ALG_IS_MAC( alg ) )
 8013196:	f002 44fe 	and.w	r4, r2, #2130706432	; 0x7f000000
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 801319a:	f1b4 7f00 	cmp.w	r4, #33554432	; 0x2000000
        memset( operation, 0, sizeof( *operation ) );
 801319e:	f04f 02b8 	mov.w	r2, #184	; 0xb8
    psa_status_t status = PSA_ERROR_NOT_SUPPORTED;
 80131a2:	bf14      	ite	ne
 80131a4:	f06f 0886 	mvnne.w	r8, #134	; 0x86
 80131a8:	f06f 0885 	mvneq.w	r8, #133	; 0x85
        memset( operation, 0, sizeof( *operation ) );
 80131ac:	f003 fca9 	bl	8016b02 <memset>
}
 80131b0:	4640      	mov	r0, r8
 80131b2:	b002      	add	sp, #8
 80131b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        operation->mac_size = cipher_info->block_size;
 80131b8:	6943      	ldr	r3, [r0, #20]
 80131ba:	716b      	strb	r3, [r5, #5]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 80131bc:	f105 0408 	add.w	r4, r5, #8
 80131c0:	4620      	mov	r0, r4
        ret = psa_cmac_setup( operation, key_bits, slot, cipher_info );
 80131c2:	9f01      	ldr	r7, [sp, #4]
    ret = mbedtls_cipher_setup( &operation->ctx.cmac, cipher_info );
 80131c4:	f7fa fce4 	bl	800db90 <mbedtls_cipher_setup>
    if( ret != 0 )
 80131c8:	b920      	cbnz	r0, 80131d4 <psa_mac_setup+0xe4>
    ret = mbedtls_cipher_cmac_starts( &operation->ctx.cmac,
 80131ca:	464a      	mov	r2, r9
 80131cc:	69f9      	ldr	r1, [r7, #28]
 80131ce:	4620      	mov	r0, r4
 80131d0:	f7fa fda6 	bl	800dd20 <mbedtls_cipher_cmac_starts>
        status = mbedtls_to_psa_error( ret );
 80131d4:	f7ff f86c 	bl	80122b0 <mbedtls_to_psa_error>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 80131d8:	4680      	mov	r8, r0
    if( truncated == 0 )
 80131da:	b12e      	cbz	r6, 80131e8 <psa_mac_setup+0xf8>
    else if( truncated < 4 )
 80131dc:	2e03      	cmp	r6, #3
 80131de:	d9cd      	bls.n	801317c <psa_mac_setup+0x8c>
    else if( truncated > operation->mac_size )
 80131e0:	796b      	ldrb	r3, [r5, #5]
 80131e2:	42b3      	cmp	r3, r6
 80131e4:	d343      	bcc.n	801326e <psa_mac_setup+0x17e>
        operation->mac_size = truncated;
 80131e6:	716e      	strb	r6, [r5, #5]
    if( status != PSA_SUCCESS )
 80131e8:	f1b8 0f00 	cmp.w	r8, #0
 80131ec:	d1c8      	bne.n	8013180 <psa_mac_setup+0x90>
        operation->key_set = 1;
 80131ee:	792b      	ldrb	r3, [r5, #4]
 80131f0:	f043 0301 	orr.w	r3, r3, #1
 80131f4:	712b      	strb	r3, [r5, #4]
 80131f6:	e7db      	b.n	80131b0 <psa_mac_setup+0xc0>
    if( PSA_ALG_IS_HMAC( full_length_alg ) )
 80131f8:	4b2d      	ldr	r3, [pc, #180]	; (80132b0 <psa_mac_setup+0x1c0>)
 80131fa:	4023      	ands	r3, r4
 80131fc:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 8013200:	d14e      	bne.n	80132a0 <psa_mac_setup+0x1b0>
        psa_algorithm_t hash_alg = PSA_ALG_HMAC_GET_HASH( alg );
 8013202:	b2e3      	uxtb	r3, r4
 8013204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 8013208:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 801320c:	3a01      	subs	r2, #1
 801320e:	2a02      	cmp	r2, #2
 8013210:	d930      	bls.n	8013274 <psa_mac_setup+0x184>
 8013212:	f103 427f 	add.w	r2, r3, #4278190080	; 0xff000000
 8013216:	3a04      	subs	r2, #4
 8013218:	2a01      	cmp	r2, #1
 801321a:	d92d      	bls.n	8013278 <psa_mac_setup+0x188>
 801321c:	4a25      	ldr	r2, [pc, #148]	; (80132b4 <psa_mac_setup+0x1c4>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d02e      	beq.n	8013280 <psa_mac_setup+0x190>
 8013222:	3201      	adds	r2, #1
 8013224:	4293      	cmp	r3, r2
 8013226:	d02d      	beq.n	8013284 <psa_mac_setup+0x194>
 8013228:	3201      	adds	r2, #1
 801322a:	4293      	cmp	r3, r2
 801322c:	d02c      	beq.n	8013288 <psa_mac_setup+0x198>
 801322e:	3201      	adds	r2, #1
 8013230:	4293      	cmp	r3, r2
 8013232:	d023      	beq.n	801327c <psa_mac_setup+0x18c>
 8013234:	3201      	adds	r2, #1
 8013236:	4293      	cmp	r3, r2
 8013238:	d022      	beq.n	8013280 <psa_mac_setup+0x190>
 801323a:	3201      	adds	r2, #1
 801323c:	4293      	cmp	r3, r2
 801323e:	d021      	beq.n	8013284 <psa_mac_setup+0x194>
 8013240:	3203      	adds	r2, #3
 8013242:	4293      	cmp	r3, r2
 8013244:	d01c      	beq.n	8013280 <psa_mac_setup+0x190>
 8013246:	3201      	adds	r2, #1
 8013248:	4293      	cmp	r3, r2
 801324a:	d01b      	beq.n	8013284 <psa_mac_setup+0x194>
 801324c:	3201      	adds	r2, #1
 801324e:	4293      	cmp	r3, r2
 8013250:	d01a      	beq.n	8013288 <psa_mac_setup+0x198>
 8013252:	3201      	adds	r2, #1
 8013254:	4293      	cmp	r3, r2
 8013256:	bf0c      	ite	eq
 8013258:	2240      	moveq	r2, #64	; 0x40
 801325a:	2200      	movne	r2, #0
 801325c:	716a      	strb	r2, [r5, #5]
        if( operation->mac_size == 0 ||
 801325e:	3a01      	subs	r2, #1
 8013260:	2a3f      	cmp	r2, #63	; 0x3f
 8013262:	d88b      	bhi.n	801317c <psa_mac_setup+0x8c>
        if( slot->type != PSA_KEY_TYPE_HMAC )
 8013264:	9901      	ldr	r1, [sp, #4]
 8013266:	680a      	ldr	r2, [r1, #0]
 8013268:	f1b2 4fa2 	cmp.w	r2, #1358954496	; 0x51000000
 801326c:	d00e      	beq.n	801328c <psa_mac_setup+0x19c>
            status = PSA_ERROR_INVALID_ARGUMENT;
 801326e:	f06f 0886 	mvn.w	r8, #134	; 0x86
 8013272:	e785      	b.n	8013180 <psa_mac_setup+0x90>
        operation->mac_size = PSA_HASH_SIZE( hash_alg );
 8013274:	2210      	movs	r2, #16
 8013276:	e7f1      	b.n	801325c <psa_mac_setup+0x16c>
 8013278:	2214      	movs	r2, #20
 801327a:	e7ef      	b.n	801325c <psa_mac_setup+0x16c>
 801327c:	2240      	movs	r2, #64	; 0x40
 801327e:	e7ed      	b.n	801325c <psa_mac_setup+0x16c>
 8013280:	221c      	movs	r2, #28
 8013282:	e7eb      	b.n	801325c <psa_mac_setup+0x16c>
 8013284:	2220      	movs	r2, #32
 8013286:	e7e9      	b.n	801325c <psa_mac_setup+0x16c>
 8013288:	2230      	movs	r2, #48	; 0x30
 801328a:	e7e7      	b.n	801325c <psa_mac_setup+0x16c>
        status = psa_hmac_setup_internal( &operation->ctx.hmac,
 801328c:	e9d1 1207 	ldrd	r1, r2, [r1, #28]
 8013290:	f105 0008 	add.w	r0, r5, #8
 8013294:	f7ff fdcc 	bl	8012e30 <psa_hmac_setup_internal>
 8013298:	e79e      	b.n	80131d8 <psa_mac_setup+0xe8>
        return( PSA_ERROR_BAD_STATE );
 801329a:	f06f 0888 	mvn.w	r8, #136	; 0x88
 801329e:	e787      	b.n	80131b0 <psa_mac_setup+0xc0>
    if( truncated == 0 )
 80132a0:	2e00      	cmp	r6, #0
 80132a2:	f43f af6b 	beq.w	801317c <psa_mac_setup+0x8c>
        status = PSA_ERROR_NOT_SUPPORTED;
 80132a6:	f06f 0885 	mvn.w	r8, #133	; 0x85
 80132aa:	e797      	b.n	80131dc <psa_mac_setup+0xec>
 80132ac:	02c00002 	.word	0x02c00002
 80132b0:	7fc00000 	.word	0x7fc00000
 80132b4:	01000008 	.word	0x01000008

080132b8 <psa_mac_sign_setup>:
    return( psa_mac_setup( operation, handle, alg, 1 ) );
 80132b8:	2301      	movs	r3, #1
 80132ba:	f7ff bf19 	b.w	80130f0 <psa_mac_setup>

080132be <psa_mac_verify_setup>:
    return( psa_mac_setup( operation, handle, alg, 0 ) );
 80132be:	2300      	movs	r3, #0
 80132c0:	f7ff bf16 	b.w	80130f0 <psa_mac_setup>

080132c4 <psa_mac_update>:
{
 80132c4:	b538      	push	{r3, r4, r5, lr}
    if( ! operation->key_set )
 80132c6:	7903      	ldrb	r3, [r0, #4]
{
 80132c8:	4604      	mov	r4, r0
    if( ! operation->key_set )
 80132ca:	07d8      	lsls	r0, r3, #31
 80132cc:	d403      	bmi.n	80132d6 <psa_mac_update+0x12>
        return( PSA_ERROR_BAD_STATE );
 80132ce:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 80132d2:	4628      	mov	r0, r5
 80132d4:	bd38      	pop	{r3, r4, r5, pc}
    if( operation->iv_required && ! operation->iv_set )
 80132d6:	f003 0006 	and.w	r0, r3, #6
 80132da:	2802      	cmp	r0, #2
 80132dc:	d0f7      	beq.n	80132ce <psa_mac_update+0xa>
    operation->has_input = 1;
 80132de:	f043 0308 	orr.w	r3, r3, #8
 80132e2:	7123      	strb	r3, [r4, #4]
    if( operation->alg == PSA_ALG_CMAC )
 80132e4:	6820      	ldr	r0, [r4, #0]
 80132e6:	4b0d      	ldr	r3, [pc, #52]	; (801331c <psa_mac_update+0x58>)
 80132e8:	4298      	cmp	r0, r3
 80132ea:	d10c      	bne.n	8013306 <psa_mac_update+0x42>
        int ret = mbedtls_cipher_cmac_update( &operation->ctx.cmac,
 80132ec:	f104 0008 	add.w	r0, r4, #8
 80132f0:	f7fa fd3c 	bl	800dd6c <mbedtls_cipher_cmac_update>
        status = mbedtls_to_psa_error( ret );
 80132f4:	f7fe ffdc 	bl	80122b0 <mbedtls_to_psa_error>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 80132f8:	4605      	mov	r5, r0
    if( status != PSA_SUCCESS )
 80132fa:	2800      	cmp	r0, #0
 80132fc:	d0e9      	beq.n	80132d2 <psa_mac_update+0xe>
        psa_mac_abort( operation );
 80132fe:	4620      	mov	r0, r4
 8013300:	f7ff fecc 	bl	801309c <psa_mac_abort>
 8013304:	e7e5      	b.n	80132d2 <psa_mac_update+0xe>
    if( PSA_ALG_IS_HMAC( operation->alg ) )
 8013306:	4b06      	ldr	r3, [pc, #24]	; (8013320 <psa_mac_update+0x5c>)
 8013308:	4003      	ands	r3, r0
 801330a:	f1b3 7f20 	cmp.w	r3, #41943040	; 0x2800000
 801330e:	d1de      	bne.n	80132ce <psa_mac_update+0xa>
        status = psa_hash_update( &operation->ctx.hmac.hash_ctx, input,
 8013310:	f104 0008 	add.w	r0, r4, #8
 8013314:	f7ff fd12 	bl	8012d3c <psa_hash_update>
 8013318:	e7ee      	b.n	80132f8 <psa_mac_update+0x34>
 801331a:	bf00      	nop
 801331c:	02c00002 	.word	0x02c00002
 8013320:	7fc00000 	.word	0x7fc00000

08013324 <psa_mac_sign_finish>:
{
 8013324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013328:	4698      	mov	r8, r3
    if( operation->alg == 0 )
 801332a:	6803      	ldr	r3, [r0, #0]
{
 801332c:	4604      	mov	r4, r0
 801332e:	460f      	mov	r7, r1
 8013330:	4616      	mov	r6, r2
    if( operation->alg == 0 )
 8013332:	b923      	cbnz	r3, 801333e <psa_mac_sign_finish+0x1a>
        return( PSA_ERROR_BAD_STATE );
 8013334:	f06f 0588 	mvn.w	r5, #136	; 0x88
}
 8013338:	4628      	mov	r0, r5
 801333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *mac_length = mac_size;
 801333e:	f8c8 2000 	str.w	r2, [r8]
    if( mac_size != 0 )
 8013342:	b11a      	cbz	r2, 801334c <psa_mac_sign_finish+0x28>
        memset( mac, '!', mac_size );
 8013344:	2121      	movs	r1, #33	; 0x21
 8013346:	4638      	mov	r0, r7
 8013348:	f003 fbdb 	bl	8016b02 <memset>
    if( ! operation->is_sign )
 801334c:	7923      	ldrb	r3, [r4, #4]
 801334e:	06db      	lsls	r3, r3, #27
 8013350:	d5f0      	bpl.n	8013334 <psa_mac_sign_finish+0x10>
    status = psa_mac_finish_internal( operation, mac, mac_size );
 8013352:	4632      	mov	r2, r6
 8013354:	4639      	mov	r1, r7
 8013356:	4620      	mov	r0, r4
 8013358:	f7ff fe62 	bl	8013020 <psa_mac_finish_internal>
    if( status == PSA_SUCCESS )
 801335c:	4605      	mov	r5, r0
        status = psa_mac_abort( operation );
 801335e:	4620      	mov	r0, r4
    if( status == PSA_SUCCESS )
 8013360:	b96d      	cbnz	r5, 801337e <psa_mac_sign_finish+0x5a>
        status = psa_mac_abort( operation );
 8013362:	f7ff fe9b 	bl	801309c <psa_mac_abort>
        if( status == PSA_SUCCESS )
 8013366:	4605      	mov	r5, r0
 8013368:	b918      	cbnz	r0, 8013372 <psa_mac_sign_finish+0x4e>
            *mac_length = operation->mac_size;
 801336a:	7963      	ldrb	r3, [r4, #5]
 801336c:	f8c8 3000 	str.w	r3, [r8]
 8013370:	e7e2      	b.n	8013338 <psa_mac_sign_finish+0x14>
            memset( mac, '!', mac_size );
 8013372:	4632      	mov	r2, r6
 8013374:	2121      	movs	r1, #33	; 0x21
 8013376:	4638      	mov	r0, r7
 8013378:	f003 fbc3 	bl	8016b02 <memset>
 801337c:	e7dc      	b.n	8013338 <psa_mac_sign_finish+0x14>
        psa_mac_abort( operation );
 801337e:	f7ff fe8d 	bl	801309c <psa_mac_abort>
 8013382:	e7d9      	b.n	8013338 <psa_mac_sign_finish+0x14>

08013384 <psa_mac_verify_finish>:
{
 8013384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( operation->alg == 0 )
 8013388:	6803      	ldr	r3, [r0, #0]
{
 801338a:	b088      	sub	sp, #32
 801338c:	4606      	mov	r6, r0
 801338e:	4688      	mov	r8, r1
    if( operation->alg == 0 )
 8013390:	b353      	cbz	r3, 80133e8 <psa_mac_verify_finish+0x64>
    if( operation->is_sign )
 8013392:	7904      	ldrb	r4, [r0, #4]
 8013394:	f014 0410 	ands.w	r4, r4, #16
 8013398:	d126      	bne.n	80133e8 <psa_mac_verify_finish+0x64>
    if( operation->mac_size != mac_length )
 801339a:	7947      	ldrb	r7, [r0, #5]
 801339c:	4297      	cmp	r7, r2
 801339e:	d11d      	bne.n	80133dc <psa_mac_verify_finish+0x58>
    status = psa_mac_finish_internal( operation,
 80133a0:	2220      	movs	r2, #32
 80133a2:	4669      	mov	r1, sp
 80133a4:	f7ff fe3c 	bl	8013020 <psa_mac_finish_internal>
    for( i = 0; i < n; i++ )
 80133a8:	4623      	mov	r3, r4
    status = psa_mac_finish_internal( operation,
 80133aa:	4605      	mov	r5, r0
    for( i = 0; i < n; i++ )
 80133ac:	429f      	cmp	r7, r3
 80133ae:	d80d      	bhi.n	80133cc <psa_mac_verify_finish+0x48>
    if( safer_memcmp( mac, actual_mac, mac_length ) != 0 )
 80133b0:	b9a4      	cbnz	r4, 80133dc <psa_mac_verify_finish+0x58>
    if( status == PSA_SUCCESS )
 80133b2:	b9ad      	cbnz	r5, 80133e0 <psa_mac_verify_finish+0x5c>
        status = psa_mac_abort( operation );
 80133b4:	4630      	mov	r0, r6
 80133b6:	f7ff fe71 	bl	801309c <psa_mac_abort>
 80133ba:	4605      	mov	r5, r0
    mbedtls_platform_zeroize( actual_mac, sizeof( actual_mac ) );
 80133bc:	2120      	movs	r1, #32
 80133be:	4668      	mov	r0, sp
 80133c0:	f7fe ff6e 	bl	80122a0 <mbedtls_platform_zeroize>
}
 80133c4:	4628      	mov	r0, r5
 80133c6:	b008      	add	sp, #32
 80133c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        diff |= a[i] ^ b[i];
 80133cc:	f818 2003 	ldrb.w	r2, [r8, r3]
 80133d0:	f81d 1003 	ldrb.w	r1, [sp, r3]
 80133d4:	404a      	eors	r2, r1
 80133d6:	4314      	orrs	r4, r2
    for( i = 0; i < n; i++ )
 80133d8:	3301      	adds	r3, #1
 80133da:	e7e7      	b.n	80133ac <psa_mac_verify_finish+0x28>
        status = PSA_ERROR_INVALID_SIGNATURE;
 80133dc:	f06f 0594 	mvn.w	r5, #148	; 0x94
        psa_mac_abort( operation );
 80133e0:	4630      	mov	r0, r6
 80133e2:	f7ff fe5b 	bl	801309c <psa_mac_abort>
 80133e6:	e7e9      	b.n	80133bc <psa_mac_verify_finish+0x38>
        return( PSA_ERROR_BAD_STATE );
 80133e8:	f06f 0588 	mvn.w	r5, #136	; 0x88
 80133ec:	e7ea      	b.n	80133c4 <psa_mac_verify_finish+0x40>
	...

080133f0 <psa_asymmetric_sign>:
                                  const uint8_t *hash,
                                  size_t hash_length,
                                  uint8_t *signature,
                                  size_t signature_size,
                                  size_t *signature_length )
{
 80133f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	b08f      	sub	sp, #60	; 0x3c
 80133f6:	e9dd 7618 	ldrd	r7, r6, [sp, #96]	; 0x60
 80133fa:	4699      	mov	r9, r3
    psa_key_slot_t *slot;
    psa_status_t status;

    *signature_length = signature_size;
 80133fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 80133fe:	460c      	mov	r4, r1
    *signature_length = signature_size;
 8013400:	601e      	str	r6, [r3, #0]
{
 8013402:	4692      	mov	sl, r2

    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_SIGN, alg );
 8013404:	460b      	mov	r3, r1
 8013406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801340a:	a907      	add	r1, sp, #28
 801340c:	f7ff f984 	bl	8012718 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 8013410:	4605      	mov	r5, r0
 8013412:	b9d0      	cbnz	r0, 801344a <psa_asymmetric_sign+0x5a>
        goto exit;
    if( ! PSA_KEY_TYPE_IS_KEYPAIR( slot->type ) )
 8013414:	9b07      	ldr	r3, [sp, #28]
 8013416:	6819      	ldr	r1, [r3, #0]
 8013418:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
 801341c:	f1b2 4fe0 	cmp.w	r2, #1879048192	; 0x70000000
 8013420:	d11d      	bne.n	801345e <psa_asymmetric_sign+0x6e>
        status = PSA_ERROR_INVALID_ARGUMENT;
        goto exit;
    }

#if defined(MBEDTLS_RSA_C)
    if( slot->type == PSA_KEY_TYPE_RSA_KEYPAIR )
 8013422:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8013426:	4291      	cmp	r1, r2
 8013428:	d146      	bne.n	80134b8 <psa_asymmetric_sign+0xc8>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 801342a:	aa0b      	add	r2, sp, #44	; 0x2c
 801342c:	4649      	mov	r1, r9
 801342e:	4620      	mov	r0, r4
    {
        status = psa_rsa_sign( slot->data.rsa,
 8013430:	f8d3 801c 	ldr.w	r8, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 8013434:	f7ff fa00 	bl	8012838 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 8013438:	4605      	mov	r5, r0
 801343a:	b930      	cbnz	r0, 801344a <psa_asymmetric_sign+0x5a>
    if( signature_size < mbedtls_rsa_get_len( rsa ) )
 801343c:	4640      	mov	r0, r8
 801343e:	f000 fe68 	bl	8014112 <mbedtls_rsa_get_len>
 8013442:	4286      	cmp	r6, r0
 8013444:	d206      	bcs.n	8013454 <psa_asymmetric_sign+0x64>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 8013446:	f06f 0589 	mvn.w	r5, #137	; 0x89
     * (barring an attack on the mac and deliberately-crafted input),
     * in case the caller doesn't check the return status properly. */
    if( status == PSA_SUCCESS )
        memset( signature + *signature_length, '!',
                signature_size - *signature_length );
    else if( signature_size != 0 )
 801344a:	b38e      	cbz	r6, 80134b0 <psa_asymmetric_sign+0xc0>
        memset( signature, '!', signature_size );
 801344c:	4632      	mov	r2, r6
 801344e:	2121      	movs	r1, #33	; 0x21
 8013450:	4638      	mov	r0, r7
 8013452:	e02b      	b.n	80134ac <psa_asymmetric_sign+0xbc>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 8013454:	4b4d      	ldr	r3, [pc, #308]	; (801358c <psa_asymmetric_sign+0x19c>)
 8013456:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 801345a:	429c      	cmp	r4, r3
 801345c:	d002      	beq.n	8013464 <psa_asymmetric_sign+0x74>
        status = PSA_ERROR_INVALID_ARGUMENT;
 801345e:	f06f 0586 	mvn.w	r5, #134	; 0x86
 8013462:	e7f2      	b.n	801344a <psa_asymmetric_sign+0x5a>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 8013464:	462a      	mov	r2, r5
 8013466:	4629      	mov	r1, r5
 8013468:	4640      	mov	r0, r8
 801346a:	f000 fe4f 	bl	801410c <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_sign( rsa,
 801346e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8013472:	9300      	str	r3, [sp, #0]
 8013474:	e9cd a702 	strd	sl, r7, [sp, #8]
 8013478:	f8cd 9004 	str.w	r9, [sp, #4]
 801347c:	2301      	movs	r3, #1
 801347e:	4a44      	ldr	r2, [pc, #272]	; (8013590 <psa_asymmetric_sign+0x1a0>)
 8013480:	4944      	ldr	r1, [pc, #272]	; (8013594 <psa_asymmetric_sign+0x1a4>)
 8013482:	4640      	mov	r0, r8
 8013484:	f001 fa80 	bl	8014988 <mbedtls_rsa_pkcs1_sign>
    if( ret == 0 )
 8013488:	4604      	mov	r4, r0
 801348a:	b920      	cbnz	r0, 8013496 <psa_asymmetric_sign+0xa6>
        *signature_length = mbedtls_rsa_get_len( rsa );
 801348c:	4640      	mov	r0, r8
 801348e:	f000 fe40 	bl	8014112 <mbedtls_rsa_get_len>
 8013492:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013494:	6018      	str	r0, [r3, #0]
    return( mbedtls_to_psa_error( ret ) );
 8013496:	4620      	mov	r0, r4
 8013498:	f7fe ff0a 	bl	80122b0 <mbedtls_to_psa_error>
 801349c:	4605      	mov	r5, r0
    if( status == PSA_SUCCESS )
 801349e:	2800      	cmp	r0, #0
 80134a0:	d1d3      	bne.n	801344a <psa_asymmetric_sign+0x5a>
        memset( signature + *signature_length, '!',
 80134a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	2121      	movs	r1, #33	; 0x21
 80134a8:	1a32      	subs	r2, r6, r0
 80134aa:	4438      	add	r0, r7
        memset( signature, '!', signature_size );
 80134ac:	f003 fb29 	bl	8016b02 <memset>
    /* If signature_size is 0 then we have nothing to do. We must not call
     * memset because signature may be NULL in this case. */
    return( status );
}
 80134b0:	4628      	mov	r0, r5
 80134b2:	b00f      	add	sp, #60	; 0x3c
 80134b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 80134b8:	4a37      	ldr	r2, [pc, #220]	; (8013598 <psa_asymmetric_sign+0x1a8>)
 80134ba:	400a      	ands	r2, r1
 80134bc:	4937      	ldr	r1, [pc, #220]	; (801359c <psa_asymmetric_sign+0x1ac>)
 80134be:	428a      	cmp	r2, r1
 80134c0:	d160      	bne.n	8013584 <psa_asymmetric_sign+0x194>
            PSA_ALG_IS_ECDSA( alg )
 80134c2:	f424 3280 	bic.w	r2, r4, #65536	; 0x10000
        if(
 80134c6:	4936      	ldr	r1, [pc, #216]	; (80135a0 <psa_asymmetric_sign+0x1b0>)
            PSA_ALG_IS_ECDSA( alg )
 80134c8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
        if(
 80134cc:	428a      	cmp	r2, r1
 80134ce:	d1c6      	bne.n	801345e <psa_asymmetric_sign+0x6e>
            status = psa_ecdsa_sign( slot->data.ecp,
 80134d0:	f8d3 801c 	ldr.w	r8, [r3, #28]
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 80134d4:	f8d8 5058 	ldr.w	r5, [r8, #88]	; 0x58
 80134d8:	3507      	adds	r5, #7
    mbedtls_mpi_init( &r );
 80134da:	a808      	add	r0, sp, #32
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 80134dc:	08ed      	lsrs	r5, r5, #3
    mbedtls_mpi_init( &r );
 80134de:	f7f7 ff96 	bl	800b40e <mbedtls_mpi_init>
    if( signature_size < 2 * curve_bytes )
 80134e2:	ea4f 0b45 	mov.w	fp, r5, lsl #1
    mbedtls_mpi_init( &s );
 80134e6:	a80b      	add	r0, sp, #44	; 0x2c
 80134e8:	f7f7 ff91 	bl	800b40e <mbedtls_mpi_init>
    if( signature_size < 2 * curve_bytes )
 80134ec:	455e      	cmp	r6, fp
 80134ee:	d347      	bcc.n	8013580 <psa_asymmetric_sign+0x190>
    if( PSA_ALG_DSA_IS_DETERMINISTIC( alg ) )
 80134f0:	03e2      	lsls	r2, r4, #15
 80134f2:	f108 037c 	add.w	r3, r8, #124	; 0x7c
 80134f6:	d536      	bpl.n	8013566 <psa_asymmetric_sign+0x176>
        psa_algorithm_t hash_alg = PSA_ALG_SIGN_GET_HASH( alg );
 80134f8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80134fc:	bf18      	it	ne
 80134fe:	f044 7480 	orrne.w	r4, r4, #16777216	; 0x1000000
 8013502:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
 8013506:	3c05      	subs	r4, #5
 8013508:	2c04      	cmp	r4, #4
 801350a:	bf98      	it	ls
 801350c:	4a25      	ldrls	r2, [pc, #148]	; (80135a4 <psa_asymmetric_sign+0x1b4>)
 801350e:	9305      	str	r3, [sp, #20]
 8013510:	bf94      	ite	ls
 8013512:	f852 0024 	ldrls.w	r0, [r2, r4, lsl #2]
{
 8013516:	2000      	movhi	r0, #0
        mbedtls_md_type_t md_alg = mbedtls_md_get_type( md_info );
 8013518:	f7fd ff4b 	bl	80113b2 <mbedtls_md_get_type>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ecp->grp, &r, &s, &ecp->d,
 801351c:	f8cd a000 	str.w	sl, [sp]
 8013520:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8013524:	9b05      	ldr	r3, [sp, #20]
 8013526:	aa0b      	add	r2, sp, #44	; 0x2c
 8013528:	a908      	add	r1, sp, #32
 801352a:	4640      	mov	r0, r8
 801352c:	f7fb f8ec 	bl	800e708 <mbedtls_ecdsa_sign_det>
 8013530:	4604      	mov	r4, r0
 8013532:	b960      	cbnz	r0, 801354e <psa_asymmetric_sign+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &r,
 8013534:	462a      	mov	r2, r5
 8013536:	4639      	mov	r1, r7
 8013538:	a808      	add	r0, sp, #32
 801353a:	f7f8 f8ea 	bl	800b712 <mbedtls_mpi_write_binary>
 801353e:	4604      	mov	r4, r0
 8013540:	b928      	cbnz	r0, 801354e <psa_asymmetric_sign+0x15e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &s,
 8013542:	462a      	mov	r2, r5
 8013544:	1979      	adds	r1, r7, r5
 8013546:	a80b      	add	r0, sp, #44	; 0x2c
 8013548:	f7f8 f8e3 	bl	800b712 <mbedtls_mpi_write_binary>
 801354c:	4604      	mov	r4, r0
    mbedtls_mpi_free( &r );
 801354e:	a808      	add	r0, sp, #32
 8013550:	f7f7 ff63 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8013554:	a80b      	add	r0, sp, #44	; 0x2c
 8013556:	f7f7 ff60 	bl	800b41a <mbedtls_mpi_free>
    if( ret == 0 )
 801355a:	2c00      	cmp	r4, #0
 801355c:	d19b      	bne.n	8013496 <psa_asymmetric_sign+0xa6>
        *signature_length = 2 * curve_bytes;
 801355e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013560:	f8c3 b000 	str.w	fp, [r3]
 8013564:	e797      	b.n	8013496 <psa_asymmetric_sign+0xa6>
        MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ecp->grp, &r, &s, &ecp->d,
 8013566:	4a0a      	ldr	r2, [pc, #40]	; (8013590 <psa_asymmetric_sign+0x1a0>)
 8013568:	9203      	str	r2, [sp, #12]
 801356a:	4a0a      	ldr	r2, [pc, #40]	; (8013594 <psa_asymmetric_sign+0x1a4>)
 801356c:	f8cd a000 	str.w	sl, [sp]
 8013570:	e9cd 9201 	strd	r9, r2, [sp, #4]
 8013574:	a908      	add	r1, sp, #32
 8013576:	aa0b      	add	r2, sp, #44	; 0x2c
 8013578:	4640      	mov	r0, r8
 801357a:	f7fb f8c3 	bl	800e704 <mbedtls_ecdsa_sign>
 801357e:	e7d7      	b.n	8013530 <psa_asymmetric_sign+0x140>
        ret = MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL;
 8013580:	4c09      	ldr	r4, [pc, #36]	; (80135a8 <psa_asymmetric_sign+0x1b8>)
 8013582:	e7e4      	b.n	801354e <psa_asymmetric_sign+0x15e>
        status = PSA_ERROR_NOT_SUPPORTED;
 8013584:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8013588:	e75f      	b.n	801344a <psa_asymmetric_sign+0x5a>
 801358a:	bf00      	nop
 801358c:	10020000 	.word	0x10020000
 8013590:	200070d4 	.word	0x200070d4
 8013594:	0800e32d 	.word	0x0800e32d
 8013598:	efff0000 	.word	0xefff0000
 801359c:	60030000 	.word	0x60030000
 80135a0:	10060000 	.word	0x10060000
 80135a4:	08019640 	.word	0x08019640
 80135a8:	ffffb100 	.word	0xffffb100

080135ac <psa_asymmetric_verify>:
                                    psa_algorithm_t alg,
                                    const uint8_t *hash,
                                    size_t hash_length,
                                    const uint8_t *signature,
                                    size_t signature_length )
{
 80135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	b08d      	sub	sp, #52	; 0x34
 80135b2:	460d      	mov	r5, r1
 80135b4:	4690      	mov	r8, r2
 80135b6:	461e      	mov	r6, r3
    psa_key_slot_t *slot;
    psa_status_t status;

    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_VERIFY, alg );
 80135b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135bc:	460b      	mov	r3, r1
 80135be:	a905      	add	r1, sp, #20
{
 80135c0:	e9dd 7916 	ldrd	r7, r9, [sp, #88]	; 0x58
    status = psa_get_key_from_slot( handle, &slot, PSA_KEY_USAGE_VERIFY, alg );
 80135c4:	f7ff f8a8 	bl	8012718 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 80135c8:	4604      	mov	r4, r0
 80135ca:	bba0      	cbnz	r0, 8013636 <psa_asymmetric_verify+0x8a>
        return( status );

#if defined(MBEDTLS_RSA_C)
    if( PSA_KEY_TYPE_IS_RSA( slot->type ) )
 80135cc:	9b05      	ldr	r3, [sp, #20]
 80135ce:	4a3f      	ldr	r2, [pc, #252]	; (80136cc <psa_asymmetric_verify+0x120>)
 80135d0:	6819      	ldr	r1, [r3, #0]
 80135d2:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80135d6:	4290      	cmp	r0, r2
 80135d8:	d131      	bne.n	801363e <psa_asymmetric_verify+0x92>
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 80135da:	aa09      	add	r2, sp, #36	; 0x24
 80135dc:	4631      	mov	r1, r6
 80135de:	4628      	mov	r0, r5
    {
        return( psa_rsa_verify( slot->data.rsa,
 80135e0:	f8d3 a01c 	ldr.w	sl, [r3, #28]
    status = psa_rsa_decode_md_type( alg, hash_length, &md_alg );
 80135e4:	f7ff f928 	bl	8012838 <psa_rsa_decode_md_type>
    if( status != PSA_SUCCESS )
 80135e8:	4604      	mov	r4, r0
 80135ea:	bb20      	cbnz	r0, 8013636 <psa_asymmetric_verify+0x8a>
    if( signature_length < mbedtls_rsa_get_len( rsa ) )
 80135ec:	4650      	mov	r0, sl
 80135ee:	f000 fd90 	bl	8014112 <mbedtls_rsa_get_len>
 80135f2:	4581      	cmp	r9, r0
 80135f4:	d31d      	bcc.n	8013632 <psa_asymmetric_verify+0x86>
    if( PSA_ALG_IS_RSA_PKCS1V15_SIGN( alg ) )
 80135f6:	4b36      	ldr	r3, [pc, #216]	; (80136d0 <psa_asymmetric_verify+0x124>)
 80135f8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80135fc:	429d      	cmp	r5, r3
 80135fe:	d161      	bne.n	80136c4 <psa_asymmetric_verify+0x118>
        mbedtls_rsa_set_padding( rsa, MBEDTLS_RSA_PKCS_V15,
 8013600:	4622      	mov	r2, r4
 8013602:	4621      	mov	r1, r4
 8013604:	4650      	mov	r0, sl
 8013606:	f000 fd81 	bl	801410c <mbedtls_rsa_set_padding>
        ret = mbedtls_rsa_pkcs1_verify( rsa,
 801360a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801360e:	9300      	str	r3, [sp, #0]
 8013610:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8013614:	9601      	str	r6, [sp, #4]
 8013616:	4623      	mov	r3, r4
 8013618:	4a2e      	ldr	r2, [pc, #184]	; (80136d4 <psa_asymmetric_verify+0x128>)
 801361a:	492f      	ldr	r1, [pc, #188]	; (80136d8 <psa_asymmetric_verify+0x12c>)
 801361c:	4650      	mov	r0, sl
 801361e:	f001 fa27 	bl	8014a70 <mbedtls_rsa_pkcs1_verify>
    if( ret == MBEDTLS_ERR_RSA_INVALID_PADDING )
 8013622:	f510 4f82 	cmn.w	r0, #16640	; 0x4100
 8013626:	d047      	beq.n	80136b8 <psa_asymmetric_verify+0x10c>
    else
#endif /* defined(MBEDTLS_ECP_C) */
    {
        return( PSA_ERROR_NOT_SUPPORTED );
    }
}
 8013628:	b00d      	add	sp, #52	; 0x34
 801362a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_to_psa_error( ret ) );
 801362e:	f7fe be3f 	b.w	80122b0 <mbedtls_to_psa_error>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 8013632:	f06f 0489 	mvn.w	r4, #137	; 0x89
}
 8013636:	4620      	mov	r0, r4
 8013638:	b00d      	add	sp, #52	; 0x34
 801363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( PSA_KEY_TYPE_IS_ECC( slot->type ) )
 801363e:	4a27      	ldr	r2, [pc, #156]	; (80136dc <psa_asymmetric_verify+0x130>)
 8013640:	400a      	ands	r2, r1
 8013642:	4927      	ldr	r1, [pc, #156]	; (80136e0 <psa_asymmetric_verify+0x134>)
 8013644:	428a      	cmp	r2, r1
 8013646:	d13a      	bne.n	80136be <psa_asymmetric_verify+0x112>
        if( PSA_ALG_IS_ECDSA( alg ) )
 8013648:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 801364c:	4a25      	ldr	r2, [pc, #148]	; (80136e4 <psa_asymmetric_verify+0x138>)
 801364e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8013652:	4295      	cmp	r5, r2
 8013654:	d136      	bne.n	80136c4 <psa_asymmetric_verify+0x118>
            return( psa_ecdsa_verify( slot->data.ecp,
 8013656:	69dd      	ldr	r5, [r3, #28]
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 8013658:	6dac      	ldr	r4, [r5, #88]	; 0x58
    mbedtls_mpi_init( &r );
 801365a:	f10d 0b18 	add.w	fp, sp, #24
 801365e:	4658      	mov	r0, fp
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 8013660:	3407      	adds	r4, #7
    mbedtls_mpi_init( &s );
 8013662:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    mbedtls_mpi_init( &r );
 8013666:	f7f7 fed2 	bl	800b40e <mbedtls_mpi_init>
    size_t curve_bytes = PSA_BITS_TO_BYTES( ecp->grp.pbits );
 801366a:	08e4      	lsrs	r4, r4, #3
    mbedtls_mpi_init( &s );
 801366c:	4650      	mov	r0, sl
 801366e:	f7f7 fece 	bl	800b40e <mbedtls_mpi_init>
    if( signature_length != 2 * curve_bytes )
 8013672:	ebb9 0f44 	cmp.w	r9, r4, lsl #1
 8013676:	d11f      	bne.n	80136b8 <psa_asymmetric_verify+0x10c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &r,
 8013678:	4622      	mov	r2, r4
 801367a:	4639      	mov	r1, r7
 801367c:	4658      	mov	r0, fp
 801367e:	f7f8 f810 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013682:	4681      	mov	r9, r0
 8013684:	b980      	cbnz	r0, 80136a8 <psa_asymmetric_verify+0xfc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &s,
 8013686:	4622      	mov	r2, r4
 8013688:	1939      	adds	r1, r7, r4
 801368a:	4650      	mov	r0, sl
 801368c:	f7f8 f809 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013690:	4681      	mov	r9, r0
 8013692:	b948      	cbnz	r0, 80136a8 <psa_asymmetric_verify+0xfc>
    ret = mbedtls_ecdsa_verify( &ecp->grp, hash, hash_length,
 8013694:	e9cd ba00 	strd	fp, sl, [sp]
 8013698:	f105 0388 	add.w	r3, r5, #136	; 0x88
 801369c:	4632      	mov	r2, r6
 801369e:	4641      	mov	r1, r8
 80136a0:	4628      	mov	r0, r5
 80136a2:	f7fb f839 	bl	800e718 <mbedtls_ecdsa_verify>
 80136a6:	4681      	mov	r9, r0
    mbedtls_mpi_free( &r );
 80136a8:	4658      	mov	r0, fp
 80136aa:	f7f7 feb6 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80136ae:	4650      	mov	r0, sl
 80136b0:	f7f7 feb3 	bl	800b41a <mbedtls_mpi_free>
    return( mbedtls_to_psa_error( ret ) );
 80136b4:	4648      	mov	r0, r9
 80136b6:	e7b7      	b.n	8013628 <psa_asymmetric_verify+0x7c>
        return( PSA_ERROR_INVALID_SIGNATURE );
 80136b8:	f06f 0494 	mvn.w	r4, #148	; 0x94
            return( psa_ecdsa_verify( slot->data.ecp,
 80136bc:	e7bb      	b.n	8013636 <psa_asymmetric_verify+0x8a>
        return( PSA_ERROR_NOT_SUPPORTED );
 80136be:	f06f 0485 	mvn.w	r4, #133	; 0x85
 80136c2:	e7b8      	b.n	8013636 <psa_asymmetric_verify+0x8a>
            return( PSA_ERROR_INVALID_ARGUMENT );
 80136c4:	f06f 0486 	mvn.w	r4, #134	; 0x86
 80136c8:	e7b5      	b.n	8013636 <psa_asymmetric_verify+0x8a>
 80136ca:	bf00      	nop
 80136cc:	60010000 	.word	0x60010000
 80136d0:	10020000 	.word	0x10020000
 80136d4:	200070d4 	.word	0x200070d4
 80136d8:	0800e32d 	.word	0x0800e32d
 80136dc:	efff0000 	.word	0xefff0000
 80136e0:	60030000 	.word	0x60030000
 80136e4:	10060000 	.word	0x10060000

080136e8 <psa_cipher_abort>:

    return( status );
}

psa_status_t psa_cipher_abort( psa_cipher_operation_t *operation )
{
 80136e8:	b510      	push	{r4, lr}
 80136ea:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 80136ec:	6800      	ldr	r0, [r0, #0]
 80136ee:	b190      	cbz	r0, 8013716 <psa_cipher_abort+0x2e>
        return( PSA_SUCCESS );
    }

    /* Sanity check (shouldn't happen: operation->alg should
     * always have been initialized to a valid value). */
    if( ! PSA_ALG_IS_CIPHER( operation->alg ) )
 80136f0:	f000 40fe 	and.w	r0, r0, #2130706432	; 0x7f000000
 80136f4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80136f8:	d10e      	bne.n	8013718 <psa_cipher_abort+0x30>
        return( PSA_ERROR_BAD_STATE );

    mbedtls_cipher_free( &operation->ctx.cipher );
 80136fa:	f104 0008 	add.w	r0, r4, #8
 80136fe:	f7fa f8a1 	bl	800d844 <mbedtls_cipher_free>

    operation->alg = 0;
    operation->key_set = 0;
 8013702:	7923      	ldrb	r3, [r4, #4]
    operation->alg = 0;
 8013704:	2000      	movs	r0, #0
    operation->iv_set = 0;
    operation->iv_size = 0;
    operation->block_size = 0;
    operation->iv_required = 0;
 8013706:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 801370a:	f360 0341 	bfi	r3, r0, #1, #1
    operation->alg = 0;
 801370e:	6020      	str	r0, [r4, #0]
    operation->iv_size = 0;
 8013710:	7160      	strb	r0, [r4, #5]
    operation->block_size = 0;
 8013712:	71a0      	strb	r0, [r4, #6]
    operation->iv_required = 0;
 8013714:	7123      	strb	r3, [r4, #4]

    return( PSA_SUCCESS );
}
 8013716:	bd10      	pop	{r4, pc}
        return( PSA_ERROR_BAD_STATE );
 8013718:	f06f 0088 	mvn.w	r0, #136	; 0x88
 801371c:	e7fb      	b.n	8013716 <psa_cipher_abort+0x2e>
	...

08013720 <psa_cipher_setup>:
{
 8013720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013724:	460e      	mov	r6, r1
    if( operation->alg != 0 )
 8013726:	6801      	ldr	r1, [r0, #0]
                              PSA_KEY_USAGE_ENCRYPT :
 8013728:	2b01      	cmp	r3, #1
{
 801372a:	4604      	mov	r4, r0
 801372c:	4615      	mov	r5, r2
 801372e:	461f      	mov	r7, r3
                              PSA_KEY_USAGE_ENCRYPT :
 8013730:	bf0c      	ite	eq
 8013732:	f44f 7880 	moveq.w	r8, #256	; 0x100
 8013736:	f44f 7800 	movne.w	r8, #512	; 0x200
    if( operation->alg != 0 )
 801373a:	2900      	cmp	r1, #0
 801373c:	f040 8099 	bne.w	8013872 <psa_cipher_setup+0x152>
    if( ! PSA_ALG_IS_CIPHER( alg ) )
 8013740:	f002 43fe 	and.w	r3, r2, #2130706432	; 0x7f000000
 8013744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013748:	d008      	beq.n	801375c <psa_cipher_setup+0x3c>
        memset( operation, 0, sizeof( *operation ) );
 801374a:	224c      	movs	r2, #76	; 0x4c
 801374c:	f003 f9d9 	bl	8016b02 <memset>
        return( PSA_ERROR_INVALID_ARGUMENT );
 8013750:	f06f 0686 	mvn.w	r6, #134	; 0x86
}
 8013754:	4630      	mov	r0, r6
 8013756:	b003      	add	sp, #12
 8013758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    operation->alg = alg;
 801375c:	6022      	str	r2, [r4, #0]
    operation->key_set = 0;
 801375e:	7903      	ldrb	r3, [r0, #4]
    operation->iv_size = 0;
 8013760:	7141      	strb	r1, [r0, #5]
    operation->key_set = 0;
 8013762:	f361 0300 	bfi	r3, r1, #0, #1
    operation->iv_set = 0;
 8013766:	f361 0382 	bfi	r3, r1, #2, #1
    operation->iv_required = 1;
 801376a:	b2db      	uxtb	r3, r3
 801376c:	f043 0302 	orr.w	r3, r3, #2
    mbedtls_cipher_init( &operation->ctx.cipher );
 8013770:	f100 0908 	add.w	r9, r0, #8
    operation->iv_required = 1;
 8013774:	7103      	strb	r3, [r0, #4]
    operation->block_size = 0;
 8013776:	7181      	strb	r1, [r0, #6]
    mbedtls_cipher_init( &operation->ctx.cipher );
 8013778:	4648      	mov	r0, r9
 801377a:	f7fa f85f 	bl	800d83c <mbedtls_cipher_init>
    status = psa_get_key_from_slot( handle, &slot, usage, alg);
 801377e:	4630      	mov	r0, r6
 8013780:	462b      	mov	r3, r5
 8013782:	4642      	mov	r2, r8
 8013784:	a901      	add	r1, sp, #4
 8013786:	f7fe ffc7 	bl	8012718 <psa_get_key_from_slot>
    if( status != PSA_SUCCESS )
 801378a:	4606      	mov	r6, r0
 801378c:	2800      	cmp	r0, #0
 801378e:	d16c      	bne.n	801386a <psa_cipher_setup+0x14a>
    key_bits = psa_get_key_bits( slot );
 8013790:	9801      	ldr	r0, [sp, #4]
 8013792:	f7ff f82f 	bl	80127f4 <psa_get_key_bits>
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 8013796:	9901      	ldr	r1, [sp, #4]
 8013798:	4602      	mov	r2, r0
 801379a:	6809      	ldr	r1, [r1, #0]
    key_bits = psa_get_key_bits( slot );
 801379c:	4680      	mov	r8, r0
    cipher_info = mbedtls_cipher_info_from_psa( alg, slot->type, key_bits, NULL );
 801379e:	4633      	mov	r3, r6
 80137a0:	4628      	mov	r0, r5
 80137a2:	f7fe ff1d 	bl	80125e0 <mbedtls_cipher_info_from_psa>
    if( cipher_info == NULL )
 80137a6:	4601      	mov	r1, r0
 80137a8:	2800      	cmp	r0, #0
 80137aa:	d05c      	beq.n	8013866 <psa_cipher_setup+0x146>
    ret = mbedtls_cipher_setup( &operation->ctx.cipher, cipher_info );
 80137ac:	4648      	mov	r0, r9
 80137ae:	f7fa f9ef 	bl	800db90 <mbedtls_cipher_setup>
    if( ret != 0 )
 80137b2:	4606      	mov	r6, r0
 80137b4:	2800      	cmp	r0, #0
 80137b6:	d139      	bne.n	801382c <psa_cipher_setup+0x10c>
        ret = mbedtls_cipher_setkey( &operation->ctx.cipher,
 80137b8:	9901      	ldr	r1, [sp, #4]
 80137ba:	463b      	mov	r3, r7
 80137bc:	4642      	mov	r2, r8
 80137be:	69c9      	ldr	r1, [r1, #28]
 80137c0:	4648      	mov	r0, r9
 80137c2:	f7fa f857 	bl	800d874 <mbedtls_cipher_setkey>
    if( ret != 0 )
 80137c6:	4606      	mov	r6, r0
 80137c8:	bb80      	cbnz	r0, 801382c <psa_cipher_setup+0x10c>
    switch( alg )
 80137ca:	4b2c      	ldr	r3, [pc, #176]	; (801387c <psa_cipher_setup+0x15c>)
 80137cc:	429d      	cmp	r5, r3
 80137ce:	d034      	beq.n	801383a <psa_cipher_setup+0x11a>
 80137d0:	3301      	adds	r3, #1
 80137d2:	429d      	cmp	r5, r3
 80137d4:	d03b      	beq.n	801384e <psa_cipher_setup+0x12e>
    operation->key_set = 1;
 80137d6:	7923      	ldrb	r3, [r4, #4]
 80137d8:	f043 0301 	orr.w	r3, r3, #1
 80137dc:	7123      	strb	r3, [r4, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 80137de:	f005 43ff 	and.w	r3, r5, #2139095040	; 0x7f800000
 80137e2:	f1b3 6f90 	cmp.w	r3, #75497472	; 0x4800000
 80137e6:	d034      	beq.n	8013852 <psa_cipher_setup+0x132>
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 80137e8:	9b01      	ldr	r3, [sp, #4]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 80137ea:	4a25      	ldr	r2, [pc, #148]	; (8013880 <psa_cipher_setup+0x160>)
                              PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type ) );
 80137ec:	681b      	ldr	r3, [r3, #0]
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d033      	beq.n	801385a <psa_cipher_setup+0x13a>
 80137f2:	3201      	adds	r2, #1
 80137f4:	4293      	cmp	r3, r2
 80137f6:	d02e      	beq.n	8013856 <psa_cipher_setup+0x136>
 80137f8:	3201      	adds	r2, #1
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d02d      	beq.n	801385a <psa_cipher_setup+0x13a>
 80137fe:	3201      	adds	r2, #1
 8013800:	1a98      	subs	r0, r3, r2
 8013802:	4243      	negs	r3, r0
 8013804:	4143      	adcs	r3, r0
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 8013806:	0269      	lsls	r1, r5, #9
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 8013808:	71a3      	strb	r3, [r4, #6]
    if( alg & PSA_ALG_CIPHER_FROM_BLOCK_FLAG )
 801380a:	d50f      	bpl.n	801382c <psa_cipher_setup+0x10c>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 801380c:	9b01      	ldr	r3, [sp, #4]
 801380e:	4a1c      	ldr	r2, [pc, #112]	; (8013880 <psa_cipher_setup+0x160>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	4293      	cmp	r3, r2
 8013814:	d025      	beq.n	8013862 <psa_cipher_setup+0x142>
 8013816:	3201      	adds	r2, #1
 8013818:	4293      	cmp	r3, r2
 801381a:	d020      	beq.n	801385e <psa_cipher_setup+0x13e>
 801381c:	3201      	adds	r2, #1
 801381e:	4293      	cmp	r3, r2
 8013820:	d01f      	beq.n	8013862 <psa_cipher_setup+0x142>
 8013822:	3201      	adds	r2, #1
 8013824:	1a9a      	subs	r2, r3, r2
 8013826:	4253      	negs	r3, r2
 8013828:	4153      	adcs	r3, r2
 801382a:	7163      	strb	r3, [r4, #5]
        status = mbedtls_to_psa_error( ret );
 801382c:	4630      	mov	r0, r6
 801382e:	f7fe fd3f 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != 0 )
 8013832:	4606      	mov	r6, r0
 8013834:	2800      	cmp	r0, #0
 8013836:	d08d      	beq.n	8013754 <psa_cipher_setup+0x34>
 8013838:	e017      	b.n	801386a <psa_cipher_setup+0x14a>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 801383a:	2104      	movs	r1, #4
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 801383c:	4648      	mov	r0, r9
 801383e:	f7fa f98f 	bl	800db60 <mbedtls_cipher_set_padding_mode>
    if( ret != 0 )
 8013842:	b9c8      	cbnz	r0, 8013878 <psa_cipher_setup+0x158>
    operation->key_set = 1;
 8013844:	7923      	ldrb	r3, [r4, #4]
 8013846:	f043 0301 	orr.w	r3, r3, #1
 801384a:	7123      	strb	r3, [r4, #4]
 801384c:	e7cc      	b.n	80137e8 <psa_cipher_setup+0xc8>
            ret = mbedtls_cipher_set_padding_mode( &operation->ctx.cipher,
 801384e:	4601      	mov	r1, r0
 8013850:	e7f4      	b.n	801383c <psa_cipher_setup+0x11c>
    operation->block_size = ( PSA_ALG_IS_STREAM_CIPHER( alg ) ? 1 :
 8013852:	2301      	movs	r3, #1
 8013854:	e7d7      	b.n	8013806 <psa_cipher_setup+0xe6>
 8013856:	2308      	movs	r3, #8
 8013858:	e7d5      	b.n	8013806 <psa_cipher_setup+0xe6>
 801385a:	2310      	movs	r3, #16
 801385c:	e7d3      	b.n	8013806 <psa_cipher_setup+0xe6>
        operation->iv_size = PSA_BLOCK_CIPHER_BLOCK_SIZE( slot->type );
 801385e:	2308      	movs	r3, #8
 8013860:	e7e3      	b.n	801382a <psa_cipher_setup+0x10a>
 8013862:	2310      	movs	r3, #16
 8013864:	e7e1      	b.n	801382a <psa_cipher_setup+0x10a>
        status = PSA_ERROR_NOT_SUPPORTED;
 8013866:	f06f 0685 	mvn.w	r6, #133	; 0x85
        psa_cipher_abort( operation );
 801386a:	4620      	mov	r0, r4
 801386c:	f7ff ff3c 	bl	80136e8 <psa_cipher_abort>
 8013870:	e770      	b.n	8013754 <psa_cipher_setup+0x34>
        return( PSA_ERROR_BAD_STATE );
 8013872:	f06f 0688 	mvn.w	r6, #136	; 0x88
 8013876:	e76d      	b.n	8013754 <psa_cipher_setup+0x34>
    if( ret != 0 )
 8013878:	4606      	mov	r6, r0
 801387a:	e7d7      	b.n	801382c <psa_cipher_setup+0x10c>
 801387c:	04600100 	.word	0x04600100
 8013880:	40000001 	.word	0x40000001

08013884 <psa_cipher_encrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_ENCRYPT ) );
 8013884:	2301      	movs	r3, #1
 8013886:	f7ff bf4b 	b.w	8013720 <psa_cipher_setup>

0801388a <psa_cipher_decrypt_setup>:
    return( psa_cipher_setup( operation, handle, alg, MBEDTLS_DECRYPT ) );
 801388a:	2300      	movs	r3, #0
 801388c:	f7ff bf48 	b.w	8013720 <psa_cipher_setup>

08013890 <psa_cipher_set_iv>:
{
 8013890:	b538      	push	{r3, r4, r5, lr}
 8013892:	4604      	mov	r4, r0
    if( operation->iv_set || ! operation->iv_required )
 8013894:	7923      	ldrb	r3, [r4, #4]
 8013896:	f003 0306 	and.w	r3, r3, #6
 801389a:	2b02      	cmp	r3, #2
 801389c:	d116      	bne.n	80138cc <psa_cipher_set_iv+0x3c>
    if( iv_length != operation->iv_size )
 801389e:	7963      	ldrb	r3, [r4, #5]
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d10d      	bne.n	80138c0 <psa_cipher_set_iv+0x30>
    ret = mbedtls_cipher_set_iv( &operation->ctx.cipher, iv, iv_length );
 80138a4:	f104 0008 	add.w	r0, r4, #8
 80138a8:	f7fa f804 	bl	800d8b4 <mbedtls_cipher_set_iv>
    status = mbedtls_to_psa_error( ret );
 80138ac:	f7fe fd00 	bl	80122b0 <mbedtls_to_psa_error>
    if( status == PSA_SUCCESS )
 80138b0:	4605      	mov	r5, r0
 80138b2:	b938      	cbnz	r0, 80138c4 <psa_cipher_set_iv+0x34>
        operation->iv_set = 1;
 80138b4:	7923      	ldrb	r3, [r4, #4]
 80138b6:	f043 0304 	orr.w	r3, r3, #4
 80138ba:	7123      	strb	r3, [r4, #4]
}
 80138bc:	4628      	mov	r0, r5
 80138be:	bd38      	pop	{r3, r4, r5, pc}
        status = PSA_ERROR_INVALID_ARGUMENT;
 80138c0:	f06f 0586 	mvn.w	r5, #134	; 0x86
        psa_cipher_abort( operation );
 80138c4:	4620      	mov	r0, r4
 80138c6:	f7ff ff0f 	bl	80136e8 <psa_cipher_abort>
 80138ca:	e7f7      	b.n	80138bc <psa_cipher_set_iv+0x2c>
        return( PSA_ERROR_BAD_STATE );
 80138cc:	f06f 0588 	mvn.w	r5, #136	; 0x88
 80138d0:	e7f4      	b.n	80138bc <psa_cipher_set_iv+0x2c>

080138d2 <psa_cipher_update>:
{
 80138d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138d4:	4604      	mov	r4, r0
    if( operation->alg == 0 )
 80138d6:	6800      	ldr	r0, [r0, #0]
 80138d8:	b318      	cbz	r0, 8013922 <psa_cipher_update+0x50>
    if( ! PSA_ALG_IS_STREAM_CIPHER( operation->alg ) )
 80138da:	f000 40ff 	and.w	r0, r0, #2139095040	; 0x7f800000
 80138de:	f1b0 6f90 	cmp.w	r0, #75497472	; 0x4800000
            ( operation->ctx.cipher.unprocessed_len + input_length )
 80138e2:	bf1f      	itttt	ne
 80138e4:	6ae5      	ldrne	r5, [r4, #44]	; 0x2c
            / operation->block_size * operation->block_size;
 80138e6:	79a0      	ldrbne	r0, [r4, #6]
            ( operation->ctx.cipher.unprocessed_len + input_length )
 80138e8:	18ad      	addne	r5, r5, r2
            / operation->block_size * operation->block_size;
 80138ea:	fbb5 f5f0 	udivne	r5, r5, r0
        expected_output_size =
 80138ee:	bf18      	it	ne
 80138f0:	4368      	mulne	r0, r5
    if( output_size < expected_output_size )
 80138f2:	9d06      	ldr	r5, [sp, #24]
        expected_output_size = input_length;
 80138f4:	bf08      	it	eq
 80138f6:	4610      	moveq	r0, r2
    if( output_size < expected_output_size )
 80138f8:	42a8      	cmp	r0, r5
 80138fa:	d80c      	bhi.n	8013916 <psa_cipher_update+0x44>
    ret = mbedtls_cipher_update( &operation->ctx.cipher, input,
 80138fc:	9807      	ldr	r0, [sp, #28]
 80138fe:	9000      	str	r0, [sp, #0]
 8013900:	f104 0008 	add.w	r0, r4, #8
 8013904:	f7f9 fff8 	bl	800d8f8 <mbedtls_cipher_update>
    status = mbedtls_to_psa_error( ret );
 8013908:	f7fe fcd2 	bl	80122b0 <mbedtls_to_psa_error>
    if( status != PSA_SUCCESS )
 801390c:	4605      	mov	r5, r0
 801390e:	b920      	cbnz	r0, 801391a <psa_cipher_update+0x48>
}
 8013910:	4628      	mov	r0, r5
 8013912:	b003      	add	sp, #12
 8013914:	bd30      	pop	{r4, r5, pc}
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 8013916:	f06f 0589 	mvn.w	r5, #137	; 0x89
        psa_cipher_abort( operation );
 801391a:	4620      	mov	r0, r4
 801391c:	f7ff fee4 	bl	80136e8 <psa_cipher_abort>
 8013920:	e7f6      	b.n	8013910 <psa_cipher_update+0x3e>
        return( PSA_ERROR_BAD_STATE );
 8013922:	f06f 0588 	mvn.w	r5, #136	; 0x88
 8013926:	e7f3      	b.n	8013910 <psa_cipher_update+0x3e>

08013928 <psa_cipher_finish>:
{
 8013928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392a:	4617      	mov	r7, r2
    if( ! operation->key_set )
 801392c:	7902      	ldrb	r2, [r0, #4]
{
 801392e:	461e      	mov	r6, r3
    if( ! operation->key_set )
 8013930:	07d3      	lsls	r3, r2, #31
{
 8013932:	b085      	sub	sp, #20
 8013934:	4604      	mov	r4, r0
 8013936:	460d      	mov	r5, r1
    if( ! operation->key_set )
 8013938:	d53a      	bpl.n	80139b0 <psa_cipher_finish+0x88>
    if( operation->iv_required && ! operation->iv_set )
 801393a:	f002 0206 	and.w	r2, r2, #6
 801393e:	2a02      	cmp	r2, #2
 8013940:	d036      	beq.n	80139b0 <psa_cipher_finish+0x88>
    if( operation->ctx.cipher.operation == MBEDTLS_ENCRYPT &&
 8013942:	f990 3010 	ldrsb.w	r3, [r0, #16]
 8013946:	2b01      	cmp	r3, #1
 8013948:	d105      	bne.n	8013956 <psa_cipher_finish+0x2e>
 801394a:	6802      	ldr	r2, [r0, #0]
 801394c:	4b1a      	ldr	r3, [pc, #104]	; (80139b8 <psa_cipher_finish+0x90>)
 801394e:	429a      	cmp	r2, r3
 8013950:	d101      	bne.n	8013956 <psa_cipher_finish+0x2e>
        operation->alg == PSA_ALG_CBC_NO_PADDING &&
 8013952:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013954:	bb33      	cbnz	r3, 80139a4 <psa_cipher_finish+0x7c>
    cipher_ret = mbedtls_cipher_finish( &operation->ctx.cipher,
 8013956:	4632      	mov	r2, r6
 8013958:	4669      	mov	r1, sp
 801395a:	f104 0008 	add.w	r0, r4, #8
 801395e:	f7fa f89d 	bl	800da9c <mbedtls_cipher_finish>
    if( cipher_ret != 0 )
 8013962:	b160      	cbz	r0, 801397e <psa_cipher_finish+0x56>
        status = mbedtls_to_psa_error( cipher_ret );
 8013964:	f7fe fca4 	bl	80122b0 <mbedtls_to_psa_error>
 8013968:	4605      	mov	r5, r0
    *output_length = 0;
 801396a:	2300      	movs	r3, #0
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 801396c:	4668      	mov	r0, sp
    *output_length = 0;
 801396e:	6033      	str	r3, [r6, #0]
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 8013970:	2110      	movs	r1, #16
 8013972:	f7fe fc95 	bl	80122a0 <mbedtls_platform_zeroize>
    (void) psa_cipher_abort( operation );
 8013976:	4620      	mov	r0, r4
 8013978:	f7ff feb6 	bl	80136e8 <psa_cipher_abort>
    return( status );
 801397c:	e00f      	b.n	801399e <psa_cipher_finish+0x76>
    if( *output_length == 0 )
 801397e:	6832      	ldr	r2, [r6, #0]
 8013980:	b12a      	cbz	r2, 801398e <psa_cipher_finish+0x66>
    else if( output_size >= *output_length )
 8013982:	42ba      	cmp	r2, r7
 8013984:	d811      	bhi.n	80139aa <psa_cipher_finish+0x82>
        memcpy( output, temp_output_buffer, *output_length );
 8013986:	4669      	mov	r1, sp
 8013988:	4628      	mov	r0, r5
 801398a:	f003 f896 	bl	8016aba <memcpy>
    mbedtls_platform_zeroize( temp_output_buffer, sizeof( temp_output_buffer ) );
 801398e:	2110      	movs	r1, #16
 8013990:	4668      	mov	r0, sp
 8013992:	f7fe fc85 	bl	80122a0 <mbedtls_platform_zeroize>
    status = psa_cipher_abort( operation );
 8013996:	4620      	mov	r0, r4
 8013998:	f7ff fea6 	bl	80136e8 <psa_cipher_abort>
 801399c:	4605      	mov	r5, r0
}
 801399e:	4628      	mov	r0, r5
 80139a0:	b005      	add	sp, #20
 80139a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            status = PSA_ERROR_INVALID_ARGUMENT;
 80139a4:	f06f 0586 	mvn.w	r5, #134	; 0x86
 80139a8:	e7df      	b.n	801396a <psa_cipher_finish+0x42>
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 80139aa:	f06f 0589 	mvn.w	r5, #137	; 0x89
 80139ae:	e7dc      	b.n	801396a <psa_cipher_finish+0x42>
        return( PSA_ERROR_BAD_STATE );
 80139b0:	f06f 0588 	mvn.w	r5, #136	; 0x88
 80139b4:	e7f3      	b.n	801399e <psa_cipher_finish+0x76>
 80139b6:	bf00      	nop
 80139b8:	04600100 	.word	0x04600100

080139bc <psa_key_policy_set_usage>:
void psa_key_policy_set_usage( psa_key_policy_t *policy,
                               psa_key_usage_t usage,
                               psa_algorithm_t alg )
{
    policy->usage = usage;
    policy->alg = alg;
 80139bc:	e9c0 1200 	strd	r1, r2, [r0]
}
 80139c0:	4770      	bx	lr

080139c2 <psa_set_key_policy>:
}
#endif /* !defined(MBEDTLS_PSA_CRYPTO_SPM) */

psa_status_t psa_set_key_policy( psa_key_handle_t handle,
                                 const psa_key_policy_t *policy )
{
 80139c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    psa_key_slot_t *slot;
    psa_status_t status;

    if( policy == NULL )
 80139c4:	460c      	mov	r4, r1
 80139c6:	b921      	cbnz	r1, 80139d2 <psa_set_key_policy+0x10>
        return( PSA_ERROR_INVALID_ARGUMENT );
 80139c8:	f06f 0586 	mvn.w	r5, #134	; 0x86
        return( PSA_ERROR_INVALID_ARGUMENT );

    slot->policy = *policy;

    return( PSA_SUCCESS );
}
 80139cc:	4628      	mov	r0, r5
 80139ce:	b003      	add	sp, #12
 80139d0:	bd30      	pop	{r4, r5, pc}
    status = psa_get_empty_key_slot( handle, &slot );
 80139d2:	a901      	add	r1, sp, #4
 80139d4:	f7fe fdf0 	bl	80125b8 <psa_get_empty_key_slot>
    if( status != PSA_SUCCESS )
 80139d8:	4605      	mov	r5, r0
 80139da:	2800      	cmp	r0, #0
 80139dc:	d1f6      	bne.n	80139cc <psa_set_key_policy+0xa>
    if( ( policy->usage & ~( PSA_KEY_USAGE_EXPORT |
 80139de:	6823      	ldr	r3, [r4, #0]
 80139e0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80139e4:	f023 0301 	bic.w	r3, r3, #1
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d1ed      	bne.n	80139c8 <psa_set_key_policy+0x6>
    slot->policy = *policy;
 80139ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80139f0:	9b01      	ldr	r3, [sp, #4]
 80139f2:	3304      	adds	r3, #4
 80139f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return( PSA_SUCCESS );
 80139f8:	e7e8      	b.n	80139cc <psa_set_key_policy+0xa>
	...

080139fc <mbedtls_psa_crypto_free>:
    global_data.entropy_free = entropy_free;
    return( PSA_SUCCESS );
}

void mbedtls_psa_crypto_free( void )
{
 80139fc:	b510      	push	{r4, lr}
    psa_wipe_all_key_slots( );
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 80139fe:	4c0b      	ldr	r4, [pc, #44]	; (8013a2c <mbedtls_psa_crypto_free+0x30>)
    psa_wipe_all_key_slots( );
 8013a00:	f000 f8a8 	bl	8013b54 <psa_wipe_all_key_slots>
    if( global_data.rng_state != RNG_NOT_INITIALIZED )
 8013a04:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
 8013a08:	f013 0f06 	tst.w	r3, #6
 8013a0c:	d007      	beq.n	8013a1e <mbedtls_psa_crypto_free+0x22>
    {
        mbedtls_ctr_drbg_free( &global_data.ctr_drbg );
 8013a0e:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 8013a12:	f7fa fb9e 	bl	800e152 <mbedtls_ctr_drbg_free>
        global_data.entropy_free( &global_data.entropy );
 8013a16:	6863      	ldr	r3, [r4, #4]
 8013a18:	f104 0008 	add.w	r0, r4, #8
 8013a1c:	4798      	blx	r3
    }
    /* Wipe all remaining data, including configuration.
     * In particular, this sets all state indicator to the value
     * indicating "uninitialized". */
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
 8013a1e:	f44f 7154 	mov.w	r1, #848	; 0x350
 8013a22:	4802      	ldr	r0, [pc, #8]	; (8013a2c <mbedtls_psa_crypto_free+0x30>)
}
 8013a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( &global_data, sizeof( global_data ) );
 8013a28:	f7fe bc3a 	b.w	80122a0 <mbedtls_platform_zeroize>
 8013a2c:	20006ec8 	.word	0x20006ec8

08013a30 <psa_crypto_init>:

psa_status_t psa_crypto_init( void )
{
 8013a30:	b530      	push	{r4, r5, lr}
    psa_status_t status;
    const unsigned char drbg_seed[] = "PSA";

    /* Double initialization is explicitly allowed. */
    if( global_data.initialized != 0 )
 8013a32:	4c21      	ldr	r4, [pc, #132]	; (8013ab8 <psa_crypto_init+0x88>)
    const unsigned char drbg_seed[] = "PSA";
 8013a34:	4b21      	ldr	r3, [pc, #132]	; (8013abc <psa_crypto_init+0x8c>)
{
 8013a36:	b085      	sub	sp, #20
    const unsigned char drbg_seed[] = "PSA";
 8013a38:	9303      	str	r3, [sp, #12]
    if( global_data.initialized != 0 )
 8013a3a:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
 8013a3e:	07db      	lsls	r3, r3, #31
 8013a40:	d435      	bmi.n	8013aae <psa_crypto_init+0x7e>
        return( PSA_SUCCESS );

    /* Set default configuration if
     * mbedtls_psa_crypto_configure_entropy_sources() hasn't been called. */
    if( global_data.entropy_init == NULL )
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	b90b      	cbnz	r3, 8013a4a <psa_crypto_init+0x1a>
        global_data.entropy_init = mbedtls_entropy_init;
 8013a46:	4b1e      	ldr	r3, [pc, #120]	; (8013ac0 <psa_crypto_init+0x90>)
 8013a48:	6023      	str	r3, [r4, #0]
    if( global_data.entropy_free == NULL )
 8013a4a:	6863      	ldr	r3, [r4, #4]
 8013a4c:	b90b      	cbnz	r3, 8013a52 <psa_crypto_init+0x22>
        global_data.entropy_free = mbedtls_entropy_free;
 8013a4e:	4b1d      	ldr	r3, [pc, #116]	; (8013ac4 <psa_crypto_init+0x94>)
 8013a50:	6063      	str	r3, [r4, #4]

    /* Initialize the random generator. */
    global_data.entropy_init( &global_data.entropy );
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	481c      	ldr	r0, [pc, #112]	; (8013ac8 <psa_crypto_init+0x98>)
 8013a56:	4798      	blx	r3
    mbedtls_entropy_add_source( &global_data.entropy,
                                mbedtls_nv_seed_poll, NULL,
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
#endif
    mbedtls_ctr_drbg_init( &global_data.ctr_drbg );
 8013a58:	481c      	ldr	r0, [pc, #112]	; (8013acc <psa_crypto_init+0x9c>)
 8013a5a:	f7fa fb75 	bl	800e148 <mbedtls_ctr_drbg_init>
    global_data.rng_state = RNG_INITIALIZED;
 8013a5e:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    status = mbedtls_to_psa_error(
 8013a62:	491b      	ldr	r1, [pc, #108]	; (8013ad0 <psa_crypto_init+0xa0>)
    global_data.rng_state = RNG_INITIALIZED;
 8013a64:	2201      	movs	r2, #1
 8013a66:	f362 0342 	bfi	r3, r2, #1, #2
    status = mbedtls_to_psa_error(
 8013a6a:	4a17      	ldr	r2, [pc, #92]	; (8013ac8 <psa_crypto_init+0x98>)
    global_data.rng_state = RNG_INITIALIZED;
 8013a6c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    status = mbedtls_to_psa_error(
 8013a70:	2303      	movs	r3, #3
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	f502 7001 	add.w	r0, r2, #516	; 0x204
 8013a78:	ab03      	add	r3, sp, #12
 8013a7a:	f7fa fbe3 	bl	800e244 <mbedtls_ctr_drbg_seed>
 8013a7e:	f7fe fc17 	bl	80122b0 <mbedtls_to_psa_error>
        mbedtls_ctr_drbg_seed( &global_data.ctr_drbg,
                               mbedtls_entropy_func,
                               &global_data.entropy,
                               drbg_seed, sizeof( drbg_seed ) - 1 ) );
    if( status != PSA_SUCCESS )
 8013a82:	4605      	mov	r5, r0
 8013a84:	b9a8      	cbnz	r0, 8013ab2 <psa_crypto_init+0x82>
        goto exit;
    global_data.rng_state = RNG_SEEDED;
 8013a86:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
 8013a8a:	2202      	movs	r2, #2
 8013a8c:	f362 0342 	bfi	r3, r2, #1, #2
 8013a90:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c

    status = psa_initialize_key_slots( );
 8013a94:	f000 f852 	bl	8013b3c <psa_initialize_key_slots>
    if( status != PSA_SUCCESS )
 8013a98:	4605      	mov	r5, r0
 8013a9a:	b950      	cbnz	r0, 8013ab2 <psa_crypto_init+0x82>
        goto exit;

    /* All done. */
    global_data.initialized = 1;
 8013a9c:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
 8013aa0:	f043 0301 	orr.w	r3, r3, #1
 8013aa4:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c

exit:
    if( status != PSA_SUCCESS )
        mbedtls_psa_crypto_free( );
    return( status );
}
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	b005      	add	sp, #20
 8013aac:	bd30      	pop	{r4, r5, pc}
        return( PSA_SUCCESS );
 8013aae:	2500      	movs	r5, #0
 8013ab0:	e7fa      	b.n	8013aa8 <psa_crypto_init+0x78>
        mbedtls_psa_crypto_free( );
 8013ab2:	f7ff ffa3 	bl	80139fc <mbedtls_psa_crypto_free>
 8013ab6:	e7f7      	b.n	8013aa8 <psa_crypto_init+0x78>
 8013ab8:	20006ec8 	.word	0x20006ec8
 8013abc:	00415350 	.word	0x00415350
 8013ac0:	08010795 	.word	0x08010795
 8013ac4:	080107d5 	.word	0x080107d5
 8013ac8:	20006ed0 	.word	0x20006ed0
 8013acc:	200070d4 	.word	0x200070d4
 8013ad0:	080107f3 	.word	0x080107f3

08013ad4 <psa_internal_allocate_key_slot>:
 *
 * \retval #PSA_SUCCESS
 * \retval #PSA_ERROR_INSUFFICIENT_MEMORY
 */
static psa_status_t psa_internal_allocate_key_slot( psa_key_handle_t *handle )
{
 8013ad4:	b570      	push	{r4, r5, r6, lr}
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 8013ad6:	2320      	movs	r3, #32
    {
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
        if( ! slot->allocated )
 8013ad8:	4d0a      	ldr	r5, [pc, #40]	; (8013b04 <psa_internal_allocate_key_slot+0x30>)
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 8013ada:	8003      	strh	r3, [r0, #0]
        if( ! slot->allocated )
 8013adc:	2624      	movs	r6, #36	; 0x24
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 8013ade:	8803      	ldrh	r3, [r0, #0]
 8013ae0:	b913      	cbnz	r3, 8013ae8 <psa_internal_allocate_key_slot+0x14>
        {
            slot->allocated = 1;
            return( PSA_SUCCESS );
        }
    }
    return( PSA_ERROR_INSUFFICIENT_MEMORY );
 8013ae2:	f06f 008c 	mvn.w	r0, #140	; 0x8c
 8013ae6:	e00a      	b.n	8013afe <psa_internal_allocate_key_slot+0x2a>
        psa_key_slot_t *slot = &global_data.key_slots[*handle - 1];
 8013ae8:	3b01      	subs	r3, #1
        if( ! slot->allocated )
 8013aea:	fb06 5403 	mla	r4, r6, r3, r5
 8013aee:	7e22      	ldrb	r2, [r4, #24]
 8013af0:	f012 0101 	ands.w	r1, r2, #1
 8013af4:	d104      	bne.n	8013b00 <psa_internal_allocate_key_slot+0x2c>
            slot->allocated = 1;
 8013af6:	f042 0201 	orr.w	r2, r2, #1
 8013afa:	7622      	strb	r2, [r4, #24]
            return( PSA_SUCCESS );
 8013afc:	4608      	mov	r0, r1
}
 8013afe:	bd70      	pop	{r4, r5, r6, pc}
    for( *handle = PSA_KEY_SLOT_COUNT; *handle != 0; --( *handle ) )
 8013b00:	8003      	strh	r3, [r0, #0]
 8013b02:	e7ec      	b.n	8013ade <psa_internal_allocate_key_slot+0xa>
 8013b04:	20007218 	.word	0x20007218

08013b08 <psa_get_key_slot>:
    if( ! global_data.key_slots_initialized )
 8013b08:	4b0b      	ldr	r3, [pc, #44]	; (8013b38 <psa_get_key_slot+0x30>)
 8013b0a:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8013b0e:	07d2      	lsls	r2, r2, #31
 8013b10:	d50c      	bpl.n	8013b2c <psa_get_key_slot+0x24>
    if( handle == 0 || handle > ARRAY_LENGTH( global_data.key_slots ) )
 8013b12:	3801      	subs	r0, #1
 8013b14:	b282      	uxth	r2, r0
 8013b16:	2a1f      	cmp	r2, #31
 8013b18:	d80b      	bhi.n	8013b32 <psa_get_key_slot+0x2a>
    slot = &global_data.key_slots[handle - 1];
 8013b1a:	2224      	movs	r2, #36	; 0x24
 8013b1c:	fb02 3000 	mla	r0, r2, r0, r3
    if( ! slot->allocated )
 8013b20:	7e03      	ldrb	r3, [r0, #24]
 8013b22:	07db      	lsls	r3, r3, #31
 8013b24:	d505      	bpl.n	8013b32 <psa_get_key_slot+0x2a>
    *p_slot = slot;
 8013b26:	6008      	str	r0, [r1, #0]
    return( PSA_SUCCESS );
 8013b28:	2000      	movs	r0, #0
 8013b2a:	4770      	bx	lr
        return( PSA_ERROR_BAD_STATE );
 8013b2c:	f06f 0088 	mvn.w	r0, #136	; 0x88
 8013b30:	4770      	bx	lr
        return( PSA_ERROR_INVALID_HANDLE );
 8013b32:	f06f 0087 	mvn.w	r0, #135	; 0x87
}
 8013b36:	4770      	bx	lr
 8013b38:	20007218 	.word	0x20007218

08013b3c <psa_initialize_key_slots>:
    global_data.key_slots_initialized = 1;
 8013b3c:	4a04      	ldr	r2, [pc, #16]	; (8013b50 <psa_initialize_key_slots+0x14>)
 8013b3e:	f892 3480 	ldrb.w	r3, [r2, #1152]	; 0x480
 8013b42:	f043 0301 	orr.w	r3, r3, #1
 8013b46:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
}
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	4770      	bx	lr
 8013b4e:	bf00      	nop
 8013b50:	20007218 	.word	0x20007218

08013b54 <psa_wipe_all_key_slots>:
{
 8013b54:	b570      	push	{r4, r5, r6, lr}
        (void) psa_wipe_key_slot( slot );
 8013b56:	4d08      	ldr	r5, [pc, #32]	; (8013b78 <psa_wipe_all_key_slots+0x24>)
{
 8013b58:	2400      	movs	r4, #0
        (void) psa_wipe_key_slot( slot );
 8013b5a:	2624      	movs	r6, #36	; 0x24
 8013b5c:	fb06 5004 	mla	r0, r6, r4, r5
 8013b60:	3401      	adds	r4, #1
 8013b62:	f7ff f811 	bl	8012b88 <psa_wipe_key_slot>
    for( key = 1; key <= PSA_KEY_SLOT_COUNT; key++ )
 8013b66:	2c20      	cmp	r4, #32
 8013b68:	d1f8      	bne.n	8013b5c <psa_wipe_all_key_slots+0x8>
    global_data.key_slots_initialized = 0;
 8013b6a:	f895 3480 	ldrb.w	r3, [r5, #1152]	; 0x480
 8013b6e:	f36f 0300 	bfc	r3, #0, #1
 8013b72:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 8013b76:	bd70      	pop	{r4, r5, r6, pc}
 8013b78:	20007218 	.word	0x20007218

08013b7c <psa_allocate_key>:
    return( psa_wipe_key_slot( slot ) );
}

psa_status_t psa_allocate_key( psa_key_handle_t *handle )
{
    *handle = 0;
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	8002      	strh	r2, [r0, #0]
    return( psa_internal_allocate_key_slot( handle ) );
 8013b80:	f7ff bfa8 	b.w	8013ad4 <psa_internal_allocate_key_slot>

08013b84 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8013b84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b88:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 8013b8a:	2300      	movs	r3, #0
{
 8013b8c:	460e      	mov	r6, r1
 8013b8e:	4690      	mov	r8, r2
 8013b90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8013b92:	e9cd 3300 	strd	r3, r3, [sp]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8013b96:	4604      	mov	r4, r0
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d064      	beq.n	8013c66 <rsa_rsassa_pkcs1_v15_encode+0xe2>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8013b9c:	f7fd fb04 	bl	80111a8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	b920      	cbnz	r0, 8013bae <rsa_rsassa_pkcs1_v15_encode+0x2a>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8013ba4:	4c3c      	ldr	r4, [pc, #240]	; (8013c98 <rsa_rsassa_pkcs1_v15_encode+0x114>)
    }

    return( 0 );
}
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	b002      	add	sp, #8
 8013baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8013bae:	4620      	mov	r0, r4
 8013bb0:	466a      	mov	r2, sp
 8013bb2:	a901      	add	r1, sp, #4
 8013bb4:	f7fd fc8e 	bl	80114d4 <mbedtls_oid_get_oid_by_md>
 8013bb8:	4604      	mov	r4, r0
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d1f2      	bne.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        hashlen = mbedtls_md_get_size( md_info );
 8013bbe:	4630      	mov	r0, r6
 8013bc0:	f7fd fbf4 	bl	80113ac <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8013bc4:	9e00      	ldr	r6, [sp, #0]
 8013bc6:	1983      	adds	r3, r0, r6
 8013bc8:	f103 0208 	add.w	r2, r3, #8
 8013bcc:	2a7f      	cmp	r2, #127	; 0x7f
        hashlen = mbedtls_md_get_size( md_info );
 8013bce:	4681      	mov	r9, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8013bd0:	d8e8      	bhi.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
            10 + hashlen + oid_size <  10 + hashlen )
 8013bd2:	f103 020a 	add.w	r2, r3, #10
 8013bd6:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
 8013bda:	428a      	cmp	r2, r1
 8013bdc:	d3e2      	bcc.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < 10 + hashlen + oid_size )
 8013bde:	42aa      	cmp	r2, r5
 8013be0:	d8e0      	bhi.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= 10 + hashlen + oid_size;
 8013be2:	f1a5 060a 	sub.w	r6, r5, #10
 8013be6:	1af6      	subs	r6, r6, r3
    if( nb_pad < 3 + 8 )
 8013be8:	2e0a      	cmp	r6, #10
 8013bea:	d9db      	bls.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 8013bec:	46ba      	mov	sl, r7
    nb_pad -= 3;
 8013bee:	3e03      	subs	r6, #3
    *p++ = 0;
 8013bf0:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8013bf4:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8013bf6:	4632      	mov	r2, r6
    *p++ = MBEDTLS_RSA_SIGN;
 8013bf8:	707b      	strb	r3, [r7, #1]
    memset( p, 0xFF, nb_pad );
 8013bfa:	21ff      	movs	r1, #255	; 0xff
 8013bfc:	4650      	mov	r0, sl
 8013bfe:	f002 ff80 	bl	8016b02 <memset>
    p += nb_pad;
 8013c02:	eb0a 0306 	add.w	r3, sl, r6
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8013c06:	2130      	movs	r1, #48	; 0x30
    *p++ = 0;
 8013c08:	f80a 4006 	strb.w	r4, [sl, r6]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8013c0c:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8013c0e:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8013c10:	70d9      	strb	r1, [r3, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8013c12:	f106 0208 	add.w	r2, r6, #8
 8013c16:	444a      	add	r2, r9
 8013c18:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
 8013c1a:	b2f2      	uxtb	r2, r6
 8013c1c:	1d11      	adds	r1, r2, #4
    *p++ = (unsigned char) oid_size;
 8013c1e:	f103 0a07 	add.w	sl, r3, #7
    *p++ = (unsigned char)( 0x04 + oid_size );
 8013c22:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8013c24:	2106      	movs	r1, #6
 8013c26:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8013c28:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8013c2a:	9901      	ldr	r1, [sp, #4]
 8013c2c:	4632      	mov	r2, r6
 8013c2e:	4650      	mov	r0, sl
 8013c30:	f002 ff43 	bl	8016aba <memcpy>
    p += oid_size;
 8013c34:	eb0a 0206 	add.w	r2, sl, r6
    *p++ = MBEDTLS_ASN1_NULL;
 8013c38:	2305      	movs	r3, #5
 8013c3a:	f80a 3006 	strb.w	r3, [sl, r6]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8013c3e:	2304      	movs	r3, #4
 8013c40:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
 8013c42:	18d3      	adds	r3, r2, r3
 8013c44:	f882 9003 	strb.w	r9, [r2, #3]
    *p++ = 0x00;
 8013c48:	7054      	strb	r4, [r2, #1]
    memcpy( p, hash, hashlen );
 8013c4a:	4641      	mov	r1, r8
 8013c4c:	464a      	mov	r2, r9
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f002 ff33 	bl	8016aba <memcpy>
    if( p != dst + dst_len )
 8013c54:	197a      	adds	r2, r7, r5
    p += hashlen;
 8013c56:	4481      	add	r9, r0
    if( p != dst + dst_len )
 8013c58:	454a      	cmp	r2, r9
 8013c5a:	d0a4      	beq.n	8013ba6 <rsa_rsassa_pkcs1_v15_encode+0x22>
        mbedtls_platform_zeroize( dst, dst_len );
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f7fe fb1e 	bl	80122a0 <mbedtls_platform_zeroize>
 8013c64:	e79e      	b.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        if( nb_pad < hashlen )
 8013c66:	428d      	cmp	r5, r1
 8013c68:	d39c      	bcc.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
        nb_pad -= hashlen;
 8013c6a:	1a6d      	subs	r5, r5, r1
    if( nb_pad < 3 + 8 )
 8013c6c:	2d0a      	cmp	r5, #10
 8013c6e:	d999      	bls.n	8013ba4 <rsa_rsassa_pkcs1_v15_encode+0x20>
    *p++ = 0;
 8013c70:	463b      	mov	r3, r7
    nb_pad -= 3;
 8013c72:	3d03      	subs	r5, #3
    *p++ = 0;
 8013c74:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8013c78:	2201      	movs	r2, #1
 8013c7a:	707a      	strb	r2, [r7, #1]
    memset( p, 0xFF, nb_pad );
 8013c7c:	21ff      	movs	r1, #255	; 0xff
 8013c7e:	462a      	mov	r2, r5
 8013c80:	4618      	mov	r0, r3
 8013c82:	f002 ff3e 	bl	8016b02 <memset>
 8013c86:	4603      	mov	r3, r0
    p += nb_pad;
 8013c88:	4428      	add	r0, r5
    *p++ = 0;
 8013c8a:	555c      	strb	r4, [r3, r5]
        memcpy( p, hash, hashlen );
 8013c8c:	4632      	mov	r2, r6
 8013c8e:	4641      	mov	r1, r8
 8013c90:	3001      	adds	r0, #1
 8013c92:	f002 ff12 	bl	8016aba <memcpy>
        return( 0 );
 8013c96:	e786      	b.n	8013ba6 <rsa_rsassa_pkcs1_v15_encode+0x22>
 8013c98:	ffffbf80 	.word	0xffffbf80

08013c9c <rsa_check_context.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8013c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8013c9e:	f100 0508 	add.w	r5, r0, #8
 8013ca2:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8013ca4:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8013ca6:	4628      	mov	r0, r5
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8013ca8:	460e      	mov	r6, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8013caa:	f7f7 fcf4 	bl	800b696 <mbedtls_mpi_size>
 8013cae:	4287      	cmp	r7, r0
 8013cb0:	d001      	beq.n	8013cb6 <rsa_check_context.isra.0+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8013cb2:	4827      	ldr	r0, [pc, #156]	; (8013d50 <rsa_check_context.isra.0+0xb4>)
}
 8013cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8013cb6:	6863      	ldr	r3, [r4, #4]
 8013cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013cbc:	d8f9      	bhi.n	8013cb2 <rsa_check_context.isra.0+0x16>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f7f7 feb3 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	ddf3      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8013cca:	2100      	movs	r1, #0
 8013ccc:	4628      	mov	r0, r5
 8013cce:	f7f7 fc97 	bl	800b600 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8013cd2:	2800      	cmp	r0, #0
 8013cd4:	d0ed      	beq.n	8013cb2 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8013cd6:	b9f6      	cbnz	r6, 8013d16 <rsa_check_context.isra.0+0x7a>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 8013cd8:	2100      	movs	r1, #0
 8013cda:	f104 0014 	add.w	r0, r4, #20
 8013cde:	f7f7 fea5 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	dde5      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
    if( is_priv &&
 8013ce6:	b1a6      	cbz	r6, 8013d12 <rsa_check_context.isra.0+0x76>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8013ce8:	2100      	movs	r1, #0
 8013cea:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013cee:	f7f7 fe9d 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	dddd      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013cfc:	f7f7 fe96 	bl	800ba2c <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8013d00:	2800      	cmp	r0, #0
 8013d02:	ddd6      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8013d04:	2100      	movs	r1, #0
 8013d06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d0a:	f7f7 fe8f 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	ddcf      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
    return( 0 );
 8013d12:	2000      	movs	r0, #0
 8013d14:	e7ce      	b.n	8013cb4 <rsa_check_context.isra.0+0x18>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8013d16:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8013d1a:	2100      	movs	r1, #0
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	f7f7 fe85 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( is_priv &&
 8013d22:	2800      	cmp	r0, #0
 8013d24:	ddc5      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8013d26:	2100      	movs	r1, #0
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f7f7 fc69 	bl	800b600 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d0bf      	beq.n	8013cb2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8013d32:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8013d36:	2100      	movs	r1, #0
 8013d38:	4628      	mov	r0, r5
 8013d3a:	f7f7 fe77 	bl	800ba2c <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	ddb7      	ble.n	8013cb2 <rsa_check_context.isra.0+0x16>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8013d42:	2100      	movs	r1, #0
 8013d44:	4628      	mov	r0, r5
 8013d46:	f7f7 fc5b 	bl	800b600 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d1c4      	bne.n	8013cd8 <rsa_check_context.isra.0+0x3c>
 8013d4e:	e7b0      	b.n	8013cb2 <rsa_check_context.isra.0+0x16>
 8013d50:	ffffbf80 	.word	0xffffbf80

08013d54 <mbedtls_rsa_import>:
{
 8013d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d58:	4604      	mov	r4, r0
 8013d5a:	4691      	mov	r9, r2
 8013d5c:	4698      	mov	r8, r3
 8013d5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
 8013d62:	460d      	mov	r5, r1
 8013d64:	b979      	cbnz	r1, 8013d86 <mbedtls_rsa_import+0x32>
 8013d66:	f1b9 0f00 	cmp.w	r9, #0
 8013d6a:	d115      	bne.n	8013d98 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
 8013d6c:	f1b8 0f00 	cmp.w	r8, #0
 8013d70:	d11a      	bne.n	8013da8 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
 8013d72:	bb0f      	cbnz	r7, 8013db8 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
 8013d74:	bb46      	cbnz	r6, 8013dc8 <mbedtls_rsa_import+0x74>
    if( N != NULL )
 8013d76:	b37d      	cbz	r5, 8013dd8 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8013d78:	f104 0008 	add.w	r0, r4, #8
 8013d7c:	f7f7 fc8b 	bl	800b696 <mbedtls_mpi_size>
 8013d80:	6060      	str	r0, [r4, #4]
    return( 0 );
 8013d82:	2000      	movs	r0, #0
 8013d84:	e006      	b.n	8013d94 <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
 8013d86:	3008      	adds	r0, #8
 8013d88:	f7f7 fbbd 	bl	800b506 <mbedtls_mpi_copy>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d0ea      	beq.n	8013d66 <mbedtls_rsa_import+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8013d90:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8013d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
 8013d98:	4649      	mov	r1, r9
 8013d9a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8013d9e:	f7f7 fbb2 	bl	800b506 <mbedtls_mpi_copy>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	d0e2      	beq.n	8013d6c <mbedtls_rsa_import+0x18>
 8013da6:	e7f3      	b.n	8013d90 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
 8013da8:	4641      	mov	r1, r8
 8013daa:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013dae:	f7f7 fbaa 	bl	800b506 <mbedtls_mpi_copy>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	d0dd      	beq.n	8013d72 <mbedtls_rsa_import+0x1e>
 8013db6:	e7eb      	b.n	8013d90 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
 8013db8:	4639      	mov	r1, r7
 8013dba:	f104 0020 	add.w	r0, r4, #32
 8013dbe:	f7f7 fba2 	bl	800b506 <mbedtls_mpi_copy>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d0d6      	beq.n	8013d74 <mbedtls_rsa_import+0x20>
 8013dc6:	e7e3      	b.n	8013d90 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
 8013dc8:	4631      	mov	r1, r6
 8013dca:	f104 0014 	add.w	r0, r4, #20
 8013dce:	f7f7 fb9a 	bl	800b506 <mbedtls_mpi_copy>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	d0cf      	beq.n	8013d76 <mbedtls_rsa_import+0x22>
 8013dd6:	e7db      	b.n	8013d90 <mbedtls_rsa_import+0x3c>
    return( 0 );
 8013dd8:	4628      	mov	r0, r5
 8013dda:	e7db      	b.n	8013d94 <mbedtls_rsa_import+0x40>

08013ddc <mbedtls_rsa_import_raw>:
{
 8013ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013de0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013de2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013de4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013de6:	4604      	mov	r4, r0
 8013de8:	4698      	mov	r8, r3
    if( N != NULL )
 8013dea:	b149      	cbz	r1, 8013e00 <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8013dec:	f100 0908 	add.w	r9, r0, #8
 8013df0:	4648      	mov	r0, r9
 8013df2:	f7f7 fc56 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013df6:	b9a0      	cbnz	r0, 8013e22 <mbedtls_rsa_import_raw+0x46>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8013df8:	4648      	mov	r0, r9
 8013dfa:	f7f7 fc4c 	bl	800b696 <mbedtls_mpi_size>
 8013dfe:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 8013e00:	f1b8 0f00 	cmp.w	r8, #0
 8013e04:	d105      	bne.n	8013e12 <mbedtls_rsa_import_raw+0x36>
    if( Q != NULL )
 8013e06:	b97f      	cbnz	r7, 8013e28 <mbedtls_rsa_import_raw+0x4c>
    if( D != NULL )
 8013e08:	b9be      	cbnz	r6, 8013e3a <mbedtls_rsa_import_raw+0x5e>
    if( E != NULL )
 8013e0a:	b9fd      	cbnz	r5, 8013e4c <mbedtls_rsa_import_raw+0x70>
    return( 0 );
 8013e0c:	2000      	movs	r0, #0
}
 8013e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 8013e12:	9a08      	ldr	r2, [sp, #32]
 8013e14:	4641      	mov	r1, r8
 8013e16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8013e1a:	f7f7 fc42 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d0f1      	beq.n	8013e06 <mbedtls_rsa_import_raw+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8013e22:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 8013e26:	e7f2      	b.n	8013e0e <mbedtls_rsa_import_raw+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 8013e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e2a:	4639      	mov	r1, r7
 8013e2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013e30:	f7f7 fc37 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013e34:	2800      	cmp	r0, #0
 8013e36:	d1f4      	bne.n	8013e22 <mbedtls_rsa_import_raw+0x46>
 8013e38:	e7e6      	b.n	8013e08 <mbedtls_rsa_import_raw+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 8013e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e3c:	4631      	mov	r1, r6
 8013e3e:	f104 0020 	add.w	r0, r4, #32
 8013e42:	f7f7 fc2e 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d1eb      	bne.n	8013e22 <mbedtls_rsa_import_raw+0x46>
 8013e4a:	e7de      	b.n	8013e0a <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 8013e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e4e:	4629      	mov	r1, r5
 8013e50:	f104 0014 	add.w	r0, r4, #20
 8013e54:	f7f7 fc25 	bl	800b6a2 <mbedtls_mpi_read_binary>
    if( ret != 0 )
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d0d7      	beq.n	8013e0c <mbedtls_rsa_import_raw+0x30>
 8013e5c:	e7e1      	b.n	8013e22 <mbedtls_rsa_import_raw+0x46>
	...

08013e60 <mbedtls_rsa_complete>:
{
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8013e64:	f100 0908 	add.w	r9, r0, #8
{
 8013e68:	b085      	sub	sp, #20
 8013e6a:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	4648      	mov	r0, r9
 8013e70:	f7f7 fddc 	bl	800ba2c <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8013e74:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8013e78:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8013e7a:	4683      	mov	fp, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f7f7 fdd5 	bl	800ba2c <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8013e82:	f104 0738 	add.w	r7, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8013e86:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8013e88:	2100      	movs	r1, #0
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	f7f7 fdce 	bl	800ba2c <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8013e90:	f104 0820 	add.w	r8, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8013e94:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8013e96:	2100      	movs	r1, #0
 8013e98:	4640      	mov	r0, r8
 8013e9a:	f7f7 fdc7 	bl	800ba2c <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8013e9e:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8013ea2:	4605      	mov	r5, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4650      	mov	r0, sl
 8013ea8:	f7f7 fdc0 	bl	800ba2c <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8013eac:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013eb0:	b1ba      	cbz	r2, 8013ee2 <mbedtls_rsa_complete+0x82>
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d05c      	beq.n	8013f70 <mbedtls_rsa_complete+0x110>
 8013eb6:	2d00      	cmp	r5, #0
 8013eb8:	d055      	beq.n	8013f66 <mbedtls_rsa_complete+0x106>
 8013eba:	1c01      	adds	r1, r0, #0
 8013ebc:	bf18      	it	ne
 8013ebe:	2101      	movne	r1, #1
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8013ec0:	f1bb 0f00 	cmp.w	fp, #0
 8013ec4:	d158      	bne.n	8013f78 <mbedtls_rsa_complete+0x118>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d056      	beq.n	8013f78 <mbedtls_rsa_complete+0x118>
 8013eca:	2d00      	cmp	r5, #0
 8013ecc:	d154      	bne.n	8013f78 <mbedtls_rsa_complete+0x118>
 8013ece:	1c05      	adds	r5, r0, #0
 8013ed0:	bf18      	it	ne
 8013ed2:	2501      	movne	r5, #1
    is_priv = n_missing || pq_missing || d_missing;
 8013ed4:	b9c9      	cbnz	r1, 8013f0a <mbedtls_rsa_complete+0xaa>
 8013ed6:	b15d      	cbz	r5, 8013ef0 <mbedtls_rsa_complete+0x90>
    if( !have_N && have_P && have_Q )
 8013ed8:	f1bb 0f00 	cmp.w	fp, #0
 8013edc:	d12a      	bne.n	8013f34 <mbedtls_rsa_complete+0xd4>
 8013ede:	b9c2      	cbnz	r2, 8013f12 <mbedtls_rsa_complete+0xb2>
 8013ee0:	e028      	b.n	8013f34 <mbedtls_rsa_complete+0xd4>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8013ee2:	f1bb 0f00 	cmp.w	fp, #0
 8013ee6:	d003      	beq.n	8013ef0 <mbedtls_rsa_complete+0x90>
 8013ee8:	b913      	cbnz	r3, 8013ef0 <mbedtls_rsa_complete+0x90>
 8013eea:	b12d      	cbz	r5, 8013ef8 <mbedtls_rsa_complete+0x98>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d145      	bne.n	8013f7c <mbedtls_rsa_complete+0x11c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8013ef0:	4826      	ldr	r0, [pc, #152]	; (8013f8c <mbedtls_rsa_complete+0x12c>)
 8013ef2:	e017      	b.n	8013f24 <mbedtls_rsa_complete+0xc4>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	e7ea      	b.n	8013ece <mbedtls_rsa_complete+0x6e>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d0f9      	beq.n	8013ef0 <mbedtls_rsa_complete+0x90>
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8013efc:	4629      	mov	r1, r5
 8013efe:	4620      	mov	r0, r4
}
 8013f00:	b005      	add	sp, #20
 8013f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
 8013f06:	f7ff bec9 	b.w	8013c9c <rsa_check_context.isra.0>
    if( !have_N && have_P && have_Q )
 8013f0a:	f1bb 0f00 	cmp.w	fp, #0
 8013f0e:	d110      	bne.n	8013f32 <mbedtls_rsa_complete+0xd2>
 8013f10:	b17a      	cbz	r2, 8013f32 <mbedtls_rsa_complete+0xd2>
 8013f12:	b173      	cbz	r3, 8013f32 <mbedtls_rsa_complete+0xd2>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8013f14:	463a      	mov	r2, r7
 8013f16:	4631      	mov	r1, r6
 8013f18:	4648      	mov	r0, r9
 8013f1a:	f7f7 feaf 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8013f1e:	b120      	cbz	r0, 8013f2a <mbedtls_rsa_complete+0xca>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8013f20:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
 8013f24:	b005      	add	sp, #20
 8013f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
 8013f2a:	4648      	mov	r0, r9
 8013f2c:	f7f7 fbb3 	bl	800b696 <mbedtls_mpi_size>
 8013f30:	6060      	str	r0, [r4, #4]
    else if( d_missing )
 8013f32:	b13d      	cbz	r5, 8013f44 <mbedtls_rsa_complete+0xe4>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8013f34:	4643      	mov	r3, r8
 8013f36:	4652      	mov	r2, sl
 8013f38:	4639      	mov	r1, r7
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f000 fede 	bl	8014cfc <mbedtls_rsa_deduce_private_exponent>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d1ed      	bne.n	8013f20 <mbedtls_rsa_complete+0xc0>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8013f44:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	4642      	mov	r2, r8
 8013f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f56:	4639      	mov	r1, r7
 8013f58:	4630      	mov	r0, r6
 8013f5a:	f001 f88b 	bl	8015074 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	d1de      	bne.n	8013f20 <mbedtls_rsa_complete+0xc0>
 8013f62:	2501      	movs	r5, #1
 8013f64:	e7ca      	b.n	8013efc <mbedtls_rsa_complete+0x9c>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8013f66:	f1bb 0f00 	cmp.w	fp, #0
 8013f6a:	d1c3      	bne.n	8013ef4 <mbedtls_rsa_complete+0x94>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8013f6c:	4659      	mov	r1, fp
 8013f6e:	e7aa      	b.n	8013ec6 <mbedtls_rsa_complete+0x66>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8013f70:	f1bb 0f00 	cmp.w	fp, #0
 8013f74:	d1bc      	bne.n	8013ef0 <mbedtls_rsa_complete+0x90>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8013f76:	4659      	mov	r1, fp
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8013f78:	2500      	movs	r5, #0
 8013f7a:	e7ab      	b.n	8013ed4 <mbedtls_rsa_complete+0x74>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 8013f7c:	9700      	str	r7, [sp, #0]
 8013f7e:	4633      	mov	r3, r6
 8013f80:	4642      	mov	r2, r8
 8013f82:	4651      	mov	r1, sl
 8013f84:	4648      	mov	r0, r9
 8013f86:	f000 fdbd 	bl	8014b04 <mbedtls_rsa_deduce_primes>
 8013f8a:	e7d9      	b.n	8013f40 <mbedtls_rsa_complete+0xe0>
 8013f8c:	ffffbf80 	.word	0xffffbf80

08013f90 <mbedtls_rsa_export>:
{
 8013f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8013f94:	f100 0a08 	add.w	sl, r0, #8
{
 8013f98:	4604      	mov	r4, r0
 8013f9a:	460e      	mov	r6, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8013f9c:	4650      	mov	r0, sl
 8013f9e:	2100      	movs	r1, #0
{
 8013fa0:	4617      	mov	r7, r2
 8013fa2:	4698      	mov	r8, r3
 8013fa4:	e9dd 9508 	ldrd	r9, r5, [sp, #32]
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8013fa8:	f7f7 fd40 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 8013fac:	b910      	cbnz	r0, 8013fb4 <mbedtls_rsa_export+0x24>
        if( P != NULL || Q != NULL || D != NULL )
 8013fae:	b347      	cbz	r7, 8014002 <mbedtls_rsa_export+0x72>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8013fb0:	482b      	ldr	r0, [pc, #172]	; (8014060 <mbedtls_rsa_export+0xd0>)
 8013fb2:	e034      	b.n	801401e <mbedtls_rsa_export+0x8e>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8013fba:	f7f7 fd37 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d0f5      	beq.n	8013fae <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013fc8:	f7f7 fd30 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d0ee      	beq.n	8013fae <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	f104 0020 	add.w	r0, r4, #32
 8013fd6:	f7f7 fd29 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0e7      	beq.n	8013fae <mbedtls_rsa_export+0x1e>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 8013fde:	2100      	movs	r1, #0
 8013fe0:	f104 0014 	add.w	r0, r4, #20
 8013fe4:	f7f7 fd22 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d0e0      	beq.n	8013fae <mbedtls_rsa_export+0x1e>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 8013fec:	b98e      	cbnz	r6, 8014012 <mbedtls_rsa_export+0x82>
 8013fee:	b9c7      	cbnz	r7, 8014022 <mbedtls_rsa_export+0x92>
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 8013ff0:	f1b8 0f00 	cmp.w	r8, #0
 8013ff4:	d11d      	bne.n	8014032 <mbedtls_rsa_export+0xa2>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 8013ff6:	f1b9 0f00 	cmp.w	r9, #0
 8013ffa:	d122      	bne.n	8014042 <mbedtls_rsa_export+0xb2>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 8013ffc:	bb4d      	cbnz	r5, 8014052 <mbedtls_rsa_export+0xc2>
    return( 0 );
 8013ffe:	4628      	mov	r0, r5
 8014000:	e00d      	b.n	801401e <mbedtls_rsa_export+0x8e>
        if( P != NULL || Q != NULL || D != NULL )
 8014002:	f1b8 0f00 	cmp.w	r8, #0
 8014006:	d1d3      	bne.n	8013fb0 <mbedtls_rsa_export+0x20>
 8014008:	f1b9 0f00 	cmp.w	r9, #0
 801400c:	d1d0      	bne.n	8013fb0 <mbedtls_rsa_export+0x20>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
 801400e:	2e00      	cmp	r6, #0
 8014010:	d0f4      	beq.n	8013ffc <mbedtls_rsa_export+0x6c>
 8014012:	4651      	mov	r1, sl
 8014014:	4630      	mov	r0, r6
 8014016:	f7f7 fa76 	bl	800b506 <mbedtls_mpi_copy>
 801401a:	2800      	cmp	r0, #0
 801401c:	d0e7      	beq.n	8013fee <mbedtls_rsa_export+0x5e>
}
 801401e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
 8014022:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014026:	4638      	mov	r0, r7
 8014028:	f7f7 fa6d 	bl	800b506 <mbedtls_mpi_copy>
 801402c:	2800      	cmp	r0, #0
 801402e:	d0df      	beq.n	8013ff0 <mbedtls_rsa_export+0x60>
 8014030:	e7f5      	b.n	801401e <mbedtls_rsa_export+0x8e>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
 8014032:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8014036:	4640      	mov	r0, r8
 8014038:	f7f7 fa65 	bl	800b506 <mbedtls_mpi_copy>
 801403c:	2800      	cmp	r0, #0
 801403e:	d0da      	beq.n	8013ff6 <mbedtls_rsa_export+0x66>
 8014040:	e7ed      	b.n	801401e <mbedtls_rsa_export+0x8e>
        ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
 8014042:	f104 0120 	add.w	r1, r4, #32
 8014046:	4648      	mov	r0, r9
 8014048:	f7f7 fa5d 	bl	800b506 <mbedtls_mpi_copy>
 801404c:	2800      	cmp	r0, #0
 801404e:	d0d5      	beq.n	8013ffc <mbedtls_rsa_export+0x6c>
 8014050:	e7e5      	b.n	801401e <mbedtls_rsa_export+0x8e>
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 8014052:	f104 0114 	add.w	r1, r4, #20
 8014056:	4628      	mov	r0, r5
}
 8014058:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
 801405c:	f7f7 ba53 	b.w	800b506 <mbedtls_mpi_copy>
 8014060:	ffffbf80 	.word	0xffffbf80

08014064 <mbedtls_rsa_export_crt>:
{
 8014064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	460f      	mov	r7, r1
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 801406a:	3008      	adds	r0, #8
 801406c:	2100      	movs	r1, #0
{
 801406e:	4616      	mov	r6, r2
 8014070:	461d      	mov	r5, r3
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8014072:	f7f7 fcdb 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 8014076:	b908      	cbnz	r0, 801407c <mbedtls_rsa_export_crt+0x18>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8014078:	481e      	ldr	r0, [pc, #120]	; (80140f4 <mbedtls_rsa_export_crt+0x90>)
}
 801407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 801407c:	2100      	movs	r1, #0
 801407e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014082:	f7f7 fcd3 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
 8014086:	2800      	cmp	r0, #0
 8014088:	d0f6      	beq.n	8014078 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 801408a:	2100      	movs	r1, #0
 801408c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014090:	f7f7 fccc 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
 8014094:	2800      	cmp	r0, #0
 8014096:	d0ef      	beq.n	8014078 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 8014098:	2100      	movs	r1, #0
 801409a:	f104 0020 	add.w	r0, r4, #32
 801409e:	f7f7 fcc5 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d0e8      	beq.n	8014078 <mbedtls_rsa_export_crt+0x14>
        mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
 80140a6:	2100      	movs	r1, #0
 80140a8:	f104 0014 	add.w	r0, r4, #20
 80140ac:	f7f7 fcbe 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d0e1      	beq.n	8014078 <mbedtls_rsa_export_crt+0x14>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 80140b4:	b91f      	cbnz	r7, 80140be <mbedtls_rsa_export_crt+0x5a>
 80140b6:	b966      	cbnz	r6, 80140d2 <mbedtls_rsa_export_crt+0x6e>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 80140b8:	b99d      	cbnz	r5, 80140e2 <mbedtls_rsa_export_crt+0x7e>
    return( 0 );
 80140ba:	2000      	movs	r0, #0
 80140bc:	e7dd      	b.n	801407a <mbedtls_rsa_export_crt+0x16>
    if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
 80140be:	f104 0144 	add.w	r1, r4, #68	; 0x44
 80140c2:	4638      	mov	r0, r7
 80140c4:	f7f7 fa1f 	bl	800b506 <mbedtls_mpi_copy>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d0f4      	beq.n	80140b6 <mbedtls_rsa_export_crt+0x52>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80140cc:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 80140d0:	e7d3      	b.n	801407a <mbedtls_rsa_export_crt+0x16>
        ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
 80140d2:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80140d6:	4630      	mov	r0, r6
 80140d8:	f7f7 fa15 	bl	800b506 <mbedtls_mpi_copy>
 80140dc:	2800      	cmp	r0, #0
 80140de:	d1f5      	bne.n	80140cc <mbedtls_rsa_export_crt+0x68>
 80140e0:	e7ea      	b.n	80140b8 <mbedtls_rsa_export_crt+0x54>
        ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )
 80140e2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 80140e6:	4628      	mov	r0, r5
 80140e8:	f7f7 fa0d 	bl	800b506 <mbedtls_mpi_copy>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d1ed      	bne.n	80140cc <mbedtls_rsa_export_crt+0x68>
 80140f0:	e7e3      	b.n	80140ba <mbedtls_rsa_export_crt+0x56>
 80140f2:	bf00      	nop
 80140f4:	ffffbf80 	.word	0xffffbf80

080140f8 <mbedtls_rsa_init>:
{
 80140f8:	b538      	push	{r3, r4, r5, lr}
 80140fa:	460d      	mov	r5, r1
 80140fc:	4614      	mov	r4, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80140fe:	2100      	movs	r1, #0
 8014100:	22a4      	movs	r2, #164	; 0xa4
 8014102:	f002 fcfe 	bl	8016b02 <memset>
    ctx->hash_id = hash_id;
 8014106:	e9c0 5429 	strd	r5, r4, [r0, #164]	; 0xa4
}
 801410a:	bd38      	pop	{r3, r4, r5, pc}

0801410c <mbedtls_rsa_set_padding>:
    ctx->hash_id = hash_id;
 801410c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
}
 8014110:	4770      	bx	lr

08014112 <mbedtls_rsa_get_len>:
}
 8014112:	6840      	ldr	r0, [r0, #4]
 8014114:	4770      	bx	lr
	...

08014118 <mbedtls_rsa_check_pubkey>:
{
 8014118:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 801411a:	2100      	movs	r1, #0
{
 801411c:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 801411e:	f7ff fdbd 	bl	8013c9c <rsa_check_context.isra.0>
 8014122:	4605      	mov	r5, r0
 8014124:	b9b8      	cbnz	r0, 8014156 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8014126:	f104 0608 	add.w	r6, r4, #8
 801412a:	4630      	mov	r0, r6
 801412c:	f7f7 fa93 	bl	800b656 <mbedtls_mpi_bitlen>
 8014130:	287f      	cmp	r0, #127	; 0x7f
 8014132:	d910      	bls.n	8014156 <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8014134:	3414      	adds	r4, #20
 8014136:	4629      	mov	r1, r5
 8014138:	4620      	mov	r0, r4
 801413a:	f7f7 fa61 	bl	800b600 <mbedtls_mpi_get_bit>
 801413e:	b150      	cbz	r0, 8014156 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8014140:	4620      	mov	r0, r4
 8014142:	f7f7 fa88 	bl	800b656 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8014146:	2801      	cmp	r0, #1
 8014148:	d905      	bls.n	8014156 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 801414a:	4631      	mov	r1, r6
 801414c:	4620      	mov	r0, r4
 801414e:	f7f7 fc2d 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8014152:	2800      	cmp	r0, #0
 8014154:	db00      	blt.n	8014158 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8014156:	4d01      	ldr	r5, [pc, #4]	; (801415c <mbedtls_rsa_check_pubkey+0x44>)
}
 8014158:	4628      	mov	r0, r5
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	ffffbe00 	.word	0xffffbe00

08014160 <mbedtls_rsa_check_privkey>:
{
 8014160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014162:	b085      	sub	sp, #20
 8014164:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8014166:	f7ff ffd7 	bl	8014118 <mbedtls_rsa_check_pubkey>
 801416a:	b110      	cbz	r0, 8014172 <mbedtls_rsa_check_privkey+0x12>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801416c:	4816      	ldr	r0, [pc, #88]	; (80141c8 <mbedtls_rsa_check_privkey+0x68>)
}
 801416e:	b005      	add	sp, #20
 8014170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8014172:	2101      	movs	r1, #1
 8014174:	4620      	mov	r0, r4
 8014176:	f7ff fd91 	bl	8013c9c <rsa_check_context.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 801417a:	2800      	cmp	r0, #0
 801417c:	d1f6      	bne.n	801416c <mbedtls_rsa_check_privkey+0xc>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 801417e:	f104 0314 	add.w	r3, r4, #20
 8014182:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8014186:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801418a:	f104 0720 	add.w	r7, r4, #32
 801418e:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	4632      	mov	r2, r6
 8014196:	463b      	mov	r3, r7
 8014198:	4629      	mov	r1, r5
 801419a:	f104 0008 	add.w	r0, r4, #8
 801419e:	f000 fe91 	bl	8014ec4 <mbedtls_rsa_validate_params>
 80141a2:	2800      	cmp	r0, #0
 80141a4:	d1e2      	bne.n	801416c <mbedtls_rsa_check_privkey+0xc>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 80141a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80141aa:	9301      	str	r3, [sp, #4]
 80141ac:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	463a      	mov	r2, r7
 80141b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141b8:	4631      	mov	r1, r6
 80141ba:	4628      	mov	r0, r5
 80141bc:	f000 fdfc 	bl	8014db8 <mbedtls_rsa_validate_crt>
 80141c0:	2800      	cmp	r0, #0
 80141c2:	d0d4      	beq.n	801416e <mbedtls_rsa_check_privkey+0xe>
 80141c4:	e7d2      	b.n	801416c <mbedtls_rsa_check_privkey+0xc>
 80141c6:	bf00      	nop
 80141c8:	ffffbe00 	.word	0xffffbe00

080141cc <mbedtls_rsa_check_pub_priv>:
{
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4605      	mov	r5, r0
 80141d0:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80141d2:	f7ff ffa1 	bl	8014118 <mbedtls_rsa_check_pubkey>
 80141d6:	b988      	cbnz	r0, 80141fc <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80141d8:	4620      	mov	r0, r4
 80141da:	f7ff ffc1 	bl	8014160 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80141de:	b968      	cbnz	r0, 80141fc <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80141e0:	f104 0108 	add.w	r1, r4, #8
 80141e4:	f105 0008 	add.w	r0, r5, #8
 80141e8:	f7f7 fbe0 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 80141ec:	b930      	cbnz	r0, 80141fc <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80141ee:	f104 0114 	add.w	r1, r4, #20
 80141f2:	f105 0014 	add.w	r0, r5, #20
 80141f6:	f7f7 fbd9 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80141fa:	b100      	cbz	r0, 80141fe <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80141fc:	4800      	ldr	r0, [pc, #0]	; (8014200 <mbedtls_rsa_check_pub_priv+0x34>)
}
 80141fe:	bd38      	pop	{r3, r4, r5, pc}
 8014200:	ffffbe00 	.word	0xffffbe00

08014204 <mbedtls_rsa_public>:
{
 8014204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014206:	460c      	mov	r4, r1
 8014208:	b087      	sub	sp, #28
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 801420a:	2100      	movs	r1, #0
{
 801420c:	4605      	mov	r5, r0
 801420e:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8014210:	f7ff fd44 	bl	8013c9c <rsa_check_context.isra.0>
 8014214:	bb80      	cbnz	r0, 8014278 <mbedtls_rsa_public+0x74>
    mbedtls_mpi_init( &T );
 8014216:	a803      	add	r0, sp, #12
 8014218:	f7f7 f8f9 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801421c:	4621      	mov	r1, r4
 801421e:	686a      	ldr	r2, [r5, #4]
 8014220:	a803      	add	r0, sp, #12
 8014222:	f7f7 fa3e 	bl	800b6a2 <mbedtls_mpi_read_binary>
 8014226:	4604      	mov	r4, r0
 8014228:	b9d0      	cbnz	r0, 8014260 <mbedtls_rsa_public+0x5c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 801422a:	f105 0408 	add.w	r4, r5, #8
 801422e:	4621      	mov	r1, r4
 8014230:	a803      	add	r0, sp, #12
 8014232:	f7f7 fbbb 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 8014236:	2800      	cmp	r0, #0
 8014238:	da1b      	bge.n	8014272 <mbedtls_rsa_public+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 801423a:	f105 0368 	add.w	r3, r5, #104	; 0x68
 801423e:	a903      	add	r1, sp, #12
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	f105 0214 	add.w	r2, r5, #20
 8014246:	4623      	mov	r3, r4
 8014248:	4608      	mov	r0, r1
    olen = ctx->len;
 801424a:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 801424c:	f7f7 ffb8 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 8014250:	4604      	mov	r4, r0
 8014252:	b928      	cbnz	r0, 8014260 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8014254:	463a      	mov	r2, r7
 8014256:	4631      	mov	r1, r6
 8014258:	a803      	add	r0, sp, #12
 801425a:	f7f7 fa5a 	bl	800b712 <mbedtls_mpi_write_binary>
 801425e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 8014260:	a803      	add	r0, sp, #12
 8014262:	f7f7 f8da 	bl	800b41a <mbedtls_mpi_free>
    if( ret != 0 )
 8014266:	b10c      	cbz	r4, 801426c <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8014268:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 801426c:	4620      	mov	r0, r4
 801426e:	b007      	add	sp, #28
 8014270:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8014272:	f06f 0403 	mvn.w	r4, #3
 8014276:	e7f3      	b.n	8014260 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8014278:	4c00      	ldr	r4, [pc, #0]	; (801427c <mbedtls_rsa_public+0x78>)
 801427a:	e7f7      	b.n	801426c <mbedtls_rsa_public+0x68>
 801427c:	ffffbf80 	.word	0xffffbf80

08014280 <mbedtls_rsa_private>:
{
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	460e      	mov	r6, r1
 8014286:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
 8014288:	2101      	movs	r1, #1
{
 801428a:	4604      	mov	r4, r0
 801428c:	4692      	mov	sl, r2
 801428e:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 8014290:	f7ff fd04 	bl	8013c9c <rsa_check_context.isra.0>
 8014294:	2800      	cmp	r0, #0
 8014296:	f040 81a7 	bne.w	80145e8 <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
 801429a:	a804      	add	r0, sp, #16
 801429c:	f7f7 f8b7 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 80142a0:	a807      	add	r0, sp, #28
 80142a2:	f7f7 f8b4 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80142a6:	a80a      	add	r0, sp, #40	; 0x28
 80142a8:	f7f7 f8b1 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 80142ac:	a80d      	add	r0, sp, #52	; 0x34
 80142ae:	f7f7 f8ae 	bl	800b40e <mbedtls_mpi_init>
    if( f_rng != NULL )
 80142b2:	b12e      	cbz	r6, 80142c0 <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
 80142b4:	a816      	add	r0, sp, #88	; 0x58
 80142b6:	f7f7 f8aa 	bl	800b40e <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 80142ba:	a819      	add	r0, sp, #100	; 0x64
 80142bc:	f7f7 f8a7 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80142c0:	a810      	add	r0, sp, #64	; 0x40
 80142c2:	f7f7 f8a4 	bl	800b40e <mbedtls_mpi_init>
 80142c6:	a813      	add	r0, sp, #76	; 0x4c
 80142c8:	f7f7 f8a1 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 80142cc:	a81c      	add	r0, sp, #112	; 0x70
 80142ce:	f7f7 f89e 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80142d2:	a81f      	add	r0, sp, #124	; 0x7c
 80142d4:	f7f7 f89b 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80142d8:	6862      	ldr	r2, [r4, #4]
 80142da:	4629      	mov	r1, r5
 80142dc:	a804      	add	r0, sp, #16
 80142de:	f7f7 f9e0 	bl	800b6a2 <mbedtls_mpi_read_binary>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2800      	cmp	r0, #0
 80142e6:	f040 814d 	bne.w	8014584 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80142ea:	f104 0508 	add.w	r5, r4, #8
 80142ee:	4629      	mov	r1, r5
 80142f0:	a804      	add	r0, sp, #16
 80142f2:	f7f7 fb5b 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 80142f6:	2800      	cmp	r0, #0
 80142f8:	f280 816f 	bge.w	80145da <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80142fc:	a904      	add	r1, sp, #16
 80142fe:	a81c      	add	r0, sp, #112	; 0x70
 8014300:	f7f7 f901 	bl	800b506 <mbedtls_mpi_copy>
 8014304:	4603      	mov	r3, r0
 8014306:	2800      	cmp	r0, #0
 8014308:	f040 813c 	bne.w	8014584 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
 801430c:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8014310:	f104 0850 	add.w	r8, r4, #80	; 0x50
    if( f_rng != NULL )
 8014314:	2e00      	cmp	r6, #0
 8014316:	f000 8090 	beq.w	801443a <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
 801431a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80ee 	beq.w	8014500 <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8014324:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8014328:	463a      	mov	r2, r7
 801432a:	4639      	mov	r1, r7
 801432c:	4638      	mov	r0, r7
 801432e:	f7f7 fca5 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014332:	4603      	mov	r3, r0
 8014334:	2800      	cmp	r0, #0
 8014336:	f040 8125 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 801433a:	462a      	mov	r2, r5
 801433c:	4639      	mov	r1, r7
 801433e:	4638      	mov	r0, r7
 8014340:	f7f7 fec9 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014344:	4603      	mov	r3, r0
 8014346:	2800      	cmp	r0, #0
 8014348:	f040 811c 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 801434c:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8014350:	463a      	mov	r2, r7
 8014352:	4639      	mov	r1, r7
 8014354:	4638      	mov	r0, r7
 8014356:	f7f7 fc91 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 801435a:	4603      	mov	r3, r0
 801435c:	2800      	cmp	r0, #0
 801435e:	f040 8111 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8014362:	462a      	mov	r2, r5
 8014364:	4639      	mov	r1, r7
 8014366:	4638      	mov	r0, r7
 8014368:	f7f7 feb5 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 801436c:	4603      	mov	r3, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 801436e:	2800      	cmp	r0, #0
 8014370:	f040 8108 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8014374:	a904      	add	r1, sp, #16
 8014376:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 801437a:	4608      	mov	r0, r1
 801437c:	f7f7 fc7e 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014380:	4603      	mov	r3, r0
 8014382:	2800      	cmp	r0, #0
 8014384:	f040 80fe 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8014388:	a904      	add	r1, sp, #16
 801438a:	462a      	mov	r2, r5
 801438c:	4608      	mov	r0, r1
 801438e:	f7f7 fea2 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014392:	4603      	mov	r3, r0
 8014394:	2800      	cmp	r0, #0
 8014396:	f040 80f5 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 801439a:	2201      	movs	r2, #1
 801439c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80143a0:	a807      	add	r0, sp, #28
 80143a2:	f7f7 fc55 	bl	800bc50 <mbedtls_mpi_sub_int>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2800      	cmp	r0, #0
 80143aa:	f040 80eb 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80143ae:	2201      	movs	r2, #1
 80143b0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80143b4:	a80a      	add	r0, sp, #40	; 0x28
 80143b6:	f7f7 fc4b 	bl	800bc50 <mbedtls_mpi_sub_int>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2800      	cmp	r0, #0
 80143be:	f040 80e1 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80143c2:	4653      	mov	r3, sl
 80143c4:	4632      	mov	r2, r6
 80143c6:	211c      	movs	r1, #28
 80143c8:	a80d      	add	r0, sp, #52	; 0x34
 80143ca:	f7f8 f9b4 	bl	800c736 <mbedtls_mpi_fill_random>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2800      	cmp	r0, #0
 80143d2:	f040 80d7 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80143d6:	aa0d      	add	r2, sp, #52	; 0x34
 80143d8:	a907      	add	r1, sp, #28
 80143da:	a816      	add	r0, sp, #88	; 0x58
 80143dc:	f7f7 fc4e 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 80143e0:	4603      	mov	r3, r0
 80143e2:	2800      	cmp	r0, #0
 80143e4:	f040 80ce 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80143e8:	a916      	add	r1, sp, #88	; 0x58
 80143ea:	464a      	mov	r2, r9
 80143ec:	4608      	mov	r0, r1
 80143ee:	f7f7 fbd4 	bl	800bb9a <mbedtls_mpi_add_mpi>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2800      	cmp	r0, #0
 80143f6:	f040 80c5 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80143fa:	4653      	mov	r3, sl
 80143fc:	4632      	mov	r2, r6
 80143fe:	211c      	movs	r1, #28
 8014400:	a80d      	add	r0, sp, #52	; 0x34
 8014402:	f7f8 f998 	bl	800c736 <mbedtls_mpi_fill_random>
 8014406:	4603      	mov	r3, r0
 8014408:	2800      	cmp	r0, #0
 801440a:	f040 80bb 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 801440e:	aa0d      	add	r2, sp, #52	; 0x34
 8014410:	a90a      	add	r1, sp, #40	; 0x28
 8014412:	a819      	add	r0, sp, #100	; 0x64
 8014414:	f7f7 fc32 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014418:	4603      	mov	r3, r0
 801441a:	2800      	cmp	r0, #0
 801441c:	f040 80b2 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8014420:	a919      	add	r1, sp, #100	; 0x64
 8014422:	4642      	mov	r2, r8
 8014424:	4608      	mov	r0, r1
 8014426:	f7f7 fbb8 	bl	800bb9a <mbedtls_mpi_add_mpi>
 801442a:	4603      	mov	r3, r0
 801442c:	2800      	cmp	r0, #0
 801442e:	f040 80a9 	bne.w	8014584 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
 8014432:	f10d 0864 	add.w	r8, sp, #100	; 0x64
        DP = &DP_blind;
 8014436:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 801443a:	f104 0374 	add.w	r3, r4, #116	; 0x74
 801443e:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	464a      	mov	r2, r9
 8014446:	4653      	mov	r3, sl
 8014448:	a904      	add	r1, sp, #16
 801444a:	a810      	add	r0, sp, #64	; 0x40
 801444c:	f7f7 feb8 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 8014450:	4603      	mov	r3, r0
 8014452:	2800      	cmp	r0, #0
 8014454:	f040 8096 	bne.w	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8014458:	f104 0380 	add.w	r3, r4, #128	; 0x80
 801445c:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	4642      	mov	r2, r8
 8014464:	463b      	mov	r3, r7
 8014466:	a904      	add	r1, sp, #16
 8014468:	a813      	add	r0, sp, #76	; 0x4c
 801446a:	f7f7 fea9 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 801446e:	4603      	mov	r3, r0
 8014470:	2800      	cmp	r0, #0
 8014472:	f040 8087 	bne.w	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8014476:	aa13      	add	r2, sp, #76	; 0x4c
 8014478:	a910      	add	r1, sp, #64	; 0x40
 801447a:	a804      	add	r0, sp, #16
 801447c:	f7f7 fbaf 	bl	800bbde <mbedtls_mpi_sub_mpi>
 8014480:	4603      	mov	r3, r0
 8014482:	2800      	cmp	r0, #0
 8014484:	d17e      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8014486:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 801448a:	a904      	add	r1, sp, #16
 801448c:	a810      	add	r0, sp, #64	; 0x40
 801448e:	f7f7 fbf5 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014492:	4603      	mov	r3, r0
 8014494:	2800      	cmp	r0, #0
 8014496:	d175      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8014498:	4652      	mov	r2, sl
 801449a:	a910      	add	r1, sp, #64	; 0x40
 801449c:	a804      	add	r0, sp, #16
 801449e:	f7f7 fe1a 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 80144a2:	4603      	mov	r3, r0
 80144a4:	2800      	cmp	r0, #0
 80144a6:	d16d      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80144a8:	463a      	mov	r2, r7
 80144aa:	a904      	add	r1, sp, #16
 80144ac:	a810      	add	r0, sp, #64	; 0x40
 80144ae:	f7f7 fbe5 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d165      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80144b8:	aa10      	add	r2, sp, #64	; 0x40
 80144ba:	a913      	add	r1, sp, #76	; 0x4c
 80144bc:	a804      	add	r0, sp, #16
 80144be:	f7f7 fb6c 	bl	800bb9a <mbedtls_mpi_add_mpi>
 80144c2:	4603      	mov	r3, r0
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d15d      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
 80144c8:	2e00      	cmp	r6, #0
 80144ca:	d14b      	bne.n	8014564 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80144cc:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	f104 0214 	add.w	r2, r4, #20
 80144d6:	462b      	mov	r3, r5
 80144d8:	a904      	add	r1, sp, #16
 80144da:	a81f      	add	r0, sp, #124	; 0x7c
 80144dc:	f7f7 fe70 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 80144e0:	4603      	mov	r3, r0
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d14e      	bne.n	8014584 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80144e6:	a91c      	add	r1, sp, #112	; 0x70
 80144e8:	a81f      	add	r0, sp, #124	; 0x7c
 80144ea:	f7f7 fa5f 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d178      	bne.n	80145e4 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80144f2:	6862      	ldr	r2, [r4, #4]
 80144f4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80144f6:	a804      	add	r0, sp, #16
 80144f8:	f7f7 f90b 	bl	800b712 <mbedtls_mpi_write_binary>
 80144fc:	4603      	mov	r3, r0
cleanup:
 80144fe:	e041      	b.n	8014584 <mbedtls_rsa_private+0x304>
    if( ctx->Vf.p != NULL )
 8014500:	230c      	movs	r3, #12
 8014502:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8014504:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8014508:	f104 078c 	add.w	r7, r4, #140	; 0x8c
        if( count++ > 10 )
 801450c:	9b03      	ldr	r3, [sp, #12]
 801450e:	3b01      	subs	r3, #1
 8014510:	9303      	str	r3, [sp, #12]
 8014512:	d065      	beq.n	80145e0 <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8014514:	6861      	ldr	r1, [r4, #4]
 8014516:	4653      	mov	r3, sl
 8014518:	4632      	mov	r2, r6
 801451a:	3901      	subs	r1, #1
 801451c:	4658      	mov	r0, fp
 801451e:	f7f8 f90a 	bl	800c736 <mbedtls_mpi_fill_random>
 8014522:	4603      	mov	r3, r0
 8014524:	bb70      	cbnz	r0, 8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8014526:	462a      	mov	r2, r5
 8014528:	4659      	mov	r1, fp
 801452a:	4638      	mov	r0, r7
 801452c:	f7f8 f87f 	bl	800c62e <mbedtls_mpi_gcd>
 8014530:	4603      	mov	r3, r0
 8014532:	bb38      	cbnz	r0, 8014584 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8014534:	2101      	movs	r1, #1
 8014536:	4638      	mov	r0, r7
 8014538:	f7f7 fa78 	bl	800ba2c <mbedtls_mpi_cmp_int>
 801453c:	2800      	cmp	r0, #0
 801453e:	d1e5      	bne.n	801450c <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8014540:	462a      	mov	r2, r5
 8014542:	4659      	mov	r1, fp
 8014544:	4638      	mov	r0, r7
 8014546:	f7f8 f9ec 	bl	800c922 <mbedtls_mpi_inv_mod>
 801454a:	4603      	mov	r3, r0
 801454c:	b9d0      	cbnz	r0, 8014584 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 801454e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	f104 0214 	add.w	r2, r4, #20
 8014558:	462b      	mov	r3, r5
 801455a:	4639      	mov	r1, r7
 801455c:	4638      	mov	r0, r7
 801455e:	f7f7 fe2f 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 8014562:	e703      	b.n	801436c <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8014564:	a904      	add	r1, sp, #16
 8014566:	f104 0298 	add.w	r2, r4, #152	; 0x98
 801456a:	4608      	mov	r0, r1
 801456c:	f7f7 fb86 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014570:	4603      	mov	r3, r0
 8014572:	b938      	cbnz	r0, 8014584 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8014574:	a904      	add	r1, sp, #16
 8014576:	462a      	mov	r2, r5
 8014578:	4608      	mov	r0, r1
 801457a:	f7f7 fdac 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 801457e:	4603      	mov	r3, r0
 8014580:	2800      	cmp	r0, #0
 8014582:	d0a3      	beq.n	80144cc <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
 8014584:	a807      	add	r0, sp, #28
 8014586:	9303      	str	r3, [sp, #12]
 8014588:	f7f6 ff47 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801458c:	a80a      	add	r0, sp, #40	; 0x28
 801458e:	f7f6 ff44 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8014592:	a80d      	add	r0, sp, #52	; 0x34
 8014594:	f7f6 ff41 	bl	800b41a <mbedtls_mpi_free>
    if( f_rng != NULL )
 8014598:	9b03      	ldr	r3, [sp, #12]
 801459a:	b136      	cbz	r6, 80145aa <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
 801459c:	a816      	add	r0, sp, #88	; 0x58
 801459e:	f7f6 ff3c 	bl	800b41a <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80145a2:	a819      	add	r0, sp, #100	; 0x64
 80145a4:	f7f6 ff39 	bl	800b41a <mbedtls_mpi_free>
 80145a8:	9b03      	ldr	r3, [sp, #12]
 80145aa:	9303      	str	r3, [sp, #12]
    mbedtls_mpi_free( &T );
 80145ac:	a804      	add	r0, sp, #16
 80145ae:	f7f6 ff34 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80145b2:	a810      	add	r0, sp, #64	; 0x40
 80145b4:	f7f6 ff31 	bl	800b41a <mbedtls_mpi_free>
 80145b8:	a813      	add	r0, sp, #76	; 0x4c
 80145ba:	f7f6 ff2e 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 80145be:	a81f      	add	r0, sp, #124	; 0x7c
 80145c0:	f7f6 ff2b 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 80145c4:	a81c      	add	r0, sp, #112	; 0x70
 80145c6:	f7f6 ff28 	bl	800b41a <mbedtls_mpi_free>
    if( ret != 0 )
 80145ca:	9b03      	ldr	r3, [sp, #12]
 80145cc:	b10b      	cbz	r3, 80145d2 <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 80145ce:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	b023      	add	sp, #140	; 0x8c
 80145d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80145da:	f06f 0303 	mvn.w	r3, #3
 80145de:	e7d1      	b.n	8014584 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 80145e0:	4b02      	ldr	r3, [pc, #8]	; (80145ec <mbedtls_rsa_private+0x36c>)
 80145e2:	e7cf      	b.n	8014584 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80145e4:	4b02      	ldr	r3, [pc, #8]	; (80145f0 <mbedtls_rsa_private+0x370>)
 80145e6:	e7cd      	b.n	8014584 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80145e8:	4b02      	ldr	r3, [pc, #8]	; (80145f4 <mbedtls_rsa_private+0x374>)
 80145ea:	e7f2      	b.n	80145d2 <mbedtls_rsa_private+0x352>
 80145ec:	ffffbb80 	.word	0xffffbb80
 80145f0:	ffffbc80 	.word	0xffffbc80
 80145f4:	ffffbf80 	.word	0xffffbf80

080145f8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 80145f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fc:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80145fe:	f1b9 0f01 	cmp.w	r9, #1
{
 8014602:	4607      	mov	r7, r0
 8014604:	4688      	mov	r8, r1
 8014606:	4693      	mov	fp, r2
 8014608:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	; 0x30
 801460c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801460e:	d106      	bne.n	801461e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 8014610:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8014614:	b11a      	cbz	r2, 801461e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8014616:	482d      	ldr	r0, [pc, #180]	; (80146cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
}
 8014618:	b003      	add	sp, #12
 801461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
 801461e:	f116 0f0c 	cmn.w	r6, #12
    olen = ctx->len;
 8014622:	687c      	ldr	r4, [r7, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8014624:	d8f7      	bhi.n	8014616 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
 8014626:	f106 020b 	add.w	r2, r6, #11
 801462a:	42a2      	cmp	r2, r4
 801462c:	d8f3      	bhi.n	8014616 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    nb_pad = olen - 3 - ilen;
 801462e:	1ba4      	subs	r4, r4, r6
    *p++ = 0;
 8014630:	2100      	movs	r1, #0
    nb_pad = olen - 3 - ilen;
 8014632:	1ee2      	subs	r2, r4, #3
    *p++ = 0;
 8014634:	7029      	strb	r1, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 8014636:	f1b9 0f00 	cmp.w	r9, #0
 801463a:	d12f      	bne.n	801469c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa4>
        if( f_rng == NULL )
 801463c:	f1b8 0f00 	cmp.w	r8, #0
 8014640:	d0e9      	beq.n	8014616 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
 8014642:	1cac      	adds	r4, r5, #2
 8014644:	2102      	movs	r1, #2
 8014646:	18a2      	adds	r2, r4, r2
 8014648:	7069      	strb	r1, [r5, #1]
 801464a:	9200      	str	r2, [sp, #0]
        while( nb_pad-- > 0 )
 801464c:	9a00      	ldr	r2, [sp, #0]
 801464e:	4294      	cmp	r4, r2
 8014650:	d112      	bne.n	8014678 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
    *p++ = 0;
 8014652:	2200      	movs	r2, #0
 8014654:	7022      	strb	r2, [r4, #0]
    if( ilen != 0 )
 8014656:	b126      	cbz	r6, 8014662 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
        memcpy( p, input, ilen );
 8014658:	4632      	mov	r2, r6
 801465a:	4619      	mov	r1, r3
 801465c:	1c60      	adds	r0, r4, #1
 801465e:	f002 fa2c 	bl	8016aba <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8014662:	f1b9 0f00 	cmp.w	r9, #0
 8014666:	d123      	bne.n	80146b0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb8>
 8014668:	462a      	mov	r2, r5
 801466a:	4629      	mov	r1, r5
 801466c:	4638      	mov	r0, r7
}
 801466e:	b003      	add	sp, #12
 8014670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8014674:	f7ff bdc6 	b.w	8014204 <mbedtls_rsa_public>
 8014678:	f04f 0a64 	mov.w	sl, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 801467c:	2201      	movs	r2, #1
 801467e:	4621      	mov	r1, r4
 8014680:	4658      	mov	r0, fp
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	47c0      	blx	r8
            } while( *p == 0 && --rng_dl && ret == 0 );
 8014686:	7822      	ldrb	r2, [r4, #0]
 8014688:	9b01      	ldr	r3, [sp, #4]
 801468a:	b9da      	cbnz	r2, 80146c4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
 801468c:	f1ba 0a01 	subs.w	sl, sl, #1
 8014690:	d001      	beq.n	8014696 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
 8014692:	2800      	cmp	r0, #0
 8014694:	d0f2      	beq.n	801467c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x84>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8014696:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 801469a:	e7bd      	b.n	8014618 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
        *p++ = MBEDTLS_RSA_SIGN;
 801469c:	2101      	movs	r1, #1
 801469e:	7069      	strb	r1, [r5, #1]
 80146a0:	1ca9      	adds	r1, r5, #2
 80146a2:	188c      	adds	r4, r1, r2
            *p++ = 0xFF;
 80146a4:	22ff      	movs	r2, #255	; 0xff
        while( nb_pad-- > 0 )
 80146a6:	428c      	cmp	r4, r1
 80146a8:	d0d3      	beq.n	8014652 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5a>
            *p++ = 0xFF;
 80146aa:	f801 2b01 	strb.w	r2, [r1], #1
 80146ae:	e7fa      	b.n	80146a6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xae>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80146b0:	462b      	mov	r3, r5
 80146b2:	465a      	mov	r2, fp
 80146b4:	4641      	mov	r1, r8
 80146b6:	4638      	mov	r0, r7
 80146b8:	950c      	str	r5, [sp, #48]	; 0x30
}
 80146ba:	b003      	add	sp, #12
 80146bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80146c0:	f7ff bdde 	b.w	8014280 <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d1e6      	bne.n	8014696 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9e>
            p++;
 80146c8:	3401      	adds	r4, #1
 80146ca:	e7bf      	b.n	801464c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
 80146cc:	ffffbf80 	.word	0xffffbf80

080146d0 <mbedtls_rsa_pkcs1_encrypt>:
{
 80146d0:	b410      	push	{r4}
    switch( ctx->padding )
 80146d2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 80146d6:	b91c      	cbnz	r4, 80146e0 <mbedtls_rsa_pkcs1_encrypt+0x10>
}
 80146d8:	f85d 4b04 	ldr.w	r4, [sp], #4
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 80146dc:	f7ff bf8c 	b.w	80145f8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
}
 80146e0:	4801      	ldr	r0, [pc, #4]	; (80146e8 <mbedtls_rsa_pkcs1_encrypt+0x18>)
 80146e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146e6:	4770      	bx	lr
 80146e8:	ffffbf00 	.word	0xffffbf00

080146ec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 80146ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f0:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80146f4:	2b01      	cmp	r3, #1
{
 80146f6:	4698      	mov	r8, r3
 80146f8:	f8dd 743c 	ldr.w	r7, [sp, #1084]	; 0x43c
    ilen = ctx->len;
 80146fc:	6845      	ldr	r5, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80146fe:	d104      	bne.n	801470a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1e>
 8014700:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8014704:	2b00      	cmp	r3, #0
 8014706:	f040 80c7 	bne.w	8014898 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
    if( ilen < 16 || ilen > sizeof( buf ) )
 801470a:	f1a5 0310 	sub.w	r3, r5, #16
 801470e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8014712:	f200 80c1 	bhi.w	8014898 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
 8014716:	ae02      	add	r6, sp, #8
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8014718:	f1b8 0f00 	cmp.w	r8, #0
 801471c:	d127      	bne.n	801476e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x82>
 801471e:	4632      	mov	r2, r6
 8014720:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
 8014724:	f7ff fd6e 	bl	8014204 <mbedtls_rsa_public>
    if( ret != 0 )
 8014728:	4604      	mov	r4, r0
 801472a:	2800      	cmp	r0, #0
 801472c:	f040 809d 	bne.w	801486a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    bad |= buf[0];
 8014730:	7830      	ldrb	r0, [r6, #0]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 8014732:	7873      	ldrb	r3, [r6, #1]
 8014734:	f083 0301 	eor.w	r3, r3, #1
 8014738:	4303      	orrs	r3, r0
    unsigned char pad_done = 0;
 801473a:	2000      	movs	r0, #0
    size_t pad_count = 0;
 801473c:	4601      	mov	r1, r0
        for( i = 2; i < ilen; i++ )
 801473e:	2402      	movs	r4, #2
            pad_done |= if_int( buf[i], 0, 1 );
 8014740:	5d32      	ldrb	r2, [r6, r4]
 8014742:	2a00      	cmp	r2, #0
 8014744:	bf08      	it	eq
 8014746:	f040 0001 	orreq.w	r0, r0, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801474a:	f1c0 0c00 	rsb	ip, r0, #0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 801474e:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8014750:	ea4c 0c00 	orr.w	ip, ip, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8014754:	b2d2      	uxtb	r2, r2
        for( i = 2; i < ilen; i++ )
 8014756:	3401      	adds	r4, #1
    return( ( mask & if1 ) | (~mask & if0 ) );
 8014758:	ea22 72ec 	bic.w	r2, r2, ip, asr #31
            pad_count += if_int( pad_done, 0, 1 );
 801475c:	f1bc 0f00 	cmp.w	ip, #0
 8014760:	bfa8      	it	ge
 8014762:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
 8014764:	42a5      	cmp	r5, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 8014766:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
 801476a:	d1e9      	bne.n	8014740 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x54>
 801476c:	e026      	b.n	80147bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801476e:	9600      	str	r6, [sp, #0]
 8014770:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
 8014774:	f7ff fd84 	bl	8014280 <mbedtls_rsa_private>
    if( ret != 0 )
 8014778:	4604      	mov	r4, r0
 801477a:	2800      	cmp	r0, #0
 801477c:	d175      	bne.n	801486a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x17e>
    if( mode == MBEDTLS_RSA_PRIVATE )
 801477e:	f1b8 0f01 	cmp.w	r8, #1
    bad |= buf[0];
 8014782:	7830      	ldrb	r0, [r6, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
 8014784:	d1d5      	bne.n	8014732 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x46>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 8014786:	7873      	ldrb	r3, [r6, #1]
 8014788:	f083 0302 	eor.w	r3, r3, #2
 801478c:	4303      	orrs	r3, r0
    size_t pad_count = 0;
 801478e:	4621      	mov	r1, r4
    unsigned char pad_done = 0;
 8014790:	4620      	mov	r0, r4
        for( i = 2; i < ilen; i++ )
 8014792:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 8014794:	5d32      	ldrb	r2, [r6, r4]
 8014796:	f1c2 0c00 	rsb	ip, r2, #0
 801479a:	ea42 020c 	orr.w	r2, r2, ip
 801479e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80147a2:	f082 0201 	eor.w	r2, r2, #1
 80147a6:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80147a8:	4242      	negs	r2, r0
 80147aa:	4302      	orrs	r2, r0
 80147ac:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 2; i < ilen; i++ )
 80147b0:	3401      	adds	r4, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80147b2:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
 80147b6:	42a5      	cmp	r5, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80147b8:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
 80147ba:	d1eb      	bne.n	8014794 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 80147bc:	f1a5 020b 	sub.w	r2, r5, #11
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 80147c0:	f1a1 0408 	sub.w	r4, r1, #8
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 80147c4:	42ba      	cmp	r2, r7
 80147c6:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
 80147ca:	bf28      	it	cs
 80147cc:	463a      	movcs	r2, r7
    bad |= size_greater_than( 8, pad_count );
 80147ce:	2800      	cmp	r0, #0
 80147d0:	bf14      	ite	ne
 80147d2:	4618      	movne	r0, r3
 80147d4:	f043 0001 	orreq.w	r0, r3, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80147d8:	4244      	negs	r4, r0
 80147da:	4304      	orrs	r4, r0
                             (unsigned) ( ilen - pad_count - 3 ) );
 80147dc:	f1a5 0803 	sub.w	r8, r5, #3
 80147e0:	eba8 0801 	sub.w	r8, r8, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80147e4:	17e4      	asrs	r4, r4, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 80147e6:	2c00      	cmp	r4, #0
 80147e8:	bf18      	it	ne
 80147ea:	4690      	movne	r8, r2
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 80147ec:	eba2 0308 	sub.w	r3, r2, r8
 80147f0:	0fdb      	lsrs	r3, r3, #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80147f2:	4259      	negs	r1, r3
    bad = all_or_nothing_int( bad | output_too_large );
 80147f4:	4303      	orrs	r3, r0
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80147f6:	4258      	negs	r0, r3
 80147f8:	4318      	orrs	r0, r3
 80147fa:	f401 4c88 	and.w	ip, r1, #17408	; 0x4400
    return( ( mask & if1 ) | (~mask & if0 ) );
 80147fe:	2c00      	cmp	r4, #0
 8014800:	bf0c      	ite	eq
 8014802:	4664      	moveq	r4, ip
 8014804:	f44f 4482 	movne.w	r4, #16640	; 0x4100
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8014808:	17c0      	asrs	r0, r0, #31
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 801480a:	4264      	negs	r4, r4
 801480c:	f10d 0313 	add.w	r3, sp, #19
        buf[i] &= ~bad;
 8014810:	43c0      	mvns	r0, r0
 8014812:	f893 c000 	ldrb.w	ip, [r3]
 8014816:	ea0c 0c00 	and.w	ip, ip, r0
 801481a:	f803 cb01 	strb.w	ip, [r3], #1
    for( i = 11; i < ilen; i++ )
 801481e:	eba3 0c06 	sub.w	ip, r3, r6
 8014822:	4565      	cmp	r5, ip
 8014824:	d8f5      	bhi.n	8014812 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
    return( ( mask & if1 ) | (~mask & if0 ) );
 8014826:	2900      	cmp	r1, #0
 8014828:	bf18      	it	ne
 801482a:	4690      	movne	r8, r2
    mem_move_to_left( buf + ilen - plaintext_max_size,
 801482c:	1aa9      	subs	r1, r5, r2
 801482e:	4431      	add	r1, r6
    if( total == 0 )
 8014830:	b192      	cbz	r2, 8014858 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x16c>
        for( n = 0; n < total - 1; n++ )
 8014832:	f102 39ff 	add.w	r9, r2, #4294967295
    for( i = 0; i < total; i++ )
 8014836:	2000      	movs	r0, #0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8014838:	eb01 0e09 	add.w	lr, r1, r9
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 801483c:	eba0 0508 	sub.w	r5, r0, r8
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 8014840:	17ed      	asrs	r5, r5, #31
        for( n = 0; n < total - 1; n++ )
 8014842:	2300      	movs	r3, #0
 8014844:	454b      	cmp	r3, r9
 8014846:	d31a      	bcc.n	801487e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x192>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8014848:	f89e 3000 	ldrb.w	r3, [lr]
    for( i = 0; i < total; i++ )
 801484c:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 801484e:	401d      	ands	r5, r3
    for( i = 0; i < total; i++ )
 8014850:	4282      	cmp	r2, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 8014852:	f88e 5000 	strb.w	r5, [lr]
    for( i = 0; i < total; i++ )
 8014856:	d1f1      	bne.n	801483c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
    if( output_max_len != 0 )
 8014858:	b11f      	cbz	r7, 8014862 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x176>
        memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 801485a:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
 801485e:	f002 f92c 	bl	8016aba <memcpy>
    *olen = plaintext_size;
 8014862:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
 8014866:	f8c3 8000 	str.w	r8, [r3]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801486a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801486e:	4630      	mov	r0, r6
 8014870:	f7fd fd16 	bl	80122a0 <mbedtls_platform_zeroize>
}
 8014874:	4620      	mov	r0, r4
 8014876:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 801487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            unsigned char current = buf[n];
 801487e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8014882:	eb03 0a01 	add.w	sl, r3, r1
            unsigned char next = buf[n+1];
 8014886:	3301      	adds	r3, #1
 8014888:	f813 b001 	ldrb.w	fp, [r3, r1]
            buf[n] = if_int( no_op, current, next );
 801488c:	2d00      	cmp	r5, #0
 801488e:	bf08      	it	eq
 8014890:	46dc      	moveq	ip, fp
 8014892:	f88a c000 	strb.w	ip, [sl]
 8014896:	e7d5      	b.n	8014844 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x158>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8014898:	4c00      	ldr	r4, [pc, #0]	; (801489c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b0>)
 801489a:	e7eb      	b.n	8014874 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
 801489c:	ffffbf80 	.word	0xffffbf80

080148a0 <mbedtls_rsa_pkcs1_decrypt>:
{
 80148a0:	b410      	push	{r4}
    switch( ctx->padding )
 80148a2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 80148a6:	b91c      	cbnz	r4, 80148b0 <mbedtls_rsa_pkcs1_decrypt+0x10>
}
 80148a8:	f85d 4b04 	ldr.w	r4, [sp], #4
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 80148ac:	f7ff bf1e 	b.w	80146ec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
}
 80148b0:	4801      	ldr	r0, [pc, #4]	; (80148b8 <mbedtls_rsa_pkcs1_decrypt+0x18>)
 80148b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b6:	4770      	bx	lr
 80148b8:	ffffbf00 	.word	0xffffbf00

080148bc <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80148bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80148c0:	2b01      	cmp	r3, #1
{
 80148c2:	4605      	mov	r5, r0
 80148c4:	4689      	mov	r9, r1
 80148c6:	4692      	mov	sl, r2
 80148c8:	461e      	mov	r6, r3
 80148ca:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 80148ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80148d0:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80148d4:	d103      	bne.n	80148de <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x22>
 80148d6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d14e      	bne.n	801497c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80148de:	9700      	str	r7, [sp, #0]
 80148e0:	686b      	ldr	r3, [r5, #4]
 80148e2:	f7ff f94f 	bl	8013b84 <rsa_rsassa_pkcs1_v15_encode>
 80148e6:	4604      	mov	r4, r0
 80148e8:	bbd8      	cbnz	r0, 8014962 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80148ea:	b93e      	cbnz	r6, 80148fc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x40>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80148ec:	463a      	mov	r2, r7
 80148ee:	4639      	mov	r1, r7
 80148f0:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80148f2:	b002      	add	sp, #8
 80148f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80148f8:	f7ff bc84 	b.w	8014204 <mbedtls_rsa_public>
    sig_try = mbedtls_calloc( 1, ctx->len );
 80148fc:	686c      	ldr	r4, [r5, #4]
 80148fe:	2001      	movs	r0, #1
 8014900:	4621      	mov	r1, r4
 8014902:	f002 f8ad 	bl	8016a60 <calloc>
    if( sig_try == NULL )
 8014906:	4606      	mov	r6, r0
 8014908:	b140      	cbz	r0, 801491c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    verif = mbedtls_calloc( 1, ctx->len );
 801490a:	4621      	mov	r1, r4
 801490c:	2001      	movs	r0, #1
 801490e:	f002 f8a7 	bl	8016a60 <calloc>
    if( verif == NULL )
 8014912:	4680      	mov	r8, r0
 8014914:	b928      	cbnz	r0, 8014922 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x66>
        mbedtls_free( sig_try );
 8014916:	4630      	mov	r0, r6
 8014918:	f002 f8b8 	bl	8016a8c <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801491c:	f06f 040f 	mvn.w	r4, #15
 8014920:	e01f      	b.n	8014962 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8014922:	9600      	str	r6, [sp, #0]
 8014924:	463b      	mov	r3, r7
 8014926:	4652      	mov	r2, sl
 8014928:	4649      	mov	r1, r9
 801492a:	4628      	mov	r0, r5
 801492c:	f7ff fca8 	bl	8014280 <mbedtls_rsa_private>
 8014930:	4604      	mov	r4, r0
 8014932:	b980      	cbnz	r0, 8014956 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8014934:	4642      	mov	r2, r8
 8014936:	4631      	mov	r1, r6
 8014938:	4628      	mov	r0, r5
 801493a:	f7ff fc63 	bl	8014204 <mbedtls_rsa_public>
 801493e:	4604      	mov	r4, r0
 8014940:	b948      	cbnz	r0, 8014956 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8014942:	686a      	ldr	r2, [r5, #4]
    unsigned char diff = 0;
 8014944:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
 8014946:	4603      	mov	r3, r0
 8014948:	429a      	cmp	r2, r3
 801494a:	d10e      	bne.n	801496a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 801494c:	b9a1      	cbnz	r1, 8014978 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
    memcpy( sig, sig_try, ctx->len );
 801494e:	4631      	mov	r1, r6
 8014950:	4638      	mov	r0, r7
 8014952:	f002 f8b2 	bl	8016aba <memcpy>
    mbedtls_free( sig_try );
 8014956:	4630      	mov	r0, r6
 8014958:	f002 f898 	bl	8016a8c <free>
    mbedtls_free( verif );
 801495c:	4640      	mov	r0, r8
 801495e:	f002 f895 	bl	8016a8c <free>
}
 8014962:	4620      	mov	r0, r4
 8014964:	b002      	add	sp, #8
 8014966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        diff |= A[i] ^ B[i];
 801496a:	f818 0003 	ldrb.w	r0, [r8, r3]
 801496e:	5cfd      	ldrb	r5, [r7, r3]
 8014970:	4068      	eors	r0, r5
 8014972:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
 8014974:	3301      	adds	r3, #1
 8014976:	e7e7      	b.n	8014948 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x8c>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8014978:	4c01      	ldr	r4, [pc, #4]	; (8014980 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc4>)
 801497a:	e7ec      	b.n	8014956 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801497c:	4c01      	ldr	r4, [pc, #4]	; (8014984 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
 801497e:	e7f0      	b.n	8014962 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
 8014980:	ffffbd00 	.word	0xffffbd00
 8014984:	ffffbf80 	.word	0xffffbf80

08014988 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8014988:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 801498a:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 801498e:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 8014992:	b91d      	cbnz	r5, 801499c <mbedtls_rsa_pkcs1_sign+0x14>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8014994:	9402      	str	r4, [sp, #8]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8014996:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8014998:	f7ff bf90 	b.w	80148bc <mbedtls_rsa_rsassa_pkcs1_v15_sign>
}
 801499c:	4801      	ldr	r0, [pc, #4]	; (80149a4 <mbedtls_rsa_pkcs1_sign+0x1c>)
 801499e:	bc30      	pop	{r4, r5}
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	ffffbf00 	.word	0xffffbf00

080149a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80149a8:	2b01      	cmp	r3, #1
{
 80149aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ae:	4680      	mov	r8, r0
 80149b0:	468a      	mov	sl, r1
 80149b2:	4693      	mov	fp, r2
 80149b4:	4699      	mov	r9, r3
    sig_len = ctx->len;
 80149b6:	6847      	ldr	r7, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80149b8:	d103      	bne.n	80149c2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
 80149ba:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d14a      	bne.n	8014a58 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80149c2:	4639      	mov	r1, r7
 80149c4:	2001      	movs	r0, #1
 80149c6:	f002 f84b 	bl	8016a60 <calloc>
 80149ca:	4606      	mov	r6, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d045      	beq.n	8014a5c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb4>
 80149d0:	4639      	mov	r1, r7
 80149d2:	2001      	movs	r0, #1
 80149d4:	f002 f844 	bl	8016a60 <calloc>
 80149d8:	4605      	mov	r5, r0
 80149da:	2800      	cmp	r0, #0
 80149dc:	d041      	beq.n	8014a62 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xba>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80149de:	9000      	str	r0, [sp, #0]
 80149e0:	463b      	mov	r3, r7
 80149e2:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 80149e6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80149ea:	f7ff f8cb 	bl	8013b84 <rsa_rsassa_pkcs1_v15_encode>
 80149ee:	4604      	mov	r4, r0
 80149f0:	b988      	cbnz	r0, 8014a16 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80149f2:	f1b9 0f00 	cmp.w	r9, #0
 80149f6:	d121      	bne.n	8014a3c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80149f8:	4632      	mov	r2, r6
 80149fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80149fc:	4640      	mov	r0, r8
 80149fe:	f7ff fc01 	bl	8014204 <mbedtls_rsa_public>
 8014a02:	4604      	mov	r4, r0
    if( ret != 0 )
 8014a04:	b938      	cbnz	r0, 8014a16 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    unsigned char diff = 0;
 8014a06:	4602      	mov	r2, r0
    for( i = 0; i < n; i++ )
 8014a08:	4603      	mov	r3, r0
 8014a0a:	429f      	cmp	r7, r3
 8014a0c:	d11e      	bne.n	8014a4c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa4>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8014a0e:	4b16      	ldr	r3, [pc, #88]	; (8014a68 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc0>)
 8014a10:	2a00      	cmp	r2, #0
 8014a12:	bf18      	it	ne
 8014a14:	461c      	movne	r4, r3

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 8014a16:	4630      	mov	r0, r6
 8014a18:	4639      	mov	r1, r7
 8014a1a:	f7fd fc41 	bl	80122a0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f002 f834 	bl	8016a8c <free>
    }

    if( encoded_expected != NULL )
 8014a24:	b135      	cbz	r5, 8014a34 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 8014a26:	4628      	mov	r0, r5
 8014a28:	4639      	mov	r1, r7
 8014a2a:	f7fd fc39 	bl	80122a0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f002 f82c 	bl	8016a8c <free>
    }

    return( ret );
}
 8014a34:	4620      	mov	r0, r4
 8014a36:	b003      	add	sp, #12
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8014a3c:	9600      	str	r6, [sp, #0]
 8014a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a40:	465a      	mov	r2, fp
 8014a42:	4651      	mov	r1, sl
 8014a44:	4640      	mov	r0, r8
 8014a46:	f7ff fc1b 	bl	8014280 <mbedtls_rsa_private>
 8014a4a:	e7da      	b.n	8014a02 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
        diff |= A[i] ^ B[i];
 8014a4c:	5cf1      	ldrb	r1, [r6, r3]
 8014a4e:	5ce8      	ldrb	r0, [r5, r3]
 8014a50:	4041      	eors	r1, r0
 8014a52:	430a      	orrs	r2, r1
    for( i = 0; i < n; i++ )
 8014a54:	3301      	adds	r3, #1
 8014a56:	e7d8      	b.n	8014a0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8014a58:	4c04      	ldr	r4, [pc, #16]	; (8014a6c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 8014a5a:	e7eb      	b.n	8014a34 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8014a5c:	f06f 040f 	mvn.w	r4, #15
 8014a60:	e7e8      	b.n	8014a34 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8c>
 8014a62:	f06f 040f 	mvn.w	r4, #15
 8014a66:	e7d6      	b.n	8014a16 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
 8014a68:	ffffbc80 	.word	0xffffbc80
 8014a6c:	ffffbf80 	.word	0xffffbf80

08014a70 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8014a70:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 8014a72:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 8014a76:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 8014a7a:	b91d      	cbnz	r5, 8014a84 <mbedtls_rsa_pkcs1_verify+0x14>
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8014a7c:	9402      	str	r4, [sp, #8]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8014a7e:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 8014a80:	f7ff bf92 	b.w	80149a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
}
 8014a84:	4801      	ldr	r0, [pc, #4]	; (8014a8c <mbedtls_rsa_pkcs1_verify+0x1c>)
 8014a86:	bc30      	pop	{r4, r5}
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop
 8014a8c:	ffffbf00 	.word	0xffffbf00

08014a90 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8014a90:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8014a92:	4604      	mov	r4, r0
 8014a94:	b3a0      	cbz	r0, 8014b00 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
 8014a96:	308c      	adds	r0, #140	; 0x8c
 8014a98:	f7f6 fcbf 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 8014a9c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8014aa0:	f7f6 fcbb 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 8014aa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014aa8:	f7f6 fcb7 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 8014aac:	f104 0020 	add.w	r0, r4, #32
 8014ab0:	f7f6 fcb3 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 8014ab4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014ab8:	f7f6 fcaf 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 8014abc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014ac0:	f7f6 fcab 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 8014ac4:	f104 0014 	add.w	r0, r4, #20
 8014ac8:	f7f6 fca7 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 8014acc:	f104 0008 	add.w	r0, r4, #8
 8014ad0:	f7f6 fca3 	bl	800b41a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 8014ad4:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8014ad8:	f7f6 fc9f 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 8014adc:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8014ae0:	f7f6 fc9b 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 8014ae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014ae8:	f7f6 fc97 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 8014aec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014af0:	f7f6 fc93 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8014af4:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8014af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
 8014afc:	f7f6 bc8d 	b.w	800b41a <mbedtls_mpi_free>
}
 8014b00:	bd10      	pop	{r4, pc}
	...

08014b04 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	b099      	sub	sp, #100	; 0x64
 8014b0a:	461f      	mov	r7, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 8014b0c:	4b7a      	ldr	r3, [pc, #488]	; (8014cf8 <mbedtls_rsa_deduce_primes+0x1f4>)
{
 8014b0e:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8014b12:	4614      	mov	r4, r2
    const unsigned char primes[] = { 2,
 8014b14:	aa0a      	add	r2, sp, #40	; 0x28
{
 8014b16:	4605      	mov	r5, r0
 8014b18:	4689      	mov	r9, r1
    const unsigned char primes[] = { 2,
 8014b1a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 8014b1e:	4690      	mov	r8, r2
 8014b20:	6818      	ldr	r0, [r3, #0]
 8014b22:	6859      	ldr	r1, [r3, #4]
 8014b24:	4616      	mov	r6, r2
 8014b26:	c603      	stmia	r6!, {r0, r1}
 8014b28:	3308      	adds	r3, #8
 8014b2a:	4563      	cmp	r3, ip
 8014b2c:	4632      	mov	r2, r6
 8014b2e:	d1f7      	bne.n	8014b20 <mbedtls_rsa_deduce_primes+0x1c>
 8014b30:	6818      	ldr	r0, [r3, #0]
 8014b32:	889b      	ldrh	r3, [r3, #4]
 8014b34:	6030      	str	r0, [r6, #0]
 8014b36:	80b3      	strh	r3, [r6, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8014b38:	b92f      	cbnz	r7, 8014b46 <mbedtls_rsa_deduce_primes+0x42>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8014b3a:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 8014b3e:	4620      	mov	r0, r4
 8014b40:	b019      	add	sp, #100	; 0x64
 8014b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 8014b46:	f1ba 0f00 	cmp.w	sl, #0
 8014b4a:	d0f6      	beq.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d1f3      	bne.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
 8014b52:	f8da 1008 	ldr.w	r1, [sl, #8]
 8014b56:	2900      	cmp	r1, #0
 8014b58:	d1ef      	bne.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	f7f6 ff66 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	ddea      	ble.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8014b64:	2101      	movs	r1, #1
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7f6 ff60 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	dde4      	ble.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8014b70:	4629      	mov	r1, r5
 8014b72:	4620      	mov	r0, r4
 8014b74:	f7f6 ff1a 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	dade      	bge.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8014b7c:	2101      	movs	r1, #1
 8014b7e:	4648      	mov	r0, r9
 8014b80:	f7f6 ff54 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8014b84:	2800      	cmp	r0, #0
 8014b86:	ddd8      	ble.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 8014b88:	4629      	mov	r1, r5
 8014b8a:	4648      	mov	r0, r9
 8014b8c:	f7f6 ff0e 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8014b90:	2800      	cmp	r0, #0
 8014b92:	dad2      	bge.n	8014b3a <mbedtls_rsa_deduce_primes+0x36>
    mbedtls_mpi_init( &K );
 8014b94:	a807      	add	r0, sp, #28
    mbedtls_mpi_init( &T );
 8014b96:	ae04      	add	r6, sp, #16
    mbedtls_mpi_init( &K );
 8014b98:	f7f6 fc39 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	f7f6 fc36 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 8014ba2:	4621      	mov	r1, r4
 8014ba4:	464a      	mov	r2, r9
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f7f7 f868 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014bac:	4604      	mov	r4, r0
 8014bae:	b980      	cbnz	r0, 8014bd2 <mbedtls_rsa_deduce_primes+0xce>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	4631      	mov	r1, r6
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f7f7 f84b 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014bba:	4604      	mov	r4, r0
 8014bbc:	b948      	cbnz	r0, 8014bd2 <mbedtls_rsa_deduce_primes+0xce>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 8014bbe:	4630      	mov	r0, r6
 8014bc0:	f7f6 fd2e 	bl	800b620 <mbedtls_mpi_lsb>
 8014bc4:	fa1f fb80 	uxth.w	fp, r0
 8014bc8:	f1bb 0f00 	cmp.w	fp, #0
 8014bcc:	d108      	bne.n	8014be0 <mbedtls_rsa_deduce_primes+0xdc>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8014bce:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
 8014bd2:	a807      	add	r0, sp, #28
 8014bd4:	f7f6 fc21 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 8014bd8:	a804      	add	r0, sp, #16
 8014bda:	f7f6 fc1e 	bl	800b41a <mbedtls_mpi_free>
    return( ret );
 8014bde:	e7ae      	b.n	8014b3e <mbedtls_rsa_deduce_primes+0x3a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 8014be0:	b281      	uxth	r1, r0
 8014be2:	4630      	mov	r0, r6
 8014be4:	f7f6 fe12 	bl	800b80c <mbedtls_mpi_shift_r>
 8014be8:	4604      	mov	r4, r0
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d1f1      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
    if( N->p[0] % 8 == 1 )
 8014bee:	68ab      	ldr	r3, [r5, #8]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f003 0307 	and.w	r3, r3, #7
 8014bf6:	1e5a      	subs	r2, r3, #1
 8014bf8:	4253      	negs	r3, r2
 8014bfa:	4153      	adcs	r3, r2
    for( ; attempt < num_primes; ++attempt )
 8014bfc:	b29a      	uxth	r2, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
 8014bfe:	4443      	add	r3, r8
    for( ; attempt < num_primes; ++attempt )
 8014c00:	9202      	str	r2, [sp, #8]
 8014c02:	4681      	mov	r9, r0
        mbedtls_mpi_lset( &K, primes[attempt] );
 8014c04:	9303      	str	r3, [sp, #12]
 8014c06:	9b03      	ldr	r3, [sp, #12]
 8014c08:	a807      	add	r0, sp, #28
 8014c0a:	f813 1009 	ldrb.w	r1, [r3, r9]
 8014c0e:	f7f6 fcdb 	bl	800b5c8 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8014c12:	462a      	mov	r2, r5
 8014c14:	a907      	add	r1, sp, #28
 8014c16:	4638      	mov	r0, r7
 8014c18:	f7f7 fd09 	bl	800c62e <mbedtls_mpi_gcd>
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	d1d7      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 8014c22:	2101      	movs	r1, #1
 8014c24:	4638      	mov	r0, r7
 8014c26:	f7f6 ff01 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014c2a:	b138      	cbz	r0, 8014c3c <mbedtls_rsa_deduce_primes+0x138>
    for( ; attempt < num_primes; ++attempt )
 8014c2c:	9b02      	ldr	r3, [sp, #8]
 8014c2e:	f109 0901 	add.w	r9, r9, #1
 8014c32:	444b      	add	r3, r9
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	2b35      	cmp	r3, #53	; 0x35
 8014c38:	d9e5      	bls.n	8014c06 <mbedtls_rsa_deduce_primes+0x102>
 8014c3a:	e7c8      	b.n	8014bce <mbedtls_rsa_deduce_primes+0xca>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 8014c3c:	a907      	add	r1, sp, #28
 8014c3e:	f8cd a000 	str.w	sl, [sp]
 8014c42:	462b      	mov	r3, r5
 8014c44:	4632      	mov	r2, r6
 8014c46:	4608      	mov	r0, r1
 8014c48:	f7f7 faba 	bl	800c1c0 <mbedtls_mpi_exp_mod>
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	d1bf      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 8014c52:	f04f 0801 	mov.w	r8, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 8014c56:	2101      	movs	r1, #1
 8014c58:	a807      	add	r0, sp, #28
 8014c5a:	f7f6 fee7 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d042      	beq.n	8014ce8 <mbedtls_rsa_deduce_primes+0x1e4>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 8014c62:	a907      	add	r1, sp, #28
 8014c64:	2201      	movs	r2, #1
 8014c66:	4608      	mov	r0, r1
 8014c68:	f7f6 ffdc 	bl	800bc24 <mbedtls_mpi_add_int>
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d1af      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 8014c72:	462a      	mov	r2, r5
 8014c74:	a907      	add	r1, sp, #28
 8014c76:	4638      	mov	r0, r7
 8014c78:	f7f7 fcd9 	bl	800c62e <mbedtls_mpi_gcd>
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d1a7      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8014c82:	2101      	movs	r1, #1
 8014c84:	4638      	mov	r0, r7
 8014c86:	f7f6 fed1 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014c8a:	2801      	cmp	r0, #1
 8014c8c:	d10d      	bne.n	8014caa <mbedtls_rsa_deduce_primes+0x1a6>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 8014c8e:	4629      	mov	r1, r5
 8014c90:	4638      	mov	r0, r7
 8014c92:	f7f6 fe8b 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 8014c96:	3001      	adds	r0, #1
 8014c98:	d107      	bne.n	8014caa <mbedtls_rsa_deduce_primes+0x1a6>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 8014c9a:	4621      	mov	r1, r4
 8014c9c:	463b      	mov	r3, r7
 8014c9e:	462a      	mov	r2, r5
 8014ca0:	4650      	mov	r0, sl
 8014ca2:	f7f7 f862 	bl	800bd6a <mbedtls_mpi_div_mpi>
 8014ca6:	4604      	mov	r4, r0
cleanup:
 8014ca8:	e793      	b.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8014caa:	a907      	add	r1, sp, #28
 8014cac:	2201      	movs	r2, #1
 8014cae:	4608      	mov	r0, r1
 8014cb0:	f7f6 ffce 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d18b      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 8014cba:	aa07      	add	r2, sp, #28
 8014cbc:	4611      	mov	r1, r2
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	f7f6 ffdc 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d183      	bne.n	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 8014cca:	a907      	add	r1, sp, #28
 8014ccc:	462a      	mov	r2, r5
 8014cce:	4608      	mov	r0, r1
 8014cd0:	f7f7 fa01 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f47f af7b 	bne.w	8014bd2 <mbedtls_rsa_deduce_primes+0xce>
        for( iter = 1; iter <= order; ++iter )
 8014cdc:	f108 0801 	add.w	r8, r8, #1
 8014ce0:	fa1f f888 	uxth.w	r8, r8
 8014ce4:	45c3      	cmp	fp, r8
 8014ce6:	d2b6      	bcs.n	8014c56 <mbedtls_rsa_deduce_primes+0x152>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 8014ce8:	2101      	movs	r1, #1
 8014cea:	a807      	add	r0, sp, #28
 8014cec:	f7f6 fe9e 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d09b      	beq.n	8014c2c <mbedtls_rsa_deduce_primes+0x128>
 8014cf4:	e76b      	b.n	8014bce <mbedtls_rsa_deduce_primes+0xca>
 8014cf6:	bf00      	nop
 8014cf8:	0801966c 	.word	0x0801966c

08014cfc <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 8014cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d00:	4604      	mov	r4, r0
 8014d02:	b086      	sub	sp, #24
 8014d04:	460f      	mov	r7, r1
 8014d06:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8014d08:	461d      	mov	r5, r3
 8014d0a:	b92b      	cbnz	r3, 8014d18 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8014d0c:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
 8014d10:	4620      	mov	r0, r4
 8014d12:	b006      	add	sp, #24
 8014d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 8014d18:	2100      	movs	r1, #0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7f6 fe86 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014d20:	4680      	mov	r8, r0
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d1f2      	bne.n	8014d0c <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8014d26:	2101      	movs	r1, #1
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7f6 fe7f 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	ddec      	ble.n	8014d0c <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8014d32:	2101      	movs	r1, #1
 8014d34:	4638      	mov	r0, r7
 8014d36:	f7f6 fe79 	bl	800ba2c <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	dde6      	ble.n	8014d0c <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 8014d3e:	4641      	mov	r1, r8
 8014d40:	4630      	mov	r0, r6
 8014d42:	f7f6 fe73 	bl	800ba2c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d0e0      	beq.n	8014d0c <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
 8014d4a:	4668      	mov	r0, sp
 8014d4c:	f7f6 fb5f 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8014d50:	a803      	add	r0, sp, #12
 8014d52:	f7f6 fb5c 	bl	800b40e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8014d56:	4621      	mov	r1, r4
 8014d58:	2201      	movs	r2, #1
 8014d5a:	4668      	mov	r0, sp
 8014d5c:	f7f6 ff78 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014d60:	4604      	mov	r4, r0
 8014d62:	bb10      	cbnz	r0, 8014daa <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8014d64:	2201      	movs	r2, #1
 8014d66:	4639      	mov	r1, r7
 8014d68:	a803      	add	r0, sp, #12
 8014d6a:	f7f6 ff71 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014d6e:	4604      	mov	r4, r0
 8014d70:	b9d8      	cbnz	r0, 8014daa <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 8014d72:	aa03      	add	r2, sp, #12
 8014d74:	4669      	mov	r1, sp
 8014d76:	4628      	mov	r0, r5
 8014d78:	f7f7 fc59 	bl	800c62e <mbedtls_mpi_gcd>
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	b9a0      	cbnz	r0, 8014daa <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 8014d80:	aa03      	add	r2, sp, #12
 8014d82:	4669      	mov	r1, sp
 8014d84:	4668      	mov	r0, sp
 8014d86:	f7f6 ff79 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	b968      	cbnz	r0, 8014daa <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 8014d8e:	4601      	mov	r1, r0
 8014d90:	462b      	mov	r3, r5
 8014d92:	466a      	mov	r2, sp
 8014d94:	4668      	mov	r0, sp
 8014d96:	f7f6 ffe8 	bl	800bd6a <mbedtls_mpi_div_mpi>
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	b928      	cbnz	r0, 8014daa <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 8014d9e:	466a      	mov	r2, sp
 8014da0:	4631      	mov	r1, r6
 8014da2:	4628      	mov	r0, r5
 8014da4:	f7f7 fdbd 	bl	800c922 <mbedtls_mpi_inv_mod>
 8014da8:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
 8014daa:	4668      	mov	r0, sp
 8014dac:	f7f6 fb35 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8014db0:	a803      	add	r0, sp, #12
 8014db2:	f7f6 fb32 	bl	800b41a <mbedtls_mpi_free>
    return( ret );
 8014db6:	e7ab      	b.n	8014d10 <mbedtls_rsa_deduce_private_exponent+0x14>

08014db8 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 8014db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014dbc:	b087      	sub	sp, #28
 8014dbe:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 8014dc0:	4668      	mov	r0, sp
{
 8014dc2:	4699      	mov	r9, r3
 8014dc4:	460d      	mov	r5, r1
 8014dc6:	4690      	mov	r8, r2
 8014dc8:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	; 0x38
    mbedtls_mpi_init( &K );
 8014dcc:	f7f6 fb1f 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8014dd0:	a803      	add	r0, sp, #12
 8014dd2:	f7f6 fb1c 	bl	800b40e <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 8014dd6:	f1b9 0f00 	cmp.w	r9, #0
 8014dda:	d104      	bne.n	8014de6 <mbedtls_rsa_validate_crt+0x2e>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 8014ddc:	bb67      	cbnz	r7, 8014e38 <mbedtls_rsa_validate_crt+0x80>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 8014dde:	2e00      	cmp	r6, #0
 8014de0:	d145      	bne.n	8014e6e <mbedtls_rsa_validate_crt+0xb6>
{
 8014de2:	2400      	movs	r4, #0
 8014de4:	e001      	b.n	8014dea <mbedtls_rsa_validate_crt+0x32>
        if( P == NULL )
 8014de6:	b954      	cbnz	r4, 8014dfe <mbedtls_rsa_validate_crt+0x46>
{
 8014de8:	4c34      	ldr	r4, [pc, #208]	; (8014ebc <mbedtls_rsa_validate_crt+0x104>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 8014dea:	4668      	mov	r0, sp
 8014dec:	f7f6 fb15 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8014df0:	a803      	add	r0, sp, #12
 8014df2:	f7f6 fb12 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 8014df6:	4620      	mov	r0, r4
 8014df8:	b007      	add	sp, #28
 8014dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 8014dfe:	2201      	movs	r2, #1
 8014e00:	4621      	mov	r1, r4
 8014e02:	4668      	mov	r0, sp
 8014e04:	f7f6 ff24 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d14d      	bne.n	8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 8014e0c:	4642      	mov	r2, r8
 8014e0e:	4649      	mov	r1, r9
 8014e10:	a803      	add	r0, sp, #12
 8014e12:	f7f6 fee4 	bl	800bbde <mbedtls_mpi_sub_mpi>
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d146      	bne.n	8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8014e1a:	a903      	add	r1, sp, #12
 8014e1c:	466a      	mov	r2, sp
 8014e1e:	4608      	mov	r0, r1
 8014e20:	f7f7 f959 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d13f      	bne.n	8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8014e28:	4601      	mov	r1, r0
 8014e2a:	a803      	add	r0, sp, #12
 8014e2c:	f7f6 fdfe 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d0d3      	beq.n	8014ddc <mbedtls_rsa_validate_crt+0x24>
{
 8014e34:	4c22      	ldr	r4, [pc, #136]	; (8014ec0 <mbedtls_rsa_validate_crt+0x108>)
 8014e36:	e7d8      	b.n	8014dea <mbedtls_rsa_validate_crt+0x32>
        if( Q == NULL )
 8014e38:	2d00      	cmp	r5, #0
 8014e3a:	d0d5      	beq.n	8014de8 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	4629      	mov	r1, r5
 8014e40:	4668      	mov	r0, sp
 8014e42:	f7f6 ff05 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014e46:	bb78      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 8014e48:	4642      	mov	r2, r8
 8014e4a:	4639      	mov	r1, r7
 8014e4c:	a803      	add	r0, sp, #12
 8014e4e:	f7f6 fec6 	bl	800bbde <mbedtls_mpi_sub_mpi>
 8014e52:	bb48      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 8014e54:	a903      	add	r1, sp, #12
 8014e56:	466a      	mov	r2, sp
 8014e58:	4608      	mov	r0, r1
 8014e5a:	f7f7 f93c 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014e5e:	bb18      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 8014e60:	4601      	mov	r1, r0
 8014e62:	a803      	add	r0, sp, #12
 8014e64:	f7f6 fde2 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	d1e3      	bne.n	8014e34 <mbedtls_rsa_validate_crt+0x7c>
 8014e6c:	e7b7      	b.n	8014dde <mbedtls_rsa_validate_crt+0x26>
        if( P == NULL || Q == NULL )
 8014e6e:	2c00      	cmp	r4, #0
 8014e70:	d0ba      	beq.n	8014de8 <mbedtls_rsa_validate_crt+0x30>
 8014e72:	2d00      	cmp	r5, #0
 8014e74:	d0b8      	beq.n	8014de8 <mbedtls_rsa_validate_crt+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 8014e76:	462a      	mov	r2, r5
 8014e78:	4631      	mov	r1, r6
 8014e7a:	4668      	mov	r0, sp
 8014e7c:	f7f6 fefe 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014e80:	b990      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8014e82:	2201      	movs	r2, #1
 8014e84:	4669      	mov	r1, sp
 8014e86:	4668      	mov	r0, sp
 8014e88:	f7f6 fee2 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014e8c:	b960      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 8014e8e:	4622      	mov	r2, r4
 8014e90:	4669      	mov	r1, sp
 8014e92:	4668      	mov	r0, sp
 8014e94:	f7f7 f91f 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014e98:	b930      	cbnz	r0, 8014ea8 <mbedtls_rsa_validate_crt+0xf0>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	4668      	mov	r0, sp
 8014e9e:	f7f6 fdc5 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d1c6      	bne.n	8014e34 <mbedtls_rsa_validate_crt+0x7c>
 8014ea6:	e79c      	b.n	8014de2 <mbedtls_rsa_validate_crt+0x2a>
    if( ret != 0 &&
 8014ea8:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 8014eac:	d0c2      	beq.n	8014e34 <mbedtls_rsa_validate_crt+0x7c>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 8014eae:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 8014eb2:	d099      	beq.n	8014de8 <mbedtls_rsa_validate_crt+0x30>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8014eb4:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 8014eb8:	e797      	b.n	8014dea <mbedtls_rsa_validate_crt+0x32>
 8014eba:	bf00      	nop
 8014ebc:	ffffbf80 	.word	0xffffbf80
 8014ec0:	ffffbe00 	.word	0xffffbe00

08014ec4 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 8014ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ec8:	b087      	sub	sp, #28
 8014eca:	e9dd 940e 	ldrd	r9, r4, [sp, #56]	; 0x38
 8014ece:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 8014ed0:	4668      	mov	r0, sp
{
 8014ed2:	460e      	mov	r6, r1
 8014ed4:	4617      	mov	r7, r2
 8014ed6:	4698      	mov	r8, r3
    mbedtls_mpi_init( &K );
 8014ed8:	f7f6 fa99 	bl	800b40e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 8014edc:	a803      	add	r0, sp, #12
 8014ede:	f7f6 fa96 	bl	800b40e <mbedtls_mpi_init>
    /*
     * When generating keys, the strongest security we support aims for an error
     * rate of at most 2^-100 and we are aiming for the same certainty here as
     * well.
     */
    if( f_rng != NULL && P != NULL &&
 8014ee2:	2c00      	cmp	r4, #0
 8014ee4:	f000 808f 	beq.w	8015006 <mbedtls_rsa_validate_params+0x142>
 8014ee8:	b146      	cbz	r6, 8014efc <mbedtls_rsa_validate_params+0x38>
 8014eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014eec:	4622      	mov	r2, r4
 8014eee:	2132      	movs	r1, #50	; 0x32
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f7f7 fe69 	bl	800cbc8 <mbedtls_mpi_is_prime_ext>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	f040 80b7 	bne.w	801506a <mbedtls_rsa_validate_params+0x1a6>
    {
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
        goto cleanup;
    }

    if( f_rng != NULL && Q != NULL &&
 8014efc:	2f00      	cmp	r7, #0
 8014efe:	f000 8085 	beq.w	801500c <mbedtls_rsa_validate_params+0x148>
 8014f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f04:	4622      	mov	r2, r4
 8014f06:	2132      	movs	r1, #50	; 0x32
 8014f08:	4638      	mov	r0, r7
 8014f0a:	f7f7 fe5d 	bl	800cbc8 <mbedtls_mpi_is_prime_ext>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	f040 80ab 	bne.w	801506a <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 8014f14:	2e00      	cmp	r6, #0
 8014f16:	d079      	beq.n	801500c <mbedtls_rsa_validate_params+0x148>
 8014f18:	b1d5      	cbz	r5, 8014f50 <mbedtls_rsa_validate_params+0x8c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 8014f1a:	463a      	mov	r2, r7
 8014f1c:	4631      	mov	r1, r6
 8014f1e:	4668      	mov	r0, sp
 8014f20:	f7f6 feac 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014f24:	4604      	mov	r4, r0
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d173      	bne.n	8015012 <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	4628      	mov	r0, r5
 8014f2e:	f7f6 fd7d 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014f32:	2800      	cmp	r0, #0
 8014f34:	f340 8099 	ble.w	801506a <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 8014f38:	4629      	mov	r1, r5
 8014f3a:	4668      	mov	r0, sp
 8014f3c:	f7f6 fd36 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 8014f40:	2800      	cmp	r0, #0
 8014f42:	f040 8092 	bne.w	801506a <mbedtls_rsa_validate_params+0x1a6>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 8014f46:	f1b8 0f00 	cmp.w	r8, #0
 8014f4a:	d172      	bne.n	8015032 <mbedtls_rsa_validate_params+0x16e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 8014f4c:	2e00      	cmp	r6, #0
 8014f4e:	d05f      	beq.n	8015010 <mbedtls_rsa_validate_params+0x14c>
 8014f50:	2f00      	cmp	r7, #0
 8014f52:	d05d      	beq.n	8015010 <mbedtls_rsa_validate_params+0x14c>
 8014f54:	f1b8 0f00 	cmp.w	r8, #0
 8014f58:	d05a      	beq.n	8015010 <mbedtls_rsa_validate_params+0x14c>
 8014f5a:	f1b9 0f00 	cmp.w	r9, #0
 8014f5e:	d057      	beq.n	8015010 <mbedtls_rsa_validate_params+0x14c>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8014f60:	2101      	movs	r1, #1
 8014f62:	4630      	mov	r0, r6
 8014f64:	f7f6 fd62 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	dd7e      	ble.n	801506a <mbedtls_rsa_validate_params+0x1a6>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 8014f6c:	2101      	movs	r1, #1
 8014f6e:	4638      	mov	r0, r7
 8014f70:	f7f6 fd5c 	bl	800ba2c <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 8014f74:	2800      	cmp	r0, #0
 8014f76:	dd78      	ble.n	801506a <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8014f78:	464a      	mov	r2, r9
 8014f7a:	4641      	mov	r1, r8
 8014f7c:	4668      	mov	r0, sp
 8014f7e:	f7f6 fe7d 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014f82:	4604      	mov	r4, r0
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d144      	bne.n	8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8014f88:	2201      	movs	r2, #1
 8014f8a:	4669      	mov	r1, sp
 8014f8c:	4668      	mov	r0, sp
 8014f8e:	f7f6 fe5f 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014f92:	4604      	mov	r4, r0
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d13c      	bne.n	8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 8014f98:	2201      	movs	r2, #1
 8014f9a:	4631      	mov	r1, r6
 8014f9c:	a803      	add	r0, sp, #12
 8014f9e:	f7f6 fe57 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	bba8      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8014fa6:	aa03      	add	r2, sp, #12
 8014fa8:	4669      	mov	r1, sp
 8014faa:	4668      	mov	r0, sp
 8014fac:	f7f7 f893 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	bb70      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8014fb4:	4601      	mov	r1, r0
 8014fb6:	4668      	mov	r0, sp
 8014fb8:	f7f6 fd38 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d154      	bne.n	801506a <mbedtls_rsa_validate_params+0x1a6>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 8014fc0:	464a      	mov	r2, r9
 8014fc2:	4641      	mov	r1, r8
 8014fc4:	4668      	mov	r0, sp
 8014fc6:	f7f6 fe59 	bl	800bc7c <mbedtls_mpi_mul_mpi>
 8014fca:	4604      	mov	r4, r0
 8014fcc:	bb08      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4669      	mov	r1, sp
 8014fd2:	4668      	mov	r0, sp
 8014fd4:	f7f6 fe3c 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014fd8:	4604      	mov	r4, r0
 8014fda:	b9d0      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 8014fdc:	2201      	movs	r2, #1
 8014fde:	4639      	mov	r1, r7
 8014fe0:	a803      	add	r0, sp, #12
 8014fe2:	f7f6 fe35 	bl	800bc50 <mbedtls_mpi_sub_int>
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	b998      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 8014fea:	aa03      	add	r2, sp, #12
 8014fec:	4669      	mov	r1, sp
 8014fee:	4668      	mov	r0, sp
 8014ff0:	f7f7 f871 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	b960      	cbnz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 8014ff8:	4601      	mov	r1, r0
 8014ffa:	4668      	mov	r0, sp
 8014ffc:	f7f6 fd16 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8015000:	4604      	mov	r4, r0
 8015002:	b130      	cbz	r0, 8015012 <mbedtls_rsa_validate_params+0x14e>
 8015004:	e031      	b.n	801506a <mbedtls_rsa_validate_params+0x1a6>
    if( P != NULL && Q != NULL && N != NULL )
 8015006:	b10e      	cbz	r6, 801500c <mbedtls_rsa_validate_params+0x148>
 8015008:	2f00      	cmp	r7, #0
 801500a:	d185      	bne.n	8014f18 <mbedtls_rsa_validate_params+0x54>
    if( N != NULL && D != NULL && E != NULL )
 801500c:	2d00      	cmp	r5, #0
 801500e:	d19a      	bne.n	8014f46 <mbedtls_rsa_validate_params+0x82>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8015010:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 8015012:	4668      	mov	r0, sp
 8015014:	f7f6 fa01 	bl	800b41a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 8015018:	a803      	add	r0, sp, #12
 801501a:	f7f6 f9fe 	bl	800b41a <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 801501e:	b124      	cbz	r4, 801502a <mbedtls_rsa_validate_params+0x166>
 8015020:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 8015024:	d001      	beq.n	801502a <mbedtls_rsa_validate_params+0x166>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8015026:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
 801502a:	4620      	mov	r0, r4
 801502c:	b007      	add	sp, #28
 801502e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( N != NULL && D != NULL && E != NULL )
 8015032:	f1b9 0f00 	cmp.w	r9, #0
 8015036:	d089      	beq.n	8014f4c <mbedtls_rsa_validate_params+0x88>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 8015038:	2101      	movs	r1, #1
 801503a:	4640      	mov	r0, r8
 801503c:	f7f6 fcf6 	bl	800ba2c <mbedtls_mpi_cmp_int>
 8015040:	2800      	cmp	r0, #0
 8015042:	dd12      	ble.n	801506a <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8015044:	2101      	movs	r1, #1
 8015046:	4648      	mov	r0, r9
 8015048:	f7f6 fcf0 	bl	800ba2c <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801504c:	2800      	cmp	r0, #0
 801504e:	dd0c      	ble.n	801506a <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8015050:	4629      	mov	r1, r5
 8015052:	4640      	mov	r0, r8
 8015054:	f7f6 fcaa 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 8015058:	2800      	cmp	r0, #0
 801505a:	da06      	bge.n	801506a <mbedtls_rsa_validate_params+0x1a6>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 801505c:	4629      	mov	r1, r5
 801505e:	4648      	mov	r0, r9
 8015060:	f7f6 fca4 	bl	800b9ac <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 8015064:	2800      	cmp	r0, #0
 8015066:	f6ff af71 	blt.w	8014f4c <mbedtls_rsa_validate_params+0x88>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801506a:	4c01      	ldr	r4, [pc, #4]	; (8015070 <mbedtls_rsa_validate_params+0x1ac>)
            goto cleanup;
 801506c:	e7d1      	b.n	8015012 <mbedtls_rsa_validate_params+0x14e>
 801506e:	bf00      	nop
 8015070:	ffffbe00 	.word	0xffffbe00

08015074 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 8015074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015078:	4607      	mov	r7, r0
 801507a:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 801507c:	a801      	add	r0, sp, #4
{
 801507e:	460e      	mov	r6, r1
 8015080:	4691      	mov	r9, r2
 8015082:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
    mbedtls_mpi_init( &K );
 8015086:	f7f6 f9c2 	bl	800b40e <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 801508a:	f1ba 0f00 	cmp.w	sl, #0
 801508e:	d105      	bne.n	801509c <mbedtls_rsa_deduce_crt+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 8015090:	f1b8 0f00 	cmp.w	r8, #0
 8015094:	d118      	bne.n	80150c8 <mbedtls_rsa_deduce_crt+0x54>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 8015096:	bb45      	cbnz	r5, 80150ea <mbedtls_rsa_deduce_crt+0x76>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
 8015098:	462c      	mov	r4, r5
 801509a:	e00e      	b.n	80150ba <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 801509c:	2201      	movs	r2, #1
 801509e:	4639      	mov	r1, r7
 80150a0:	a801      	add	r0, sp, #4
 80150a2:	f7f6 fdd5 	bl	800bc50 <mbedtls_mpi_sub_int>
 80150a6:	4604      	mov	r4, r0
 80150a8:	b938      	cbnz	r0, 80150ba <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80150aa:	aa01      	add	r2, sp, #4
 80150ac:	4649      	mov	r1, r9
 80150ae:	4650      	mov	r0, sl
 80150b0:	f7f7 f811 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 80150b4:	4604      	mov	r4, r0
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d0ea      	beq.n	8015090 <mbedtls_rsa_deduce_crt+0x1c>
    mbedtls_mpi_free( &K );
 80150ba:	a801      	add	r0, sp, #4
 80150bc:	f7f6 f9ad 	bl	800b41a <mbedtls_mpi_free>

    return( ret );
}
 80150c0:	4620      	mov	r0, r4
 80150c2:	b004      	add	sp, #16
 80150c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80150c8:	2201      	movs	r2, #1
 80150ca:	4631      	mov	r1, r6
 80150cc:	a801      	add	r0, sp, #4
 80150ce:	f7f6 fdbf 	bl	800bc50 <mbedtls_mpi_sub_int>
 80150d2:	4604      	mov	r4, r0
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d1f0      	bne.n	80150ba <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80150d8:	aa01      	add	r2, sp, #4
 80150da:	4649      	mov	r1, r9
 80150dc:	4640      	mov	r0, r8
 80150de:	f7f6 fffa 	bl	800c0d6 <mbedtls_mpi_mod_mpi>
 80150e2:	4604      	mov	r4, r0
 80150e4:	2800      	cmp	r0, #0
 80150e6:	d0d6      	beq.n	8015096 <mbedtls_rsa_deduce_crt+0x22>
 80150e8:	e7e7      	b.n	80150ba <mbedtls_rsa_deduce_crt+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 80150ea:	463a      	mov	r2, r7
 80150ec:	4631      	mov	r1, r6
 80150ee:	4628      	mov	r0, r5
 80150f0:	f7f7 fc17 	bl	800c922 <mbedtls_mpi_inv_mod>
 80150f4:	4604      	mov	r4, r0
cleanup:
 80150f6:	e7e0      	b.n	80150ba <mbedtls_rsa_deduce_crt+0x46>

080150f8 <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80150f8:	225c      	movs	r2, #92	; 0x5c
 80150fa:	2100      	movs	r1, #0
 80150fc:	f001 bd01 	b.w	8016b02 <memset>

08015100 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8015100:	b110      	cbz	r0, 8015108 <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
 8015102:	215c      	movs	r1, #92	; 0x5c
 8015104:	f7fd b8cc 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 8015108:	4770      	bx	lr

0801510a <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 801510a:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
 801510c:	225c      	movs	r2, #92	; 0x5c
 801510e:	f001 fcd4 	bl	8016aba <memcpy>
}
 8015112:	bd08      	pop	{r3, pc}

08015114 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8015114:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8015116:	4a0a      	ldr	r2, [pc, #40]	; (8015140 <mbedtls_sha1_starts_ret+0x2c>)
 8015118:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 801511a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 801511e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8015120:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8015124:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 8015128:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 801512c:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 801512e:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
    ctx->total[0] = 0;
 8015132:	2000      	movs	r0, #0
    ctx->state[3] = 0x10325476;
 8015134:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8015136:	4a03      	ldr	r2, [pc, #12]	; (8015144 <mbedtls_sha1_starts_ret+0x30>)
 8015138:	619a      	str	r2, [r3, #24]
    ctx->total[1] = 0;
 801513a:	e9c3 0000 	strd	r0, r0, [r3]

    return( 0 );
}
 801513e:	4770      	bx	lr
 8015140:	67452301 	.word	0x67452301
 8015144:	c3d2e1f0 	.word	0xc3d2e1f0

08015148 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8015148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801514c:	680c      	ldr	r4, [r1, #0]
 801514e:	694d      	ldr	r5, [r1, #20]
 8015150:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8015152:	f8d1 e028 	ldr.w	lr, [r1, #40]	; 0x28
 8015156:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 801515a:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801515e:	68ca      	ldr	r2, [r1, #12]
 8015160:	f8d1 a010 	ldr.w	sl, [r1, #16]
 8015164:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8015168:	b097      	sub	sp, #92	; 0x5c
 801516a:	ba23      	rev	r3, r4
 801516c:	9304      	str	r3, [sp, #16]
 801516e:	684b      	ldr	r3, [r1, #4]
 8015170:	9000      	str	r0, [sp, #0]
 8015172:	ba1b      	rev	r3, r3
 8015174:	9305      	str	r3, [sp, #20]
 8015176:	ba2b      	rev	r3, r5
 8015178:	930c      	str	r3, [sp, #48]	; 0x30
 801517a:	698b      	ldr	r3, [r1, #24]
 801517c:	69c8      	ldr	r0, [r1, #28]
 801517e:	ba1b      	rev	r3, r3
 8015180:	930d      	str	r3, [sp, #52]	; 0x34
 8015182:	ba03      	rev	r3, r0
 8015184:	930e      	str	r3, [sp, #56]	; 0x38
 8015186:	ba3b      	rev	r3, r7
 8015188:	9308      	str	r3, [sp, #32]
 801518a:	fa9e f38e 	rev.w	r3, lr
 801518e:	f8d1 e02c 	ldr.w	lr, [r1, #44]	; 0x2c
 8015192:	9309      	str	r3, [sp, #36]	; 0x24
 8015194:	fa9e f38e 	rev.w	r3, lr
 8015198:	930a      	str	r3, [sp, #40]	; 0x28
 801519a:	fa9c f38c 	rev.w	r3, ip
 801519e:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80151a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80151a4:	fa9c f38c 	rev.w	r3, ip
 80151a8:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 80151ac:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 80151ae:	9301      	str	r3, [sp, #4]
 80151b0:	fa9c f38c 	rev.w	r3, ip
 80151b4:	9302      	str	r3, [sp, #8]
 80151b6:	ba3b      	rev	r3, r7
 80151b8:	9303      	str	r3, [sp, #12]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
 80151ba:	9b00      	ldr	r3, [sp, #0]
 80151bc:	689b      	ldr	r3, [r3, #8]
 80151be:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 80151c0:	9b00      	ldr	r3, [sp, #0]
 80151c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80151c8:	9b00      	ldr	r3, [sp, #0]
 80151ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80151cc:	691b      	ldr	r3, [r3, #16]
 80151ce:	9311      	str	r3, [sp, #68]	; 0x44
    D = ctx->state[3];
 80151d0:	9b00      	ldr	r3, [sp, #0]
 80151d2:	695b      	ldr	r3, [r3, #20]
 80151d4:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 80151d6:	9b00      	ldr	r3, [sp, #0]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80151d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    E = ctx->state[4];
 80151da:	699b      	ldr	r3, [r3, #24]
 80151dc:	9315      	str	r3, [sp, #84]	; 0x54
    P( A, B, C, D, E, W[0]  );
 80151de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151e0:	ea83 0c01 	eor.w	ip, r3, r1
 80151e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151e6:	ea0c 0c03 	and.w	ip, ip, r3
 80151ea:	ea8c 0c01 	eor.w	ip, ip, r1
 80151ee:	4be0      	ldr	r3, [pc, #896]	; (8015570 <mbedtls_internal_sha1_process+0x428>)
 80151f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80151f2:	4419      	add	r1, r3
 80151f4:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80151f8:	448c      	add	ip, r1
 80151fa:	9904      	ldr	r1, [sp, #16]
 80151fc:	448c      	add	ip, r1
 80151fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015200:	ea4f 05b1 	mov.w	r5, r1, ror #2
    P( E, A, B, C, D, W[1]  );
 8015204:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015206:	4069      	eors	r1, r5
 8015208:	4001      	ands	r1, r0
 801520a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801520c:	4041      	eors	r1, r0
 801520e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015210:	4418      	add	r0, r3
 8015212:	4401      	add	r1, r0
 8015214:	9805      	ldr	r0, [sp, #20]
 8015216:	4401      	add	r1, r0
 8015218:	9812      	ldr	r0, [sp, #72]	; 0x48
 801521a:	ea4f 0eb0 	mov.w	lr, r0, ror #2
 801521e:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( D, E, A, B, C, W[2]  );
 8015220:	ea85 070e 	eor.w	r7, r5, lr
 8015224:	fa99 f989 	rev.w	r9, r9
 8015228:	ea07 070c 	and.w	r7, r7, ip
 801522c:	4418      	add	r0, r3
    P( E, A, B, C, D, W[1]  );
 801522e:	eb01 61fc 	add.w	r1, r1, ip, ror #27
 8015232:	4448      	add	r0, r9
    P( D, E, A, B, C, W[2]  );
 8015234:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8015238:	406f      	eors	r7, r5
 801523a:	4407      	add	r7, r0
    P( C, D, E, A, B, W[3]  );
 801523c:	ea8e 000c 	eor.w	r0, lr, ip
 8015240:	ba12      	rev	r2, r2
 8015242:	4008      	ands	r0, r1
 8015244:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
 8015246:	eb07 67f1 	add.w	r7, r7, r1, ror #27
 801524a:	4415      	add	r5, r2
    P( C, D, E, A, B, W[3]  );
 801524c:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8015250:	ea80 000e 	eor.w	r0, r0, lr
    P( B, C, D, E, A, W[4]  );
 8015254:	ea8c 0601 	eor.w	r6, ip, r1
 8015258:	4428      	add	r0, r5
 801525a:	fa9a fa8a 	rev.w	sl, sl
    P( C, D, E, A, B, W[3]  );
 801525e:	eb00 60f7 	add.w	r0, r0, r7, ror #27
    P( B, C, D, E, A, W[4]  );
 8015262:	403e      	ands	r6, r7
 8015264:	449e      	add	lr, r3
 8015266:	ea4f 07b7 	mov.w	r7, r7, ror #2
 801526a:	44d6      	add	lr, sl
    P( A, B, C, D, E, W[5]  );
 801526c:	ea81 0507 	eor.w	r5, r1, r7
    P( B, C, D, E, A, W[4]  );
 8015270:	ea86 060c 	eor.w	r6, r6, ip
 8015274:	4476      	add	r6, lr
    P( A, B, C, D, E, W[5]  );
 8015276:	4005      	ands	r5, r0
 8015278:	eb04 0e03 	add.w	lr, r4, r3
    P( B, C, D, E, A, W[4]  );
 801527c:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8015280:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( A, B, C, D, E, W[5]  );
 8015282:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8015286:	44f4      	add	ip, lr
 8015288:	404d      	eors	r5, r1
 801528a:	4465      	add	r5, ip
    P( E, A, B, C, D, W[6]  );
 801528c:	ea87 0c00 	eor.w	ip, r7, r0
 8015290:	eb04 0e03 	add.w	lr, r4, r3
 8015294:	ea0c 0c06 	and.w	ip, ip, r6
 8015298:	4471      	add	r1, lr
 801529a:	ea8c 0c07 	eor.w	ip, ip, r7
    P( A, B, C, D, E, W[5]  );
 801529e:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80152a2:	448c      	add	ip, r1
    P( E, A, B, C, D, W[6]  );
 80152a4:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80152a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80152aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
 80152ac:	ea80 0e06 	eor.w	lr, r0, r6
    P( E, A, B, C, D, W[6]  );
 80152b0:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
 80152b4:	4419      	add	r1, r3
    P( D, E, A, B, C, W[7]  );
 80152b6:	ea0e 0e05 	and.w	lr, lr, r5
 80152ba:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80152be:	fa98 f888 	rev.w	r8, r8
 80152c2:	440f      	add	r7, r1
 80152c4:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
 80152c8:	ea86 0105 	eor.w	r1, r6, r5
 80152cc:	44be      	add	lr, r7
 80152ce:	ea01 010c 	and.w	r1, r1, ip
 80152d2:	eb08 0703 	add.w	r7, r8, r3
 80152d6:	4438      	add	r0, r7
 80152d8:	4071      	eors	r1, r6
    P( D, E, A, B, C, W[7]  );
 80152da:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
 80152de:	4401      	add	r1, r0
    P( C, D, E, A, B, W[8]  );
 80152e0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 80152e4:	9808      	ldr	r0, [sp, #32]
    P( B, C, D, E, A, W[9]  );
 80152e6:	ea85 070c 	eor.w	r7, r5, ip
 80152ea:	4418      	add	r0, r3
 80152ec:	ea07 070e 	and.w	r7, r7, lr
    P( C, D, E, A, B, W[8]  );
 80152f0:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 80152f4:	4406      	add	r6, r0
    P( B, C, D, E, A, W[9]  );
 80152f6:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80152fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152fc:	406f      	eors	r7, r5
    P( A, B, C, D, E, W[10] );
 80152fe:	ea8c 0b0e 	eor.w	fp, ip, lr
 8015302:	4437      	add	r7, r6
    P( B, C, D, E, A, W[9]  );
 8015304:	eb07 67f1 	add.w	r7, r7, r1, ror #27
 8015308:	4418      	add	r0, r3
    P( A, B, C, D, E, W[10] );
 801530a:	ea0b 0b01 	and.w	fp, fp, r1
 801530e:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8015312:	4405      	add	r5, r0
 8015314:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, A, B, C, D, W[11] );
 8015318:	ea8e 0001 	eor.w	r0, lr, r1
 801531c:	44ab      	add	fp, r5
 801531e:	4038      	ands	r0, r7
 8015320:	18e5      	adds	r5, r4, r3
    P( A, B, C, D, E, W[10] );
 8015322:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
 8015326:	44ac      	add	ip, r5
    P( E, A, B, C, D, W[11] );
 8015328:	ea4f 07b7 	mov.w	r7, r7, ror #2
 801532c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801532e:	ea80 000e 	eor.w	r0, r0, lr
 8015332:	4460      	add	r0, ip
    P( D, E, A, B, C, W[12] );
 8015334:	ea81 0c07 	eor.w	ip, r1, r7
 8015338:	18e5      	adds	r5, r4, r3
 801533a:	ea0c 0c0b 	and.w	ip, ip, fp
 801533e:	9c01      	ldr	r4, [sp, #4]
    P( E, A, B, C, D, W[11] );
 8015340:	eb00 60fb 	add.w	r0, r0, fp, ror #27
 8015344:	44ae      	add	lr, r5
    P( D, E, A, B, C, W[12] );
 8015346:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 801534a:	ea8c 0c01 	eor.w	ip, ip, r1
 801534e:	44f4      	add	ip, lr
    P( C, D, E, A, B, W[13] );
 8015350:	ea87 0e0b 	eor.w	lr, r7, fp
 8015354:	18e5      	adds	r5, r4, r3
 8015356:	ea0e 0e00 	and.w	lr, lr, r0
 801535a:	4429      	add	r1, r5
 801535c:	ea8e 0e07 	eor.w	lr, lr, r7
 8015360:	448e      	add	lr, r1
 8015362:	9902      	ldr	r1, [sp, #8]
 8015364:	4419      	add	r1, r3
    P( D, E, A, B, C, W[12] );
 8015366:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
 801536a:	440f      	add	r7, r1
    P( C, D, E, A, B, W[13] );
 801536c:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8015370:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, W[14] );
 8015372:	ea8b 0600 	eor.w	r6, fp, r0
 8015376:	4419      	add	r1, r3
 8015378:	ea06 060c 	and.w	r6, r6, ip
 801537c:	ea86 060b 	eor.w	r6, r6, fp
 8015380:	448b      	add	fp, r1
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8015382:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[13] );
 8015384:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
 8015388:	443e      	add	r6, r7
    P( B, C, D, E, A, W[14] );
 801538a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( E, A, B, C, D, R(16) );
 801538e:	ea81 0709 	eor.w	r7, r1, r9
    P( A, B, C, D, E, W[15] );
 8015392:	ea80 050c 	eor.w	r5, r0, ip
    P( E, A, B, C, D, R(16) );
 8015396:	ea87 0708 	eor.w	r7, r7, r8
    P( B, C, D, E, A, W[14] );
 801539a:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( E, A, B, C, D, R(16) );
 801539e:	4067      	eors	r7, r4
    P( A, B, C, D, E, W[15] );
 80153a0:	ea05 050e 	and.w	r5, r5, lr
 80153a4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(16) );
 80153a8:	ea4f 71f7 	mov.w	r1, r7, ror #31
 80153ac:	ea8c 040e 	eor.w	r4, ip, lr
 80153b0:	9104      	str	r1, [sp, #16]
 80153b2:	4034      	ands	r4, r6
 80153b4:	4419      	add	r1, r3
    P( A, B, C, D, E, W[15] );
 80153b6:	4045      	eors	r5, r0
    P( E, A, B, C, D, R(16) );
 80153b8:	ea84 040c 	eor.w	r4, r4, ip
 80153bc:	4408      	add	r0, r1
    P( D, E, A, B, C, R(17) );
 80153be:	9905      	ldr	r1, [sp, #20]
 80153c0:	4404      	add	r4, r0
 80153c2:	9808      	ldr	r0, [sp, #32]
 80153c4:	4051      	eors	r1, r2
 80153c6:	4041      	eors	r1, r0
 80153c8:	9802      	ldr	r0, [sp, #8]
 80153ca:	4041      	eors	r1, r0
 80153cc:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80153d0:	9105      	str	r1, [sp, #20]
 80153d2:	4419      	add	r1, r3
 80153d4:	448c      	add	ip, r1
    P( C, D, E, A, B, R(18) );
 80153d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153d8:	ea89 090a 	eor.w	r9, r9, sl
 80153dc:	ea89 0901 	eor.w	r9, r9, r1
 80153e0:	9903      	ldr	r1, [sp, #12]
 80153e2:	ea89 0901 	eor.w	r9, r9, r1
 80153e6:	ea4f 71f9 	mov.w	r1, r9, ror #31
 80153ea:	9106      	str	r1, [sp, #24]
 80153ec:	445d      	add	r5, fp
    P( A, B, C, D, E, W[15] );
 80153ee:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 80153f2:	9f06      	ldr	r7, [sp, #24]
    P( E, A, B, C, D, R(16) );
 80153f4:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( D, E, A, B, C, R(17) );
 80153f8:	ea8e 0006 	eor.w	r0, lr, r6
 80153fc:	441f      	add	r7, r3
 80153fe:	4028      	ands	r0, r5
 8015400:	ea80 000e 	eor.w	r0, r0, lr
 8015404:	44be      	add	lr, r7
    P( B, C, D, E, A, R(19) );
 8015406:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015408:	407a      	eors	r2, r7
 801540a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(16) );
 801540c:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( B, C, D, E, A, R(19) );
 8015410:	407a      	eors	r2, r7
    P( D, E, A, B, C, R(17) );
 8015412:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(19) );
 8015416:	9f04      	ldr	r7, [sp, #16]
    P( C, D, E, A, B, R(18) );
 8015418:	ea86 0105 	eor.w	r1, r6, r5
 801541c:	4460      	add	r0, ip
    P( D, E, A, B, C, R(17) );
 801541e:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( C, D, E, A, B, R(18) );
 8015422:	4021      	ands	r1, r4
    P( B, C, D, E, A, R(19) );
 8015424:	407a      	eors	r2, r7
    P( C, D, E, A, B, R(18) );
 8015426:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(19) );
 801542a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 801542e:	ea85 0704 	eor.w	r7, r5, r4
 8015432:	4007      	ands	r7, r0
 8015434:	4413      	add	r3, r2
 8015436:	4433      	add	r3, r6
 8015438:	406f      	eors	r7, r5
 801543a:	441f      	add	r7, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 801543c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 801543e:	4071      	eors	r1, r6
    P( A, B, C, D, E, R(20) );
 8015440:	ea8a 0603 	eor.w	r6, sl, r3
 8015444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015446:	405e      	eors	r6, r3
 8015448:	9b05      	ldr	r3, [sp, #20]
 801544a:	405e      	eors	r6, r3
 801544c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8015450:	9307      	str	r3, [sp, #28]
 8015452:	9e07      	ldr	r6, [sp, #28]
 8015454:	4b47      	ldr	r3, [pc, #284]	; (8015574 <mbedtls_internal_sha1_process+0x42c>)
 8015456:	4471      	add	r1, lr
    P( C, D, E, A, B, R(18) );
 8015458:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( B, C, D, E, A, R(19) );
 801545c:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8015460:	eb06 0c03 	add.w	ip, r6, r3
    P( A, B, C, D, E, R(20) );
 8015464:	ea84 0b00 	eor.w	fp, r4, r0
 8015468:	4465      	add	r5, ip
 801546a:	ea8b 0b01 	eor.w	fp, fp, r1
 801546e:	44ab      	add	fp, r5
    P( E, A, B, C, D, R(21) );
 8015470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015472:	462e      	mov	r6, r5
 8015474:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015476:	4075      	eors	r5, r6
 8015478:	9e01      	ldr	r6, [sp, #4]
 801547a:	4075      	eors	r5, r6
 801547c:	9e06      	ldr	r6, [sp, #24]
 801547e:	4075      	eors	r5, r6
 8015480:	ea4f 75f5 	mov.w	r5, r5, ror #31
    P( B, C, D, E, A, R(19) );
 8015484:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( A, B, C, D, E, R(20) );
 8015488:	ea4f 01b1 	mov.w	r1, r1, ror #2
 801548c:	eb05 0c03 	add.w	ip, r5, r3
    P( E, A, B, C, D, R(21) );
 8015490:	ea80 0a01 	eor.w	sl, r0, r1
 8015494:	4464      	add	r4, ip
 8015496:	ea8a 0a07 	eor.w	sl, sl, r7
 801549a:	44a2      	add	sl, r4
    P( D, E, A, B, C, R(22) );
 801549c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801549e:	9e02      	ldr	r6, [sp, #8]
 80154a0:	ea84 0408 	eor.w	r4, r4, r8
 80154a4:	4074      	eors	r4, r6
 80154a6:	4054      	eors	r4, r2
 80154a8:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( A, B, C, D, E, R(20) );
 80154ac:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( E, A, B, C, D, R(21) );
 80154b0:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80154b4:	eb04 0e03 	add.w	lr, r4, r3
    P( D, E, A, B, C, R(22) );
 80154b8:	ea81 0c07 	eor.w	ip, r1, r7
 80154bc:	4470      	add	r0, lr
 80154be:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(23) );
 80154c2:	9e08      	ldr	r6, [sp, #32]
 80154c4:	4484      	add	ip, r0
 80154c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80154c8:	4070      	eors	r0, r6
 80154ca:	9e03      	ldr	r6, [sp, #12]
 80154cc:	4070      	eors	r0, r6
 80154ce:	9e07      	ldr	r6, [sp, #28]
 80154d0:	4070      	eors	r0, r6
 80154d2:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( E, A, B, C, D, R(21) );
 80154d6:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( D, E, A, B, C, R(22) );
 80154da:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80154de:	eb00 0e03 	add.w	lr, r0, r3
    P( C, D, E, A, B, R(23) );
 80154e2:	ea87 090b 	eor.w	r9, r7, fp
 80154e6:	4471      	add	r1, lr
 80154e8:	ea89 090a 	eor.w	r9, r9, sl
 80154ec:	4489      	add	r9, r1
    P( B, C, D, E, A, R(24) );
 80154ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154f0:	9e04      	ldr	r6, [sp, #16]
 80154f2:	ea88 0101 	eor.w	r1, r8, r1
 80154f6:	4071      	eors	r1, r6
 80154f8:	4069      	eors	r1, r5
 80154fa:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( D, E, A, B, C, R(22) );
 80154fe:	eb0c 6cfa 	add.w	ip, ip, sl, ror #27
    P( C, D, E, A, B, R(23) );
 8015502:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8015506:	eb01 0e03 	add.w	lr, r1, r3
    P( B, C, D, E, A, R(24) );
 801550a:	ea8b 080a 	eor.w	r8, fp, sl
 801550e:	4477      	add	r7, lr
 8015510:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(25) );
 8015514:	9e08      	ldr	r6, [sp, #32]
 8015516:	44b8      	add	r8, r7
 8015518:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801551a:	4077      	eors	r7, r6
 801551c:	9e05      	ldr	r6, [sp, #20]
 801551e:	4077      	eors	r7, r6
 8015520:	4067      	eors	r7, r4
 8015522:	ea4f 76f7 	mov.w	r6, r7, ror #31
 8015526:	9608      	str	r6, [sp, #32]
 8015528:	eb06 0e03 	add.w	lr, r6, r3
    P( E, A, B, C, D, R(26) );
 801552c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801552e:	44f3      	add	fp, lr
 8015530:	46b6      	mov	lr, r6
 8015532:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015534:	ea8e 0e06 	eor.w	lr, lr, r6
 8015538:	9e06      	ldr	r6, [sp, #24]
 801553a:	ea8e 0e06 	eor.w	lr, lr, r6
 801553e:	ea8e 0e00 	eor.w	lr, lr, r0
 8015542:	ea4f 76fe 	mov.w	r6, lr, ror #31
 8015546:	9609      	str	r6, [sp, #36]	; 0x24
 8015548:	eb06 0e03 	add.w	lr, r6, r3
    P( D, E, A, B, C, R(27) );
 801554c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(23) );
 801554e:	eb09 69fc 	add.w	r9, r9, ip, ror #27
    P( B, C, D, E, A, R(24) );
 8015552:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(25) );
 8015556:	ea8a 070c 	eor.w	r7, sl, ip
 801555a:	44f2      	add	sl, lr
    P( D, E, A, B, C, R(27) );
 801555c:	46b6      	mov	lr, r6
 801555e:	9e01      	ldr	r6, [sp, #4]
 8015560:	ea8e 0e06 	eor.w	lr, lr, r6
    P( B, C, D, E, A, R(24) );
 8015564:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( A, B, C, D, E, R(25) );
 8015568:	ea87 0709 	eor.w	r7, r7, r9
 801556c:	e004      	b.n	8015578 <mbedtls_internal_sha1_process+0x430>
 801556e:	bf00      	nop
 8015570:	5a827999 	.word	0x5a827999
 8015574:	6ed9eba1 	.word	0x6ed9eba1
    P( D, E, A, B, C, R(27) );
 8015578:	ea8e 0e02 	eor.w	lr, lr, r2
    P( A, B, C, D, E, R(25) );
 801557c:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(27) );
 8015580:	ea8e 0e01 	eor.w	lr, lr, r1
 8015584:	445f      	add	r7, fp
    P( E, A, B, C, D, R(26) );
 8015586:	ea8c 0b09 	eor.w	fp, ip, r9
    P( A, B, C, D, E, R(25) );
 801558a:	eb07 67f8 	add.w	r7, r7, r8, ror #27
    P( D, E, A, B, C, R(27) );
 801558e:	ea4f 76fe 	mov.w	r6, lr, ror #31
    P( E, A, B, C, D, R(26) );
 8015592:	ea8b 0b08 	eor.w	fp, fp, r8
 8015596:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(27) );
 801559a:	960a      	str	r6, [sp, #40]	; 0x28
 801559c:	eb06 0e03 	add.w	lr, r6, r3
 80155a0:	44d3      	add	fp, sl
    P( C, D, E, A, B, R(28) );
 80155a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(27) );
 80155a4:	ea89 0a08 	eor.w	sl, r9, r8
 80155a8:	44f4      	add	ip, lr
 80155aa:	ea8a 0a07 	eor.w	sl, sl, r7
 80155ae:	44e2      	add	sl, ip
    P( C, D, E, A, B, R(28) );
 80155b0:	46b4      	mov	ip, r6
 80155b2:	9e02      	ldr	r6, [sp, #8]
 80155b4:	ea8c 0c06 	eor.w	ip, ip, r6
 80155b8:	9e07      	ldr	r6, [sp, #28]
 80155ba:	ea8c 0c06 	eor.w	ip, ip, r6
 80155be:	9e08      	ldr	r6, [sp, #32]
 80155c0:	ea8c 0c06 	eor.w	ip, ip, r6
    P( E, A, B, C, D, R(26) );
 80155c4:	eb0b 6bf7 	add.w	fp, fp, r7, ror #27
    P( C, D, E, A, B, R(28) );
 80155c8:	ea4f 76fc 	mov.w	r6, ip, ror #31
    P( D, E, A, B, C, R(27) );
 80155cc:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(28) );
 80155d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80155d2:	eb06 0e03 	add.w	lr, r6, r3
 80155d6:	ea88 0c07 	eor.w	ip, r8, r7
    P( B, C, D, E, A, R(29) );
 80155da:	9e01      	ldr	r6, [sp, #4]
    P( C, D, E, A, B, R(28) );
 80155dc:	ea8c 0c0b 	eor.w	ip, ip, fp
 80155e0:	44f1      	add	r9, lr
 80155e2:	44e1      	add	r9, ip
    P( B, C, D, E, A, R(29) );
 80155e4:	46b4      	mov	ip, r6
 80155e6:	9e03      	ldr	r6, [sp, #12]
 80155e8:	ea8c 0c06 	eor.w	ip, ip, r6
 80155ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80155ee:	ea8c 0c05 	eor.w	ip, ip, r5
 80155f2:	ea8c 0c06 	eor.w	ip, ip, r6
 80155f6:	ea4f 76fc 	mov.w	r6, ip, ror #31
 80155fa:	9601      	str	r6, [sp, #4]
 80155fc:	eb06 0c03 	add.w	ip, r6, r3
    P( A, B, C, D, E, R(30) );
 8015600:	9e02      	ldr	r6, [sp, #8]
 8015602:	44e0      	add	r8, ip
 8015604:	46b4      	mov	ip, r6
 8015606:	9e04      	ldr	r6, [sp, #16]
 8015608:	ea8c 0c06 	eor.w	ip, ip, r6
 801560c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
 801560e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( A, B, C, D, E, R(30) );
 8015612:	ea8c 0c04 	eor.w	ip, ip, r4
    P( C, D, E, A, B, R(28) );
 8015616:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(29) );
 801561a:	ea87 0e0b 	eor.w	lr, r7, fp
    P( A, B, C, D, E, R(30) );
 801561e:	ea8c 0c06 	eor.w	ip, ip, r6
    P( C, D, E, A, B, R(28) );
 8015622:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( A, B, C, D, E, R(30) );
 8015626:	ea4f 76fc 	mov.w	r6, ip, ror #31
    P( B, C, D, E, A, R(29) );
 801562a:	ea8e 0e0a 	eor.w	lr, lr, sl
 801562e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8015632:	eb06 0c03 	add.w	ip, r6, r3
 8015636:	44c6      	add	lr, r8
    P( A, B, C, D, E, R(30) );
 8015638:	ea8b 080a 	eor.w	r8, fp, sl
 801563c:	4467      	add	r7, ip
 801563e:	ea88 0809 	eor.w	r8, r8, r9
 8015642:	9602      	str	r6, [sp, #8]
 8015644:	44b8      	add	r8, r7
    P( E, A, B, C, D, R(31) );
 8015646:	9e03      	ldr	r6, [sp, #12]
 8015648:	9f05      	ldr	r7, [sp, #20]
 801564a:	4077      	eors	r7, r6
 801564c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801564e:	4047      	eors	r7, r0
 8015650:	4077      	eors	r7, r6
 8015652:	ea4f 76f7 	mov.w	r6, r7, ror #31
 8015656:	18f7      	adds	r7, r6, r3
 8015658:	9603      	str	r6, [sp, #12]
 801565a:	44bb      	add	fp, r7
    P( D, E, A, B, C, R(32) );
 801565c:	9e04      	ldr	r6, [sp, #16]
 801565e:	9f06      	ldr	r7, [sp, #24]
 8015660:	4077      	eors	r7, r6
 8015662:	9e01      	ldr	r6, [sp, #4]
    P( B, C, D, E, A, R(29) );
 8015664:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    P( D, E, A, B, C, R(32) );
 8015668:	404f      	eors	r7, r1
    P( A, B, C, D, E, R(30) );
 801566a:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(31) );
 801566e:	ea8a 0c09 	eor.w	ip, sl, r9
    P( D, E, A, B, C, R(32) );
 8015672:	4077      	eors	r7, r6
    P( A, B, C, D, E, R(30) );
 8015674:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( D, E, A, B, C, R(32) );
 8015678:	ea4f 76f7 	mov.w	r6, r7, ror #31
    P( E, A, B, C, D, R(31) );
 801567c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8015680:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(32) );
 8015684:	ea89 070e 	eor.w	r7, r9, lr
 8015688:	44dc      	add	ip, fp
 801568a:	eb06 0b03 	add.w	fp, r6, r3
 801568e:	44da      	add	sl, fp
 8015690:	ea87 0708 	eor.w	r7, r7, r8
    P( E, A, B, C, D, R(31) );
 8015694:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
 8015698:	4457      	add	r7, sl
    P( D, E, A, B, C, R(32) );
 801569a:	9604      	str	r6, [sp, #16]
 801569c:	eb07 66fc 	add.w	r6, r7, ip, ror #27
 80156a0:	960c      	str	r6, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(33) );
 80156a2:	9e05      	ldr	r6, [sp, #20]
 80156a4:	ea86 0a02 	eor.w	sl, r6, r2
 80156a8:	9e08      	ldr	r6, [sp, #32]
 80156aa:	ea8a 0a06 	eor.w	sl, sl, r6
 80156ae:	9e02      	ldr	r6, [sp, #8]
 80156b0:	ea8a 0a06 	eor.w	sl, sl, r6
    P( D, E, A, B, C, R(32) );
 80156b4:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(33) );
 80156b8:	ea4f 76fa 	mov.w	r6, sl, ror #31
 80156bc:	eb06 0a03 	add.w	sl, r6, r3
 80156c0:	ea8e 0b08 	eor.w	fp, lr, r8
 80156c4:	9605      	str	r6, [sp, #20]
 80156c6:	44d1      	add	r9, sl
 80156c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80156ca:	ea8b 0b0c 	eor.w	fp, fp, ip
 80156ce:	44cb      	add	fp, r9
 80156d0:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(34) );
 80156d4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80156d8:	ea86 0907 	eor.w	r9, r6, r7
 80156dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80156de:	ea89 0906 	eor.w	r9, r9, r6
 80156e2:	9e03      	ldr	r6, [sp, #12]
 80156e4:	ea89 0906 	eor.w	r9, r9, r6
 80156e8:	ea4f 76f9 	mov.w	r6, r9, ror #31
 80156ec:	9606      	str	r6, [sp, #24]
    P( C, D, E, A, B, R(33) );
 80156ee:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(34) );
 80156f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80156f4:	ea88 0a0c 	eor.w	sl, r8, ip
 80156f8:	ea8a 0a06 	eor.w	sl, sl, r6
 80156fc:	9e06      	ldr	r6, [sp, #24]
 80156fe:	eb06 0903 	add.w	r9, r6, r3
 8015702:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015704:	ea4f 07b6 	mov.w	r7, r6, ror #2
    P( A, B, C, D, E, R(35) );
 8015708:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801570a:	406a      	eors	r2, r5
 801570c:	4072      	eors	r2, r6
 801570e:	9e04      	ldr	r6, [sp, #16]
 8015710:	4072      	eors	r2, r6
 8015712:	44ce      	add	lr, r9
 8015714:	ea4f 79f2 	mov.w	r9, r2, ror #31
 8015718:	44f2      	add	sl, lr
 801571a:	ea8c 0207 	eor.w	r2, ip, r7
 801571e:	eb09 0e03 	add.w	lr, r9, r3
    P( E, A, B, C, D, R(36) );
 8015722:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(35) );
 8015724:	ea82 020b 	eor.w	r2, r2, fp
 8015728:	44f0      	add	r8, lr
 801572a:	4490      	add	r8, r2
    P( E, A, B, C, D, R(36) );
 801572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801572e:	4066      	eors	r6, r4
 8015730:	4056      	eors	r6, r2
 8015732:	9a05      	ldr	r2, [sp, #20]
 8015734:	4056      	eors	r6, r2
 8015736:	ea4f 72f6 	mov.w	r2, r6, ror #31
 801573a:	9207      	str	r2, [sp, #28]
 801573c:	eb02 0e03 	add.w	lr, r2, r3
    P( D, E, A, B, C, R(37) );
 8015740:	9a01      	ldr	r2, [sp, #4]
 8015742:	4045      	eors	r5, r0
    P( B, C, D, E, A, R(34) );
 8015744:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( D, E, A, B, C, R(37) );
 8015748:	4055      	eors	r5, r2
    P( A, B, C, D, E, R(35) );
 801574a:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(37) );
 801574e:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, R(36) );
 8015750:	ea87 060b 	eor.w	r6, r7, fp
 8015754:	ea86 060a 	eor.w	r6, r6, sl
 8015758:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
 801575a:	4055      	eors	r5, r2
    P( A, B, C, D, E, R(35) );
 801575c:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( D, E, A, B, C, R(37) );
 8015760:	ea4f 72f5 	mov.w	r2, r5, ror #31
    P( E, A, B, C, D, R(36) );
 8015764:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8015768:	44b4      	add	ip, r6
 801576a:	eb0c 66f8 	add.w	r6, ip, r8, ror #27
    P( D, E, A, B, C, R(37) );
 801576e:	ea8b 050a 	eor.w	r5, fp, sl
 8015772:	eb02 0c03 	add.w	ip, r2, r3
 8015776:	ea85 0508 	eor.w	r5, r5, r8
 801577a:	4467      	add	r7, ip
 801577c:	442f      	add	r7, r5
 801577e:	eb07 65f6 	add.w	r5, r7, r6, ror #27
    P( C, D, E, A, B, R(38) );
 8015782:	9f02      	ldr	r7, [sp, #8]
    P( D, E, A, B, C, R(37) );
 8015784:	920c      	str	r2, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(38) );
 8015786:	404c      	eors	r4, r1
 8015788:	407c      	eors	r4, r7
 801578a:	ea84 0409 	eor.w	r4, r4, r9
 801578e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8015792:	940d      	str	r4, [sp, #52]	; 0x34
 8015794:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015796:	441f      	add	r7, r3
 8015798:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(39) );
 801579a:	9f08      	ldr	r7, [sp, #32]
 801579c:	4078      	eors	r0, r7
 801579e:	9f03      	ldr	r7, [sp, #12]
 80157a0:	4078      	eors	r0, r7
 80157a2:	9f07      	ldr	r7, [sp, #28]
 80157a4:	4078      	eors	r0, r7
 80157a6:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80157aa:	900e      	str	r0, [sp, #56]	; 0x38
 80157ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(37) );
 80157ae:	ea4f 02b8 	mov.w	r2, r8, ror #2
 80157b2:	443b      	add	r3, r7
    P( C, D, E, A, B, R(38) );
 80157b4:	ea8a 0402 	eor.w	r4, sl, r2
 80157b8:	449a      	add	sl, r3
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80157ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157bc:	4059      	eors	r1, r3
 80157be:	9b04      	ldr	r3, [sp, #16]
 80157c0:	4059      	eors	r1, r3
 80157c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157c4:	4059      	eors	r1, r3
 80157c6:	ea4f 73f1 	mov.w	r3, r1, ror #31
 80157ca:	930f      	str	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(38) );
 80157cc:	4074      	eors	r4, r6
 80157ce:	4bd7      	ldr	r3, [pc, #860]	; (8015b2c <mbedtls_internal_sha1_process+0x9e4>)
 80157d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80157d2:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(39) );
 80157d6:	ea82 0006 	eor.w	r0, r2, r6
 80157da:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(38) );
 80157dc:	eb0b 64f5 	add.w	r4, fp, r5, ror #27
    P( B, C, D, E, A, R(39) );
 80157e0:	4068      	eors	r0, r5
 80157e2:	4419      	add	r1, r3
 80157e4:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80157e8:	4482      	add	sl, r0
 80157ea:	440a      	add	r2, r1
    P( A, B, C, D, E, R(40) );
 80157ec:	ea44 0105 	orr.w	r1, r4, r5
    P( B, C, D, E, A, R(39) );
 80157f0:	eb0a 60f4 	add.w	r0, sl, r4, ror #27
    P( A, B, C, D, E, R(40) );
 80157f4:	ea04 0705 	and.w	r7, r4, r5
 80157f8:	4031      	ands	r1, r6
 80157fa:	4339      	orrs	r1, r7
 80157fc:	eb02 62f0 	add.w	r2, r2, r0, ror #27
 8015800:	440a      	add	r2, r1
    P( E, A, B, C, D, R(41) );
 8015802:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015804:	9908      	ldr	r1, [sp, #32]
 8015806:	404f      	eors	r7, r1
 8015808:	9905      	ldr	r1, [sp, #20]
 801580a:	404f      	eors	r7, r1
 801580c:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(40) );
 801580e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
 8015812:	404f      	eors	r7, r1
 8015814:	ea40 0c04 	orr.w	ip, r0, r4
 8015818:	ea4f 71f7 	mov.w	r1, r7, ror #31
 801581c:	9108      	str	r1, [sp, #32]
 801581e:	ea0c 0105 	and.w	r1, ip, r5
 8015822:	ea00 0c04 	and.w	ip, r0, r4
 8015826:	ea41 0c0c 	orr.w	ip, r1, ip
 801582a:	9908      	ldr	r1, [sp, #32]
 801582c:	4419      	add	r1, r3
 801582e:	440e      	add	r6, r1
 8015830:	4466      	add	r6, ip
 8015832:	eb06 6cf2 	add.w	ip, r6, r2, ror #27
    P( D, E, A, B, C, R(42) );
 8015836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015838:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801583a:	ea81 0e06 	eor.w	lr, r1, r6
 801583e:	9906      	ldr	r1, [sp, #24]
    P( C, D, E, A, B, R(43) );
 8015840:	9e01      	ldr	r6, [sp, #4]
    P( D, E, A, B, C, R(42) );
 8015842:	ea8e 0e01 	eor.w	lr, lr, r1
 8015846:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015848:	ea8e 0e01 	eor.w	lr, lr, r1
 801584c:	ea4f 71fe 	mov.w	r1, lr, ror #31
    P( E, A, B, C, D, R(41) );
 8015850:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8015854:	18cf      	adds	r7, r1, r3
 8015856:	443d      	add	r5, r7
    P( D, E, A, B, C, R(42) );
 8015858:	ea42 0700 	orr.w	r7, r2, r0
 801585c:	9109      	str	r1, [sp, #36]	; 0x24
 801585e:	4027      	ands	r7, r4
 8015860:	ea02 0100 	and.w	r1, r2, r0
 8015864:	430f      	orrs	r7, r1
    P( C, D, E, A, B, R(43) );
 8015866:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015868:	ea81 0e06 	eor.w	lr, r1, r6
 801586c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801586e:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(42) );
 8015872:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(43) );
 8015876:	ea8e 0e01 	eor.w	lr, lr, r1
 801587a:	ea4c 0602 	orr.w	r6, ip, r2
 801587e:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8015882:	910a      	str	r1, [sp, #40]	; 0x28
 8015884:	ea06 0100 	and.w	r1, r6, r0
 8015888:	ea0c 0602 	and.w	r6, ip, r2
 801588c:	430e      	orrs	r6, r1
 801588e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015890:	4419      	add	r1, r3
 8015892:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8015896:	440c      	add	r4, r1
    P( D, E, A, B, C, R(42) );
 8015898:	443d      	add	r5, r7
 801589a:	4434      	add	r4, r6
    P( C, D, E, A, B, R(43) );
 801589c:	eb04 66f5 	add.w	r6, r4, r5, ror #27
    P( B, C, D, E, A, R(44) );
 80158a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158a2:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(43) );
 80158a4:	ea4f 0ebc 	mov.w	lr, ip, ror #2
    P( B, C, D, E, A, R(44) );
 80158a8:	ea81 0c04 	eor.w	ip, r1, r4
 80158ac:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(45) );
 80158ae:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(44) );
 80158b0:	ea8c 0c01 	eor.w	ip, ip, r1
 80158b4:	9908      	ldr	r1, [sp, #32]
 80158b6:	ea8c 0c01 	eor.w	ip, ip, r1
 80158ba:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80158be:	18cf      	adds	r7, r1, r3
 80158c0:	4438      	add	r0, r7
 80158c2:	ea45 070e 	orr.w	r7, r5, lr
 80158c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80158c8:	4017      	ands	r7, r2
 80158ca:	ea05 010e 	and.w	r1, r5, lr
 80158ce:	430f      	orrs	r7, r1
    P( A, B, C, D, E, R(45) );
 80158d0:	9901      	ldr	r1, [sp, #4]
 80158d2:	ea81 0c04 	eor.w	ip, r1, r4
 80158d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158d8:	ea8c 0c01 	eor.w	ip, ip, r1
 80158dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(44) );
 80158de:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( A, B, C, D, E, R(45) );
 80158e2:	ea8c 0c01 	eor.w	ip, ip, r1
 80158e6:	ea46 0a05 	orr.w	sl, r6, r5
 80158ea:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80158ee:	9101      	str	r1, [sp, #4]
 80158f0:	ea0a 010e 	and.w	r1, sl, lr
 80158f4:	ea06 0a05 	and.w	sl, r6, r5
 80158f8:	ea41 0a0a 	orr.w	sl, r1, sl
 80158fc:	9901      	ldr	r1, [sp, #4]
 80158fe:	eb00 60f6 	add.w	r0, r0, r6, ror #27
    P( B, C, D, E, A, R(44) );
 8015902:	4438      	add	r0, r7
 8015904:	18cf      	adds	r7, r1, r3
 8015906:	443a      	add	r2, r7
 8015908:	4452      	add	r2, sl
    P( A, B, C, D, E, R(45) );
 801590a:	eb02 6af0 	add.w	sl, r2, r0, ror #27
    P( E, A, B, C, D, R(46) );
 801590e:	9a02      	ldr	r2, [sp, #8]
 8015910:	9904      	ldr	r1, [sp, #16]
 8015912:	4051      	eors	r1, r2
 8015914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015916:	4051      	eors	r1, r2
 8015918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801591a:	4051      	eors	r1, r2
 801591c:	ea4f 72f1 	mov.w	r2, r1, ror #31
 8015920:	9202      	str	r2, [sp, #8]
    P( D, E, A, B, C, R(47) );
 8015922:	9905      	ldr	r1, [sp, #20]
 8015924:	eb02 0c03 	add.w	ip, r2, r3
 8015928:	9a03      	ldr	r2, [sp, #12]
 801592a:	404a      	eors	r2, r1
 801592c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801592e:	404a      	eors	r2, r1
 8015930:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(45) );
 8015932:	ea4f 04b6 	mov.w	r4, r6, ror #2
 8015936:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(47) );
 8015938:	404a      	eors	r2, r1
 801593a:	eb0c 6efa 	add.w	lr, ip, sl, ror #27
    P( E, A, B, C, D, R(46) );
 801593e:	ea40 0604 	orr.w	r6, r0, r4
 8015942:	ea00 0c04 	and.w	ip, r0, r4
    P( D, E, A, B, C, R(47) );
 8015946:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( E, A, B, C, D, R(46) );
 801594a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 801594e:	9203      	str	r2, [sp, #12]
 8015950:	ea4a 0200 	orr.w	r2, sl, r0
 8015954:	ea02 0104 	and.w	r1, r2, r4
 8015958:	ea0a 0200 	and.w	r2, sl, r0
 801595c:	430a      	orrs	r2, r1
 801595e:	9903      	ldr	r1, [sp, #12]
 8015960:	4419      	add	r1, r3
    P( E, A, B, C, D, R(46) );
 8015962:	402e      	ands	r6, r5
 8015964:	440d      	add	r5, r1
 8015966:	4415      	add	r5, r2
    P( C, D, E, A, B, R(48) );
 8015968:	9906      	ldr	r1, [sp, #24]
 801596a:	9a04      	ldr	r2, [sp, #16]
 801596c:	4051      	eors	r1, r2
 801596e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015970:	4051      	eors	r1, r2
 8015972:	9a01      	ldr	r2, [sp, #4]
 8015974:	4051      	eors	r1, r2
 8015976:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( E, A, B, C, D, R(46) );
 801597a:	ea46 060c 	orr.w	r6, r6, ip
 801597e:	eb06 0c0e 	add.w	ip, r6, lr
    P( D, E, A, B, C, R(47) );
 8015982:	ea4f 0eba 	mov.w	lr, sl, ror #2
 8015986:	18d6      	adds	r6, r2, r3
 8015988:	4426      	add	r6, r4
    P( C, D, E, A, B, R(48) );
 801598a:	ea4c 040e 	orr.w	r4, ip, lr
 801598e:	9204      	str	r2, [sp, #16]
 8015990:	4004      	ands	r4, r0
 8015992:	ea0c 020e 	and.w	r2, ip, lr
 8015996:	4314      	orrs	r4, r2
    P( B, C, D, E, A, R(49) );
 8015998:	9a05      	ldr	r2, [sp, #20]
 801599a:	9908      	ldr	r1, [sp, #32]
 801599c:	ea82 0209 	eor.w	r2, r2, r9
    P( D, E, A, B, C, R(47) );
 80159a0:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(49) );
 80159a4:	404a      	eors	r2, r1
 80159a6:	9902      	ldr	r1, [sp, #8]
 80159a8:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( C, D, E, A, B, R(48) );
 80159ac:	4434      	add	r4, r6
    P( B, C, D, E, A, R(49) );
 80159ae:	404a      	eors	r2, r1
    P( C, D, E, A, B, R(48) );
 80159b0:	ea4f 06bc 	mov.w	r6, ip, ror #2
    P( B, C, D, E, A, R(49) );
 80159b4:	ea45 0806 	orr.w	r8, r5, r6
 80159b8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80159bc:	9205      	str	r2, [sp, #20]
 80159be:	ea08 020e 	and.w	r2, r8, lr
 80159c2:	ea05 0806 	and.w	r8, r5, r6
 80159c6:	ea42 0808 	orr.w	r8, r2, r8
 80159ca:	9a05      	ldr	r2, [sp, #20]
 80159cc:	441a      	add	r2, r3
 80159ce:	4410      	add	r0, r2
    P( A, B, C, D, E, R(50) );
 80159d0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80159d4:	404a      	eors	r2, r1
 80159d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159d8:	404a      	eors	r2, r1
 80159da:	9903      	ldr	r1, [sp, #12]
 80159dc:	404a      	eors	r2, r1
 80159de:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80159e2:	9206      	str	r2, [sp, #24]
 80159e4:	4480      	add	r8, r0
 80159e6:	441a      	add	r2, r3
    P( B, C, D, E, A, R(49) );
 80159e8:	eb08 68f4 	add.w	r8, r8, r4, ror #27
 80159ec:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80159f0:	4496      	add	lr, r2
 80159f2:	eb0e 62f8 	add.w	r2, lr, r8, ror #27
    P( A, B, C, D, E, R(50) );
 80159f6:	ea44 0e05 	orr.w	lr, r4, r5
 80159fa:	ea04 0105 	and.w	r1, r4, r5
 80159fe:	ea0e 0e06 	and.w	lr, lr, r6
 8015a02:	ea4e 0e01 	orr.w	lr, lr, r1
 8015a06:	4496      	add	lr, r2
    P( E, A, B, C, D, R(51) );
 8015a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(52) );
 8015a0a:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(51) );
 8015a0c:	ea89 0002 	eor.w	r0, r9, r2
 8015a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a12:	4050      	eors	r0, r2
 8015a14:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(50) );
 8015a16:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(51) );
 8015a1a:	ea48 0704 	orr.w	r7, r8, r4
 8015a1e:	4050      	eors	r0, r2
 8015a20:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8015a24:	ea07 0005 	and.w	r0, r7, r5
 8015a28:	ea08 0704 	and.w	r7, r8, r4
 8015a2c:	9210      	str	r2, [sp, #64]	; 0x40
 8015a2e:	4307      	orrs	r7, r0
 8015a30:	18d0      	adds	r0, r2, r3
    P( D, E, A, B, C, R(52) );
 8015a32:	9a07      	ldr	r2, [sp, #28]
 8015a34:	ea82 0c01 	eor.w	ip, r2, r1
 8015a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a3a:	ea8c 0c02 	eor.w	ip, ip, r2
 8015a3e:	9a05      	ldr	r2, [sp, #20]
    P( C, D, E, A, B, R(53) );
 8015a40:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(52) );
 8015a42:	ea8c 0c02 	eor.w	ip, ip, r2
 8015a46:	ea4f 7bfc 	mov.w	fp, ip, ror #31
    P( E, A, B, C, D, R(51) );
 8015a4a:	ea4f 08b8 	mov.w	r8, r8, ror #2
 8015a4e:	eb0b 0c03 	add.w	ip, fp, r3
 8015a52:	4465      	add	r5, ip
    P( D, E, A, B, C, R(52) );
 8015a54:	ea4e 0c08 	orr.w	ip, lr, r8
 8015a58:	ea0e 0208 	and.w	r2, lr, r8
 8015a5c:	ea0c 0c04 	and.w	ip, ip, r4
 8015a60:	ea4c 0c02 	orr.w	ip, ip, r2
    P( C, D, E, A, B, R(53) );
 8015a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a66:	4430      	add	r0, r6
 8015a68:	4438      	add	r0, r7
 8015a6a:	ea82 0701 	eor.w	r7, r2, r1
 8015a6e:	9a01      	ldr	r2, [sp, #4]
    P( B, C, D, E, A, R(54) );
 8015a70:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(53) );
 8015a72:	4057      	eors	r7, r2
 8015a74:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, R(51) );
 8015a76:	eb00 60fe 	add.w	r0, r0, lr, ror #27
    P( D, E, A, B, C, R(52) );
 8015a7a:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( C, D, E, A, B, R(53) );
 8015a7e:	ea40 090e 	orr.w	r9, r0, lr
 8015a82:	4057      	eors	r7, r2
 8015a84:	ea4f 7af7 	mov.w	sl, r7, ror #31
 8015a88:	ea09 0208 	and.w	r2, r9, r8
 8015a8c:	ea00 090e 	and.w	r9, r0, lr
 8015a90:	ea42 0909 	orr.w	r9, r2, r9
 8015a94:	eb0a 0203 	add.w	r2, sl, r3
 8015a98:	4414      	add	r4, r2
    P( B, C, D, E, A, R(54) );
 8015a9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a9c:	4051      	eors	r1, r2
 8015a9e:	9a02      	ldr	r2, [sp, #8]
 8015aa0:	4051      	eors	r1, r2
 8015aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015aa4:	4051      	eors	r1, r2
 8015aa6:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 8015aaa:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( D, E, A, B, C, R(52) );
 8015aae:	44ac      	add	ip, r5
 8015ab0:	18d1      	adds	r1, r2, r3
 8015ab2:	44a1      	add	r9, r4
    P( C, D, E, A, B, R(53) );
 8015ab4:	ea4f 07b0 	mov.w	r7, r0, ror #2
 8015ab8:	eb09 69fc 	add.w	r9, r9, ip, ror #27
 8015abc:	4441      	add	r1, r8
 8015abe:	eb01 68f9 	add.w	r8, r1, r9, ror #27
    P( B, C, D, E, A, R(54) );
 8015ac2:	ea4c 0107 	orr.w	r1, ip, r7
 8015ac6:	9207      	str	r2, [sp, #28]
 8015ac8:	ea01 010e 	and.w	r1, r1, lr
 8015acc:	ea0c 0207 	and.w	r2, ip, r7
    P( A, B, C, D, E, R(55) );
 8015ad0:	9808      	ldr	r0, [sp, #32]
    P( E, A, B, C, D, R(56) );
 8015ad2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(54) );
 8015ad4:	4311      	orrs	r1, r2
    P( A, B, C, D, E, R(55) );
 8015ad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ad8:	4042      	eors	r2, r0
 8015ada:	9803      	ldr	r0, [sp, #12]
 8015adc:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(54) );
 8015ade:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(55) );
 8015ae2:	ea82 020b 	eor.w	r2, r2, fp
    P( B, C, D, E, A, R(54) );
 8015ae6:	4441      	add	r1, r8
    P( A, B, C, D, E, R(55) );
 8015ae8:	ea4f 78f2 	mov.w	r8, r2, ror #31
 8015aec:	ea49 020c 	orr.w	r2, r9, ip
 8015af0:	ea02 0007 	and.w	r0, r2, r7
 8015af4:	ea09 020c 	and.w	r2, r9, ip
 8015af8:	4302      	orrs	r2, r0
 8015afa:	eb08 0003 	add.w	r0, r8, r3
 8015afe:	4486      	add	lr, r0
    P( E, A, B, C, D, R(56) );
 8015b00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b02:	ea80 0604 	eor.w	r6, r0, r4
 8015b06:	9804      	ldr	r0, [sp, #16]
 8015b08:	4046      	eors	r6, r0
 8015b0a:	ea86 060a 	eor.w	r6, r6, sl
 8015b0e:	ea4f 70f6 	mov.w	r0, r6, ror #31
 8015b12:	18c6      	adds	r6, r0, r3
 8015b14:	4472      	add	r2, lr
    P( A, B, C, D, E, R(55) );
 8015b16:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8015b1a:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8015b1e:	443e      	add	r6, r7
    P( E, A, B, C, D, R(56) );
 8015b20:	900c      	str	r0, [sp, #48]	; 0x30
 8015b22:	eb06 60f2 	add.w	r0, r6, r2, ror #27
 8015b26:	ea41 0609 	orr.w	r6, r1, r9
 8015b2a:	e001      	b.n	8015b30 <mbedtls_internal_sha1_process+0x9e8>
 8015b2c:	8f1bbcdc 	.word	0x8f1bbcdc
 8015b30:	ea01 0409 	and.w	r4, r1, r9
 8015b34:	ea06 060c 	and.w	r6, r6, ip
 8015b38:	4326      	orrs	r6, r4
 8015b3a:	4406      	add	r6, r0
    P( D, E, A, B, C, R(57) );
 8015b3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015b3e:	9808      	ldr	r0, [sp, #32]
 8015b40:	ea80 0504 	eor.w	r5, r0, r4
 8015b44:	9805      	ldr	r0, [sp, #20]
    P( C, D, E, A, B, R(58) );
 8015b46:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(57) );
 8015b48:	4045      	eors	r5, r0
 8015b4a:	9807      	ldr	r0, [sp, #28]
    P( E, A, B, C, D, R(56) );
 8015b4c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(57) );
 8015b50:	4045      	eors	r5, r0
 8015b52:	ea4f 70f5 	mov.w	r0, r5, ror #31
 8015b56:	ea42 0501 	orr.w	r5, r2, r1
 8015b5a:	9008      	str	r0, [sp, #32]
 8015b5c:	ea05 0009 	and.w	r0, r5, r9
 8015b60:	ea02 0501 	and.w	r5, r2, r1
 8015b64:	4305      	orrs	r5, r0
 8015b66:	9808      	ldr	r0, [sp, #32]
 8015b68:	4418      	add	r0, r3
 8015b6a:	4484      	add	ip, r0
    P( C, D, E, A, B, R(58) );
 8015b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b6e:	ea80 0704 	eor.w	r7, r0, r4
 8015b72:	9806      	ldr	r0, [sp, #24]
 8015b74:	4047      	eors	r7, r0
 8015b76:	ea87 0708 	eor.w	r7, r7, r8
 8015b7a:	ea4f 70f7 	mov.w	r0, r7, ror #31
 8015b7e:	9009      	str	r0, [sp, #36]	; 0x24
 8015b80:	4465      	add	r5, ip
 8015b82:	4418      	add	r0, r3
    P( D, E, A, B, C, R(57) );
 8015b84:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8015b88:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8015b8c:	4481      	add	r9, r0
 8015b8e:	eb09 60f5 	add.w	r0, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 8015b92:	ea46 0902 	orr.w	r9, r6, r2
 8015b96:	ea06 0402 	and.w	r4, r6, r2
 8015b9a:	ea09 0901 	and.w	r9, r9, r1
 8015b9e:	ea49 0904 	orr.w	r9, r9, r4
 8015ba2:	4481      	add	r9, r0
    P( B, C, D, E, A, R(59) );
 8015ba4:	9c01      	ldr	r4, [sp, #4]
 8015ba6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ba8:	4060      	eors	r0, r4
 8015baa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015bac:	4060      	eors	r0, r4
 8015bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015bb0:	4060      	eors	r0, r4
    P( C, D, E, A, B, R(58) );
 8015bb2:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
 8015bb6:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8015bba:	900a      	str	r0, [sp, #40]	; 0x28
 8015bbc:	ea45 0006 	orr.w	r0, r5, r6
 8015bc0:	4010      	ands	r0, r2
 8015bc2:	ea05 0e06 	and.w	lr, r5, r6
 8015bc6:	ea40 0e0e 	orr.w	lr, r0, lr
 8015bca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015bcc:	4403      	add	r3, r0
 8015bce:	440b      	add	r3, r1
 8015bd0:	449e      	add	lr, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8015bd2:	9902      	ldr	r1, [sp, #8]
 8015bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bd6:	404b      	eors	r3, r1
 8015bd8:	9908      	ldr	r1, [sp, #32]
 8015bda:	ea83 030b 	eor.w	r3, r3, fp
 8015bde:	404b      	eors	r3, r1
 8015be0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8015be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015be8:	4bd5      	ldr	r3, [pc, #852]	; (8015f40 <mbedtls_internal_sha1_process+0xdf8>)
    P( B, C, D, E, A, R(59) );
 8015bea:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( A, B, C, D, E, R(60) );
 8015bee:	ea86 0405 	eor.w	r4, r6, r5
 8015bf2:	4419      	add	r1, r3
 8015bf4:	440a      	add	r2, r1
 8015bf6:	ea84 0409 	eor.w	r4, r4, r9
    P( E, A, B, C, D, R(61) );
 8015bfa:	9903      	ldr	r1, [sp, #12]
 8015bfc:	4414      	add	r4, r2
 8015bfe:	9a01      	ldr	r2, [sp, #4]
 8015c00:	404a      	eors	r2, r1
 8015c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c04:	ea82 020a 	eor.w	r2, r2, sl
 8015c08:	404a      	eors	r2, r1
 8015c0a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8015c0e:	9201      	str	r2, [sp, #4]
 8015c10:	441a      	add	r2, r3
    P( D, E, A, B, C, R(62) );
 8015c12:	9904      	ldr	r1, [sp, #16]
 8015c14:	4416      	add	r6, r2
 8015c16:	9a02      	ldr	r2, [sp, #8]
 8015c18:	4051      	eors	r1, r2
 8015c1a:	9a07      	ldr	r2, [sp, #28]
 8015c1c:	4051      	eors	r1, r2
 8015c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c20:	4051      	eors	r1, r2
 8015c22:	ea4f 72f1 	mov.w	r2, r1, ror #31
    P( B, C, D, E, A, R(59) );
 8015c26:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    P( D, E, A, B, C, R(62) );
 8015c2a:	9202      	str	r2, [sp, #8]
    P( A, B, C, D, E, R(60) );
 8015c2c:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8015c30:	441a      	add	r2, r3
    P( C, D, E, A, B, R(63) );
 8015c32:	9905      	ldr	r1, [sp, #20]
    P( E, A, B, C, D, R(61) );
 8015c34:	ea85 0009 	eor.w	r0, r5, r9
 8015c38:	4415      	add	r5, r2
    P( C, D, E, A, B, R(63) );
 8015c3a:	9a03      	ldr	r2, [sp, #12]
 8015c3c:	404a      	eors	r2, r1
 8015c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c40:	ea82 0208 	eor.w	r2, r2, r8
 8015c44:	404a      	eors	r2, r1
 8015c46:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( A, B, C, D, E, R(60) );
 8015c4a:	eb04 64fe 	add.w	r4, r4, lr, ror #27
    P( C, D, E, A, B, R(63) );
 8015c4e:	9203      	str	r2, [sp, #12]
    P( E, A, B, C, D, R(61) );
 8015c50:	ea80 000e 	eor.w	r0, r0, lr
 8015c54:	441a      	add	r2, r3
 8015c56:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(62) );
 8015c5a:	ea89 0c0e 	eor.w	ip, r9, lr
    P( B, C, D, E, A, R(64) );
 8015c5e:	9906      	ldr	r1, [sp, #24]
 8015c60:	4491      	add	r9, r2
 8015c62:	9a04      	ldr	r2, [sp, #16]
 8015c64:	4051      	eors	r1, r2
 8015c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c68:	4051      	eors	r1, r2
 8015c6a:	9a01      	ldr	r2, [sp, #4]
 8015c6c:	4051      	eors	r1, r2
 8015c6e:	ea4f 72f1 	mov.w	r2, r1, ror #31
 8015c72:	4430      	add	r0, r6
    P( E, A, B, C, D, R(61) );
 8015c74:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8015c78:	9204      	str	r2, [sp, #16]
    P( D, E, A, B, C, R(62) );
 8015c7a:	ea8c 0c04 	eor.w	ip, ip, r4
 8015c7e:	441a      	add	r2, r3
 8015c80:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( C, D, E, A, B, R(63) );
 8015c84:	ea8e 0704 	eor.w	r7, lr, r4
 8015c88:	44ac      	add	ip, r5
 8015c8a:	4496      	add	lr, r2
    P( A, B, C, D, E, R(65) );
 8015c8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015c8e:	9a05      	ldr	r2, [sp, #20]
 8015c90:	406a      	eors	r2, r5
 8015c92:	9d08      	ldr	r5, [sp, #32]
 8015c94:	406a      	eors	r2, r5
 8015c96:	9d02      	ldr	r5, [sp, #8]
 8015c98:	406a      	eors	r2, r5
 8015c9a:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( D, E, A, B, C, R(62) );
 8015c9e:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( A, B, C, D, E, R(65) );
 8015ca2:	9205      	str	r2, [sp, #20]
    P( C, D, E, A, B, R(63) );
 8015ca4:	4047      	eors	r7, r0
 8015ca6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(64) );
 8015caa:	ea84 0100 	eor.w	r1, r4, r0
 8015cae:	9d05      	ldr	r5, [sp, #20]
 8015cb0:	444f      	add	r7, r9
    P( C, D, E, A, B, R(63) );
 8015cb2:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( B, C, D, E, A, R(64) );
 8015cb6:	ea81 010c 	eor.w	r1, r1, ip
 8015cba:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(65) );
 8015cbe:	ea80 020c 	eor.w	r2, r0, ip
 8015cc2:	441d      	add	r5, r3
 8015cc4:	442c      	add	r4, r5
 8015cc6:	407a      	eors	r2, r7
 8015cc8:	4422      	add	r2, r4
    P( E, A, B, C, D, R(66) );
 8015cca:	9c06      	ldr	r4, [sp, #24]
 8015ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015cce:	ea84 040b 	eor.w	r4, r4, fp
 8015cd2:	406c      	eors	r4, r5
 8015cd4:	9d03      	ldr	r5, [sp, #12]
 8015cd6:	4471      	add	r1, lr
 8015cd8:	406c      	eors	r4, r5
    P( B, C, D, E, A, R(64) );
 8015cda:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(66) );
 8015cde:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( A, B, C, D, E, R(65) );
 8015ce2:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8015ce6:	18e5      	adds	r5, r4, r3
    P( E, A, B, C, D, R(66) );
 8015ce8:	ea8c 0607 	eor.w	r6, ip, r7
 8015cec:	4428      	add	r0, r5
 8015cee:	404e      	eors	r6, r1
 8015cf0:	4406      	add	r6, r0
    P( D, E, A, B, C, R(67) );
 8015cf2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015cf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015cf6:	ea80 000a 	eor.w	r0, r0, sl
 8015cfa:	4068      	eors	r0, r5
 8015cfc:	9d04      	ldr	r5, [sp, #16]
 8015cfe:	4068      	eors	r0, r5
    P( A, B, C, D, E, R(65) );
 8015d00:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(67) );
 8015d04:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( E, A, B, C, D, R(66) );
 8015d08:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 8015d0c:	9006      	str	r0, [sp, #24]
 8015d0e:	eb00 0e03 	add.w	lr, r0, r3
 8015d12:	ea87 0501 	eor.w	r5, r7, r1
    P( C, D, E, A, B, R(68) );
 8015d16:	9807      	ldr	r0, [sp, #28]
 8015d18:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(67) );
 8015d1a:	4055      	eors	r5, r2
 8015d1c:	4465      	add	r5, ip
    P( C, D, E, A, B, R(68) );
 8015d1e:	ea8b 0c00 	eor.w	ip, fp, r0
 8015d22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015d24:	ea8c 0c00 	eor.w	ip, ip, r0
 8015d28:	9805      	ldr	r0, [sp, #20]
 8015d2a:	ea8c 0c00 	eor.w	ip, ip, r0
    P( E, A, B, C, D, R(66) );
 8015d2e:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(68) );
 8015d32:	ea4f 70fc 	mov.w	r0, ip, ror #31
    P( D, E, A, B, C, R(67) );
 8015d36:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8015d3a:	eb00 0c03 	add.w	ip, r0, r3
    P( C, D, E, A, B, R(68) );
 8015d3e:	ea81 0b02 	eor.w	fp, r1, r2
 8015d42:	900d      	str	r0, [sp, #52]	; 0x34
 8015d44:	4467      	add	r7, ip
    P( B, C, D, E, A, R(69) );
 8015d46:	9801      	ldr	r0, [sp, #4]
    P( C, D, E, A, B, R(68) );
 8015d48:	ea8b 0b06 	eor.w	fp, fp, r6
 8015d4c:	44bb      	add	fp, r7
    P( B, C, D, E, A, R(69) );
 8015d4e:	ea8a 0708 	eor.w	r7, sl, r8
 8015d52:	4047      	eors	r7, r0
 8015d54:	4067      	eors	r7, r4
    P( D, E, A, B, C, R(67) );
 8015d56:	eb05 65f6 	add.w	r5, r5, r6, ror #27
    P( B, C, D, E, A, R(69) );
 8015d5a:	ea4f 70f7 	mov.w	r0, r7, ror #31
    P( C, D, E, A, B, R(68) );
 8015d5e:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8015d62:	18c7      	adds	r7, r0, r3
    P( B, C, D, E, A, R(69) );
 8015d64:	ea82 0a06 	eor.w	sl, r2, r6
 8015d68:	4439      	add	r1, r7
 8015d6a:	ea8a 0a05 	eor.w	sl, sl, r5
 8015d6e:	900e      	str	r0, [sp, #56]	; 0x38
 8015d70:	448a      	add	sl, r1
    P( A, B, C, D, E, R(70) );
 8015d72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015d74:	9907      	ldr	r1, [sp, #28]
 8015d76:	4041      	eors	r1, r0
 8015d78:	9802      	ldr	r0, [sp, #8]
 8015d7a:	4041      	eors	r1, r0
 8015d7c:	9806      	ldr	r0, [sp, #24]
 8015d7e:	4041      	eors	r1, r0
    P( C, D, E, A, B, R(68) );
 8015d80:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( A, B, C, D, E, R(70) );
 8015d84:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( B, C, D, E, A, R(69) );
 8015d88:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8015d8c:	18cf      	adds	r7, r1, r3
    P( A, B, C, D, E, R(70) );
 8015d8e:	ea86 0905 	eor.w	r9, r6, r5
 8015d92:	443a      	add	r2, r7
 8015d94:	ea89 090b 	eor.w	r9, r9, fp
 8015d98:	4491      	add	r9, r2
    P( E, A, B, C, D, R(71) );
 8015d9a:	9a08      	ldr	r2, [sp, #32]
 8015d9c:	9803      	ldr	r0, [sp, #12]
 8015d9e:	ea88 0202 	eor.w	r2, r8, r2
 8015da2:	4042      	eors	r2, r0
 8015da4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015da6:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(69) );
 8015da8:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
    P( E, A, B, C, D, R(71) );
 8015dac:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( A, B, C, D, E, R(70) );
 8015db0:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8015db4:	18d7      	adds	r7, r2, r3
    P( E, A, B, C, D, R(71) );
 8015db6:	ea85 080b 	eor.w	r8, r5, fp
 8015dba:	443e      	add	r6, r7
 8015dbc:	ea88 080a 	eor.w	r8, r8, sl
    P( D, E, A, B, C, R(72) );
 8015dc0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015dc2:	44b0      	add	r8, r6
 8015dc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015dc6:	4046      	eors	r6, r0
 8015dc8:	9804      	ldr	r0, [sp, #16]
 8015dca:	4046      	eors	r6, r0
 8015dcc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015dce:	4046      	eors	r6, r0
    P( A, B, C, D, E, R(70) );
 8015dd0:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( D, E, A, B, C, R(72) );
 8015dd4:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( E, A, B, C, D, R(71) );
 8015dd8:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8015ddc:	18f7      	adds	r7, r6, r3
    P( D, E, A, B, C, R(72) );
 8015dde:	ea8b 0e0a 	eor.w	lr, fp, sl
 8015de2:	443d      	add	r5, r7
 8015de4:	ea8e 0e09 	eor.w	lr, lr, r9
    P( C, D, E, A, B, R(73) );
 8015de8:	9808      	ldr	r0, [sp, #32]
 8015dea:	44ae      	add	lr, r5
 8015dec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015dee:	4045      	eors	r5, r0
 8015df0:	9805      	ldr	r0, [sp, #20]
 8015df2:	4045      	eors	r5, r0
 8015df4:	404d      	eors	r5, r1
 8015df6:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8015dfa:	18ef      	adds	r7, r5, r3
    P( B, C, D, E, A, R(74) );
 8015dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dfe:	44bb      	add	fp, r7
 8015e00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015e02:	4047      	eors	r7, r0
    P( E, A, B, C, D, R(71) );
 8015e04:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( B, C, D, E, A, R(74) );
 8015e08:	407c      	eors	r4, r7
    P( D, E, A, B, C, R(72) );
 8015e0a:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( C, D, E, A, B, R(73) );
 8015e0e:	ea8a 0c09 	eor.w	ip, sl, r9
    P( B, C, D, E, A, R(74) );
 8015e12:	4054      	eors	r4, r2
 8015e14:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( C, D, E, A, B, R(73) );
 8015e18:	ea8c 0c08 	eor.w	ip, ip, r8
    P( B, C, D, E, A, R(74) );
 8015e1c:	9007      	str	r0, [sp, #28]
 8015e1e:	44dc      	add	ip, fp
 8015e20:	eb00 0b03 	add.w	fp, r0, r3
    P( A, B, C, D, E, R(75) );
 8015e24:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(72) );
 8015e26:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( C, D, E, A, B, R(73) );
 8015e2a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( B, C, D, E, A, R(74) );
 8015e2e:	ea89 0708 	eor.w	r7, r9, r8
    P( A, B, C, D, E, R(75) );
 8015e32:	4604      	mov	r4, r0
 8015e34:	9801      	ldr	r0, [sp, #4]
 8015e36:	44da      	add	sl, fp
    P( B, C, D, E, A, R(74) );
 8015e38:	ea87 070e 	eor.w	r7, r7, lr
 8015e3c:	4457      	add	r7, sl
    P( A, B, C, D, E, R(75) );
 8015e3e:	ea84 0a00 	eor.w	sl, r4, r0
 8015e42:	9806      	ldr	r0, [sp, #24]
    P( E, A, B, C, D, R(76) );
 8015e44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(75) );
 8015e46:	ea8a 0000 	eor.w	r0, sl, r0
 8015e4a:	4046      	eors	r6, r0
    P( C, D, E, A, B, R(73) );
 8015e4c:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( A, B, C, D, E, R(75) );
 8015e50:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( B, C, D, E, A, R(74) );
 8015e54:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8015e58:	eb06 0a03 	add.w	sl, r6, r3
    P( A, B, C, D, E, R(75) );
 8015e5c:	ea88 000e 	eor.w	r0, r8, lr
 8015e60:	44d1      	add	r9, sl
 8015e62:	ea80 000c 	eor.w	r0, r0, ip
 8015e66:	4448      	add	r0, r9
    P( E, A, B, C, D, R(76) );
 8015e68:	46a1      	mov	r9, r4
 8015e6a:	9c02      	ldr	r4, [sp, #8]
 8015e6c:	ea89 0904 	eor.w	r9, r9, r4
 8015e70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e72:	ea89 0904 	eor.w	r9, r9, r4
 8015e76:	ea89 0505 	eor.w	r5, r9, r5
    P( B, C, D, E, A, R(74) );
 8015e7a:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( E, A, B, C, D, R(76) );
 8015e7e:	ea4f 75f5 	mov.w	r5, r5, ror #31
    P( A, B, C, D, E, R(75) );
 8015e82:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8015e86:	eb05 0a03 	add.w	sl, r5, r3
    P( E, A, B, C, D, R(76) );
 8015e8a:	ea8e 090c 	eor.w	r9, lr, ip
    P( D, E, A, B, C, R(77) );
 8015e8e:	9c01      	ldr	r4, [sp, #4]
 8015e90:	44d0      	add	r8, sl
    P( E, A, B, C, D, R(76) );
 8015e92:	ea89 0907 	eor.w	r9, r9, r7
 8015e96:	44c1      	add	r9, r8
    P( D, E, A, B, C, R(77) );
 8015e98:	46a0      	mov	r8, r4
 8015e9a:	9c03      	ldr	r4, [sp, #12]
 8015e9c:	ea88 0804 	eor.w	r8, r8, r4
 8015ea0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015ea2:	ea88 0804 	eor.w	r8, r8, r4
 8015ea6:	9c07      	ldr	r4, [sp, #28]
 8015ea8:	ea88 0804 	eor.w	r8, r8, r4
    P( A, B, C, D, E, R(75) );
 8015eac:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8015eb0:	eb03 78f8 	add.w	r8, r3, r8, ror #31
    P( E, A, B, C, D, R(76) );
 8015eb4:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(78) );
 8015eb8:	9c02      	ldr	r4, [sp, #8]
 8015eba:	44c6      	add	lr, r8
    P( D, E, A, B, C, R(77) );
 8015ebc:	ea8c 0807 	eor.w	r8, ip, r7
 8015ec0:	ea88 0800 	eor.w	r8, r8, r0
 8015ec4:	44c6      	add	lr, r8
    P( C, D, E, A, B, R(78) );
 8015ec6:	46a0      	mov	r8, r4
 8015ec8:	9c04      	ldr	r4, [sp, #16]
 8015eca:	ea88 0404 	eor.w	r4, r8, r4
 8015ece:	4061      	eors	r1, r4
 8015ed0:	4071      	eors	r1, r6
    P( E, A, B, C, D, R(76) );
 8015ed2:	eb09 69f0 	add.w	r9, r9, r0, ror #27
 8015ed6:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( D, E, A, B, C, R(77) );
 8015eda:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8015ede:	448c      	add	ip, r1
    P( C, D, E, A, B, R(78) );
 8015ee0:	ea87 0100 	eor.w	r1, r7, r0
 8015ee4:	ea81 0109 	eor.w	r1, r1, r9
 8015ee8:	448c      	add	ip, r1
    P( B, C, D, E, A, R(79) );
 8015eea:	9c05      	ldr	r4, [sp, #20]
 8015eec:	9903      	ldr	r1, [sp, #12]
 8015eee:	4061      	eors	r1, r4
 8015ef0:	404a      	eors	r2, r1
 8015ef2:	4055      	eors	r5, r2

#undef K
#undef F

    ctx->state[0] += A;
 8015ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(77) );
 8015ef6:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
    ctx->state[0] += A;
 8015efa:	4413      	add	r3, r2
    P( C, D, E, A, B, R(78) );
 8015efc:	ea4f 09b9 	mov.w	r9, r9, ror #2
    ctx->state[0] += A;
 8015f00:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( B, C, D, E, A, R(79) );
 8015f04:	ea80 0309 	eor.w	r3, r0, r9
 8015f08:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 8015f0c:	442f      	add	r7, r5
    P( C, D, E, A, B, R(78) );
 8015f0e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    ctx->state[0] += A;
 8015f12:	441f      	add	r7, r3
 8015f14:	9b00      	ldr	r3, [sp, #0]
    ctx->state[1] += B;
    ctx->state[2] += C;
 8015f16:	9a00      	ldr	r2, [sp, #0]
    ctx->state[0] += A;
 8015f18:	eb07 67fc 	add.w	r7, r7, ip, ror #27
 8015f1c:	609f      	str	r7, [r3, #8]
    ctx->state[1] += B;
 8015f1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f20:	eb03 010c 	add.w	r1, r3, ip
 8015f24:	9b00      	ldr	r3, [sp, #0]
 8015f26:	60d9      	str	r1, [r3, #12]
    ctx->state[2] += C;
 8015f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f2a:	eb03 03be 	add.w	r3, r3, lr, ror #2
 8015f2e:	6113      	str	r3, [r2, #16]
    ctx->state[3] += D;
 8015f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f32:	444b      	add	r3, r9
 8015f34:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
 8015f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f38:	4418      	add	r0, r3
 8015f3a:	6190      	str	r0, [r2, #24]
 8015f3c:	e002      	b.n	8015f44 <mbedtls_internal_sha1_process+0xdfc>
 8015f3e:	bf00      	nop
 8015f40:	ca62c1d6 	.word	0xca62c1d6

    return( 0 );
}
 8015f44:	2000      	movs	r0, #0
 8015f46:	b017      	add	sp, #92	; 0x5c
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f4c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8015f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f50:	4605      	mov	r5, r0
 8015f52:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8015f54:	4614      	mov	r4, r2
 8015f56:	b912      	cbnz	r2, 8015f5e <mbedtls_sha1_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 8015f58:	2000      	movs	r0, #0
}
 8015f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 8015f64:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
 8015f66:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 8015f68:	bf22      	ittt	cs
 8015f6a:	6843      	ldrcs	r3, [r0, #4]
 8015f6c:	3301      	addcs	r3, #1
 8015f6e:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 8015f70:	b1a7      	cbz	r7, 8015f9c <mbedtls_sha1_update_ret+0x50>
    fill = 64 - left;
 8015f72:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 8015f76:	4542      	cmp	r2, r8
 8015f78:	d310      	bcc.n	8015f9c <mbedtls_sha1_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8015f7a:	f100 091c 	add.w	r9, r0, #28
 8015f7e:	4642      	mov	r2, r8
 8015f80:	eb09 0007 	add.w	r0, r9, r7
 8015f84:	f000 fd99 	bl	8016aba <memcpy>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8015f88:	4649      	mov	r1, r9
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	f7ff f8dc 	bl	8015148 <mbedtls_internal_sha1_process>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1e2      	bne.n	8015f5a <mbedtls_sha1_update_ret+0xe>
        input += fill;
 8015f94:	4446      	add	r6, r8
        ilen  -= fill;
 8015f96:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
 8015f9a:	4607      	mov	r7, r0
 8015f9c:	4426      	add	r6, r4
 8015f9e:	e005      	b.n	8015fac <mbedtls_sha1_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	f7ff f8d1 	bl	8015148 <mbedtls_internal_sha1_process>
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	d1d7      	bne.n	8015f5a <mbedtls_sha1_update_ret+0xe>
        ilen  -= 64;
 8015faa:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8015fac:	2c3f      	cmp	r4, #63	; 0x3f
 8015fae:	eba6 0104 	sub.w	r1, r6, r4
 8015fb2:	d8f5      	bhi.n	8015fa0 <mbedtls_sha1_update_ret+0x54>
    if( ilen > 0 )
 8015fb4:	2c00      	cmp	r4, #0
 8015fb6:	d0cf      	beq.n	8015f58 <mbedtls_sha1_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015fb8:	f105 001c 	add.w	r0, r5, #28
 8015fbc:	4622      	mov	r2, r4
 8015fbe:	4438      	add	r0, r7
 8015fc0:	f000 fd7b 	bl	8016aba <memcpy>
 8015fc4:	e7c8      	b.n	8015f58 <mbedtls_sha1_update_ret+0xc>

08015fc6 <mbedtls_sha1_finish_ret>:
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8015fc6:	6803      	ldr	r3, [r0, #0]
 8015fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8015fcc:	1c5a      	adds	r2, r3, #1
 8015fce:	4403      	add	r3, r0
{
 8015fd0:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
 8015fd2:	2a38      	cmp	r2, #56	; 0x38
{
 8015fd4:	460d      	mov	r5, r1
 8015fd6:	f100 061c 	add.w	r6, r0, #28
    ctx->buffer[used++] = 0x80;
 8015fda:	f04f 0180 	mov.w	r1, #128	; 0x80
{
 8015fde:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 8015fe0:	7719      	strb	r1, [r3, #28]
 8015fe2:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8015fe6:	d854      	bhi.n	8016092 <mbedtls_sha1_finish_ret+0xcc>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8015fe8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015fec:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8015fee:	f000 fd88 	bl	8016b02 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8015ff2:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8015ff6:	0f5a      	lsrs	r2, r3, #29
 8015ff8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8015ffc:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 8015ffe:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8016000:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8016004:	0c11      	lsrs	r1, r2, #16
 8016006:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 801600a:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 801600e:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8016010:	0e1a      	lsrs	r2, r3, #24
 8016012:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8016016:	0c1a      	lsrs	r2, r3, #16
 8016018:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801601c:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801601e:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8016022:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8016026:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 801602a:	4631      	mov	r1, r6
 801602c:	4620      	mov	r0, r4
 801602e:	f7ff f88b 	bl	8015148 <mbedtls_internal_sha1_process>
 8016032:	2800      	cmp	r0, #0
 8016034:	d12c      	bne.n	8016090 <mbedtls_sha1_finish_ret+0xca>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8016036:	7ae3      	ldrb	r3, [r4, #11]
 8016038:	702b      	strb	r3, [r5, #0]
 801603a:	8963      	ldrh	r3, [r4, #10]
 801603c:	706b      	strb	r3, [r5, #1]
 801603e:	68a3      	ldr	r3, [r4, #8]
 8016040:	0a1b      	lsrs	r3, r3, #8
 8016042:	70ab      	strb	r3, [r5, #2]
 8016044:	68a3      	ldr	r3, [r4, #8]
 8016046:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8016048:	7be3      	ldrb	r3, [r4, #15]
 801604a:	712b      	strb	r3, [r5, #4]
 801604c:	89e3      	ldrh	r3, [r4, #14]
 801604e:	716b      	strb	r3, [r5, #5]
 8016050:	68e3      	ldr	r3, [r4, #12]
 8016052:	0a1b      	lsrs	r3, r3, #8
 8016054:	71ab      	strb	r3, [r5, #6]
 8016056:	68e3      	ldr	r3, [r4, #12]
 8016058:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801605a:	7ce3      	ldrb	r3, [r4, #19]
 801605c:	722b      	strb	r3, [r5, #8]
 801605e:	8a63      	ldrh	r3, [r4, #18]
 8016060:	726b      	strb	r3, [r5, #9]
 8016062:	6923      	ldr	r3, [r4, #16]
 8016064:	0a1b      	lsrs	r3, r3, #8
 8016066:	72ab      	strb	r3, [r5, #10]
 8016068:	6923      	ldr	r3, [r4, #16]
 801606a:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 801606c:	7de3      	ldrb	r3, [r4, #23]
 801606e:	732b      	strb	r3, [r5, #12]
 8016070:	8ae3      	ldrh	r3, [r4, #22]
 8016072:	736b      	strb	r3, [r5, #13]
 8016074:	6963      	ldr	r3, [r4, #20]
 8016076:	0a1b      	lsrs	r3, r3, #8
 8016078:	73ab      	strb	r3, [r5, #14]
 801607a:	6963      	ldr	r3, [r4, #20]
 801607c:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801607e:	7ee3      	ldrb	r3, [r4, #27]
 8016080:	742b      	strb	r3, [r5, #16]
 8016082:	8b63      	ldrh	r3, [r4, #26]
 8016084:	746b      	strb	r3, [r5, #17]
 8016086:	69a3      	ldr	r3, [r4, #24]
 8016088:	0a1b      	lsrs	r3, r3, #8
 801608a:	74ab      	strb	r3, [r5, #18]
 801608c:	69a3      	ldr	r3, [r4, #24]
 801608e:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 8016090:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8016092:	2100      	movs	r1, #0
 8016094:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8016098:	f000 fd33 	bl	8016b02 <memset>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 801609c:	4631      	mov	r1, r6
 801609e:	4620      	mov	r0, r4
 80160a0:	f7ff f852 	bl	8015148 <mbedtls_internal_sha1_process>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d1f3      	bne.n	8016090 <mbedtls_sha1_finish_ret+0xca>
        memset( ctx->buffer, 0, 56 );
 80160a8:	4601      	mov	r1, r0
 80160aa:	2238      	movs	r2, #56	; 0x38
 80160ac:	4630      	mov	r0, r6
 80160ae:	e79e      	b.n	8015fee <mbedtls_sha1_finish_ret+0x28>

080160b0 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80160b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160b2:	b099      	sub	sp, #100	; 0x64
 80160b4:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 80160b6:	a801      	add	r0, sp, #4
{
 80160b8:	460f      	mov	r7, r1
 80160ba:	4615      	mov	r5, r2
    mbedtls_sha1_init( &ctx );
 80160bc:	f7ff f81c 	bl	80150f8 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 80160c0:	a801      	add	r0, sp, #4
 80160c2:	f7ff f827 	bl	8015114 <mbedtls_sha1_starts_ret>
 80160c6:	4604      	mov	r4, r0
 80160c8:	b958      	cbnz	r0, 80160e2 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 80160ca:	463a      	mov	r2, r7
 80160cc:	4631      	mov	r1, r6
 80160ce:	a801      	add	r0, sp, #4
 80160d0:	f7ff ff3c 	bl	8015f4c <mbedtls_sha1_update_ret>
 80160d4:	4604      	mov	r4, r0
 80160d6:	b920      	cbnz	r0, 80160e2 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 80160d8:	4629      	mov	r1, r5
 80160da:	a801      	add	r0, sp, #4
 80160dc:	f7ff ff73 	bl	8015fc6 <mbedtls_sha1_finish_ret>
 80160e0:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 80160e2:	a801      	add	r0, sp, #4
 80160e4:	f7ff f80c 	bl	8015100 <mbedtls_sha1_free>

    return( ret );
}
 80160e8:	4620      	mov	r0, r4
 80160ea:	b019      	add	sp, #100	; 0x64
 80160ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160ee <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80160ee:	226c      	movs	r2, #108	; 0x6c
 80160f0:	2100      	movs	r1, #0
 80160f2:	f000 bd06 	b.w	8016b02 <memset>

080160f6 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80160f6:	b110      	cbz	r0, 80160fe <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80160f8:	216c      	movs	r1, #108	; 0x6c
 80160fa:	f7fc b8d1 	b.w	80122a0 <mbedtls_platform_zeroize>
}
 80160fe:	4770      	bx	lr

08016100 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8016100:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 8016102:	226c      	movs	r2, #108	; 0x6c
 8016104:	f000 fcd9 	bl	8016aba <memcpy>
}
 8016108:	bd08      	pop	{r3, pc}
	...

0801610c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 801610c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801610e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8016112:	b9c1      	cbnz	r1, 8016146 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8016114:	4a19      	ldr	r2, [pc, #100]	; (801617c <mbedtls_sha256_starts_ret+0x70>)
 8016116:	4b1a      	ldr	r3, [pc, #104]	; (8016180 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8016118:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80161a8 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
 801611c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8016120:	4b18      	ldr	r3, [pc, #96]	; (8016184 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8016122:	4a19      	ldr	r2, [pc, #100]	; (8016188 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8016124:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8016128:	4b18      	ldr	r3, [pc, #96]	; (801618c <mbedtls_sha256_starts_ret+0x80>)
 801612a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 801612e:	4b18      	ldr	r3, [pc, #96]	; (8016190 <mbedtls_sha256_starts_ret+0x84>)
 8016130:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8016132:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8016136:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 801613a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 801613e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8016140:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8016142:	2000      	movs	r0, #0
 8016144:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8016146:	4b13      	ldr	r3, [pc, #76]	; (8016194 <mbedtls_sha256_starts_ret+0x88>)
 8016148:	4a13      	ldr	r2, [pc, #76]	; (8016198 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 801614a:	f8df c060 	ldr.w	ip, [pc, #96]	; 80161ac <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
 801614e:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8016152:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8016156:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 801615a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801615e:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 8016160:	4b0e      	ldr	r3, [pc, #56]	; (801619c <mbedtls_sha256_starts_ret+0x90>)
 8016162:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 8016166:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 801616a:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 801616e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8016172:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8016174:	4b0a      	ldr	r3, [pc, #40]	; (80161a0 <mbedtls_sha256_starts_ret+0x94>)
 8016176:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8016178:	4b0a      	ldr	r3, [pc, #40]	; (80161a4 <mbedtls_sha256_starts_ret+0x98>)
 801617a:	e7e0      	b.n	801613e <mbedtls_sha256_starts_ret+0x32>
 801617c:	6a09e667 	.word	0x6a09e667
 8016180:	bb67ae85 	.word	0xbb67ae85
 8016184:	a54ff53a 	.word	0xa54ff53a
 8016188:	510e527f 	.word	0x510e527f
 801618c:	9b05688c 	.word	0x9b05688c
 8016190:	1f83d9ab 	.word	0x1f83d9ab
 8016194:	367cd507 	.word	0x367cd507
 8016198:	c1059ed8 	.word	0xc1059ed8
 801619c:	ffc00b31 	.word	0xffc00b31
 80161a0:	64f98fa7 	.word	0x64f98fa7
 80161a4:	befa4fa4 	.word	0xbefa4fa4
 80161a8:	3c6ef372 	.word	0x3c6ef372
 80161ac:	f70e5939 	.word	0xf70e5939

080161b0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80161b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	b0cf      	sub	sp, #316	; 0x13c
 80161b6:	f100 0308 	add.w	r3, r0, #8
 80161ba:	9304      	str	r3, [sp, #16]
 80161bc:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80161be:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80161c0:	ac06      	add	r4, sp, #24
 80161c2:	f852 0b04 	ldr.w	r0, [r2], #4
 80161c6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
 80161ca:	3301      	adds	r3, #1
 80161cc:	2b08      	cmp	r3, #8
 80161ce:	d1f7      	bne.n	80161c0 <mbedtls_internal_sha256_process+0x10>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80161d0:	2200      	movs	r2, #0
        GET_UINT32_BE( W[i], data, 4 * i );
 80161d2:	784b      	ldrb	r3, [r1, #1]
 80161d4:	7808      	ldrb	r0, [r1, #0]
 80161d6:	041b      	lsls	r3, r3, #16
 80161d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80161dc:	78c8      	ldrb	r0, [r1, #3]
 80161de:	4303      	orrs	r3, r0
 80161e0:	7888      	ldrb	r0, [r1, #2]
 80161e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80161e6:	a80e      	add	r0, sp, #56	; 0x38
 80161e8:	3104      	adds	r1, #4
 80161ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 80161ee:	3201      	adds	r2, #1
 80161f0:	2a10      	cmp	r2, #16
 80161f2:	d1ee      	bne.n	80161d2 <mbedtls_internal_sha256_process+0x22>
 80161f4:	4da1      	ldr	r5, [pc, #644]	; (801647c <mbedtls_internal_sha256_process+0x2cc>)
 80161f6:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80161fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161fe:	9b08      	ldr	r3, [sp, #32]
 8016200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016202:	9a07      	ldr	r2, [sp, #28]
 8016204:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8016208:	9f06      	ldr	r7, [sp, #24]
 801620a:	9500      	str	r5, [sp, #0]
 801620c:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8016210:	46da      	mov	sl, fp
 8016212:	46a8      	mov	r8, r5

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8016214:	f8d8 5000 	ldr.w	r5, [r8]
 8016218:	f8da 6000 	ldr.w	r6, [sl]
 801621c:	ea4f 2cf9 	mov.w	ip, r9, ror #11
 8016220:	ea8c 1cb9 	eor.w	ip, ip, r9, ror #6
 8016224:	4435      	add	r5, r6
 8016226:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 801622a:	44ac      	add	ip, r5
 801622c:	ea80 0501 	eor.w	r5, r0, r1
 8016230:	ea05 0509 	and.w	r5, r5, r9
 8016234:	4045      	eors	r5, r0
 8016236:	44ac      	add	ip, r5
 8016238:	ea47 0602 	orr.w	r6, r7, r2
 801623c:	ea4f 3577 	mov.w	r5, r7, ror #13
 8016240:	44e6      	add	lr, ip
 8016242:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 8016246:	ea07 0c02 	and.w	ip, r7, r2
 801624a:	401e      	ands	r6, r3
 801624c:	ea85 55b7 	eor.w	r5, r5, r7, ror #22
 8016250:	ea46 060c 	orr.w	r6, r6, ip
 8016254:	442e      	add	r6, r5
 8016256:	4474      	add	r4, lr
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8016258:	f8d8 5004 	ldr.w	r5, [r8, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 801625c:	44b6      	add	lr, r6
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 801625e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8016262:	4435      	add	r5, r6
 8016264:	4405      	add	r5, r0
 8016266:	ea89 0001 	eor.w	r0, r9, r1
 801626a:	4020      	ands	r0, r4
 801626c:	ea80 0c01 	eor.w	ip, r0, r1
 8016270:	eb05 000c 	add.w	r0, r5, ip
 8016274:	ea4f 25f4 	mov.w	r5, r4, ror #11
 8016278:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
 801627c:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8016280:	4405      	add	r5, r0
 8016282:	ea4e 0607 	orr.w	r6, lr, r7
 8016286:	ea4f 307e 	mov.w	r0, lr, ror #13
 801628a:	ea0e 0c07 	and.w	ip, lr, r7
 801628e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8016292:	4016      	ands	r6, r2
 8016294:	ea46 060c 	orr.w	r6, r6, ip
 8016298:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 801629c:	4430      	add	r0, r6
 801629e:	4428      	add	r0, r5
 80162a0:	442b      	add	r3, r5
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80162a2:	f8da 6008 	ldr.w	r6, [sl, #8]
 80162a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80162aa:	4435      	add	r5, r6
 80162ac:	440d      	add	r5, r1
 80162ae:	ea84 0109 	eor.w	r1, r4, r9
 80162b2:	4019      	ands	r1, r3
 80162b4:	ea81 0c09 	eor.w	ip, r1, r9
 80162b8:	eb05 010c 	add.w	r1, r5, ip
 80162bc:	ea4f 25f3 	mov.w	r5, r3, ror #11
 80162c0:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 80162c4:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 80162c8:	440d      	add	r5, r1
 80162ca:	ea4e 0600 	orr.w	r6, lr, r0
 80162ce:	ea4f 3170 	mov.w	r1, r0, ror #13
 80162d2:	ea0e 0c00 	and.w	ip, lr, r0
 80162d6:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80162da:	403e      	ands	r6, r7
 80162dc:	ea46 060c 	orr.w	r6, r6, ip
 80162e0:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 80162e4:	4431      	add	r1, r6
 80162e6:	4429      	add	r1, r5
 80162e8:	442a      	add	r2, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80162ea:	f8da 600c 	ldr.w	r6, [sl, #12]
 80162ee:	f8d8 500c 	ldr.w	r5, [r8, #12]
 80162f2:	4435      	add	r5, r6
 80162f4:	44a9      	add	r9, r5
 80162f6:	ea84 0503 	eor.w	r5, r4, r3
 80162fa:	4015      	ands	r5, r2
 80162fc:	ea85 0c04 	eor.w	ip, r5, r4
 8016300:	eb09 050c 	add.w	r5, r9, ip
 8016304:	ea4f 29f2 	mov.w	r9, r2, ror #11
 8016308:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
 801630c:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8016310:	44a9      	add	r9, r5
 8016312:	ea40 0601 	orr.w	r6, r0, r1
 8016316:	ea4f 3571 	mov.w	r5, r1, ror #13
 801631a:	eb07 0c09 	add.w	ip, r7, r9
 801631e:	ea85 05b1 	eor.w	r5, r5, r1, ror #2
 8016322:	ea00 0701 	and.w	r7, r0, r1
 8016326:	ea06 060e 	and.w	r6, r6, lr
 801632a:	433e      	orrs	r6, r7
 801632c:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8016330:	f8da 7010 	ldr.w	r7, [sl, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8016334:	4435      	add	r5, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8016336:	f8d8 6010 	ldr.w	r6, [r8, #16]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 801633a:	444d      	add	r5, r9
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 801633c:	443e      	add	r6, r7
 801633e:	ea83 0902 	eor.w	r9, r3, r2
 8016342:	4434      	add	r4, r6
 8016344:	ea09 090c 	and.w	r9, r9, ip
 8016348:	ea4f 26fc 	mov.w	r6, ip, ror #11
 801634c:	ea89 0903 	eor.w	r9, r9, r3
 8016350:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8016354:	444c      	add	r4, r9
 8016356:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 801635a:	4426      	add	r6, r4
 801635c:	ea41 0705 	orr.w	r7, r1, r5
 8016360:	ea4f 3475 	mov.w	r4, r5, ror #13
 8016364:	ea01 0905 	and.w	r9, r1, r5
 8016368:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 801636c:	4007      	ands	r7, r0
 801636e:	ea47 0709 	orr.w	r7, r7, r9
 8016372:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 8016376:	443c      	add	r4, r7
 8016378:	4434      	add	r4, r6
 801637a:	44b6      	add	lr, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 801637c:	f8d8 7014 	ldr.w	r7, [r8, #20]
 8016380:	f8da 6014 	ldr.w	r6, [sl, #20]
 8016384:	443e      	add	r6, r7
 8016386:	4433      	add	r3, r6
 8016388:	ea82 060c 	eor.w	r6, r2, ip
 801638c:	ea06 060e 	and.w	r6, r6, lr
 8016390:	4056      	eors	r6, r2
 8016392:	4433      	add	r3, r6
 8016394:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8016398:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 801639c:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 80163a0:	441e      	add	r6, r3
 80163a2:	ea45 0704 	orr.w	r7, r5, r4
 80163a6:	ea4f 3374 	mov.w	r3, r4, ror #13
 80163aa:	ea05 0904 	and.w	r9, r5, r4
 80163ae:	400f      	ands	r7, r1
 80163b0:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 80163b4:	ea47 0709 	orr.w	r7, r7, r9
 80163b8:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 80163bc:	443b      	add	r3, r7
 80163be:	4433      	add	r3, r6
 80163c0:	4430      	add	r0, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80163c2:	f8d8 7018 	ldr.w	r7, [r8, #24]
 80163c6:	f8da 6018 	ldr.w	r6, [sl, #24]
 80163ca:	ea8c 090e 	eor.w	r9, ip, lr
 80163ce:	443e      	add	r6, r7
 80163d0:	4432      	add	r2, r6
 80163d2:	ea09 0900 	and.w	r9, r9, r0
 80163d6:	ea4f 26f0 	mov.w	r6, r0, ror #11
 80163da:	ea89 090c 	eor.w	r9, r9, ip
 80163de:	ea86 16b0 	eor.w	r6, r6, r0, ror #6
 80163e2:	444a      	add	r2, r9
 80163e4:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 80163e8:	4416      	add	r6, r2
 80163ea:	ea44 0703 	orr.w	r7, r4, r3
 80163ee:	ea4f 3273 	mov.w	r2, r3, ror #13
 80163f2:	402f      	ands	r7, r5
 80163f4:	ea04 0903 	and.w	r9, r4, r3
 80163f8:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 80163fc:	ea47 0709 	orr.w	r7, r7, r9
 8016400:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8016404:	443a      	add	r2, r7
 8016406:	4432      	add	r2, r6
 8016408:	4431      	add	r1, r6
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 801640a:	f8da 701c 	ldr.w	r7, [sl, #28]
 801640e:	f8d8 601c 	ldr.w	r6, [r8, #28]
 8016412:	ea8e 0900 	eor.w	r9, lr, r0
 8016416:	443e      	add	r6, r7
 8016418:	ea09 0901 	and.w	r9, r9, r1
 801641c:	ea4f 27f1 	mov.w	r7, r1, ror #11
 8016420:	44b4      	add	ip, r6
 8016422:	ea89 090e 	eor.w	r9, r9, lr
 8016426:	ea87 17b1 	eor.w	r7, r7, r1, ror #6
 801642a:	44cc      	add	ip, r9
 801642c:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 8016430:	44bc      	add	ip, r7
 8016432:	eb05 090c 	add.w	r9, r5, ip
 8016436:	ea4f 3772 	mov.w	r7, r2, ror #13
 801643a:	ea43 0502 	orr.w	r5, r3, r2
 801643e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 8016442:	4025      	ands	r5, r4
 8016444:	ea03 0602 	and.w	r6, r3, r2
 8016448:	4335      	orrs	r5, r6
 801644a:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 801644e:	442f      	add	r7, r5
    for( i = 0; i < 16; i += 8 )
 8016450:	4d0b      	ldr	r5, [pc, #44]	; (8016480 <mbedtls_internal_sha256_process+0x2d0>)
 8016452:	f108 0820 	add.w	r8, r8, #32
 8016456:	4545      	cmp	r5, r8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8016458:	4467      	add	r7, ip
 801645a:	f10a 0a20 	add.w	sl, sl, #32
    for( i = 0; i < 16; i += 8 )
 801645e:	f47f aed9 	bne.w	8016214 <mbedtls_internal_sha256_process+0x64>
 8016462:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 8016466:	e9cd 7206 	strd	r7, r2, [sp, #24]
 801646a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801646e:	ad3e      	add	r5, sp, #248	; 0xf8
 8016470:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8016474:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8016478:	9505      	str	r5, [sp, #20]
 801647a:	e003      	b.n	8016484 <mbedtls_internal_sha256_process+0x2d4>
 801647c:	080196a4 	.word	0x080196a4
 8016480:	080196e4 	.word	0x080196e4
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8016484:	f8db 5038 	ldr.w	r5, [fp, #56]	; 0x38
 8016488:	f8db c004 	ldr.w	ip, [fp, #4]
 801648c:	f8db 6000 	ldr.w	r6, [fp]
 8016490:	ea4f 48f5 	mov.w	r8, r5, ror #19
 8016494:	ea88 4875 	eor.w	r8, r8, r5, ror #17
 8016498:	ea88 2895 	eor.w	r8, r8, r5, lsr #10
 801649c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
 80164a0:	ea4f 4abc 	mov.w	sl, ip, ror #18
 80164a4:	4435      	add	r5, r6
 80164a6:	ea8a 1afc 	eor.w	sl, sl, ip, ror #7
 80164aa:	ea8a 0adc 	eor.w	sl, sl, ip, lsr #3
 80164ae:	44a8      	add	r8, r5
 80164b0:	ea4f 26f9 	mov.w	r6, r9, ror #11
 80164b4:	eb08 050a 	add.w	r5, r8, sl
 80164b8:	ea86 16b9 	eor.w	r6, r6, r9, ror #6
 80164bc:	9503      	str	r5, [sp, #12]
 80164be:	ea86 6579 	eor.w	r5, r6, r9, ror #25
 80164c2:	ea80 0601 	eor.w	r6, r0, r1
 80164c6:	ea06 0609 	and.w	r6, r6, r9
 80164ca:	4046      	eors	r6, r0
 80164cc:	442e      	add	r6, r5
 80164ce:	9d00      	ldr	r5, [sp, #0]
 80164d0:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 80164d2:	4435      	add	r5, r6
 80164d4:	9e03      	ldr	r6, [sp, #12]
 80164d6:	f8cb 6040 	str.w	r6, [fp, #64]	; 0x40
 80164da:	4435      	add	r5, r6
 80164dc:	44ae      	add	lr, r5
 80164de:	eb04 080e 	add.w	r8, r4, lr
 80164e2:	ea47 0502 	orr.w	r5, r7, r2
 80164e6:	ea4f 3477 	mov.w	r4, r7, ror #13
 80164ea:	ea07 0602 	and.w	r6, r7, r2
 80164ee:	ea84 04b7 	eor.w	r4, r4, r7, ror #2
 80164f2:	401d      	ands	r5, r3
 80164f4:	ea84 54b7 	eor.w	r4, r4, r7, ror #22
 80164f8:	4335      	orrs	r5, r6
 80164fa:	4425      	add	r5, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80164fc:	f8db 403c 	ldr.w	r4, [fp, #60]	; 0x3c
 8016500:	f8db 6008 	ldr.w	r6, [fp, #8]
 8016504:	ea4f 4af4 	mov.w	sl, r4, ror #19
 8016508:	ea8a 4a74 	eor.w	sl, sl, r4, ror #17
 801650c:	ea8a 2a94 	eor.w	sl, sl, r4, lsr #10
 8016510:	f8db 4028 	ldr.w	r4, [fp, #40]	; 0x28
 8016514:	4464      	add	r4, ip
 8016516:	44a2      	add	sl, r4
 8016518:	9c00      	ldr	r4, [sp, #0]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 801651a:	44ae      	add	lr, r5
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801651c:	ea4f 45b6 	mov.w	r5, r6, ror #18
 8016520:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
 8016524:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8016526:	ea89 0c01 	eor.w	ip, r9, r1
 801652a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
 801652e:	4455      	add	r5, sl
 8016530:	ea0c 0c08 	and.w	ip, ip, r8
 8016534:	4404      	add	r4, r0
 8016536:	ea4f 20f8 	mov.w	r0, r8, ror #11
 801653a:	442c      	add	r4, r5
 801653c:	ea8c 0c01 	eor.w	ip, ip, r1
 8016540:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
 8016544:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 8016548:	44a4      	add	ip, r4
 801654a:	eb00 040c 	add.w	r4, r0, ip
 801654e:	4423      	add	r3, r4
 8016550:	9301      	str	r3, [sp, #4]
 8016552:	ea4f 307e 	mov.w	r0, lr, ror #13
 8016556:	ea47 030e 	orr.w	r3, r7, lr
 801655a:	ea07 0c0e 	and.w	ip, r7, lr
 801655e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8016562:	4013      	ands	r3, r2
 8016564:	ea43 030c 	orr.w	r3, r3, ip
 8016568:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 801656c:	4418      	add	r0, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 801656e:	9b03      	ldr	r3, [sp, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8016570:	f8cb 5044 	str.w	r5, [fp, #68]	; 0x44
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8016574:	ea4f 4cf3 	mov.w	ip, r3, ror #19
 8016578:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801657c:	4420      	add	r0, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 801657e:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8016582:	f8db 400c 	ldr.w	r4, [fp, #12]
 8016586:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 801658a:	441e      	add	r6, r3
 801658c:	ea4f 43b4 	mov.w	r3, r4, ror #18
 8016590:	ea83 13f4 	eor.w	r3, r3, r4, ror #7
 8016594:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 8016598:	4466      	add	r6, ip
 801659a:	441e      	add	r6, r3
 801659c:	9b01      	ldr	r3, [sp, #4]
 801659e:	f8cb 6048 	str.w	r6, [fp, #72]	; 0x48
 80165a2:	ea89 0c08 	eor.w	ip, r9, r8
 80165a6:	ea0c 0c03 	and.w	ip, ip, r3
 80165aa:	9b00      	ldr	r3, [sp, #0]
 80165ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165ae:	440b      	add	r3, r1
 80165b0:	4433      	add	r3, r6
 80165b2:	ea8c 0c09 	eor.w	ip, ip, r9
 80165b6:	449c      	add	ip, r3
 80165b8:	9b01      	ldr	r3, [sp, #4]
 80165ba:	ea4f 21f3 	mov.w	r1, r3, ror #11
 80165be:	ea81 11b3 	eor.w	r1, r1, r3, ror #6
 80165c2:	ea81 6173 	eor.w	r1, r1, r3, ror #25
 80165c6:	eb01 030c 	add.w	r3, r1, ip
 80165ca:	441a      	add	r2, r3
 80165cc:	9202      	str	r2, [sp, #8]
 80165ce:	ea4f 3170 	mov.w	r1, r0, ror #13
 80165d2:	ea4e 0200 	orr.w	r2, lr, r0
 80165d6:	ea0e 0c00 	and.w	ip, lr, r0
 80165da:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80165de:	403a      	ands	r2, r7
 80165e0:	ea42 020c 	orr.w	r2, r2, ip
 80165e4:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 80165e8:	4411      	add	r1, r2
 80165ea:	4419      	add	r1, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80165ec:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 80165f0:	f8db 2010 	ldr.w	r2, [fp, #16]
 80165f4:	ea4f 4cf5 	mov.w	ip, r5, ror #19
 80165f8:	441c      	add	r4, r3
 80165fa:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
 80165fe:	9b01      	ldr	r3, [sp, #4]
 8016600:	ea8c 2595 	eor.w	r5, ip, r5, lsr #10
 8016604:	4425      	add	r5, r4
 8016606:	ea88 0403 	eor.w	r4, r8, r3
 801660a:	9b02      	ldr	r3, [sp, #8]
 801660c:	401c      	ands	r4, r3
 801660e:	9b00      	ldr	r3, [sp, #0]
 8016610:	ea4f 4cb2 	mov.w	ip, r2, ror #18
 8016614:	ea8c 1cf2 	eor.w	ip, ip, r2, ror #7
 8016618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801661a:	ea8c 0cd2 	eor.w	ip, ip, r2, lsr #3
 801661e:	44ac      	add	ip, r5
 8016620:	444b      	add	r3, r9
 8016622:	4463      	add	r3, ip
 8016624:	ea84 0408 	eor.w	r4, r4, r8
 8016628:	f8cb c04c 	str.w	ip, [fp, #76]	; 0x4c
 801662c:	441c      	add	r4, r3
 801662e:	9b02      	ldr	r3, [sp, #8]
 8016630:	ea4f 25f3 	mov.w	r5, r3, ror #11
 8016634:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
 8016638:	ea85 6573 	eor.w	r5, r5, r3, ror #25
 801663c:	192b      	adds	r3, r5, r4
 801663e:	ea40 0501 	orr.w	r5, r0, r1
 8016642:	ea00 0401 	and.w	r4, r0, r1
 8016646:	ea05 050e 	and.w	r5, r5, lr
 801664a:	4325      	orrs	r5, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 801664c:	ea4f 44f6 	mov.w	r4, r6, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8016650:	ea4f 3971 	mov.w	r9, r1, ror #13
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8016654:	ea84 4476 	eor.w	r4, r4, r6, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8016658:	ea89 09b1 	eor.w	r9, r9, r1, ror #2
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 801665c:	ea84 2696 	eor.w	r6, r4, r6, lsr #10
 8016660:	f8db 4034 	ldr.w	r4, [fp, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8016664:	eb07 0a03 	add.w	sl, r7, r3
 8016668:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 801666c:	f8db 7014 	ldr.w	r7, [fp, #20]
 8016670:	4422      	add	r2, r4
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8016672:	444d      	add	r5, r9
 8016674:	441d      	add	r5, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8016676:	4416      	add	r6, r2
 8016678:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 801667c:	ea4f 42b7 	mov.w	r2, r7, ror #18
 8016680:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 8016684:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8016688:	4432      	add	r2, r6
 801668a:	ea83 0604 	eor.w	r6, r3, r4
 801668e:	ea06 060a 	and.w	r6, r6, sl
 8016692:	405e      	eors	r6, r3
 8016694:	9b00      	ldr	r3, [sp, #0]
 8016696:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
 801669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801669c:	ea4f 24fa 	mov.w	r4, sl, ror #11
 80166a0:	4413      	add	r3, r2
 80166a2:	4443      	add	r3, r8
 80166a4:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 80166a8:	441e      	add	r6, r3
 80166aa:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 80166ae:	19a3      	adds	r3, r4, r6
 80166b0:	ea41 0605 	orr.w	r6, r1, r5
 80166b4:	ea4f 3475 	mov.w	r4, r5, ror #13
 80166b8:	ea01 0805 	and.w	r8, r1, r5
 80166bc:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 80166c0:	4006      	ands	r6, r0
 80166c2:	ea46 0608 	orr.w	r6, r6, r8
 80166c6:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 80166ca:	4434      	add	r4, r6
 80166cc:	441c      	add	r4, r3
 80166ce:	449e      	add	lr, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80166d0:	f8db 8018 	ldr.w	r8, [fp, #24]
 80166d4:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80166d8:	ea4f 46fc 	mov.w	r6, ip, ror #19
 80166dc:	ea86 467c 	eor.w	r6, r6, ip, ror #17
 80166e0:	ea86 2c9c 	eor.w	ip, r6, ip, lsr #10
 80166e4:	19de      	adds	r6, r3, r7
 80166e6:	ea4f 43b8 	mov.w	r3, r8, ror #18
 80166ea:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 80166ee:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 80166f2:	4466      	add	r6, ip
 80166f4:	441e      	add	r6, r3
 80166f6:	9b02      	ldr	r3, [sp, #8]
 80166f8:	9f01      	ldr	r7, [sp, #4]
 80166fa:	f8cb 6054 	str.w	r6, [fp, #84]	; 0x54
 80166fe:	ea83 0c0a 	eor.w	ip, r3, sl
 8016702:	ea0c 0c0e 	and.w	ip, ip, lr
 8016706:	ea8c 0c03 	eor.w	ip, ip, r3
 801670a:	9b00      	ldr	r3, [sp, #0]
 801670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801670e:	4433      	add	r3, r6
 8016710:	443b      	add	r3, r7
 8016712:	449c      	add	ip, r3
 8016714:	ea4f 23fe 	mov.w	r3, lr, ror #11
 8016718:	ea83 13be 	eor.w	r3, r3, lr, ror #6
 801671c:	ea83 637e 	eor.w	r3, r3, lr, ror #25
 8016720:	eb03 070c 	add.w	r7, r3, ip
 8016724:	ea45 0c04 	orr.w	ip, r5, r4
 8016728:	ea4f 3374 	mov.w	r3, r4, ror #13
 801672c:	ea05 0904 	and.w	r9, r5, r4
 8016730:	ea0c 0c01 	and.w	ip, ip, r1
 8016734:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
 8016738:	ea4c 0c09 	orr.w	ip, ip, r9
 801673c:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
 8016740:	4463      	add	r3, ip
 8016742:	443b      	add	r3, r7
 8016744:	4438      	add	r0, r7
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8016746:	f8db 701c 	ldr.w	r7, [fp, #28]
 801674a:	9701      	str	r7, [sp, #4]
 801674c:	ea4f 4cf2 	mov.w	ip, r2, ror #19
 8016750:	f8db 703c 	ldr.w	r7, [fp, #60]	; 0x3c
 8016754:	ea8c 4c72 	eor.w	ip, ip, r2, ror #17
 8016758:	ea8c 2292 	eor.w	r2, ip, r2, lsr #10
 801675c:	44b8      	add	r8, r7
 801675e:	4490      	add	r8, r2
 8016760:	9a01      	ldr	r2, [sp, #4]
 8016762:	9f01      	ldr	r7, [sp, #4]
 8016764:	ea4f 42b2 	mov.w	r2, r2, ror #18
 8016768:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
 801676c:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
 8016770:	4490      	add	r8, r2
 8016772:	9a00      	ldr	r2, [sp, #0]
 8016774:	9f02      	ldr	r7, [sp, #8]
 8016776:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8016778:	f8cb 8058 	str.w	r8, [fp, #88]	; 0x58
 801677c:	ea8a 090e 	eor.w	r9, sl, lr
 8016780:	4442      	add	r2, r8
 8016782:	ea09 0900 	and.w	r9, r9, r0
 8016786:	ea4f 2cf0 	mov.w	ip, r0, ror #11
 801678a:	ea89 090a 	eor.w	r9, r9, sl
 801678e:	443a      	add	r2, r7
 8016790:	ea8c 1cb0 	eor.w	ip, ip, r0, ror #6
 8016794:	444a      	add	r2, r9
 8016796:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
 801679a:	4494      	add	ip, r2
 801679c:	ea44 0803 	orr.w	r8, r4, r3
 80167a0:	ea4f 3273 	mov.w	r2, r3, ror #13
 80167a4:	ea08 0805 	and.w	r8, r8, r5
 80167a8:	ea04 0903 	and.w	r9, r4, r3
 80167ac:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 80167b0:	ea48 0809 	orr.w	r8, r8, r9
 80167b4:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 80167b8:	4442      	add	r2, r8
 80167ba:	4462      	add	r2, ip
 80167bc:	4461      	add	r1, ip
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80167be:	ea4f 4cf6 	mov.w	ip, r6, ror #19
 80167c2:	ea8c 4c76 	eor.w	ip, ip, r6, ror #17
 80167c6:	f8db 8020 	ldr.w	r8, [fp, #32]
 80167ca:	9f03      	ldr	r7, [sp, #12]
 80167cc:	ea8c 2c96 	eor.w	ip, ip, r6, lsr #10
 80167d0:	9e01      	ldr	r6, [sp, #4]
 80167d2:	443e      	add	r6, r7
 80167d4:	ea4f 47b8 	mov.w	r7, r8, ror #18
 80167d8:	ea87 17f8 	eor.w	r7, r7, r8, ror #7
 80167dc:	ea87 08d8 	eor.w	r8, r7, r8, lsr #3
 80167e0:	9f00      	ldr	r7, [sp, #0]
 80167e2:	4466      	add	r6, ip
 80167e4:	6dff      	ldr	r7, [r7, #92]	; 0x5c
 80167e6:	4446      	add	r6, r8
 80167e8:	ea8e 0800 	eor.w	r8, lr, r0
 80167ec:	4437      	add	r7, r6
 80167ee:	ea08 0801 	and.w	r8, r8, r1
 80167f2:	ea4f 2cf1 	mov.w	ip, r1, ror #11
 80167f6:	4457      	add	r7, sl
 80167f8:	ea88 080e 	eor.w	r8, r8, lr
 80167fc:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
 8016800:	44b8      	add	r8, r7
 8016802:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 8016806:	44c4      	add	ip, r8
 8016808:	eb05 090c 	add.w	r9, r5, ip
 801680c:	ea4f 3772 	mov.w	r7, r2, ror #13
 8016810:	ea43 0502 	orr.w	r5, r3, r2
 8016814:	f8cb 605c 	str.w	r6, [fp, #92]	; 0x5c
 8016818:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 801681c:	4025      	ands	r5, r4
 801681e:	ea03 0602 	and.w	r6, r3, r2
 8016822:	4335      	orrs	r5, r6
 8016824:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8016828:	442f      	add	r7, r5
 801682a:	9d00      	ldr	r5, [sp, #0]
 801682c:	3520      	adds	r5, #32
 801682e:	9500      	str	r5, [sp, #0]
    for( i = 16; i < 64; i += 8 )
 8016830:	9d05      	ldr	r5, [sp, #20]
 8016832:	f10b 0b20 	add.w	fp, fp, #32
 8016836:	455d      	cmp	r5, fp
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8016838:	4467      	add	r7, ip
    for( i = 16; i < 64; i += 8 )
 801683a:	f47f ae23 	bne.w	8016484 <mbedtls_internal_sha256_process+0x2d4>
 801683e:	e9cd 100b 	strd	r1, r0, [sp, #44]	; 0x2c
 8016842:	e9cd 7206 	strd	r7, r2, [sp, #24]
 8016846:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801684a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801684e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8016852:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
 8016854:	9a04      	ldr	r2, [sp, #16]
 8016856:	6811      	ldr	r1, [r2, #0]
 8016858:	aa06      	add	r2, sp, #24
 801685a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801685e:	440a      	add	r2, r1
 8016860:	9904      	ldr	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 8016862:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8016864:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
 8016868:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 801686a:	9104      	str	r1, [sp, #16]
    for( i = 0; i < 8; i++ )
 801686c:	d1f2      	bne.n	8016854 <mbedtls_internal_sha256_process+0x6a4>

    return( 0 );
}
 801686e:	2000      	movs	r0, #0
 8016870:	b04f      	add	sp, #316	; 0x13c
 8016872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016876:	bf00      	nop

08016878 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8016878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801687c:	4605      	mov	r5, r0
 801687e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8016880:	4614      	mov	r4, r2
 8016882:	b912      	cbnz	r2, 801688a <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 8016884:	2000      	movs	r0, #0
}
 8016886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
 801688a:	6803      	ldr	r3, [r0, #0]
 801688c:	f003 073f 	and.w	r7, r3, #63	; 0x3f
 8016890:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
 8016892:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
 8016894:	bf22      	ittt	cs
 8016896:	6843      	ldrcs	r3, [r0, #4]
 8016898:	3301      	addcs	r3, #1
 801689a:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
 801689c:	b1a7      	cbz	r7, 80168c8 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
 801689e:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 80168a2:	4542      	cmp	r2, r8
 80168a4:	d310      	bcc.n	80168c8 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80168a6:	f100 0928 	add.w	r9, r0, #40	; 0x28
 80168aa:	4642      	mov	r2, r8
 80168ac:	eb09 0007 	add.w	r0, r9, r7
 80168b0:	f000 f903 	bl	8016aba <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80168b4:	4649      	mov	r1, r9
 80168b6:	4628      	mov	r0, r5
 80168b8:	f7ff fc7a 	bl	80161b0 <mbedtls_internal_sha256_process>
 80168bc:	2800      	cmp	r0, #0
 80168be:	d1e2      	bne.n	8016886 <mbedtls_sha256_update_ret+0xe>
        input += fill;
 80168c0:	4446      	add	r6, r8
        ilen  -= fill;
 80168c2:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
 80168c6:	4607      	mov	r7, r0
 80168c8:	4426      	add	r6, r4
 80168ca:	e005      	b.n	80168d8 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80168cc:	4628      	mov	r0, r5
 80168ce:	f7ff fc6f 	bl	80161b0 <mbedtls_internal_sha256_process>
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d1d7      	bne.n	8016886 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
 80168d6:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 80168d8:	2c3f      	cmp	r4, #63	; 0x3f
 80168da:	eba6 0104 	sub.w	r1, r6, r4
 80168de:	d8f5      	bhi.n	80168cc <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
 80168e0:	2c00      	cmp	r4, #0
 80168e2:	d0cf      	beq.n	8016884 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80168e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80168e8:	4622      	mov	r2, r4
 80168ea:	4438      	add	r0, r7
 80168ec:	f000 f8e5 	bl	8016aba <memcpy>
 80168f0:	e7c8      	b.n	8016884 <mbedtls_sha256_update_ret+0xc>

080168f2 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80168f2:	6803      	ldr	r3, [r0, #0]
 80168f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80168f8:	1c5a      	adds	r2, r3, #1
 80168fa:	4403      	add	r3, r0
{
 80168fc:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
 80168fe:	2a38      	cmp	r2, #56	; 0x38
{
 8016900:	460d      	mov	r5, r1
 8016902:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
 8016906:	f04f 0180 	mov.w	r1, #128	; 0x80
{
 801690a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 801690c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
 8016910:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8016914:	d873      	bhi.n	80169fe <mbedtls_sha256_finish_ret+0x10c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8016916:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801691a:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 801691c:	f000 f8f1 	bl	8016b02 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8016920:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8016924:	0f5a      	lsrs	r2, r3, #29
 8016926:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801692a:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
 801692c:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801692e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 8016932:	0c11      	lsrs	r1, r2, #16
 8016934:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 8016938:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 801693c:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 801693e:	0e1a      	lsrs	r2, r3, #24
 8016940:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8016944:	0c1a      	lsrs	r2, r3, #16
 8016946:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801694a:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801694c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8016950:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 8016954:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8016958:	4631      	mov	r1, r6
 801695a:	4620      	mov	r0, r4
 801695c:	f7ff fc28 	bl	80161b0 <mbedtls_internal_sha256_process>
 8016960:	2800      	cmp	r0, #0
 8016962:	d14b      	bne.n	80169fc <mbedtls_sha256_finish_ret+0x10a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8016964:	7ae3      	ldrb	r3, [r4, #11]
 8016966:	702b      	strb	r3, [r5, #0]
 8016968:	8963      	ldrh	r3, [r4, #10]
 801696a:	706b      	strb	r3, [r5, #1]
 801696c:	68a3      	ldr	r3, [r4, #8]
 801696e:	0a1b      	lsrs	r3, r3, #8
 8016970:	70ab      	strb	r3, [r5, #2]
 8016972:	68a3      	ldr	r3, [r4, #8]
 8016974:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8016976:	7be3      	ldrb	r3, [r4, #15]
 8016978:	712b      	strb	r3, [r5, #4]
 801697a:	89e3      	ldrh	r3, [r4, #14]
 801697c:	716b      	strb	r3, [r5, #5]
 801697e:	68e3      	ldr	r3, [r4, #12]
 8016980:	0a1b      	lsrs	r3, r3, #8
 8016982:	71ab      	strb	r3, [r5, #6]
 8016984:	68e3      	ldr	r3, [r4, #12]
 8016986:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8016988:	7ce3      	ldrb	r3, [r4, #19]
 801698a:	722b      	strb	r3, [r5, #8]
 801698c:	8a63      	ldrh	r3, [r4, #18]
 801698e:	726b      	strb	r3, [r5, #9]
 8016990:	6923      	ldr	r3, [r4, #16]
 8016992:	0a1b      	lsrs	r3, r3, #8
 8016994:	72ab      	strb	r3, [r5, #10]
 8016996:	6923      	ldr	r3, [r4, #16]
 8016998:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 801699a:	7de3      	ldrb	r3, [r4, #23]
 801699c:	732b      	strb	r3, [r5, #12]
 801699e:	8ae3      	ldrh	r3, [r4, #22]
 80169a0:	736b      	strb	r3, [r5, #13]
 80169a2:	6963      	ldr	r3, [r4, #20]
 80169a4:	0a1b      	lsrs	r3, r3, #8
 80169a6:	73ab      	strb	r3, [r5, #14]
 80169a8:	6963      	ldr	r3, [r4, #20]
 80169aa:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80169ac:	7ee3      	ldrb	r3, [r4, #27]
 80169ae:	742b      	strb	r3, [r5, #16]
 80169b0:	8b63      	ldrh	r3, [r4, #26]
 80169b2:	746b      	strb	r3, [r5, #17]
 80169b4:	69a3      	ldr	r3, [r4, #24]
 80169b6:	0a1b      	lsrs	r3, r3, #8
 80169b8:	74ab      	strb	r3, [r5, #18]
 80169ba:	69a3      	ldr	r3, [r4, #24]
 80169bc:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80169be:	7fe3      	ldrb	r3, [r4, #31]
 80169c0:	752b      	strb	r3, [r5, #20]
 80169c2:	8be3      	ldrh	r3, [r4, #30]
 80169c4:	756b      	strb	r3, [r5, #21]
 80169c6:	69e3      	ldr	r3, [r4, #28]
 80169c8:	0a1b      	lsrs	r3, r3, #8
 80169ca:	75ab      	strb	r3, [r5, #22]
 80169cc:	69e3      	ldr	r3, [r4, #28]
 80169ce:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80169d0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80169d4:	762b      	strb	r3, [r5, #24]
 80169d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80169d8:	766b      	strb	r3, [r5, #25]
 80169da:	6a23      	ldr	r3, [r4, #32]
 80169dc:	0a1b      	lsrs	r3, r3, #8
 80169de:	76ab      	strb	r3, [r5, #26]
 80169e0:	6a23      	ldr	r3, [r4, #32]
 80169e2:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 80169e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80169e6:	b94b      	cbnz	r3, 80169fc <mbedtls_sha256_finish_ret+0x10a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80169e8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80169ec:	772b      	strb	r3, [r5, #28]
 80169ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80169f0:	776b      	strb	r3, [r5, #29]
 80169f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169f4:	0a1b      	lsrs	r3, r3, #8
 80169f6:	77ab      	strb	r3, [r5, #30]
 80169f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169fa:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 80169fc:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 80169fe:	2100      	movs	r1, #0
 8016a00:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 8016a04:	f000 f87d 	bl	8016b02 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8016a08:	4631      	mov	r1, r6
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f7ff fbd0 	bl	80161b0 <mbedtls_internal_sha256_process>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d1f3      	bne.n	80169fc <mbedtls_sha256_finish_ret+0x10a>
        memset( ctx->buffer, 0, 56 );
 8016a14:	4601      	mov	r1, r0
 8016a16:	2238      	movs	r2, #56	; 0x38
 8016a18:	4630      	mov	r0, r6
 8016a1a:	e77f      	b.n	801691c <mbedtls_sha256_finish_ret+0x2a>

08016a1c <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8016a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a1e:	b09d      	sub	sp, #116	; 0x74
 8016a20:	461c      	mov	r4, r3
 8016a22:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 8016a24:	a801      	add	r0, sp, #4
{
 8016a26:	460f      	mov	r7, r1
 8016a28:	4615      	mov	r5, r2
    mbedtls_sha256_init( &ctx );
 8016a2a:	f7ff fb60 	bl	80160ee <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8016a2e:	4621      	mov	r1, r4
 8016a30:	a801      	add	r0, sp, #4
 8016a32:	f7ff fb6b 	bl	801610c <mbedtls_sha256_starts_ret>
 8016a36:	4604      	mov	r4, r0
 8016a38:	b958      	cbnz	r0, 8016a52 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8016a3a:	463a      	mov	r2, r7
 8016a3c:	4631      	mov	r1, r6
 8016a3e:	a801      	add	r0, sp, #4
 8016a40:	f7ff ff1a 	bl	8016878 <mbedtls_sha256_update_ret>
 8016a44:	4604      	mov	r4, r0
 8016a46:	b920      	cbnz	r0, 8016a52 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8016a48:	4629      	mov	r1, r5
 8016a4a:	a801      	add	r0, sp, #4
 8016a4c:	f7ff ff51 	bl	80168f2 <mbedtls_sha256_finish_ret>
 8016a50:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8016a52:	a801      	add	r0, sp, #4
 8016a54:	f7ff fb4f 	bl	80160f6 <mbedtls_sha256_free>

    return( ret );
}
 8016a58:	4620      	mov	r0, r4
 8016a5a:	b01d      	add	sp, #116	; 0x74
 8016a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016a60 <calloc>:
 8016a60:	4b02      	ldr	r3, [pc, #8]	; (8016a6c <calloc+0xc>)
 8016a62:	460a      	mov	r2, r1
 8016a64:	4601      	mov	r1, r0
 8016a66:	6818      	ldr	r0, [r3, #0]
 8016a68:	f000 b853 	b.w	8016b12 <_calloc_r>
 8016a6c:	20002104 	.word	0x20002104

08016a70 <__errno>:
 8016a70:	4b01      	ldr	r3, [pc, #4]	; (8016a78 <__errno+0x8>)
 8016a72:	6818      	ldr	r0, [r3, #0]
 8016a74:	4770      	bx	lr
 8016a76:	bf00      	nop
 8016a78:	20002104 	.word	0x20002104

08016a7c <malloc>:
 8016a7c:	4b02      	ldr	r3, [pc, #8]	; (8016a88 <malloc+0xc>)
 8016a7e:	4601      	mov	r1, r0
 8016a80:	6818      	ldr	r0, [r3, #0]
 8016a82:	f000 b8a3 	b.w	8016bcc <_malloc_r>
 8016a86:	bf00      	nop
 8016a88:	20002104 	.word	0x20002104

08016a8c <free>:
 8016a8c:	4b02      	ldr	r3, [pc, #8]	; (8016a98 <free+0xc>)
 8016a8e:	4601      	mov	r1, r0
 8016a90:	6818      	ldr	r0, [r3, #0]
 8016a92:	f000 b84d 	b.w	8016b30 <_free_r>
 8016a96:	bf00      	nop
 8016a98:	20002104 	.word	0x20002104

08016a9c <memcmp>:
 8016a9c:	b530      	push	{r4, r5, lr}
 8016a9e:	2400      	movs	r4, #0
 8016aa0:	42a2      	cmp	r2, r4
 8016aa2:	d101      	bne.n	8016aa8 <memcmp+0xc>
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	e007      	b.n	8016ab8 <memcmp+0x1c>
 8016aa8:	5d03      	ldrb	r3, [r0, r4]
 8016aaa:	3401      	adds	r4, #1
 8016aac:	190d      	adds	r5, r1, r4
 8016aae:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016ab2:	42ab      	cmp	r3, r5
 8016ab4:	d0f4      	beq.n	8016aa0 <memcmp+0x4>
 8016ab6:	1b58      	subs	r0, r3, r5
 8016ab8:	bd30      	pop	{r4, r5, pc}

08016aba <memcpy>:
 8016aba:	b510      	push	{r4, lr}
 8016abc:	1e43      	subs	r3, r0, #1
 8016abe:	440a      	add	r2, r1
 8016ac0:	4291      	cmp	r1, r2
 8016ac2:	d100      	bne.n	8016ac6 <memcpy+0xc>
 8016ac4:	bd10      	pop	{r4, pc}
 8016ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ace:	e7f7      	b.n	8016ac0 <memcpy+0x6>

08016ad0 <memmove>:
 8016ad0:	4288      	cmp	r0, r1
 8016ad2:	b510      	push	{r4, lr}
 8016ad4:	eb01 0302 	add.w	r3, r1, r2
 8016ad8:	d807      	bhi.n	8016aea <memmove+0x1a>
 8016ada:	1e42      	subs	r2, r0, #1
 8016adc:	4299      	cmp	r1, r3
 8016ade:	d00a      	beq.n	8016af6 <memmove+0x26>
 8016ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ae4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016ae8:	e7f8      	b.n	8016adc <memmove+0xc>
 8016aea:	4283      	cmp	r3, r0
 8016aec:	d9f5      	bls.n	8016ada <memmove+0xa>
 8016aee:	1881      	adds	r1, r0, r2
 8016af0:	1ad2      	subs	r2, r2, r3
 8016af2:	42d3      	cmn	r3, r2
 8016af4:	d100      	bne.n	8016af8 <memmove+0x28>
 8016af6:	bd10      	pop	{r4, pc}
 8016af8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016afc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016b00:	e7f7      	b.n	8016af2 <memmove+0x22>

08016b02 <memset>:
 8016b02:	4402      	add	r2, r0
 8016b04:	4603      	mov	r3, r0
 8016b06:	4293      	cmp	r3, r2
 8016b08:	d100      	bne.n	8016b0c <memset+0xa>
 8016b0a:	4770      	bx	lr
 8016b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8016b10:	e7f9      	b.n	8016b06 <memset+0x4>

08016b12 <_calloc_r>:
 8016b12:	b538      	push	{r3, r4, r5, lr}
 8016b14:	fb02 f401 	mul.w	r4, r2, r1
 8016b18:	4621      	mov	r1, r4
 8016b1a:	f000 f857 	bl	8016bcc <_malloc_r>
 8016b1e:	4605      	mov	r5, r0
 8016b20:	b118      	cbz	r0, 8016b2a <_calloc_r+0x18>
 8016b22:	4622      	mov	r2, r4
 8016b24:	2100      	movs	r1, #0
 8016b26:	f7ff ffec 	bl	8016b02 <memset>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016b30 <_free_r>:
 8016b30:	b538      	push	{r3, r4, r5, lr}
 8016b32:	4605      	mov	r5, r0
 8016b34:	2900      	cmp	r1, #0
 8016b36:	d045      	beq.n	8016bc4 <_free_r+0x94>
 8016b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b3c:	1f0c      	subs	r4, r1, #4
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	bfb8      	it	lt
 8016b42:	18e4      	addlt	r4, r4, r3
 8016b44:	f000 f8ac 	bl	8016ca0 <__malloc_lock>
 8016b48:	4a1f      	ldr	r2, [pc, #124]	; (8016bc8 <_free_r+0x98>)
 8016b4a:	6813      	ldr	r3, [r2, #0]
 8016b4c:	4610      	mov	r0, r2
 8016b4e:	b933      	cbnz	r3, 8016b5e <_free_r+0x2e>
 8016b50:	6063      	str	r3, [r4, #4]
 8016b52:	6014      	str	r4, [r2, #0]
 8016b54:	4628      	mov	r0, r5
 8016b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b5a:	f000 b8a2 	b.w	8016ca2 <__malloc_unlock>
 8016b5e:	42a3      	cmp	r3, r4
 8016b60:	d90c      	bls.n	8016b7c <_free_r+0x4c>
 8016b62:	6821      	ldr	r1, [r4, #0]
 8016b64:	1862      	adds	r2, r4, r1
 8016b66:	4293      	cmp	r3, r2
 8016b68:	bf04      	itt	eq
 8016b6a:	681a      	ldreq	r2, [r3, #0]
 8016b6c:	685b      	ldreq	r3, [r3, #4]
 8016b6e:	6063      	str	r3, [r4, #4]
 8016b70:	bf04      	itt	eq
 8016b72:	1852      	addeq	r2, r2, r1
 8016b74:	6022      	streq	r2, [r4, #0]
 8016b76:	6004      	str	r4, [r0, #0]
 8016b78:	e7ec      	b.n	8016b54 <_free_r+0x24>
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	685a      	ldr	r2, [r3, #4]
 8016b7e:	b10a      	cbz	r2, 8016b84 <_free_r+0x54>
 8016b80:	42a2      	cmp	r2, r4
 8016b82:	d9fa      	bls.n	8016b7a <_free_r+0x4a>
 8016b84:	6819      	ldr	r1, [r3, #0]
 8016b86:	1858      	adds	r0, r3, r1
 8016b88:	42a0      	cmp	r0, r4
 8016b8a:	d10b      	bne.n	8016ba4 <_free_r+0x74>
 8016b8c:	6820      	ldr	r0, [r4, #0]
 8016b8e:	4401      	add	r1, r0
 8016b90:	1858      	adds	r0, r3, r1
 8016b92:	4282      	cmp	r2, r0
 8016b94:	6019      	str	r1, [r3, #0]
 8016b96:	d1dd      	bne.n	8016b54 <_free_r+0x24>
 8016b98:	6810      	ldr	r0, [r2, #0]
 8016b9a:	6852      	ldr	r2, [r2, #4]
 8016b9c:	605a      	str	r2, [r3, #4]
 8016b9e:	4401      	add	r1, r0
 8016ba0:	6019      	str	r1, [r3, #0]
 8016ba2:	e7d7      	b.n	8016b54 <_free_r+0x24>
 8016ba4:	d902      	bls.n	8016bac <_free_r+0x7c>
 8016ba6:	230c      	movs	r3, #12
 8016ba8:	602b      	str	r3, [r5, #0]
 8016baa:	e7d3      	b.n	8016b54 <_free_r+0x24>
 8016bac:	6820      	ldr	r0, [r4, #0]
 8016bae:	1821      	adds	r1, r4, r0
 8016bb0:	428a      	cmp	r2, r1
 8016bb2:	bf04      	itt	eq
 8016bb4:	6811      	ldreq	r1, [r2, #0]
 8016bb6:	6852      	ldreq	r2, [r2, #4]
 8016bb8:	6062      	str	r2, [r4, #4]
 8016bba:	bf04      	itt	eq
 8016bbc:	1809      	addeq	r1, r1, r0
 8016bbe:	6021      	streq	r1, [r4, #0]
 8016bc0:	605c      	str	r4, [r3, #4]
 8016bc2:	e7c7      	b.n	8016b54 <_free_r+0x24>
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
 8016bc6:	bf00      	nop
 8016bc8:	2000769c 	.word	0x2000769c

08016bcc <_malloc_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	1ccd      	adds	r5, r1, #3
 8016bd0:	f025 0503 	bic.w	r5, r5, #3
 8016bd4:	3508      	adds	r5, #8
 8016bd6:	2d0c      	cmp	r5, #12
 8016bd8:	bf38      	it	cc
 8016bda:	250c      	movcc	r5, #12
 8016bdc:	2d00      	cmp	r5, #0
 8016bde:	4606      	mov	r6, r0
 8016be0:	db01      	blt.n	8016be6 <_malloc_r+0x1a>
 8016be2:	42a9      	cmp	r1, r5
 8016be4:	d903      	bls.n	8016bee <_malloc_r+0x22>
 8016be6:	230c      	movs	r3, #12
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	2000      	movs	r0, #0
 8016bec:	bd70      	pop	{r4, r5, r6, pc}
 8016bee:	f000 f857 	bl	8016ca0 <__malloc_lock>
 8016bf2:	4a21      	ldr	r2, [pc, #132]	; (8016c78 <_malloc_r+0xac>)
 8016bf4:	6814      	ldr	r4, [r2, #0]
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	b991      	cbnz	r1, 8016c20 <_malloc_r+0x54>
 8016bfa:	4c20      	ldr	r4, [pc, #128]	; (8016c7c <_malloc_r+0xb0>)
 8016bfc:	6823      	ldr	r3, [r4, #0]
 8016bfe:	b91b      	cbnz	r3, 8016c08 <_malloc_r+0x3c>
 8016c00:	4630      	mov	r0, r6
 8016c02:	f000 f83d 	bl	8016c80 <_sbrk_r>
 8016c06:	6020      	str	r0, [r4, #0]
 8016c08:	4629      	mov	r1, r5
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f000 f838 	bl	8016c80 <_sbrk_r>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d124      	bne.n	8016c5e <_malloc_r+0x92>
 8016c14:	230c      	movs	r3, #12
 8016c16:	6033      	str	r3, [r6, #0]
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f000 f842 	bl	8016ca2 <__malloc_unlock>
 8016c1e:	e7e4      	b.n	8016bea <_malloc_r+0x1e>
 8016c20:	680b      	ldr	r3, [r1, #0]
 8016c22:	1b5b      	subs	r3, r3, r5
 8016c24:	d418      	bmi.n	8016c58 <_malloc_r+0x8c>
 8016c26:	2b0b      	cmp	r3, #11
 8016c28:	d90f      	bls.n	8016c4a <_malloc_r+0x7e>
 8016c2a:	600b      	str	r3, [r1, #0]
 8016c2c:	50cd      	str	r5, [r1, r3]
 8016c2e:	18cc      	adds	r4, r1, r3
 8016c30:	4630      	mov	r0, r6
 8016c32:	f000 f836 	bl	8016ca2 <__malloc_unlock>
 8016c36:	f104 000b 	add.w	r0, r4, #11
 8016c3a:	1d23      	adds	r3, r4, #4
 8016c3c:	f020 0007 	bic.w	r0, r0, #7
 8016c40:	1ac3      	subs	r3, r0, r3
 8016c42:	d0d3      	beq.n	8016bec <_malloc_r+0x20>
 8016c44:	425a      	negs	r2, r3
 8016c46:	50e2      	str	r2, [r4, r3]
 8016c48:	e7d0      	b.n	8016bec <_malloc_r+0x20>
 8016c4a:	428c      	cmp	r4, r1
 8016c4c:	684b      	ldr	r3, [r1, #4]
 8016c4e:	bf16      	itet	ne
 8016c50:	6063      	strne	r3, [r4, #4]
 8016c52:	6013      	streq	r3, [r2, #0]
 8016c54:	460c      	movne	r4, r1
 8016c56:	e7eb      	b.n	8016c30 <_malloc_r+0x64>
 8016c58:	460c      	mov	r4, r1
 8016c5a:	6849      	ldr	r1, [r1, #4]
 8016c5c:	e7cc      	b.n	8016bf8 <_malloc_r+0x2c>
 8016c5e:	1cc4      	adds	r4, r0, #3
 8016c60:	f024 0403 	bic.w	r4, r4, #3
 8016c64:	42a0      	cmp	r0, r4
 8016c66:	d005      	beq.n	8016c74 <_malloc_r+0xa8>
 8016c68:	1a21      	subs	r1, r4, r0
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f000 f808 	bl	8016c80 <_sbrk_r>
 8016c70:	3001      	adds	r0, #1
 8016c72:	d0cf      	beq.n	8016c14 <_malloc_r+0x48>
 8016c74:	6025      	str	r5, [r4, #0]
 8016c76:	e7db      	b.n	8016c30 <_malloc_r+0x64>
 8016c78:	2000769c 	.word	0x2000769c
 8016c7c:	200076a0 	.word	0x200076a0

08016c80 <_sbrk_r>:
 8016c80:	b538      	push	{r3, r4, r5, lr}
 8016c82:	4c06      	ldr	r4, [pc, #24]	; (8016c9c <_sbrk_r+0x1c>)
 8016c84:	2300      	movs	r3, #0
 8016c86:	4605      	mov	r5, r0
 8016c88:	4608      	mov	r0, r1
 8016c8a:	6023      	str	r3, [r4, #0]
 8016c8c:	f7e9 feb2 	bl	80009f4 <_sbrk>
 8016c90:	1c43      	adds	r3, r0, #1
 8016c92:	d102      	bne.n	8016c9a <_sbrk_r+0x1a>
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	b103      	cbz	r3, 8016c9a <_sbrk_r+0x1a>
 8016c98:	602b      	str	r3, [r5, #0]
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	20007a28 	.word	0x20007a28

08016ca0 <__malloc_lock>:
 8016ca0:	4770      	bx	lr

08016ca2 <__malloc_unlock>:
 8016ca2:	4770      	bx	lr

08016ca4 <_init>:
 8016ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca6:	bf00      	nop
 8016ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016caa:	bc08      	pop	{r3}
 8016cac:	469e      	mov	lr, r3
 8016cae:	4770      	bx	lr

08016cb0 <_fini>:
 8016cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb2:	bf00      	nop
 8016cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cb6:	bc08      	pop	{r3}
 8016cb8:	469e      	mov	lr, r3
 8016cba:	4770      	bx	lr
 8016cbc:	0000      	movs	r0, r0
	...
